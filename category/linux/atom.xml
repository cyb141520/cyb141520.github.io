<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://vvwwvv.cn</id>
    <title>此时相望不相闻，愿逐月华流照君 • Posts by &#34;linux&#34; category</title>
    <link href="https://vvwwvv.cn" />
    <updated>2023-10-16T12:05:56.000Z</updated>
    <category term="Java" />
    <category term="pwn" />
    <category term="Linux" />
    <category term="Apache" />
    <category term="二进制" />
    <category term="报错" />
    <category term="C++" />
    <category term="C语言" />
    <category term="windows" />
    <category term="渗透" />
    <category term="xss" />
    <category term="sql" />
    <category term="web" />
    <category term="phppwn" />
    <category term="ctf" />
    <category term="how2heap" />
    <category term="ret2csu" />
    <category term="ret2dlresolve" />
    <category term="fastbin.attack" />
    <category term="系统调用" />
    <category term="rop" />
    <category term="nc" />
    <entry>
        <id>https://vvwwvv.cn/2023/10/16/Linux/linux/Linux%E8%80%83%E6%A0%B8%E5%91%BD%E4%BB%A4%E4%B8%8Eshell/</id>
        <title>Linux命令与shell脚本（Linux课程考核）</title>
        <link rel="alternate" href="https://vvwwvv.cn/2023/10/16/Linux/linux/Linux%E8%80%83%E6%A0%B8%E5%91%BD%E4%BB%A4%E4%B8%8Eshell/"/>
        <content type="html">&lt;h1 id=&#34;1基础命令&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1基础命令&#34;&gt;#&lt;/a&gt; 1. 基础命令&lt;/h1&gt;
&lt;h2 id=&#34;1-ls命令查看当前目录文件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-ls命令查看当前目录文件&#34;&gt;#&lt;/a&gt; 1. ls 命令（查看当前目录文件）&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;https://vvwwv.oss-cn-nanjing.aliyuncs.com/%7BRP%28%7D1S1RI%7EZCB%5DP%24PO8R%5DR.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;这里我创建一个 &lt;code&gt;.2021cyb&lt;/code&gt;  的隐藏文件，利用 &lt;code&gt;ls -all&lt;/code&gt;  查看文件和执行权限&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://vvwwv.oss-cn-nanjing.aliyuncs.com/W%7B%7BP_TUL%7E8%7B%7D%60B%29LI%7BA%60%7DY5.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;2-chmod命令修改权限&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2-chmod命令修改权限&#34;&gt;#&lt;/a&gt; 2. chmod 命令（修改权限）&lt;/h2&gt;
&lt;p&gt;在上面利用 ls 命令查看文件 &lt;code&gt;.2021cyb&lt;/code&gt;  的权限（d 表示文件夹，拥有者 rwx；组群 r-x；其他 r-x）, 改变组群权限为  &lt;code&gt;可读可写&lt;/code&gt; ，其他权限为  &lt;code&gt;可执行&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;chmod 761 .2021cyb&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://vvwwv.oss-cn-nanjing.aliyuncs.com/ZUJ8T%28%5BGPCOWA79VC6R45QD.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;权限：&lt;/p&gt;
&lt;p&gt;4 对应 r；2 对应 w；1 对应 x（也就是二进制 100，010，001）&lt;/p&gt;
&lt;h2 id=&#34;3-cd命令更改当前目录&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3-cd命令更改当前目录&#34;&gt;#&lt;/a&gt; 3. cd 命令（更改当前目录）&lt;/h2&gt;
&lt;p&gt;进入前面创建的文件  &lt;code&gt;cd .2021cyb&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://vvwwv.oss-cn-nanjing.aliyuncs.com/9I_0%25V8EPZI%5DYH%7B7C%5B5%7BAYJ.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;从该目录进入其他目录 (从根目录进入)&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://vvwwv.oss-cn-nanjing.aliyuncs.com/PG56%7E%5BBF605KUNXSQHMJR36.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;返回上一次目录  &lt;code&gt;cd -&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://vvwwv.oss-cn-nanjing.aliyuncs.com/Z%7D_KP_91U%28P5_ND3TL%29%25XPM.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;返回上级目录  &lt;code&gt;cd ..&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://vvwwv.oss-cn-nanjing.aliyuncs.com/_XTV%293%40II_5T7Q%25%24%7E0Z3G%29C.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;4mkdir创建目录&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4mkdir创建目录&#34;&gt;#&lt;/a&gt; 4.mkdir（创建目录）&lt;/h2&gt;
&lt;p&gt;创建一个 cumt 目录&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://vvwwv.oss-cn-nanjing.aliyuncs.com/B1X%5D4Q7HS%7EBL13E%7EENQ59Q4.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;5-rmdir-删除空目录&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#5-rmdir-删除空目录&#34;&gt;#&lt;/a&gt; 5. rmdir (删除空目录)&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;https://vvwwv.oss-cn-nanjing.aliyuncs.com/1%60V0T6N82QCY24E95K9T%7B4S.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;6touch可以创建文件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#6touch可以创建文件&#34;&gt;#&lt;/a&gt; 6.touch (可以创建文件)&lt;/h2&gt;
&lt;p&gt;创建一个 cumt 文件&lt;/p&gt;
&lt;p&gt;&lt;code&gt;touch cumt&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://vvwwv.oss-cn-nanjing.aliyuncs.com/XS8XT_1%40%25J8VXLBF%248%28V117.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;这里发现是权限最前面的符号为 &lt;code&gt;-&lt;/code&gt; （不是 d）, 也证明是个文件&lt;/p&gt;
&lt;h2 id=&#34;7rm命令删除文件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#7rm命令删除文件&#34;&gt;#&lt;/a&gt; 7.rm 命令 (删除文件)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;-r ： 递归删除，删除目录，在删除这一目录前会事先删除目录中的内容（避免删除了目录而使目录中的文件无处存放的问题）&lt;/li&gt;
&lt;li&gt;i ： 交互删除，为每一个删除操作询问一次删除确认&lt;/li&gt;
&lt;li&gt;f ： 强制删除，忽视不存在的文件，无视任何的确认提示&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这里递归删除创建的 &lt;code&gt;.2021cyb&lt;/code&gt;  目录（里面有 cumt 文件）&lt;/p&gt;
&lt;p&gt;删除前：&lt;br /&gt;
&lt;img data-src=&#34;https://vvwwv.oss-cn-nanjing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/9W4_%5DXK%25%7B4IM%5BJ%7E%28K%25WOYIF.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;删除后：&lt;br /&gt;
&lt;img data-src=&#34;https://vvwwv.oss-cn-nanjing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/%247%40NDC4AIMS4D66NVZ77KYN.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;8查看文件内容cat-more-less&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#8查看文件内容cat-more-less&#34;&gt;#&lt;/a&gt; 8. 查看文件内容 (cat more less)&lt;/h2&gt;
&lt;p&gt;这里放入一个长度超过一屏的脚本，分别利用 cat、more、less 命令查看&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://vvwwv.oss-cn-nanjing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/BXT_F%7D3B2BE9%28FV%7D55R9C%5DB.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;1.cat (cat 是一次性显示整个文件的内容)&lt;br /&gt;
&lt;img data-src=&#34;https://vvwwv.oss-cn-nanjing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/%29RI%5BA3OF%40CY%5D57U%7BKT%29G7CD.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;2.more (more 会以一页一页的显示方便使用者逐页阅读，按空格键（space）就往下一页显示，按 b 键就会往回（back）一页)&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://vvwwv.oss-cn-nanjing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/RI739%5BK%5BOY%24AXE%409Z7499JA.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;3.less（less 时，就可以使用方向键 等按键的功能来往前往后翻看文件）&lt;br /&gt;
&lt;img data-src=&#34;https://vvwwv.oss-cn-nanjing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/0%7B6R363G%7E8PRYC%7DBX%24%25JX%7DB.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;9find命令查找文件-可以查询被修改的文件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#9find命令查找文件-可以查询被修改的文件&#34;&gt;#&lt;/a&gt; 9.find 命令（查找文件 可以查询被修改的文件）&lt;/h2&gt;
&lt;p&gt;返回到根目录下，查找刚刚的 &lt;code&gt;babyheap.py&lt;/code&gt;  文件&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://vvwwv.oss-cn-nanjing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/VXEXQ%29RDHULM_F%7ESM%407VL51.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;用 find 命令可以查询被修改的文件&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;find / -cmin -60 //查找在 n 分钟内状态发生变化的文件（例如权限）
find / -mmin -60 //查找过去一小时改变的文件
find / -amin -60 //查找过去一小时访问的文件
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;查找过去一小时改变的文件:&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://vvwwv.oss-cn-nanjing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/9QT9D%7BD%40PLAOZT%60P%25%40%29A1PN.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;10文件压缩与解压&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#10文件压缩与解压&#34;&gt;#&lt;/a&gt; 10. 文件压缩与解压&lt;/h2&gt;
&lt;p&gt;压缩：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;	zip 压缩文件名 源文件           //压缩文件
zip -r 压缩文件名 源目录(***/)  //压缩目录
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;https://vvwwv.oss-cn-nanjing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/DYW%5BZRK%28W3QP%5B%7EX%25S%7E5%40%7E%29F.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;gzip 源文件                    //压缩为.gz格式，源文件会消失
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;https://vvwwv.oss-cn-nanjing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/T4%25_%5BOGJYPES%25Z0JO%60YG0UC.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;解压：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;	unzip 压缩文件                 // 解压缩文件
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;https://vvwwv.oss-cn-nanjing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/AA6PM8S6SL3T2O4%28%7D9_31%281.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;gunzip 压缩文件                 //解压缩文件
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;https://vvwwv.oss-cn-nanjing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/%29MMF%7B%7ES9Q%60N4RDTIAWLL1%29S.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;11netstat端口查看&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#11netstat端口查看&#34;&gt;#&lt;/a&gt; 11.netstat（端口查看）&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;    -a 表示所有
    -n 不查询dns
    -t 表示tcp协议
    -u 表示udp协议
    -p 查询占用的查询
    -i 查询正在监听的查询
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;查询 &lt;code&gt;netstat -ntupl&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://vvwwv.oss-cn-nanjing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/%28N6KRU5Z%5DDPCH9D7%60%29RH%7B_C.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;12ps命令进程查询&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#12ps命令进程查询&#34;&gt;#&lt;/a&gt; 12.ps 命令（进程查询）&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;a 显示现行终端机上所有进程，包括其他用户进程
U 以用户为主的格式来显示进程状况
x 显示所有进程
A 显示所有进程
f 做一个更完整的输出
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;执行 &lt;code&gt;ps aux&lt;/code&gt;  (以用户为主的格式来显示所有进程)&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://vvwwv.oss-cn-nanjing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/FDWR86%7EJ%28%29YA%60H%7DOZV%25REE8.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;13kill命令终止进程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#13kill命令终止进程&#34;&gt;#&lt;/a&gt; 13.kill 命令（终止进程）&lt;/h2&gt;
&lt;p&gt;这里再开启一个终端执行 &lt;code&gt;vim babyheap.py&lt;/code&gt; , 然后终止该进程&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;kill -15 pid（默认） //大部分进程先释放资源，再停止
kill -9  pid    //exit信号不会被阻塞，所以kill能顺利杀掉进程
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;https://vvwwv.oss-cn-nanjing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/RR3%240MM%7B6A1HHWW%2827PWV%7BQ.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;14tail命令加参数可以动态读取正在变化的文件比如读取不断写入的日志&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#14tail命令加参数可以动态读取正在变化的文件比如读取不断写入的日志&#34;&gt;#&lt;/a&gt; 14.tail 命令 (加参数可以动态读取正在变化的文件【比如读取不断写入的日志】)&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;tail -f [file_name] //动态读取文件内容
tail -n行数 [file_name] //显示文件尾部n行的内容
tail -c字节数 [file_name] //显示文件尾部C个字节的内容
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;执行  &lt;code&gt;tail -f babyheap.py&lt;/code&gt;  (利用 echo 命令输入内容)&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://vvwwv.oss-cn-nanjing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/CC%7DF7CCXCENXH%7E%25CMKDUNF0.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;15echo命令输出传递给-echo-的参数被打印到标准输出中&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#15echo命令输出传递给-echo-的参数被打印到标准输出中&#34;&gt;#&lt;/a&gt; 15.echo 命令（输出，传递给  &lt;code&gt;echo&lt;/code&gt;  的参数被打印到 &lt;code&gt;标准输出&lt;/code&gt; 中）&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;执行命令 echo `date`
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;https://vvwwv.oss-cn-nanjing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/0%5BRNZYU1%5B%7E3%5D%29C4%292N2N0%602.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;16cfilt-命令&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#16cfilt-命令&#34;&gt;#&lt;/a&gt; 16. &lt;code&gt;c++filt&lt;/code&gt;  命令&lt;/h2&gt;
&lt;p&gt;c&lt;ins&gt;filt 的作用就是还原函数名字，它可以帮我们查找动态链接库中缺少的函数，还原崩溃堆栈中一大串的函数名字母等等 (在 C&lt;/ins&gt; 中， 是允许函数重载的， 也就引出了编译器的 name mangling 机制)&lt;/p&gt;
&lt;p&gt;这里查看一个 ida 反汇编出来的函数&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://vvwwv.oss-cn-nanjing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/%40J%25ZPGFS%29%24S545_LU%249Z3AY.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;执行 &lt;code&gt;c++filt&lt;/code&gt;  命令&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://vvwwv.oss-cn-nanjing.aliyuncs.com/YD%7B6%2903SB%7E%7E94%28516W%5D%40D%7B3.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;看到还原成了我们可以识别的函数名字&lt;/p&gt;
&lt;h1 id=&#34;2shell编程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2shell编程&#34;&gt;#&lt;/a&gt; 2.shell 编程&lt;/h1&gt;
&lt;h2 id=&#34;1功能&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1功能&#34;&gt;#&lt;/a&gt; 1. 功能：&lt;/h2&gt;
&lt;p&gt;多人抽签游戏，对于输入的不同名字，产生一个随机数&lt;/p&gt;
&lt;p&gt;具体功能：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;输入人名，产生 0-99 之间的数字&lt;/li&gt;
&lt;li&gt;重复输入相同的名字，产生的数字与之前相同&lt;/li&gt;
&lt;li&gt;前面出现过的数字后面不能再次出现&lt;/li&gt;
&lt;li&gt;将名字和产生的数字记录到一个文件内&lt;/li&gt;
&lt;li&gt;脚本不会自己停止&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;2代码命名为cybsh&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2代码命名为cybsh&#34;&gt;#&lt;/a&gt; 2. 代码 (命名为 &lt;code&gt;cyb.sh&lt;/code&gt; )：&lt;/h2&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;span&gt;l&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function-name function&#34;&gt;creat_number&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;## 产生已经出现过的数字，需要再次生成随机数，利用 while 脚本来实现&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token keyword&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;token builtin class-name&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token keyword&#34;&gt;do&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token comment&#34;&gt;## 产生一个 1-99 之间的随机数&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token assign-left variable&#34;&gt;nu&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;$&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token environment constant&#34;&gt;$RANDOM&lt;/span&gt;%99+1&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token comment&#34;&gt;##n 为数字出现的次数&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token assign-left variable&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;&lt;span class=&#34;token variable&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;awk&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-F&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;:&#39;&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-v&lt;/span&gt; &lt;span class=&#34;token assign-left variable&#34;&gt;NUMBER&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;$nu &lt;span class=&#34;token string&#34;&gt;&#39;$2==NUMBER&#39;&lt;/span&gt;  /home/vvwwv/Public/name.log&lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;wc&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-l&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;token variable&#34;&gt;$n&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-gt&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token keyword&#34;&gt;then&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;			&lt;span class=&#34;token builtin class-name&#34;&gt;continue&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;			&lt;span class=&#34;token builtin class-name&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;token variable&#34;&gt;$nu&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;			&lt;span class=&#34;token builtin class-name&#34;&gt;break&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token keyword&#34;&gt;fi&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token keyword&#34;&gt;done&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;token builtin class-name&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;do&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;## 进行交互输入名字&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token builtin class-name&#34;&gt;read&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-p&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;Please input your name:&#34;&lt;/span&gt; name&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;!&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-f&lt;/span&gt; /home/vvwwv/Public/name.log &lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token keyword&#34;&gt;then&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token comment&#34;&gt;## 文件里为空时为第一次执行脚本，之间打印数字&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token assign-left variable&#34;&gt;number&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;$&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token environment constant&#34;&gt;$RANDOM&lt;/span&gt;%99+1&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token builtin class-name&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;Your number is: &lt;span class=&#34;token variable&#34;&gt;$number&lt;/span&gt;&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token builtin class-name&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;&lt;span class=&#34;token variable&#34;&gt;$name&lt;/span&gt;:&lt;span class=&#34;token variable&#34;&gt;$name&lt;/span&gt;&#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; /home/vvwwv/Public/name.log&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;31&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;32&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token comment&#34;&gt;## 名字重复出现&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;33&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token assign-left variable&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;&lt;span class=&#34;token variable&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;awk&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-F&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;:&#39;&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-v&lt;/span&gt; &lt;span class=&#34;token assign-left variable&#34;&gt;NAME&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;$name &lt;span class=&#34;token string&#34;&gt;&#39;$1 == NAME&#39;&lt;/span&gt; /home/vvwwv/Public/name.log&lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;wc&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-l&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;34&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;token variable&#34;&gt;$n&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-gt&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;35&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token keyword&#34;&gt;then&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;36&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;			&lt;span class=&#34;token builtin class-name&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;The name already exist.&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;37&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;			&lt;span class=&#34;token function&#34;&gt;awk&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-F&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;:&#39;&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-v&lt;/span&gt; &lt;span class=&#34;token assign-left variable&#34;&gt;NAME&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$name&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;$1 == NAME&#39;&lt;/span&gt; /home/vvwwv/Public/name.log&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;38&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;			&lt;span class=&#34;token builtin class-name&#34;&gt;continue&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;39&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;40&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;			&lt;span class=&#34;token assign-left variable&#34;&gt;number&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;&lt;span class=&#34;token variable&#34;&gt;`&lt;/span&gt;creat_number&lt;span class=&#34;token variable&#34;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;41&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token keyword&#34;&gt;fi&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;42&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token comment&#34;&gt;## 将名字和数字存入 name.log 中&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;43&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token builtin class-name&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;Your number is: &lt;span class=&#34;token variable&#34;&gt;$number&lt;/span&gt;&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;44&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token builtin class-name&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;&lt;span class=&#34;token variable&#34;&gt;$name&lt;/span&gt;:&lt;span class=&#34;token variable&#34;&gt;$number&lt;/span&gt;&#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&gt;&gt;&lt;/span&gt; /home/vvwwv/Public/name.log&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;45&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token keyword&#34;&gt;fi&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;46&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;done&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;3运行&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3运行&#34;&gt;#&lt;/a&gt; 3. 运行：&lt;/h2&gt;
&lt;p&gt;执行 &lt;code&gt;cyb.sh&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://vvwwv.oss-cn-nanjing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/2%5B%5BOSS_B5%24NOF8D%7E%7EVE%5BO0S.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;输入  &lt;code&gt;aaa&lt;/code&gt; ; &lt;code&gt;bbb&lt;/code&gt; ; &lt;code&gt;ccc&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://vvwwv.oss-cn-nanjing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/D%7DSNMOU%60H%5DDU%5B7BCCQ%28%7D4T6.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;查看 &lt;code&gt;name.log&lt;/code&gt;  文件&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://vvwwv.oss-cn-nanjing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/BR%7B%28%5B%242Y65865PV%29UVE%7BF77.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;再次输入 &lt;code&gt;aaa&lt;/code&gt; ，提示说明名字已经存在&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://vvwwv.oss-cn-nanjing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/%7DR8X%28KX9%243CYTPYKX9IE%28DV.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h1 id=&#34;3在linux下搭建apache服务器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3在linux下搭建apache服务器&#34;&gt;#&lt;/a&gt; 3. 在 Linux 下搭建 Apache 服务器&lt;/h1&gt;
&lt;h2 id=&#34;1安装apache&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1安装apache&#34;&gt;#&lt;/a&gt; 1. 安装 Apache&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;sudo yum install httpd
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;https://vvwwv.oss-cn-nanjing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/FG343FNLD7ZU93T%29H%29E%297ON.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;2启动apache服务&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2启动apache服务&#34;&gt;#&lt;/a&gt; 2. 启动 Apache 服务&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;sudo systemctl start httpd.service
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;https://vvwwv.oss-cn-nanjing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/K2RYJ6%28BLJ0ZT139K%40%246J%7BB.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;3将apache服务设置为开启自启动&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3将apache服务设置为开启自启动&#34;&gt;#&lt;/a&gt; 3. 将 Apache 服务设置为开启自启动&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;sudo systemctl enable httpd.service
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;https://vvwwv.oss-cn-nanjing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/10WY%280645%60%28F3EUC__%248%40CA.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;4创建网站目录&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4创建网站目录&#34;&gt;#&lt;/a&gt; 4. 创建网站目录&lt;/h2&gt;
&lt;p&gt;创建一个网站目录来存放网页文件&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo mkdir /var/www/html/vvwwv
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;看见已经产生了目录&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://vvwwv.oss-cn-nanjing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/UV30%7D8%40%604T4JLFU8JFMGX1T.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;5进行ip配置&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#5进行ip配置&#34;&gt;#&lt;/a&gt; 5. 进行 ip 配置&lt;/h2&gt;
&lt;p&gt;1. 查看本机 ip（这里我的虚拟机的网站配置是桥接模式）&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://vvwwv.oss-cn-nanjing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/0%29ZL7I3ZJ5SY9P0%28Z%7DD%25Q%7ER.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;2. 设置子接口 ip 地址&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://vvwwv.oss-cn-nanjing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/%40LA795%5BN409AN68E8ASHY%5DL.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;6编辑配置文件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#6编辑配置文件&#34;&gt;#&lt;/a&gt; 6. 编辑配置文件&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;vim /etc/httpd/conf/httpd.conf
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;https://vvwwv.oss-cn-nanjing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/%60_MP%5D%404RHA4%40%7E7ZV%251E%7D%5D%7BJ.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;7测试是否成功&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#7测试是否成功&#34;&gt;#&lt;/a&gt; 7. 测试是否成功&lt;/h2&gt;
&lt;p&gt;浏览器访问本机 ip 地址&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://vvwwv.oss-cn-nanjing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/%5BN%5B1VPT%25N27P%60AV%607KH1HPV.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;创建一个测试页面用于查看是否成功搭建了 Web 服务器&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;echo &amp;quot;Hello World&amp;quot;&amp;gt;/var/www/html/vvwwv/index.html
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;使用该命令时，发现没有权限，尽管加上 &lt;code&gt;sudo&lt;/code&gt;  也不行，所以使用 &lt;code&gt;root&lt;/code&gt;  账户执行该命令&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://vvwwv.oss-cn-nanjing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/MMQ%24FBMRO%24%5BI7%7EFTF5D%5DPTV.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;可以发现确实创建并且写入了内容&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://vvwwv.oss-cn-nanjing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/THKBCY%601MCA%7E%28O%29H7W7GOM9.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;重启 httpd 服务&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://vvwwv.oss-cn-nanjing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/B79E96Z%60%5D%5DP%7B6AETW53Z%281M.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;浏览器访问子接口 ip&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://vvwwv.oss-cn-nanjing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/E32L%28L%7DA%60MP2WE5EORRQXH5.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;测试成功&lt;/p&gt;
&lt;h1 id=&#34;4个人网页&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4个人网页&#34;&gt;#&lt;/a&gt; 4. 个人网页&lt;/h1&gt;
&lt;p&gt;【基于 js 和 html 使用了一些 css3 的效果（利用 css3 判断屏幕）】&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://vvwwv.oss-cn-nanjing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/OM1%28JQCT%60I5W%24ZJ06XGL8MG.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://vvwwv.oss-cn-nanjing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/%5D%7D%60%4017%24WIN5T2D8G34ZLMOT.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;文件：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://vvwwv.oss-cn-nanjing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/H%29%5DMM0E1P%29%29D%29J%7D%5BMJVGO%25K.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
</content>
        <category term="Linux" />
        <updated>2023-10-16T12:05:56.000Z</updated>
    </entry>
    <entry>
        <id>https://vvwwvv.cn/2023/10/07/Linux/FORTIFY/</id>
        <title>FORTIFY_SOURCE（例题：CTFshow的pwn32）</title>
        <link rel="alternate" href="https://vvwwvv.cn/2023/10/07/Linux/FORTIFY/"/>
        <content type="html">&lt;h1 id=&#34;1简介在编译时进行设置&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1简介在编译时进行设置&#34;&gt;#&lt;/a&gt; 1. 简介（在编译时进行设置）：&lt;/h1&gt;
&lt;p&gt;fority 是轻微的检测，用于检查缓冲区溢出的错误，在程序采用打量的字符串或者内存操作函数适用，例如：memcpy、memset、stpcpy、strcpy、strncpy、strncat、sprintf、snprintf、vsprintf、gets 以及宽字符的变体。&lt;/p&gt;
&lt;h1 id=&#34;2作用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2作用&#34;&gt;#&lt;/a&gt; 2. 作用：&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;FORTIFY_SOURCE&lt;/code&gt;  是一个  &lt;code&gt;C/C++&lt;/code&gt;  编译器提供的安全保护机制，旨在防止缓冲区溢出和其他与字符串和内存操作相关的安全漏洞。它是在编译时自动 &lt;code&gt;插入的一组额外代码&lt;/code&gt; ，用于增强程序对于缓冲区溢出和其他常见安全问题的防护。 &lt;code&gt;FORTIFY_SOURCE &lt;/code&gt; 提供了以下主要功能：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;运行时长度检查： &lt;code&gt;FORTIFY_SOURCE&lt;/code&gt;  会在编译时自动将长度检查代码插入到一些危险的库函数中，例如 &lt;code&gt;strcpy、strcat、sprintf&lt;/code&gt;  等。这些代码会检查目标缓冲区的长度，以确保操作不会导致溢出。如果检测到溢出情况，程序会立即终止，从而防止潜在的漏洞利用。&lt;/li&gt;
&lt;li&gt;缓冲区溢出检测： &lt;code&gt;FORTIFY_SOURCE&lt;/code&gt;  还会将额外的保护机制添加到一些敏感的库函数中，例如 memcpy、memmove、memset 等。这些机制可以检测传递给这些函数的源和目标缓冲区是否有重叠，并防止潜在的缓冲区溢出。&lt;/li&gt;
&lt;li&gt;安全警告和错误报告：当  &lt;code&gt;FORTIFY_SOURCE&lt;/code&gt;  检测到潜在的缓冲区溢出或其他安全问题时，它会生成相应的警告和错误报告。 &lt;code&gt;FORTIFY_SOURCE&lt;/code&gt;  提供了一层额外的安全保护，它可以在很大程度上减少常见的 &lt;code&gt;缓冲区溢出&lt;/code&gt; 和 &lt;code&gt;字符串操作&lt;/code&gt; 相关的安全漏洞。&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;3级别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3级别&#34;&gt;#&lt;/a&gt; 3. 级别&lt;/h1&gt;
&lt;h2 id=&#34;1_fortify_source设置为1&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1_fortify_source设置为1&#34;&gt;#&lt;/a&gt; 1. &lt;code&gt;_FORTIFY_SOURCE&lt;/code&gt;  设置为 1&lt;/h2&gt;
&lt;p&gt;启用 Fortify 功能的基本级别。 在编译时进行一些安全检查，如缓冲区边界检查、格式化字符串检查等。 在 &lt;code&gt;运行时&lt;/code&gt; 进行 &lt;code&gt;某些&lt;/code&gt; 检查，如检测函数返回值和大小的一致性。 如果检测到潜在的安全问题，会触发运行时错误，并终止程序执行。【这里会导致无法进行缓冲区溢出，但是格式化字符串仍然有用】&lt;/p&gt;
&lt;p&gt;将编译器设置为优化 1（gcc -O1），并且当出现上面简介中的情形时，在程序编译时就会进行检查，但并不会改变程序功能。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;gcc -D_FORTIFY_SOURCE=1&lt;/code&gt;   只会在编译时检查（特别像一些头文件  &lt;code&gt;#include &amp;lt;string.h&amp;gt;&lt;/code&gt; ）&lt;/p&gt;
&lt;h2 id=&#34;2_fortify_source设置为2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2_fortify_source设置为2&#34;&gt;#&lt;/a&gt; 2. &lt;code&gt;_FORTIFY_SOURCE&lt;/code&gt;  设置为 2&lt;/h2&gt;
&lt;p&gt;当设置为 2 时，一些检查功能会被加入进来，但是也会造成程序崩溃；&lt;/p&gt;
&lt;p&gt;&lt;code&gt;gcc -D_FORTIFY_SOURCE=2&lt;/code&gt;   程序执行时也会进行检查，当检查到缓冲区溢出时，就会终止程序&lt;/p&gt;
&lt;h1 id=&#34;开启&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#开启&#34;&gt;#&lt;/a&gt; 开启：&lt;/h1&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;span&gt;l&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;gcc &lt;span class=&#34;token parameter variable&#34;&gt;-o&lt;/span&gt; &lt;span class=&#34;token builtin class-name&#34;&gt;test&lt;/span&gt; test.c //默认不开启该检查&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;gcc &lt;span class=&#34;token parameter variable&#34;&gt;-D_FORTIFY_SOURCE&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-o&lt;/span&gt; &lt;span class=&#34;token builtin class-name&#34;&gt;test&lt;/span&gt; test.c //较弱的检查&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;gcc &lt;span class=&#34;token parameter variable&#34;&gt;-D_FORTIFY_SOURCE&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-o&lt;/span&gt; &lt;span class=&#34;token builtin class-name&#34;&gt;test&lt;/span&gt; test.c //较强的检查&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;参考：&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vU3BpZGVyLXNwaWRlcnMvcC84Nzk4NjI4Lmh0bWw=&#34;&gt;https://www.cnblogs.com/Spider-spiders/p/8798628.html&lt;/span&gt;&lt;/p&gt;
</content>
        <category term="pwn" />
        <category term="Linux" />
        <updated>2023-10-07T06:15:56.000Z</updated>
    </entry>
    <entry>
        <id>https://vvwwvv.cn/2023/10/05/Linux/large_bin_attack/</id>
        <title>large bin attack（为house利用系列打下基础）</title>
        <link rel="alternate" href="https://vvwwvv.cn/2023/10/05/Linux/large_bin_attack/"/>
        <content type="html">&lt;h1 id=&#34;1large-bin&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1large-bin&#34;&gt;#&lt;/a&gt; 1.Large bin&lt;/h1&gt;
&lt;h2 id=&#34;1&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1&#34;&gt;#&lt;/a&gt; 1.&lt;/h2&gt;
&lt;p&gt;在释放堆块时，想要进入 &lt;code&gt;large bin&lt;/code&gt;  的堆块需要大于等于 &lt;code&gt;512&lt;/code&gt; （1024）字节【用户空间需要 &lt;code&gt;大于等于&lt;/code&gt;  0x3F0，用户空间小于 0x3F0 进入 &lt;code&gt;small bin&lt;/code&gt; 】&lt;/p&gt;
&lt;p&gt;而 &lt;code&gt;largebin&lt;/code&gt;  还要考虑 &lt;code&gt;fd_nextsiez&lt;/code&gt;  和 &lt;code&gt;bk_nextsize&lt;/code&gt; ，这两个是因为，在 largebin 中，会按着相同大小的 chunk 归到一起，不同 chunk 组直接的联系就需要 &lt;code&gt;fd_nextsize&lt;/code&gt;  和 &lt;code&gt;bk_nextsize&lt;/code&gt; 。这里除了每组的第一个 chunk ，其他的 &lt;code&gt;fd_nextsize&lt;/code&gt;  和 &lt;code&gt;bk_nextsize&lt;/code&gt;  都为 0&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;fd_nextsize指向了下一组的第一个chunk
bk_nextsize指向了上一组的第一个chunk
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;2结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2结构&#34;&gt;#&lt;/a&gt; 2. 结构：&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;large chunk&lt;/code&gt;  在 fd 的遍历顺序为从大到小【图中 &lt;code&gt;szie&lt;/code&gt;  大小为  &lt;code&gt;1&amp;gt;2&amp;gt;3&lt;/code&gt; ，相同组号的 size 相同（1-1，1-2，1-3 相同）】&lt;br /&gt;
&lt;img data-src=&#34;https://z1.ax1x.com/2023/10/05/pPXJaEd.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;【自己画完才发现别人的（自己画的应该有误）】&lt;/p&gt;
&lt;p&gt;原地址：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vaHlxMi9wLzE1OTk4NTcwLmh0bWw=&#34;&gt;https://www.cnblogs.com/hyq2/p/15998570.html&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img2022.cnblogs.com/blog/2154691/202203/2154691-20220312214138636-690454707.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;3插入顺序&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3插入顺序&#34;&gt;#&lt;/a&gt; 3. 插入顺序：&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;插入位置按照大小，从大到小排序（小的连接 large bin 块）&lt;/li&gt;
&lt;li&gt;大小相同按照 free 时间排序&lt;/li&gt;
&lt;li&gt;多个大小相同的堆块，只有首堆块的 fd_nextsize 和 bk_nextsize 会指向其他堆块，后面的堆块的 fd_nextsize 和 bk_nextsize 均为 0&lt;/li&gt;
&lt;li&gt;size 最大的 chunk 的 bk_nextsize 指向最小的 chunk，size 最小的 chunk 的 fd_nextsize 指向最大的 chunk&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;2原理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2原理&#34;&gt;#&lt;/a&gt; 2. 原理：&lt;/h1&gt;
&lt;h2 id=&#34;1我自己的理解&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1我自己的理解&#34;&gt;#&lt;/a&gt; 1. 我自己的理解：&lt;/h2&gt;
&lt;p&gt;由于在 largebin 中插入 chunk 时会按照大小排序，这就给了我们机会去在比大小时作手脚；&lt;/p&gt;
&lt;h3 id=&#34;在glibc223中mallocc文件中比较过程如下&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#在glibc223中mallocc文件中比较过程如下&#34;&gt;#&lt;/a&gt; 在 &lt;code&gt;glibc2.23&lt;/code&gt;  中 &lt;code&gt;malloc.c&lt;/code&gt;  文件中，比较过程如下：&lt;/h3&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;span&gt;c&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;while&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;long&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; size&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt; fwd&lt;span class=&#34;token operator&#34;&gt;-&gt;&lt;/span&gt;size&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 这里 size 为新插入的，fwd 为已经在 largebin 中的 前一个刚释放  的 chunk&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	fwd&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;fwd&lt;span class=&#34;token operator&#34;&gt;-&gt;&lt;/span&gt;fd_nextsize&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token function&#34;&gt;assert&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;fwd&lt;span class=&#34;token operator&#34;&gt;-&gt;&lt;/span&gt;size &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt; NON_MAIN_ARENA&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;在 largebin 中的 chunk 如果 &lt;code&gt;index相同&lt;/code&gt; 的情况下，是按照从小到大的顺序排列的，也就是说在 index 相同的情况下 size 越小的 chunk，越接近 largebin (fd 指向 largebin, 与图对应)，上面的代码是比较 &lt;code&gt;新插入&lt;/code&gt; 的 chunk 的 size (size) 是否 &lt;code&gt;小于&lt;/code&gt; 上一个刚释放进入 &lt;code&gt;largebin&lt;/code&gt;  中的 chunk 的 size (fwd_size) 的过程&lt;/p&gt;
&lt;p&gt;当小于成立时，执行 while 中的流程；不成立时，判断：&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;span&gt;c&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;long&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; size &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;long&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; fwd&lt;span class=&#34;token operator&#34;&gt;-&gt;&lt;/span&gt;size&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//Always insert in the second position&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	fwd&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;fwd&lt;span class=&#34;token operator&#34;&gt;-&gt;&lt;/span&gt;fd&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;上面的这个对我们来说无法利用，接下来判断大于时：&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;span&gt;c&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	  victim&lt;span class=&#34;token operator&#34;&gt;-&gt;&lt;/span&gt;fd_nextsize &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; fwd&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;                     &lt;span class=&#34;token comment&#34;&gt;//victim 是当前新插入的 chunk&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	  victim&lt;span class=&#34;token operator&#34;&gt;-&gt;&lt;/span&gt;bk_nextsize &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; fwd&lt;span class=&#34;token operator&#34;&gt;-&gt;&lt;/span&gt;bk_nextsize&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;//fwd 是前一个释放的 chunk&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	  fwd&lt;span class=&#34;token operator&#34;&gt;-&gt;&lt;/span&gt;bk_nextsize &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; victim&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;// 将前一个释放的 bk_nextsize 指向新的 chunk&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	  victim&lt;span class=&#34;token operator&#34;&gt;-&gt;&lt;/span&gt;bk_nextsize&lt;span class=&#34;token operator&#34;&gt;-&gt;&lt;/span&gt;fd_nextsize &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; victim&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;// 修改新的 chunk 的上一个大小不相同的 chunk 的 fd_nextsize 指向自己&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	bck &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; fwd &lt;span class=&#34;token operator&#34;&gt;-&gt;&lt;/span&gt;bk&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;//bck 为上一个释放的 chunk 的 bk&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;上面这一段我们可以进行利用，当我们对 fwd 的内容进行修改后，改变其 &lt;code&gt;bk&lt;/code&gt;  和 &lt;code&gt;bk_nextsize&lt;/code&gt;  的指向然后在执行上面这一段代码就会将一些值改变：&lt;/p&gt;
&lt;p&gt;1. 选择两个地址为我们想要修改的 &lt;code&gt;值&lt;/code&gt; 的地址：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;这里选择stack1和stack2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;2. 然后修改 fwd 的值 (fwd 为上一个释放的 &lt;code&gt;large_chunk&lt;/code&gt; ):&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://z1.ax1x.com/2023/10/07/pPjaDqf.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;3. 修改完后就会变成如下情况：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://z1.ax1x.com/2023/10/07/pPjaoZT.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;4. 再当执行上面判断大小结果为大于的时候的代码时：&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;span&gt;c&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	  victim&lt;span class=&#34;token operator&#34;&gt;-&gt;&lt;/span&gt;fd_nextsize &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; fwd&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;                     &lt;span class=&#34;token comment&#34;&gt;//victim 是当前新插入的 chunk&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	  victim&lt;span class=&#34;token operator&#34;&gt;-&gt;&lt;/span&gt;bk_nextsize &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; fwd&lt;span class=&#34;token operator&#34;&gt;-&gt;&lt;/span&gt;bk_nextsize&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;//fwd 是前一个释放的 chunk&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	  fwd&lt;span class=&#34;token operator&#34;&gt;-&gt;&lt;/span&gt;bk_nextsize &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; victim&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;// 将前一个释放的 bk_nextsize 指向新的 chunk&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	  victim&lt;span class=&#34;token operator&#34;&gt;-&gt;&lt;/span&gt;bk_nextsize&lt;span class=&#34;token operator&#34;&gt;-&gt;&lt;/span&gt;fd_nextsize &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; victim&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;// 修改新的 chunk 的上一个大小不相同的 chunk 的 fd_nextsize 指向自己&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	bck &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; fwd &lt;span class=&#34;token operator&#34;&gt;-&gt;&lt;/span&gt;bk&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;//bck 为上一个释放的 chunk 的 bk&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;将 victim 插入时发现&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;span&gt;c&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;victim&lt;span class=&#34;token operator&#34;&gt;-&gt;&lt;/span&gt;bk_nextsize&lt;span class=&#34;token operator&#34;&gt;-&gt;&lt;/span&gt;fd_nextsize &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; victim&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//victim-bk_nextsize 已经指向了 fake_chunk2&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 这里就将 fake_chunk2 的 fd_nextsize 的值变为了 victim 的地址，也就将 stack2 原来的值变为了 victim 的地址&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;5. 修改 stack1 的值&lt;/p&gt;
&lt;p&gt;在执行完对 &lt;code&gt;victim&lt;/code&gt;  和 &lt;code&gt;fwd&lt;/code&gt;  的 &lt;code&gt;fd_nextsize&lt;/code&gt;  和 &lt;code&gt;bk_nextsize&lt;/code&gt;  的修改后，会继续对他俩的 &lt;code&gt;fd&lt;/code&gt;  和 &lt;code&gt;bk&lt;/code&gt;  修改&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;span&gt;c&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;mark_bin&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;av&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;victim_index&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;victim&lt;span class=&#34;token operator&#34;&gt;-&gt;&lt;/span&gt;bk &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; bck&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;victim&lt;span class=&#34;token operator&#34;&gt;-&gt;&lt;/span&gt;fd &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; fwd&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;fwd&lt;span class=&#34;token operator&#34;&gt;-&gt;&lt;/span&gt;bk &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; victim&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;bck&lt;span class=&#34;token operator&#34;&gt;-&gt;&lt;/span&gt;fd &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; victim&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;//bck 为 fwd 的 bk 指针&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;这里会发现：&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;span&gt;c&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;bck&lt;span class=&#34;token operator&#34;&gt;-&gt;&lt;/span&gt;fd &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; victim&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 这里 bck = fwd -&gt; bk&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 也就等于 fwd-&gt;bk-&gt;fd = victim&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 就将 fack_chunk1 的 stack（fd）的值改为了 victim 的地址&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;最后我们就将&lt;/p&gt;
&lt;p&gt;fake_chunk1 的 fd（stack1）的值改为了 victim 的地址&lt;br /&gt;
 fake_chunk2 的 fd（stack2）的值改为了 victim 的地址&lt;/p&gt;
&lt;h1 id=&#34;large-bin的利用条件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#large-bin的利用条件&#34;&gt;#&lt;/a&gt; Large bin 的利用条件：&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;可以修改一个 &lt;code&gt;large bin chunk&lt;/code&gt;  的 data 域（fwd 的 bk 和 bk_nextsize）&lt;/li&gt;
&lt;li&gt;从 &lt;code&gt;unsorted bin&lt;/code&gt;  中来的 &lt;code&gt;large bin chunk&lt;/code&gt; （victim）要紧跟在 &lt;code&gt;被构造&lt;/code&gt; 过的 chunk (fwd) 后面【为了判断大小时能够插入到正确的地方】&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;在mallocc中从unsorted-bin去将chunk放入对应的binlarge-bin的完整代码&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#在mallocc中从unsorted-bin去将chunk放入对应的binlarge-bin的完整代码&#34;&gt;#&lt;/a&gt; 在 malloc.c 中从 unsorted bin 去将 chunk 放入对应的 bin（large bin）的完整代码：&lt;/h1&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;span&gt;c&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;/* remove from unsorted list */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;          &lt;span class=&#34;token function&#34;&gt;unsorted_chunks&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;av&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&gt;&lt;/span&gt;bk &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; bck&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;          bck&lt;span class=&#34;token operator&#34;&gt;-&gt;&lt;/span&gt;fd &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;unsorted_chunks&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;av&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;          &lt;span class=&#34;token comment&#34;&gt;/* Take now instead of binning if exact fit */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;          &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;size &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; nb&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;              &lt;span class=&#34;token function&#34;&gt;set_inuse_bit_at_offset&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;victim&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; size&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;              &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;av &lt;span class=&#34;token operator&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;main_arena&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                victim&lt;span class=&#34;token operator&#34;&gt;-&gt;&lt;/span&gt;size &lt;span class=&#34;token operator&#34;&gt;|=&lt;/span&gt; NON_MAIN_ARENA&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;              &lt;span class=&#34;token function&#34;&gt;check_malloced_chunk&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;av&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; victim&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; nb&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;              &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;p &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;chunk2mem&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;victim&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;              &lt;span class=&#34;token function&#34;&gt;alloc_perturb&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;p&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; bytes&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;              &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; p&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;          &lt;span class=&#34;token comment&#34;&gt;/* place chunk in bin */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;          &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;in_smallbin_range&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;size&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;              victim_index &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;smallbin_index&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;size&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;              bck &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;bin_at&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;av&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; victim_index&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;              fwd &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; bck&lt;span class=&#34;token operator&#34;&gt;-&gt;&lt;/span&gt;fd&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;          &lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;              victim_index &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;largebin_index&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;size&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;              bck &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;bin_at&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;av&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; victim_index&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;              fwd &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; bck&lt;span class=&#34;token operator&#34;&gt;-&gt;&lt;/span&gt;fd&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;31&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;32&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;              &lt;span class=&#34;token comment&#34;&gt;/* maintain large bins in sorted order */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;33&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;              &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;fwd &lt;span class=&#34;token operator&#34;&gt;!=&lt;/span&gt; bck&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;34&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;35&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                  &lt;span class=&#34;token comment&#34;&gt;/* Or with inuse bit to speed comparisons */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;36&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                  size &lt;span class=&#34;token operator&#34;&gt;|=&lt;/span&gt; PREV_INUSE&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;37&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                  &lt;span class=&#34;token comment&#34;&gt;/* if smaller than smallest, bypass loop below */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;38&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                  &lt;span class=&#34;token function&#34;&gt;assert&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;bck&lt;span class=&#34;token operator&#34;&gt;-&gt;&lt;/span&gt;bk&lt;span class=&#34;token operator&#34;&gt;-&gt;&lt;/span&gt;size &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt; NON_MAIN_ARENA&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;39&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                  &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;long&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;size&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;long&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;bck&lt;span class=&#34;token operator&#34;&gt;-&gt;&lt;/span&gt;bk&lt;span class=&#34;token operator&#34;&gt;-&gt;&lt;/span&gt;size&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;40&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;41&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                      fwd &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; bck&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;42&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                      bck &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; bck&lt;span class=&#34;token operator&#34;&gt;-&gt;&lt;/span&gt;bk&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;43&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;44&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                      victim&lt;span class=&#34;token operator&#34;&gt;-&gt;&lt;/span&gt;fd_nextsize &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; fwd&lt;span class=&#34;token operator&#34;&gt;-&gt;&lt;/span&gt;fd&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;45&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                      victim&lt;span class=&#34;token operator&#34;&gt;-&gt;&lt;/span&gt;bk_nextsize &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; fwd&lt;span class=&#34;token operator&#34;&gt;-&gt;&lt;/span&gt;fd&lt;span class=&#34;token operator&#34;&gt;-&gt;&lt;/span&gt;bk_nextsize&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;46&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                      fwd&lt;span class=&#34;token operator&#34;&gt;-&gt;&lt;/span&gt;fd&lt;span class=&#34;token operator&#34;&gt;-&gt;&lt;/span&gt;bk_nextsize &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; victim&lt;span class=&#34;token operator&#34;&gt;-&gt;&lt;/span&gt;bk_nextsize&lt;span class=&#34;token operator&#34;&gt;-&gt;&lt;/span&gt;fd_nextsize &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; victim&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;47&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;48&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                  &lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;49&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;50&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                      &lt;span class=&#34;token function&#34;&gt;assert&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;fwd&lt;span class=&#34;token operator&#34;&gt;-&gt;&lt;/span&gt;size &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt; NON_MAIN_ARENA&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;51&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                      &lt;span class=&#34;token keyword&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;long&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; size &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt; fwd&lt;span class=&#34;token operator&#34;&gt;-&gt;&lt;/span&gt;size&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;52&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;53&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                          fwd &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; fwd&lt;span class=&#34;token operator&#34;&gt;-&gt;&lt;/span&gt;fd_nextsize&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;54&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                          &lt;span class=&#34;token function&#34;&gt;assert&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;fwd&lt;span class=&#34;token operator&#34;&gt;-&gt;&lt;/span&gt;size &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt; NON_MAIN_ARENA&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;55&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;56&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;57&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                      &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;long&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; size &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;long&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; fwd&lt;span class=&#34;token operator&#34;&gt;-&gt;&lt;/span&gt;size&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;58&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                        &lt;span class=&#34;token comment&#34;&gt;/* Always insert in the second position.  */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;59&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                        fwd &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; fwd&lt;span class=&#34;token operator&#34;&gt;-&gt;&lt;/span&gt;fd&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;60&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                      &lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;61&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;62&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                          victim&lt;span class=&#34;token operator&#34;&gt;-&gt;&lt;/span&gt;fd_nextsize &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; fwd&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;63&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                          victim&lt;span class=&#34;token operator&#34;&gt;-&gt;&lt;/span&gt;bk_nextsize &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; fwd&lt;span class=&#34;token operator&#34;&gt;-&gt;&lt;/span&gt;bk_nextsize&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;64&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                          fwd&lt;span class=&#34;token operator&#34;&gt;-&gt;&lt;/span&gt;bk_nextsize &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; victim&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;65&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                          victim&lt;span class=&#34;token operator&#34;&gt;-&gt;&lt;/span&gt;bk_nextsize&lt;span class=&#34;token operator&#34;&gt;-&gt;&lt;/span&gt;fd_nextsize &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; victim&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;66&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;67&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                      bck &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; fwd&lt;span class=&#34;token operator&#34;&gt;-&gt;&lt;/span&gt;bk&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;68&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;69&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;70&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;              &lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;71&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                victim&lt;span class=&#34;token operator&#34;&gt;-&gt;&lt;/span&gt;fd_nextsize &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; victim&lt;span class=&#34;token operator&#34;&gt;-&gt;&lt;/span&gt;bk_nextsize &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; victim&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;72&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;73&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;74&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;          &lt;span class=&#34;token function&#34;&gt;mark_bin&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;av&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; victim_index&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;75&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;          victim&lt;span class=&#34;token operator&#34;&gt;-&gt;&lt;/span&gt;bk &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; bck&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;76&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;          victim&lt;span class=&#34;token operator&#34;&gt;-&gt;&lt;/span&gt;fd &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; fwd&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;77&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;          fwd&lt;span class=&#34;token operator&#34;&gt;-&gt;&lt;/span&gt;bk &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; victim&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;78&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;          bck&lt;span class=&#34;token operator&#34;&gt;-&gt;&lt;/span&gt;fd &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; victim&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</content>
        <category term="pwn" />
        <category term="Linux" />
        <updated>2023-10-05T06:15:56.000Z</updated>
    </entry>
    <entry>
        <id>https://vvwwvv.cn/2023/10/04/Linux/ASLR%E4%B8%8EPIE/</id>
        <title>ASLR与PIE（例题：CTFshow的pwn31）</title>
        <link rel="alternate" href="https://vvwwvv.cn/2023/10/04/Linux/ASLR%E4%B8%8EPIE/"/>
        <content type="html">&lt;h1 id=&#34;前言&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#前言&#34;&gt;#&lt;/a&gt; 前言&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;ASLR&lt;/code&gt;  与 &lt;code&gt;PIE&lt;/code&gt;  是不同的，两者不能认为是同一个机制，但是他们都是对地址进行 &lt;code&gt;随机化&lt;/code&gt; ，只不过作用的 &lt;code&gt;对象&lt;/code&gt; 和作用 &lt;code&gt;时期&lt;/code&gt; 不太一样&lt;/p&gt;
&lt;h1 id=&#34;1aslr操作系统的功能&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1aslr操作系统的功能&#34;&gt;#&lt;/a&gt; 1.ASLR (操作系统的功能)：&lt;/h1&gt;
&lt;p&gt;ASLR 是 &lt;code&gt;Linux操作系统&lt;/code&gt; 的功能选项，作用于程序 (ELF) 装入 &lt;code&gt;内存&lt;/code&gt; 运行时。是一种针对缓冲区溢出的安全保护技术，通过对加载地址的随机化，防止攻击者直接定位攻击代码位置，到达阻止溢出攻击的一种技术。&lt;/p&gt;
&lt;h2 id=&#34;打开关闭aslr&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#打开关闭aslr&#34;&gt;#&lt;/a&gt; 打开 / 关闭 ASLR：&lt;/h2&gt;
&lt;h3 id=&#34;查看aslr打开情况&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#查看aslr打开情况&#34;&gt;#&lt;/a&gt; 查看 ASLR 打开情况：&lt;/h3&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;span&gt;l&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;cat&lt;/span&gt; /proc/sys/kernel/randomize_va_space&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;关闭alsr&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#关闭alsr&#34;&gt;#&lt;/a&gt; 关闭 ALSR&lt;/h3&gt;
&lt;p&gt;1. 手动修改（长期生效）：&lt;/p&gt;
&lt;p&gt;修改的是 randomize_va_space 文件的枚举值，设置的值不同，linux 内核加载程序的地址空间的策略就会不同&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;span&gt;l&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# echo 0 &gt; /proc/sys/kernel/randomize_va_space&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;2. 利用 sysctl 控制 ASLR (临时有效，重启后复原):&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;span&gt;l&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;$ &lt;span class=&#34;token function&#34;&gt;sysctl&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-w&lt;/span&gt; &lt;span class=&#34;token assign-left variable&#34;&gt;kernel.randomize_va_space&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;3. 利用 setarch 控制单独程序的随机化：&lt;/p&gt;
&lt;p&gt;如果你想历史关闭单个程序的 ASLR，使用 setarch 是很好的选择。setarch 命令如其名，改变程序的运行架构环境，并可以自定义环境 flag。&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;span&gt;l&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;setarch &lt;span class=&#34;token variable&#34;&gt;&lt;span class=&#34;token variable&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;uname&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-m&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;`&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-R&lt;/span&gt; ./your_program&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;pre&gt;&lt;code&gt;R参数代表关闭地址空间随机化（开启ADDR_NO_RANDOMIZE)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;4.gbd 中关闭和开启：&lt;/p&gt;
&lt;p&gt;在调试特定程序时，可以通过 set disable-randomization 命令开启或者关闭地址空间随机化。默认是关闭随机化的，也就是 on 状态&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;关闭ASLR：
set disable-randomization on
开启ASLR：
set disable-randomization off
查看ASLR状态：
show disable-randomization
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;aslr保护&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#aslr保护&#34;&gt;#&lt;/a&gt; ASLR 保护：&lt;/h2&gt;
&lt;p&gt;Linux 下的 ASLR 总共有三个级别： &lt;code&gt;0、1、2&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;0：关闭ASLR，没有进行随机化，堆栈基地址每次都相同，并且libc.so每次的地址也相同。
1：普通的ASLR。mmap基地址、栈基地址、.so加载基地址（共享库（.so\libraries））都将被随机化；但是堆没有随机化
2：在1的基础上加上了堆基地址的随机化
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;2pie编译器的功能&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2pie编译器的功能&#34;&gt;#&lt;/a&gt; 2.PIE（编译器的功能）:&lt;/h1&gt;
&lt;p&gt;PIE 叫做代码部分地址无关，PIE 是我们在编译（gcc）时可以选择的功能，作用于程序（ELF）编译过程。其针对的是代码段（.text）, 数据段（.data），为初始化全局变量 (.bbs) 等固定地址的防护，程序在开启了 pie 时，每次加载程序都会时程序的加载地址改变&lt;/p&gt;
&lt;h2 id=&#34;开启pie&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#开启pie&#34;&gt;#&lt;/a&gt; 开启 PIE:&lt;/h2&gt;
&lt;p&gt;在使用 gcc 编译时加入命令参数   &lt;code&gt;-fPIE&lt;/code&gt;&lt;/p&gt;
&lt;h1 id=&#34;3开启aslrpie&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3开启aslrpie&#34;&gt;#&lt;/a&gt; 3. 开启 ASLR+PIE:&lt;/h1&gt;
&lt;p&gt;开启 &lt;code&gt;ASLR+PIE&lt;/code&gt;  的一个直接的困扰就是，你会发现没有地方可以写，所有的 got 表、plt 表、bss 段地址都是不确定的。只有通过泄漏才可以确定地址，所以我们想利用时，必须先泄露函数的地址然后算出 libc 的基址才行。&lt;/p&gt;
&lt;p&gt;【注意】&lt;/p&gt;
&lt;p&gt;由于 PIE 将代码地址随机化了，我们就不能够直接通过 EFL 来获取 got 表和 plt 表等的地址，需要加上一个固定的偏移量，例如：&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;span&gt;n&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;base&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;main&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;e&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;symbols&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;main&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;#获得基地址&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;write_plt&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;base &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; e&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;plt&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;write&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;#计算真实地址&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;write_got&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;base &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; e&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;got&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;write&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;参考：&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLjUxY3RvLmNvbS9kdWFsbGF5LzE4NzY4NDE=&#34;&gt;https://blog.51cto.com/duallay/1876841&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubXJza3llLmNuL2FyY2hpdmVzLzkwNThkZmZjLyMlRTUlQkMlODAlRTUlOTAlQUYtUElF&#34;&gt;https://www.mrskye.cn/archives/9058dffc/# 开启 - PIE&lt;/span&gt;&lt;/p&gt;
</content>
        <category term="pwn" />
        <category term="Linux" />
        <updated>2023-10-04T06:15:56.000Z</updated>
    </entry>
    <entry>
        <id>https://vvwwvv.cn/2023/09/24/pwn/%E5%88%B7%E9%A2%98/BUUCTF/bjdctf_2020_router/</id>
        <title>bjdctf_2020_router(Linux命令)</title>
        <link rel="alternate" href="https://vvwwvv.cn/2023/09/24/pwn/%E5%88%B7%E9%A2%98/BUUCTF/bjdctf_2020_router/"/>
        <content type="html">&lt;h1 id=&#34;1分析程序&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1分析程序&#34;&gt;#&lt;/a&gt; 1. 分析程序&lt;/h1&gt;
&lt;p&gt;&lt;img data-src=&#34;https://z1.ax1x.com/2023/09/24/pP7E8Fx.png&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
64 位程序，开启了 NX&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://z1.ax1x.com/2023/09/25/pP7Eg1S.png&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
&lt;img data-src=&#34;https://z1.ax1x.com/2023/09/25/pP7EIkq.md.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;发现 &lt;code&gt;case 1&lt;/code&gt;  中有后门函数，利用 &lt;code&gt;strcat&lt;/code&gt;  函数进行拼接，那么我们就可以通过指令的连续执行来获取 flag&lt;/p&gt;
&lt;p&gt;通过  &lt;code&gt;;&lt;/code&gt;  符合就可以分隔连续执行 &lt;code&gt;linux&lt;/code&gt;  命令，那么我们只需要输入 &lt;code&gt;; cat flag&lt;/code&gt;  就能得到 flag&lt;/p&gt;
&lt;h1 id=&#34;2exp其实完全不需要直接nc连接就可以&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2exp其实完全不需要直接nc连接就可以&#34;&gt;#&lt;/a&gt; 2.exp (其实完全不需要，直接 nc 连接就可以):&lt;/h1&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;span&gt;n&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; pwn &lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; LibcSearcher &lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;context&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;os&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;linux&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; arch&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;amd64&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; log_level&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;debug&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;p&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;remote&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;node4.buuoj.cn&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;27288&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;shellcode &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; asm&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;shellcraft&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;sh&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;p&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;recvuntil&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;choose:\n&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;p&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;sendline&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;b&#34;1&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;p&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;recvuntil&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;address:\n&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;payload1&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;; cat flag&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;p&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;sendline&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;payload1&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;p&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;interactive&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;img data-src=&#34;https://z1.ax1x.com/2023/09/25/pP705fx.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
</content>
        <category term="pwn" />
        <updated>2023-09-24T09:08:15.000Z</updated>
    </entry>
    <entry>
        <id>https://vvwwvv.cn/2023/09/24/pwn/%E5%88%B7%E9%A2%98/ctf%E7%AB%9E%E8%B5%9B%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97pwn/8.2.3/</id>
        <title>第八章-8.2.3（整数溢出）</title>
        <link rel="alternate" href="https://vvwwvv.cn/2023/09/24/pwn/%E5%88%B7%E9%A2%98/ctf%E7%AB%9E%E8%B5%9B%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97pwn/8.2.3/"/>
        <content type="html">&lt;h1 id=&#34;环境一般情况下不会变动&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#环境一般情况下不会变动&#34;&gt;#&lt;/a&gt; 环境（一般情况下不会变动）&lt;/h1&gt;
&lt;p&gt;Ubuntu22.10&lt;br /&gt;
&lt;img data-src=&#34;https://img1.imgtp.com/2023/09/25/oJIREwOG.png&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
glibc：2.36-0ubuntu4&lt;br /&gt;
&lt;img data-src=&#34;https://img1.imgtp.com/2023/09/25/Caap7dxz.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h1 id=&#34;1程序源代码&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1程序源代码&#34;&gt;#&lt;/a&gt; 1. 程序源代码&lt;/h1&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;span&gt;c&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;include&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&amp;lt;stdio.h&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;include&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&amp;lt;string.h&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;validate_passwd&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;passwd&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;       &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;char&lt;/span&gt; passwd_buf&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;char&lt;/span&gt; passwd_len &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;strlen&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;passwd&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;passwd_len&lt;span class=&#34;token operator&#34;&gt;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;passwd_len&lt;span class=&#34;token operator&#34;&gt;&amp;lt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token function&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;goot!\n&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token function&#34;&gt;strcpy&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;passwd_buf&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;passwd&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token function&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;bad!\n&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;       &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; argc&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;argv&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token function&#34;&gt;validate_passwd&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;argv&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h1 id=&#34;2分析&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2分析&#34;&gt;#&lt;/a&gt; 2. 分析&lt;/h1&gt;
&lt;p&gt;&lt;img data-src=&#34;https://z1.ax1x.com/2023/09/25/pP7csUg.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;strlen&lt;/code&gt;  返回值为 &lt;code&gt;size_t&lt;/code&gt;  类型（无符号整数），而却保存到 &lt;code&gt;unsigned char&lt;/code&gt;  类型中，这样会导致截断&lt;/p&gt;
&lt;p&gt;当我们输入字符长度为  &lt;code&gt;0000 0001 0000 0101&lt;/code&gt;  (261) 时，转为 &lt;code&gt;unsigned char &lt;/code&gt; 类型会变成 &lt;code&gt;0000 0101&lt;/code&gt; （5），也就意味着通过这种方式能绕过后续的判断&lt;/p&gt;
&lt;p&gt;然后，我们输入的字符串长度比较长可以导致栈溢出&lt;/p&gt;
&lt;h1 id=&#34;3编译加调试&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3编译加调试&#34;&gt;#&lt;/a&gt; 3. 编译加调试&lt;/h1&gt;
&lt;p&gt;编译&lt;br /&gt;
&lt;img data-src=&#34;https://img1.imgtp.com/2023/09/25/4Bx86R3F.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
</content>
        <category term="pwn" />
        <updated>2023-09-24T09:08:15.000Z</updated>
    </entry>
    <entry>
        <id>https://vvwwvv.cn/2023/09/19/Linux/Linux%E6%90%AD%E5%BB%BAweb%E6%9C%8D%E5%8A%A1%E5%99%A8/</id>
        <title>CentOS 7搭建web服务器与个人网页制作（Apache）</title>
        <link rel="alternate" href="https://vvwwvv.cn/2023/09/19/Linux/Linux%E6%90%AD%E5%BB%BAweb%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
        <content type="html"></content>
        <category term="Linux" />
        <category term="Apache" />
        <updated>2023-09-19T12:05:56.000Z</updated>
    </entry>
    <entry>
        <id>https://vvwwvv.cn/2023/09/19/Linux/Linux%E5%91%BD%E4%BB%A4%E5%92%8C%E5%87%BD%E6%95%B0/</id>
        <title>Linux(shell)命令和函数</title>
        <link rel="alternate" href="https://vvwwvv.cn/2023/09/19/Linux/Linux%E5%91%BD%E4%BB%A4%E5%92%8C%E5%87%BD%E6%95%B0/"/>
        <content type="html">&lt;h1 id=&#34;1linux执行多个命令shell命令&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1linux执行多个命令shell命令&#34;&gt;#&lt;/a&gt; 1.Linux 执行多个命令（shell 命令）&lt;/h1&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;span&gt;l&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#逐条执行命令&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token builtin class-name&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token builtin class-name&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token builtin class-name&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;#即使命令执行错误也不影响后面的命令继续执行&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#前面的成功执行后面才执行&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token builtin class-name&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; echoo &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;token builtin class-name&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;token builtin class-name&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;#2 出错，不会执行 echo3 ，echo4&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#前一条命令失败然后才继续执行后面的命令&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token builtin class-name&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;||&lt;/span&gt; &lt;span class=&#34;token builtin class-name&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;||&lt;/span&gt; &lt;span class=&#34;token builtin class-name&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;||&lt;/span&gt; &lt;span class=&#34;token builtin class-name&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;#当第一个执行成功时，后面的就都不会执行；当第一个命令失败时，就开始执行 echo2，后面同理&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#混合使用分隔符&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token builtin class-name&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;||&lt;/span&gt; &lt;span class=&#34;token builtin class-name&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;||&lt;/span&gt; &lt;span class=&#34;token builtin class-name&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;  &lt;span class=&#34;token builtin class-name&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 因为 || 分隔符，按照 顺序 只要前面三个执行成功一个其他的就不执行，然后执行 echo4（因为 &amp;amp;&amp;amp; 前面的被看作一个整体，一个成功就视为成功，就执行 echo 4）&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JhbmRhb3l1L2FydGljbGUvZGV0YWlscy8xMTcyOTY5MDc=&#34;&gt;https://blog.csdn.net/bandaoyu/article/details/117296907&lt;/span&gt;&lt;/p&gt;
&lt;h1 id=&#34;2命令输出重定向&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2命令输出重定向&#34;&gt;#&lt;/a&gt; 2. 命令输出重定向&lt;/h1&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;span&gt;l&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token builtin class-name&#34;&gt;command&lt;/span&gt;  &lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;  &lt;span class=&#34;token function&#34;&gt;file&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;#将命令执行结果输出到 file 中，命令的输出结果覆盖原有文件的内容（会清空旧内容）&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token builtin class-name&#34;&gt;command&lt;/span&gt;  &lt;span class=&#34;token operator&#34;&gt;&gt;&gt;&lt;/span&gt;  &lt;span class=&#34;token function&#34;&gt;file&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;#将命令的输出结果输出到 file 文件的原内容的下一行&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token builtin class-name&#34;&gt;command&lt;/span&gt;  &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;  &lt;span class=&#34;token function&#34;&gt;file&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;# 将输入重定向到 file&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9saW51eC9saW51eC1zaGVsbC1pby1yZWRpcmVjdGlvbnMuaHRtbA==&#34;&gt;https://www.runoob.com/linux/linux-shell-io-redirections.html&lt;/span&gt;&lt;/p&gt;
&lt;h1 id=&#34;3fork函数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3fork函数&#34;&gt;#&lt;/a&gt; 3.fork () 函数&lt;/h1&gt;
&lt;p&gt;fork 函数用于创建一个进程，所创建的进程 &lt;strong&gt;复制父进程的代码段 / 数据段 / BSS 段 / 堆 / 栈等所有用户空间信息&lt;/strong&gt; ；在内核中操作系统重新为其申请了一个 PCB，并使用父进程的 PCB 进行初始化；&lt;/p&gt;
&lt;p&gt;父进程与子进程的 pid 不同，&lt;strong&gt;执行顺序也不一定，要看系统的进程调度策略&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;fork 被调用一次会返回两次（后面的语句也就判断 2 次），返回 0 代表其是子进程，而在父进程中接到的返回值是子进程的 pid，fork 为负值代表出现错误&lt;/p&gt;
&lt;p&gt;fork 调用的一个奇妙之处就是它仅仅被调用一次，却能够返回两次，它可能有三种不同的返回值：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;pre&gt;&lt;code&gt;在父进程中，fork返回新创建子进程的进程ID；
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;pre&gt;&lt;code&gt;在子进程中，fork返回0；
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果出现错误，fork 返回一个负值；&lt;/p&gt;
&lt;p&gt;子进程的 fork（）返回值为 0  #第一次返回（不分先后，第一次返回也可能是父进程的 fork）&lt;br /&gt;
父进程的 fork（）返回值为子进程的 pid  #第二次返回&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Nja2x1di9hcnRpY2xlL2RldGFpbHMvMTA5MTY5OTQx&#34;&gt;https://blog.csdn.net/cckluv/article/details/109169941&lt;/span&gt;&lt;/p&gt;
&lt;h1 id=&#34;4linux下的exec命令&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4linux下的exec命令&#34;&gt;#&lt;/a&gt; 4.Linux 下的 exec 命令&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;在一个 shell 里面，执行 &lt;code&gt;exec ls；&lt;/code&gt; 那么，当列出了当前目录后，这个 shell 就自己退出了，因为这个 &lt;code&gt;shell进程已被替换为仅仅执行ls命令的一个进程&lt;/code&gt; ，执行结束自然也就退出了 。&lt;/li&gt;
&lt;li&gt;exec 文件重定向，可以将文件的重定向就看为是 shell 程序的文件重定向， &lt;code&gt;当exec命令来对文件描述符操作的时候，就不会替换shell，而且操作完成后，还会继续执行接下来的命令。&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;应用：可以 &lt;code&gt;重新开启标准输出流&lt;/code&gt; ：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;exec （cat [文件名]）1&amp;gt;&amp;amp;0&lt;/code&gt; , 使文件的标准输出流到标准输入里 (在 Linux 系统中文件描述符 &lt;code&gt;1为标准输出流，0为标准输入流，2为标准错误（输出到屏幕）&lt;/code&gt; ，而通过 &lt;code&gt;&amp;amp;+文件描述符&lt;/code&gt; 的方式可以代替文件名，（这里就指向了该终端，所以结果显示在终端上 &lt;code&gt;因为默认打开一个终端后，0，1，2都指向该终端&lt;/code&gt; ）&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vYnVsaC9hcnRpY2xlcy8xMjc2MDYxNy5odG1s&#34;&gt;https://www.cnblogs.com/bulh/articles/12760617.html&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMTg2MTIzL2FydGljbGUvZGV0YWlscy84MjE5MDc3Ng==&#34;&gt;https://blog.csdn.net/qq_31186123/article/details/82190776&lt;/span&gt;&lt;/p&gt;
&lt;h1 id=&#34;5echo命令&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#5echo命令&#34;&gt;#&lt;/a&gt; 5.echo 命令&lt;/h1&gt;
&lt;p&gt;echo 命令是 Linux 中最基本和最常用的命令之一。 传递给  &lt;code&gt;echo&lt;/code&gt;  的参数被打印到 &lt;code&gt;标准输出&lt;/code&gt; 中。&lt;/p&gt;
&lt;p&gt;echo 通常用于  &lt;code&gt;shell 脚本&lt;/code&gt; 中，用于 &lt;code&gt;显示消息&lt;/code&gt; 或 &lt;code&gt;输出&lt;/code&gt; 其他命令的结果。&lt;br /&gt;
 &lt;code&gt;Shell&lt;/code&gt;  的  &lt;code&gt;echo&lt;/code&gt;  指令与  &lt;code&gt;PHP&lt;/code&gt;  的  &lt;code&gt;echo &lt;/code&gt; 指令类似，都是用于字符串的输出&lt;/p&gt;
&lt;p&gt;&lt;code&gt;echo &amp;quot;test&amp;quot;&lt;/code&gt;  与 &lt;code&gt;echo test&lt;/code&gt;  效果一致，双引号可以省略&lt;/p&gt;
&lt;h2 id=&#34;显示结果定向至文件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#显示结果定向至文件&#34;&gt;#&lt;/a&gt; 显示结果定向至文件&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;echo &amp;quot;It is a test&amp;quot; &amp;gt; myfile&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;显示命令执行结果&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#显示命令执行结果&#34;&gt;#&lt;/a&gt; 显示命令执行结果&lt;/h2&gt;
&lt;p&gt;这里运用的是反双引号&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;echo `date`
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;https://z1.ax1x.com/2023/10/12/piSgSDU.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h1 id=&#34;6-cfilt-命令&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#6-cfilt-命令&#34;&gt;#&lt;/a&gt; 6.  &lt;code&gt;c++filt&lt;/code&gt;  命令&lt;/h1&gt;
&lt;p&gt;在 C++ 中， 是允许函数重载的， 也就引出了编译器的 name mangling 机制&lt;/p&gt;
&lt;p&gt;c++filt 的作用就是还原函数名字，它可以帮我们查找动态链接库中缺少的函数，还原崩溃堆栈中一大串的函数名字母等等&lt;/p&gt;
&lt;p&gt;查看一个 ida 反编译出来的 c++ 伪代码&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://vvwwv.oss-cn-nanjing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/%40J%25ZPGFS%29%24S545_LU%249Z3AY.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;利用命令 &lt;code&gt;c++filt&lt;/code&gt; &lt;br /&gt;
&lt;img data-src=&#34;https://vvwwv.oss-cn-nanjing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/BI5T2747GW%29%5BFJ6Q4CGGQ8P.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;可以发现将原来的函数还原了，后面的乱序代码原来为  &lt;code&gt;compare&lt;/code&gt;  (用作判断相等 &lt;code&gt;==&lt;/code&gt; )&lt;/p&gt;
&lt;p&gt;c&lt;ins&gt;filt 命令可以还原 C&lt;/ins&gt; 为实现函数重载采用 name mangling 搞出来的奇奇怪怪的函数名&lt;br /&gt;
注册信号回调函数方式：signal (SIGSEGV, show_stack);，SIGSEGV 代表无效的内存引用&lt;br /&gt;
注意 C 语言和 C++ 在编译后函数命名方式的不同，C 语言不支持严格意义的重载，C++ 支持&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3d3dy4wMDhjdC50b3AvYmxvZy8yMDIwLzA1LzE2LyVFNCVCRCVCRiVFNyU5NCVBOGMtZmlsdCVFNSU5MSVCRCVFNCVCQiVBNCVFOCVCRiU5OCVFNSU4RSU5RkMtJUU3JUJDJTk2JUU4JUFGJTkxJUU1JTkwJThFJUU3JTlBJTg0JUU1JTg3JUJEJUU2JTk1JUIwJUU1JTkwJThELw==&#34;&gt;http://www.008ct.top/blog/2020/05/16 / 使用 c-filt 命令还原 C - 编译后的函数名 /&lt;/span&gt;&lt;/p&gt;
</content>
        <category term="pwn" />
        <category term="Linux" />
        <category term="二进制" />
        <updated>2023-09-19T12:05:56.000Z</updated>
    </entry>
    <entry>
        <id>https://vvwwvv.cn/2023/08/29/Linux/%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/</id>
        <title>Linux之系统调用</title>
        <link rel="alternate" href="https://vvwwvv.cn/2023/08/29/Linux/%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/"/>
        <content type="html">&lt;h1 id=&#34;一系统调用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#一系统调用&#34;&gt;#&lt;/a&gt; 一。系统调用&lt;/h1&gt;
&lt;p&gt;系统调用也是一个函数，但是系统调用运行在内核态，用户自定义的函数在用户态。而我们想要调用在内核态的指令（如关闭 / 打开中断，I/O 操作等），就需要利用系统调用作为接口，让用户进入内核态。&lt;/p&gt;
&lt;p&gt;系统调用是 Linux 内核提供的一段代码（也可以理解为函数）用来实现特定的功能，**32 位程序（x86 CPU）利用 int 0x80 ** 来进行系统调用，&lt;strong&gt;64 位程序 (X64 CPU) 提供调用 syscall&lt;/strong&gt; 来进行系统调用。Linux 内核提供用户空间程序与内核空间进行交互的接口（接口让用户态程序能受限访问硬件设备，比如申请系统资源，操作设备读写，创建新进程等），用户空间发起请求，内核空间负责进行执行，两者之间就需要接口作为桥梁，用户可以通过这种方式来进行系统调用，但是用户是受到限制的，不能直接执行内核代码，也不能随意进行修改系统，必须通过特定方式才能进行才能进入内核，也需要一定的权限才能使用接口。&lt;/p&gt;
&lt;p&gt;上述提到的用户空间与内核空间之间的桥梁就是系统调用 (syscall,system call), 其作为中间层用来连接用户态和内核态，这样做加强了一定的安全性，并且我们不需要关系内核是如和完成指令的直接调用需要的接口即可。当用户空间向系统空间发起系统调用时，Linux 系统便会进行软中断，进入内核态执行相应的操作。&lt;/p&gt;
&lt;p&gt;不同的系统调用执行的命令有着不同的系统调用号（32 位程序与 64 位程序也不尽相同）&lt;/p&gt;
&lt;h1 id=&#34;二32位程序系统调用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#二32位程序系统调用&#34;&gt;#&lt;/a&gt; 二.&lt;strong&gt;32 位程序&lt;/strong&gt;系统调用&lt;/h1&gt;
&lt;h2 id=&#34;1在32位系统x86-cpu中-linux通过了-int-0x80-中断来进入系统调用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1在32位系统x86-cpu中-linux通过了-int-0x80-中断来进入系统调用&#34;&gt;#&lt;/a&gt; 1. 在 32 位系统（x86 CPU）中，Linux 通过了 int 0x80 中断来进入系统调用，&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-C&#34;&gt;void system_call()
&amp;#123;
    ...
    // 变量 eax 代表 eax 寄存器的值
    syscall = sys_call_table[eax];
    eax = syscall();
    ...
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;sys_call_table 变量是一个数组（eax 寄存器的值作为其下标），数组的每一个元素代表着一个系统调用的入口（这让我想起了操作系统实验 x_x）, 其 C 代码如下&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-C&#34;&gt;long sys_call_table[] = &amp;#123;
   sys_ni_syscall,
   sys_exit,
   sys_fork,
   sys_read,
   sys_write,
   sys_open,
   sys_close,
   ...
&amp;#125;;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;用户调用系统调用时通过向eax寄存器写入对应命令的系统调用号这个号就是sys_call_table数组的下标system_call过程获取eax寄存器的值然后通过eax寄存器的值找到要调用的系统入口并调用系统调用完成后会把返回值保存到eax寄存器中&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#用户调用系统调用时通过向eax寄存器写入对应命令的系统调用号这个号就是sys_call_table数组的下标system_call过程获取eax寄存器的值然后通过eax寄存器的值找到要调用的系统入口并调用系统调用完成后会把返回值保存到eax寄存器中&#34;&gt;#&lt;/a&gt; 用户调用&lt;strong&gt;系统调用&lt;/strong&gt;时，通过向 eax 寄存器写入对应命令的系统调用号，这个号就是 sys_call_table 数组的下标，system_call 过程获取 eax 寄存器的值，然后通过 eax 寄存器的值找到要调用的系统入口并调用，系统调用完成后会把&lt;strong&gt;返回值保存到 eax 寄存器中&lt;/strong&gt;&lt;/h2&gt;
&lt;h2 id=&#34;用户进行系统调用时在eax寄存器写入对应的系统调用编号而用户态和内核态使用的栈不同系统调用是用户态调用然后进入系统调用后会转变成内核态要经历用户态与内核态的转化所以不能直接使用用户空间的栈来传递参数32位系统用户态内利用栈来传参64位仍然需要寄存器来传参-linux-使用寄存器来传递参数其顺序如下&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#用户进行系统调用时在eax寄存器写入对应的系统调用编号而用户态和内核态使用的栈不同系统调用是用户态调用然后进入系统调用后会转变成内核态要经历用户态与内核态的转化所以不能直接使用用户空间的栈来传递参数32位系统用户态内利用栈来传参64位仍然需要寄存器来传参-linux-使用寄存器来传递参数其顺序如下&#34;&gt;#&lt;/a&gt; 用户进行系统调用时，在 eax 寄存器写入对应的系统调用编号，而用户态和内核态使用的栈不同，系统调用是用户态调用然后进入系统调用后会转变成内核态，要经历用户态与内核态的转化，所以不能直接使用用户空间的栈来传递参数（32 位系统用户态内利用栈来传参，64 位仍然需要寄存器来传参）。Linux 使用寄存器来传递参数，其顺序如下：&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;第 1 个参数放置在 ebx  寄存器。&lt;/li&gt;
&lt;li&gt;第 2 个参数放置在 ecx  寄存器。&lt;/li&gt;
&lt;li&gt;第 3 个参数放置在 edx  寄存器。&lt;/li&gt;
&lt;li&gt;第 4 个参数放置在 esi   寄存器。&lt;/li&gt;
&lt;li&gt;第 5 个参数放置在 edi   寄存器。&lt;/li&gt;
&lt;li&gt;第 6 个参数放置在 ebp 寄存器。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;linux进入中断处理时就会将这些寄存器的值保存到内核栈中这样系统调用就能通过内核栈来获取参数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#linux进入中断处理时就会将这些寄存器的值保存到内核栈中这样系统调用就能通过内核栈来获取参数&#34;&gt;#&lt;/a&gt; Linux 进入中断处理时，就会将这些寄存器的值保存到内核栈中，这样系统调用就能通过内核栈来获取参数。&lt;/h2&gt;
&lt;p&gt;x86 架构系统调用漏洞利用参考: &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9iYnMua2FueHVlLmNvbS90aHJlYWQtMjQ4NjgyLmh0bQ==&#34;&gt;https://bbs.kanxue.com/thread-248682.htm&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;参考文章: &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3QuY3Nkbi5jbi9jcklycg==&#34;&gt;Linux 下 syscall 系统调用原理及实现&lt;/span&gt;&lt;/p&gt;
&lt;h1 id=&#34;三64位系统系统调用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#三64位系统系统调用&#34;&gt;#&lt;/a&gt; 三.&lt;strong&gt;64 位系统&lt;/strong&gt;系统调用&lt;/h1&gt;
&lt;h2 id=&#34;164位x64架构系统中linux通过syscall指令来进入系统调用其他原理与x86架构相似这里偷懒不再解释不过64位系统与32位系统寄存器不同这里传参的寄存器也不一样&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#164位x64架构系统中linux通过syscall指令来进入系统调用其他原理与x86架构相似这里偷懒不再解释不过64位系统与32位系统寄存器不同这里传参的寄存器也不一样&#34;&gt;#&lt;/a&gt; 1.64 位（x64 架构）系统中，Linux 通过&lt;strong&gt; syscall 指令&lt;/strong&gt;来进入系统调用，其他原理与 x86 架构相似，这里偷懒不再解释，不过 64 位系统与 32 位系统寄存器不同，这里传参的寄存器也不一样&lt;/h2&gt;
&lt;h2 id=&#34;传参方式-将系统调用号存入rax寄存器中然后从左到右依次将参数传入rdi-rsi-rdx寄存器中&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#传参方式-将系统调用号存入rax寄存器中然后从左到右依次将参数传入rdi-rsi-rdx寄存器中&#34;&gt;#&lt;/a&gt; 传参方式：将系统调用号存入 rax 寄存器中，然后从左到右依次将参数传入&lt;strong&gt; rdi、rsi、rdx 寄存器&lt;/strong&gt;中：&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;第 1 个参数放置在 rdi  寄存器。&lt;/li&gt;
&lt;li&gt;第 2 个参数放置在 rsi  寄存器。&lt;/li&gt;
&lt;li&gt;第 3 个参数放置在 rdx  寄存器。&lt;/li&gt;
&lt;li&gt;第 4 个参数放置在 rcx  寄存器。&lt;/li&gt;
&lt;li&gt;第 5 个参数放置在 r8  寄存器。&lt;/li&gt;
&lt;li&gt;第 6 个参数放置在 r9  寄存器。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;系统调用完成后把返回值保存到rax寄存器中&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#系统调用完成后把返回值保存到rax寄存器中&#34;&gt;#&lt;/a&gt; 系统调用完成后，把&lt;strong&gt;返回值保存到 rax 寄存器中&lt;/strong&gt;&lt;/h2&gt;
&lt;h1 id=&#34;四32位系统与64位系统-对比系统调用不同&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#四32位系统与64位系统-对比系统调用不同&#34;&gt;#&lt;/a&gt; 四.32 位系统与 64 位系统 &lt;strong&gt;对比系统调用不同&lt;/strong&gt;&lt;/h1&gt;
&lt;h2 id=&#34;1系统调用号不同&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1系统调用号不同&#34;&gt;#&lt;/a&gt; 1. 系统调用号不同&lt;/h2&gt;
&lt;h3 id=&#34;32位&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#32位&#34;&gt;#&lt;/a&gt; 32 位&lt;/h3&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#ifndef _ASM_X86_UNISTD_32_H&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define _ASM_X86_UNISTD_32_H 1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_restart_syscall 0&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_exit 1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_fork 2&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_read 3&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_write 4&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_open 5&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_close 6&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_waitpid 7&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_creat 8&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_link 9&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_unlink 10&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_execve 11&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_chdir 12&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_time 13&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_mknod 14&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_chmod 15&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_lchown 16&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_break 17&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_oldstat 18&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_lseek 19&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_getpid 20&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_mount 21&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_umount 22&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_setuid 23&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_getuid 24&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_stime 25&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_ptrace 26&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;31&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_alarm 27&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;32&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_oldfstat 28&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;33&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_pause 29&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;34&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_utime 30&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;35&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_stty 31&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;36&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_gtty 32&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;37&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_access 33&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;38&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_nice 34&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;39&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_ftime 35&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;40&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_sync 36&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;41&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_kill 37&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;42&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_rename 38&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;43&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_mkdir 39&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;44&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_rmdir 40&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;64位系统&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#64位系统&#34;&gt;#&lt;/a&gt; 64 位系统&lt;/h3&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#ifndef _ASM_X86_UNISTD_64_H&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define _ASM_X86_UNISTD_64_H 1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_read 0&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_write 1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_open 2&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_close 3&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_stat 4&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_fstat 5&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_lstat 6&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_poll 7&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_lseek 8&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_mmap 9&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_mprotect 10&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_munmap 11&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_brk 12&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_rt_sigaction 13&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_rt_sigprocmask 14&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_rt_sigreturn 15&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_ioctl 16&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_pread64 17&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_pwrite64 18&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_readv 19&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_writev 20&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_access 21&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_pipe 22&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_select 23&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_sched_yield 24&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_mremap 25&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_msync 26&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;31&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_mincore 27&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;32&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_madvise 28&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;33&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_shmget 29&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;34&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_shmat 30&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;35&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_shmctl 31&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;36&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_dup 32&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;37&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_dup2 33&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;38&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_pause 34&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;39&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_nanosleep 35&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;40&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_getitimer 36&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;41&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_alarm 37&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;42&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_setitimer 38&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;43&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_getpid 39&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;44&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_sendfile 40&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;45&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_socket 41&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;46&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_connect 42&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;47&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_accept 43&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;48&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_sendto 44&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;49&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_recvfrom 45&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;50&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_sendmsg 46&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;51&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_recvmsg 47&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;52&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_shutdown 48&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;53&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_bind 49&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;54&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_listen 50&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;55&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_getsockname 51&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;56&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_getpeername 52&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;57&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_socketpair 53&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;58&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_setsockopt 54&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;59&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_getsockopt 55&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;60&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_clone 56&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;61&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_fork 57&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;62&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_vfork 58&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;63&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_execve 59&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;64&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_exit 60&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;完整系统调用号:&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3QuY3Nkbi5jbi9kcnN5eQ==&#34;&gt;http://t.csdn.cn/drsyy&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;2寄存器传参不同上面已经说明过了&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2寄存器传参不同上面已经说明过了&#34;&gt;#&lt;/a&gt; 2. 寄存器传参不同 (上面已经说明过了)&lt;/h2&gt;
&lt;h2 id=&#34;3进行系统调用方式不同&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3进行系统调用方式不同&#34;&gt;#&lt;/a&gt; 3. 进行系统调用方式不同&lt;/h2&gt;
&lt;p&gt;32 位系统通过 ** int 0x80 ** 中断进入系统调用&lt;/p&gt;
&lt;p&gt;64 位系统通过 ** syscall ** 命令进入系统调用&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3QuY3Nkbi5jbi9KejZIbQ==&#34;&gt;http://t.csdn.cn/Jz6Hm&lt;/span&gt;&lt;/p&gt;
&lt;h1 id=&#34;五-open-write-read-close的系统调用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#五-open-write-read-close的系统调用&#34;&gt;#&lt;/a&gt; 五、open、write、read、close 的系统调用&lt;/h1&gt;
&lt;h2 id=&#34;1文件描述符&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1文件描述符&#34;&gt;#&lt;/a&gt; 1. 文件描述符&lt;/h2&gt;
&lt;p&gt;每一个进程都有一个与之相关的文件描述符，它们是一些小值整数，我们可以通过这些文件描述符来访问打开的文件&lt;/p&gt;
&lt;p&gt;一般地，一个程序开始运行时，会自动打开 3 个文件描述符：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;0——–标准输入 ———-stdin&lt;/li&gt;
&lt;li&gt;1——–标准输出 ———-stdout&lt;/li&gt;
&lt;li&gt;2——–标准错误 ———-stderr&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2write系统调用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2write系统调用&#34;&gt;#&lt;/a&gt; 2.write 系统调用&lt;/h2&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;span&gt;c&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&amp;lt;unistd.h&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token class-name&#34;&gt;size_t&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;write&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; flides&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;buf&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;size_t&lt;/span&gt; nbytes&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;write 系统调用，是把缓存区 buf 中的前 nbytes 字节写入到与文件描述符 &lt;code&gt;flides有关&lt;/code&gt; 的文件中，write 系统调用返回的是实际写入到文件中的 &lt;code&gt;字节数&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;span&gt;c&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;write&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;aaa&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; #标准输出流（&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;），将aaa输出到屏幕上&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;3read系统调用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3read系统调用&#34;&gt;#&lt;/a&gt; 3.read 系统调用&lt;/h2&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;span&gt;c&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&amp;lt;unistd.h&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token class-name&#34;&gt;size_t&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;read&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; flides&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;buf&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;size_t&lt;/span&gt; nbytes&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;read 系统调用，是从与文件描述符 flides 相关联的文件中读取前 nbytes 字节的内容，并且写入到数据区 buf 中。read 系统调用返回的是实际读入的 &lt;code&gt;字节数&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;4open系统调用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4open系统调用&#34;&gt;#&lt;/a&gt; 4.open 系统调用&lt;/h2&gt;
&lt;p&gt;两种系统调用方式&lt;/p&gt;
&lt;h3 id=&#34;第一种&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#第一种&#34;&gt;#&lt;/a&gt; 第一种&lt;/h3&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;span&gt;c&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&amp;lt;fcntl.h&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&amp;lt;sys/types.h&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&amp;lt;sys/stat.h&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;open&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;path&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; oflags&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;将准备打开的文件或是设备的名字作为参数 path 传给函数，oflags 用来指定文件访问模式。open 系统调用成功返回一个新的文件描述符，失败返回 - 1。&lt;/p&gt;
&lt;p&gt;其中，oflags 是由必需文件访问模式和可选模式一起构成的 (通过按位或 “|”)：&lt;/p&gt;
&lt;p&gt;必需部分：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;O_RDONLY------ 以只读方式打开&lt;/li&gt;
&lt;li&gt;O_WRONLY------ 以只写方式打开&lt;/li&gt;
&lt;li&gt;O_RDWR -------- 以读写方式打开&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;span&gt;c&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; f&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;open&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;file.c&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;O_RDONLY&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;// 以只读方式打开文件&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;第二种&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#第二种&#34;&gt;#&lt;/a&gt; 第二种&lt;/h3&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;span&gt;c&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&amp;lt;fcntl.h&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&amp;lt;sys/types.h&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&amp;lt;sys/stat.h&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;open&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;path&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; oflags&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;mode_t&lt;/span&gt; mode&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;在第一种调用方式上，加上了第三个参数 mode，主要是搭配 O_CREAT 使用，同样地，这个参数规定了属主、同组和其他人对文件的文件操作权限。&lt;/p&gt;
&lt;h2 id=&#34;5close系统调用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#5close系统调用&#34;&gt;#&lt;/a&gt; 5.close 系统调用&lt;/h2&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;span&gt;c&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&amp;lt;unistd.h&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;close&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; flides&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;终止文件描述符 flides 与其对应的文件间的联系，文件描述符被释放，可重新使用。&lt;/p&gt;
</content>
        <category term="pwn" />
        <category term="Linux" />
        <category term="二进制" />
        <updated>2023-08-29T12:15:56.000Z</updated>
    </entry>
    <entry>
        <id>https://vvwwvv.cn/2023/08/29/pwn/%E4%B8%93%E6%A0%8F/DynELF/</id>
        <title>DynELF</title>
        <link rel="alternate" href="https://vvwwvv.cn/2023/08/29/pwn/%E4%B8%93%E6%A0%8F/DynELF/"/>
        <content type="html">&lt;h1 id=&#34;概述&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#概述&#34;&gt;#&lt;/a&gt; 概述&lt;/h1&gt;
&lt;p&gt;由于在 pwn 题中有时候不给 libc，那么需要我们自己通过泄露函数地址来获得 libc 的基地址，而往往 LibcSearcher 无法准确的得到 libc 版本，那么我们就需要利用 DynELF，这是 pwntools 在早期版本就提供了一个解决方案 ——DynELF 类；利用方式与 ret2libc 类似，都是泄露函数地址来计算得到 libc 基址，通俗地讲，DynELF 就是通过程序漏洞泄露出任意地址内容，结合 ELF 文件的结构特征获取对应版本文件并计算对比出目标符号在内存中的地址&lt;/p&gt;
&lt;p&gt;并且：&lt;br /&gt;
write 函数是最理想的，因为 write 函数的特点在于其输出完全由其参数 size 决定，只要目标地址可读，size 填多少就输出多少，不会受到诸如‘\0’, ‘\n’之类的字符影响；而 puts, printf 函数会受到诸如‘\0’, ‘\n’之类的字符影响，在对数据的读取和处理有一定的难度&lt;/p&gt;
&lt;h1 id=&#34;使用方式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#使用方式&#34;&gt;#&lt;/a&gt; 使用方式&lt;/h1&gt;
&lt;p&gt;首先需要构造一个函数&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;span&gt;n&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;leak&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;addr&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;#addr 为想要获得的函数地址&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	payload_leak&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;b&#34;a&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;p32&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;write_plt&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;p32&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;main&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;p32&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;p32&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;addr&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;p32&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0x100&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	p&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;send&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;payload_leak&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	fun_addr&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;p&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;recv&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; fun_addr&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;然后需要实例化该函数（指向 ELF 文件的指针或者使用 ELF 类加载的目标文件至少提供一个作为可选参数）&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;span&gt;n&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;d&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;DynELF&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;lead&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;pointer&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;pointer_into_ELF_file&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; elf&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;ELFObject&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;实例化举例&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;span&gt;n&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;d&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;DynEF&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt; leak&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; elf&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;./pwn&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;接下来可以运用实例化对象来找到想要的地址（通过这个实例 d 的方法 lookup 来搜寻 libc 库函数）&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;span&gt;n&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;system&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;d&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;lookup&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;system&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;libc&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;read&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;d&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;lookup&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;read&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;libc&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#用 read 是因为程序里没有 &#39;/bin/sh&#39; 字符串时，还需要我们写入字符串，一般为 bbs 段内&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;最后的 payload 为&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;span&gt;n&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;p&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;sendline&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;a&#39;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;140&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; p32&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;read&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; p32&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;system&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; p32&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; p32&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;elf&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;bss&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; p32&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;p&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;sendline&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;/bin/sh\x00&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;#顺序为先执行 read 再到 system&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;需要查看 write 函数能不能在程序中实现任意地址的读取打印&lt;br /&gt;
可以时可以用 DynELF&lt;/p&gt;
&lt;p&gt;DynELF 泄露函数方法最方便的使用情况是程序中最好含有 write 函数等输出函数且可以多次反复调用，并且 DynELF 找的是字符串&lt;/p&gt;
&lt;p&gt;参考：&lt;br /&gt;
&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwODI3OTkwL2FydGljbGUvZGV0YWlscy84NjY4OTc2MA==&#34;&gt;https://blog.csdn.net/qq_40827990/article/details/86689760&lt;/span&gt;&lt;/p&gt;
</content>
        <category term="pwn" />
        <category term="二进制" />
        <updated>2023-08-29T12:15:56.000Z</updated>
    </entry>
    <entry>
        <id>https://vvwwvv.cn/2023/08/29/pwn/%E4%B8%93%E6%A0%8F/%E6%B2%99%E7%9B%92%E6%9C%BA%E5%88%B6/</id>
        <title>沙盒机制</title>
        <link rel="alternate" href="https://vvwwvv.cn/2023/08/29/pwn/%E4%B8%93%E6%A0%8F/%E6%B2%99%E7%9B%92%E6%9C%BA%E5%88%B6/"/>
        <content type="html">&lt;h1 id=&#34;概述&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#概述&#34;&gt;#&lt;/a&gt; 概述&lt;/h1&gt;
&lt;p&gt;沙盒机制也就是我们常说的沙箱，英文名 &lt;code&gt;sandbox&lt;/code&gt; ，是计算机领域的虚拟技术，常见于安全方向。一般说来，我们会将不受信任的软件放在沙箱中运行，一旦该软件有恶意行为，则禁止该程序的进一步运行，不会对真实系统造成任何危害。&lt;/p&gt;
&lt;p&gt;在 ctf 比赛中，pwn 题中的沙盒一般都会限制 &lt;code&gt;execve&lt;/code&gt;  的系统调用，这样一来 &lt;code&gt;one_gadget&lt;/code&gt;  和 &lt;code&gt;system&lt;/code&gt;  调用都不好使，只能采取 &lt;code&gt;open/read/write&lt;/code&gt;  的组合方式来读取 flag。当然有些题目可能还会将上面三个系统调用砍掉一个，进一步限制我们获取到 flag.&lt;/p&gt;
&lt;h1 id=&#34;1prctl函数调用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1prctl函数调用&#34;&gt;#&lt;/a&gt; 1.prctl 函数调用&lt;/h1&gt;
&lt;p&gt;prctl 是进程管理函数，沙箱规则通过 prctl 函数实现（也可以通过 seccomp 库函数实现），由它决定了哪些 &lt;code&gt;系统调用函数&lt;/code&gt; 能被调用哪些不能被调用&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;span&gt;c&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 函数原型&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&amp;lt;sys/prctl.h&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;prctl&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; option&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;long&lt;/span&gt; arg2&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;long&lt;/span&gt; arg3&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;long&lt;/span&gt; arg4&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;long&lt;/span&gt; arg5&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;option 选项有很多，剩下的参数也由 option 确定，这里介绍两个主要的 option&lt;br /&gt;
 &lt;code&gt;PR_SET_NO_NEW_PRIVS(38)&lt;/code&gt;  和  &lt;code&gt;PR_SET_SECCOMP(22)&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;span&gt;c&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;/* Get/set process seccomp mode */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;define&lt;/span&gt; &lt;span class=&#34;token macro-name&#34;&gt;PR_GET_SECCOMP&lt;/span&gt;      &lt;span class=&#34;token expression&#34;&gt;&lt;span class=&#34;token number&#34;&gt;21&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;define&lt;/span&gt; &lt;span class=&#34;token macro-name&#34;&gt;PR_GET_SECCOMP&lt;/span&gt;     &lt;span class=&#34;token expression&#34;&gt;&lt;span class=&#34;token number&#34;&gt;22&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;/*&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; * 用 22 时一般只允许 read、write、exit、sigereturn 函数执行&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; * If no_new_privs is set, then operations that grant new privileges (i.e.&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; * execve) will either fail or not grant them.  This affects suid/sgid,&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; * file capabilities, and LSMs.&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; *&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; * Operations that merely manipulate or drop existing privileges (setresuid,&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; * capset, etc.) will still work.  Drop those privileges if you want them gone.&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; *&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; * Changing LSM security domain is considered a new privilege.  So, for example,&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; * asking selinux for a specific new context (e.g. with runcon) will result&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; * in execve returning -EPERM.&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; *&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; * See Documentation/userspace-api/no_new_privs.rst for more details.&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;define&lt;/span&gt; &lt;span class=&#34;token macro-name&#34;&gt;PR_SET_NO_NEW_PRIVS&lt;/span&gt;    &lt;span class=&#34;token expression&#34;&gt;&lt;span class=&#34;token number&#34;&gt;38&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;define&lt;/span&gt; &lt;span class=&#34;token macro-name&#34;&gt;PR_GET_NO_NEW_PRIVS&lt;/span&gt;    &lt;span class=&#34;token expression&#34;&gt;&lt;span class=&#34;token number&#34;&gt;39&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 为 38 时一般禁用 execve&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;1.option 为 22 的情况 ( &lt;code&gt;#define PR_GET_SECCOMP     22&lt;/code&gt; )&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;第二个参数为1&lt;/code&gt; ，只允许调用 &lt;code&gt;read/write/_exit(not exit_group)/sigreturn&lt;/code&gt;  这几个 &lt;code&gt;syscall(系统调用)&lt;/code&gt; :  &lt;code&gt;prctl(22,1LL,&amp;amp;V1)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;第二个参数为 2，则为过滤模式，其中对 syscall 的限制通过参数 3 的结构体来自定义过滤规则:  &lt;code&gt;prctl(22, 2LL, &amp;amp;v1);&lt;/code&gt; (第二个参数为 2 时，则会利用 &lt;code&gt;参数3&lt;/code&gt;  的指向的 &lt;code&gt;sock_fprog结构体&lt;/code&gt;  的成员指向的 &lt;code&gt;sock_filter&lt;/code&gt;  定义的规则来进行过滤 &lt;code&gt;任意系统调用和系统调用参数&lt;/code&gt; ，通过这种方式我们可以自己定义想要过滤的系统调用)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2.option 为 38 的情况 ( &lt;code&gt;#define PR_SET_NO_NEW_PRIVS    38&lt;/code&gt; )&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;第二个参数设置为1&lt;/code&gt; ，则禁用 execve 系统调用且可以通过 fork () 函数和 clone () 函数 &lt;code&gt;继承给子进程&lt;/code&gt; :  &lt;code&gt;prctl(38, 1LL, 0LL, 0LL, 0LL);&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;第二个参数设置为2&lt;/code&gt; ，则为过滤模式，其中对 syscall 的限制通过参数 3 的结构体来自定义过滤规则&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;bpf过滤规则伯克利封装包过滤&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#bpf过滤规则伯克利封装包过滤&#34;&gt;#&lt;/a&gt; BPF 过滤规则（伯克利封装包过滤）&lt;/h2&gt;
&lt;p&gt;上面提到的 &lt;code&gt;PT_SET_SECCOMP&lt;/code&gt;  这个参数，后面接到的第一个参数，就是它设置的模式，第三个参数，指向 &lt;code&gt;sock_fprog结构体&lt;/code&gt; ，sock_fprog 结构体中，又有指向 &lt;code&gt;sock_filter结构体&lt;/code&gt; 的指针 ( &lt;code&gt;struct sock_filter *filter; /*指向包含struct sock_filter的结构体数组指针*/&lt;/code&gt; )，sock_filter 结构体这里，就是我们要设置 &lt;code&gt;规则&lt;/code&gt; 的地方&lt;/p&gt;
&lt;p&gt;这里利用别人定义的 &lt;code&gt;sock_filter&lt;/code&gt; :&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;span&gt;c&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;include&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&amp;lt;stdio.h&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;include&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&amp;lt;fcntl.h&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;include&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&amp;lt;unistd.h&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;include&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&amp;lt;stddef.h&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;include&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&amp;lt;linux/seccomp.h&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;include&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&amp;lt;linux/filter.h&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;include&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&amp;lt;sys/prctl.h&gt;&lt;/span&gt;    &lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;include&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&amp;lt;linux/bpf.h&gt;&lt;/span&gt;             &lt;span class=&#34;token comment&#34;&gt;//off 和 imm 都是有符号类型，编码信息定义在内核头文件 linux/bpf.h&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;include&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&amp;lt;sys/types.h&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;sock_filter&lt;/span&gt; filter&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;// 结构体数组&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token function&#34;&gt;BPF_STMT&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;BPF_LD&lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt;BPF_W&lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt;BPF_ABS&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;   &lt;span class=&#34;token comment&#34;&gt;// 从第 0 个字节开始，传送 4 个字节&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token function&#34;&gt;BPF_JUMP&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;BPF_JMP&lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt;BPF_JEQ&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;59&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 比较是否为 59（execve 的系统调用号），是就跳过下一行（进入到下面的异常处理），如果不是，就执行下一行，第三个参数表示执行正确的指令跳转，第四个参数表示执行错误的指令跳转&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token function&#34;&gt;BPF_JUMP&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;BPF_JMP&lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt;BPF_JGE&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;//      BPF_STMP(BPF_RET+BPF_K,SECCOMP_RET_KILL),&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;//        杀死一个进程&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;//        BPF_STMP(BPF_RET+BPF_K,SECCOMP_RET_TRACE),&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;//        父进程追踪子进程，具体没太搞清楚&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                 &lt;span class=&#34;token function&#34;&gt;BPF_STMT&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;BPF_RET&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;BPF_K&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;SECCOMP_RET_ERRNO&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;//        异常处理&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token function&#34;&gt;BPF_STMT&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;BPF_RET&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;BPF_K&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;SECCOMP_RET_ALLOW&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;//        这里表示系统调用如果正常，允许系统调用&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;sock_fprog&lt;/span&gt; prog&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;len&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;sizeof&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;filter&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;sizeof&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;sock_filter&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;filter&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;filter&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token function&#34;&gt;prctl&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;PR_SET_NO_NEW_PRIVS&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;31&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token function&#34;&gt;prctl&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;PR_SET_SECCOMP&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;SECCOMP_MODE_FILTER&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;prog&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;// 第一个参数是进行什么设置，第二个参数是设置的过滤模式，第三个参数是设置的过滤规则&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;32&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token function&#34;&gt;puts&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;123&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;33&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;34&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;设置了 sock_filter 结构体数组。这里为什么是一个结构体数组呢？&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;结构体数组：
数组中的每个元素都是一个结构体
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;因为我们看到里面有 BPF_STMT 和 BPF_JMP 的宏定义，其实 BPF_STMT 和 BPF_JMP 都是条件编译后 &lt;code&gt;赋值&lt;/code&gt; 的 sock_filter 结构体&lt;/p&gt;
&lt;p&gt;sock_filer 结构体:&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;span&gt;c&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;sock_filter&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;            &lt;span class=&#34;token comment&#34;&gt;/* Filter block */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    __u16 code&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;                 &lt;span class=&#34;token comment&#34;&gt;/* Actual filter code,bpf 指令码&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    __u8  jt;                   /* Jump true */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    __u8  jf&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;                   &lt;span class=&#34;token comment&#34;&gt;/* Jump false */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    __u32 k&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;                    &lt;span class=&#34;token comment&#34;&gt;/* Generic multiuse field */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//seccomp-data 结构体记录当前正在进行 bpf 规则检查的系统调用信息&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;seccomp_data&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; nr&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;// 系统调用号&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    __u32 arch&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;// 调用架构&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    __u64 instruction_pointer&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;//CPU 指令指针&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    __u64 argv&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;// 寄存器的值，x86 下是 ebx，exc,edx,edi,ebp;x64 下是 rdi,rsi,rdx,r10,r8,r9&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vTDBnNG4tYmxvZy9wLzEyODM5MTcxLmh0bWw=&#34;&gt;https://www.cnblogs.com/L0g4n-blog/p/12839171.html&lt;/span&gt;&lt;/p&gt;
&lt;h1 id=&#34;2seccomp库函数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2seccomp库函数&#34;&gt;#&lt;/a&gt; 2.seccomp 库函数&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;SCMP_ACT_ALLOW(0x7fff0000U) 黑名单外的进程可以被执行（黑名单内的不能执行）
SCMP_ACT_KILL( 0x00000000U) 白名单外的进程被杀死
&lt;/code&gt;&lt;/pre&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;span&gt;c&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;__int64 &lt;span class=&#34;token function&#34;&gt;sandbox&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token comment&#34;&gt;// 两个重要的宏，SCMP_ACT_ALLOW (0x7fff0000U) SCMP_ACT_KILL ( 0x00000000U)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token comment&#34;&gt;//seccomp_init 初始化，参数为 0 表示白名单模式，即没有匹配到规则的系统调用都会杀死进程，默认不允许所有的 syscall&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token comment&#34;&gt;// 参数为 0x7fff0000U 则为黑名单模式，在名单里的会被杀死&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  v1 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;seccomp_init&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0LL&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;!&lt;/span&gt;v1 &lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;    &lt;span class=&#34;token comment&#34;&gt;// 初始化失败，v1&amp;lt;=0&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token function&#34;&gt;puts&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;seccomp error&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token function&#34;&gt;exit&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token comment&#34;&gt;//seccomp_rule_add 添加规则&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token comment&#34;&gt;//v1 对应上面初始化的返回值&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token comment&#34;&gt;// 0x7fff0000 即对应宏 SCMP_ACT_ALLOW（黑名单）&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token comment&#34;&gt;// 第三个参数代表对应的系统调用号，0--&gt;read/1--&gt;write/2--&gt;open/60--&gt;exit&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token comment&#34;&gt;// 第四个参数表示是否需要对对应系统调用的参数做出限制以及指示做出限制的个数，传 0 不做任何限制&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token function&#34;&gt;seccomp_rule_add&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;v1&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0x7FFF0000LL&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2LL&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0LL&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token function&#34;&gt;seccomp_rule_add&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;v1&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0x7FFF0000LL&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0LL&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0LL&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token function&#34;&gt;seccomp_rule_add&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;v1&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0x7FFF0000LL&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1LL&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0LL&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token function&#34;&gt;seccomp_rule_add&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;v1&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0x7FFF0000LL&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;60LL&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0LL&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token function&#34;&gt;seccomp_rule_add&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;v1&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0x7FFF0000LL&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;231LL&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0LL&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token comment&#34;&gt;// seccomp_load - Load the current seccomp filter into the kernel&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;seccomp_load&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;v1&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;//load 成功则返回 0，这里 load 失败会执行 if 内部函数&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  	&lt;span class=&#34;token comment&#34;&gt;// seccomp_release - Release the seccomp filter state&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  	&lt;span class=&#34;token comment&#34;&gt;// 但对已经 load 的过滤规则不影响&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token function&#34;&gt;seccomp_release&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;v1&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;31&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token function&#34;&gt;puts&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;seccomp error&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;32&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token function&#34;&gt;exit&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;33&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;34&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;seccomp_release&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;v1&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;  释放&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;35&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0E5NTE4NjA1NTUvYXJ0aWNsZS9kZXRhaWxzLzExNjczODY3Ng==&#34;&gt;https://blog.csdn.net/A951860555/article/details/116738676&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;这里给出关于 &lt;code&gt;seccomp_load&lt;/code&gt;  的定义：&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;span&gt;c&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&amp;lt;seccomp.h&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; scmp_filter_ctx&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;seccomp_load&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;scmp_filter_ctx ctx&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;Link with &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;lseccomp&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;DESCRIPTION：&lt;/p&gt;
&lt;p&gt;Loads the seccomp filter provided by ctx into the kernel; if the function succeeds the new seccomp filter will be active when the  &lt;code&gt;function returns&lt;/code&gt; .  函数返回时过滤开始运行【seccomp_load 是应用过滤，seccomp_reset 是解除过滤。】&lt;/p&gt;
&lt;p&gt;返回值：Returns zero on success or one of the following error codes on failure；成功时返回  &lt;code&gt;0&lt;/code&gt; ，失败返回对应错误代码&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9tYW4uYXJjaGxpbnV4Lm9yZy9tYW4vc2VjY29tcF9sb2FkLjMuZW4jREVTQ1JJUFRJT04=&#34;&gt;https://man.archlinux.org/man/seccomp_load.3.en#DESCRIPTION&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;seccomp_rule_add&lt;/code&gt;  是添加一条规则&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;span&gt;c&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;seccomp_rule_add&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;scmp_filter_ctx ctx&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;             &lt;span class=&#34;token class-name&#34;&gt;uint32_t&lt;/span&gt; action&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; syscall&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; arg_cnt&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;arg_cnt 表明是否需要对对应系统调用的参数做出限制以及指示做出限制的个数，如果仅仅需要允许或者禁止所有某个系统调用，arg_cnt 直接传入 0 即可，seccomp_rule_add (ctx, SCMP_ACT_KILL, SCMP_SYS (execve), 0) 即禁用 execve，不管其参数如何。&lt;/p&gt;
&lt;h1 id=&#34;3使用seccomp-tools&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3使用seccomp-tools&#34;&gt;#&lt;/a&gt; 3. 使用 seccomp-tools&lt;/h1&gt;
&lt;p&gt;命令：&lt;br /&gt;
seccomp-tools dump ./pwn&lt;/p&gt;
&lt;p&gt;此处用 buuctf 例题  &lt;code&gt;orw&lt;/code&gt;  说明：&lt;br /&gt;
&lt;img data-src=&#34;https://z1.ax1x.com/2023/09/23/pPTmaJx.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h1 id=&#34;4绕过&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4绕过&#34;&gt;#&lt;/a&gt; 4. 绕过&lt;/h1&gt;
&lt;p&gt;一般运用 orw 函数的方式进行读取 flag&lt;/p&gt;
&lt;h1 id=&#34;5注意&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#5注意&#34;&gt;#&lt;/a&gt; 5. 注意&lt;/h1&gt;
&lt;p&gt;当使用了 prctl (4, 0) 时&lt;/p&gt;
&lt;p&gt;4 对应的宏是 &lt;code&gt;PR_SET_DUMPABLE&lt;/code&gt; ，第二个参数为 0 的话则不能被 dump，为 1 可以被 dump。换句话说，该程序我们无法使用 seccomp-tools dump ./pwn 来查看其系统调用情况，只能靠阅读代码分析。同时在进行 gdb 调试时，执行到 prctl (4, 0) 这行时程序也会被终止。不过只要以 root 身份执行，那么 &lt;code&gt;secccomp-tools&lt;/code&gt;  和 gdb 调试都没问题，估计应该是限制了一般身份用户的 dump 行为&lt;/p&gt;
&lt;p&gt;参考：&lt;br /&gt;
&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8zNjMxNzQ1NjE=&#34;&gt;https://zhuanlan.zhihu.com/p/363174561&lt;/span&gt;&lt;/p&gt;
</content>
        <category term="pwn" />
        <category term="二进制" />
        <updated>2023-08-29T12:15:56.000Z</updated>
    </entry>
    <entry>
        <id>https://vvwwvv.cn/2023/08/24/pwn/%E5%A0%86/%E5%A0%86/</id>
        <title>堆</title>
        <link rel="alternate" href="https://vvwwvv.cn/2023/08/24/pwn/%E5%A0%86/%E5%A0%86/"/>
        <content type="html">&lt;p&gt;chunk 的 p 位设为 1 即上一个 chunk 被使用并且上一个 chunk 可以使用 pre_size 的空间  （用来储存前一个物理相邻的 chunk 的数据 ，（两个都空闲才合并）&lt;/p&gt;
</content>
        <category term="pwn" />
        <category term="Linux" />
        <category term="二进制" />
        <updated>2023-08-24T12:15:56.000Z</updated>
    </entry>
</feed>
