{
    "version": "https://jsonfeed.org/version/1",
    "title": "0110 0011 0111 1001 0110 0010 • All posts by \"large bin attack\" category",
    "description": "",
    "home_page_url": "https://vvwwvv.cn",
    "items": [
        {
            "id": "https://vvwwvv.cn/2023/10/05/Linux/large_bin_attack/",
            "url": "https://vvwwvv.cn/2023/10/05/Linux/large_bin_attack/",
            "title": "large bin attack（为house利用系列打下基础）",
            "date_published": "2023-10-05T06:15:56.000Z",
            "content_html": "<h1 id=\"1large-bin\"><a class=\"anchor\" href=\"#1large-bin\">#</a> 1.Large bin</h1>\n<h2 id=\"1\"><a class=\"anchor\" href=\"#1\">#</a> 1.</h2>\n<p>在释放堆块时，想要进入 <code>large bin</code>  的堆块需要大于等于 <code>512</code> （1024）字节【用户空间需要 <code>大于等于</code>  0x3F0，用户空间小于 0x3F0 进入 <code>small bin</code> 】</p>\n<p>而 <code>largebin</code>  还要考虑 <code>fd_nextsiez</code>  和 <code>bk_nextsize</code> ，这两个是因为，在 largebin 中，会按着相同大小的 chunk 归到一起，不同 chunk 组直接的联系就需要 <code>fd_nextsize</code>  和 <code>bk_nextsize</code> 。这里除了每组的第一个 chunk ，其他的 <code>fd_nextsize</code>  和 <code>bk_nextsize</code>  都为 0</p>\n<pre><code>fd_nextsize指向了下一组的第一个chunk\nbk_nextsize指向了上一组的第一个chunk\n</code></pre>\n<h2 id=\"2结构\"><a class=\"anchor\" href=\"#2结构\">#</a> 2. 结构：</h2>\n<p><code>large chunk</code>  在 fd 的遍历顺序为从大到小【图中 <code>szie</code>  大小为  <code>1&gt;2&gt;3</code> ，相同组号的 size 相同（1-1，1-2，1-3 相同）】<br />\n<img data-src=\"https://z1.ax1x.com/2023/10/05/pPXJaEd.png\" alt=\"\" /></p>\n<p>【自己画完才发现别人的（自己画的应该有误）】</p>\n<p>原地址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vaHlxMi9wLzE1OTk4NTcwLmh0bWw=\">https://www.cnblogs.com/hyq2/p/15998570.html</span></p>\n<p><img data-src=\"https://img2022.cnblogs.com/blog/2154691/202203/2154691-20220312214138636-690454707.png\" alt=\"\" /></p>\n<h2 id=\"3插入顺序\"><a class=\"anchor\" href=\"#3插入顺序\">#</a> 3. 插入顺序：</h2>\n<ol>\n<li>插入位置按照大小，从大到小排序（小的连接 large bin 块）</li>\n<li>大小相同按照 free 时间排序</li>\n<li>多个大小相同的堆块，只有首堆块的 fd_nextsize 和 bk_nextsize 会指向其他堆块，后面的堆块的 fd_nextsize 和 bk_nextsize 均为 0</li>\n<li>size 最大的 chunk 的 bk_nextsize 指向最小的 chunk，size 最小的 chunk 的 fd_nextsize 指向最大的 chunk</li>\n</ol>\n<h1 id=\"2原理\"><a class=\"anchor\" href=\"#2原理\">#</a> 2. 原理：</h1>\n<h2 id=\"1我自己的理解\"><a class=\"anchor\" href=\"#1我自己的理解\">#</a> 1. 我自己的理解：</h2>\n<p>由于在 largebin 中插入 chunk 时会按照大小排序，这就给了我们机会去在比大小时作手脚；</p>\n<h3 id=\"在glibc223中mallocc文件中比较过程如下\"><a class=\"anchor\" href=\"#在glibc223中mallocc文件中比较过程如下\">#</a> 在 <code>glibc2.23</code>  中 <code>malloc.c</code>  文件中，比较过程如下：</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span> size<span class=\"token operator\">&lt;</span> fwd<span class=\"token operator\">-></span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 这里 size 为新插入的，fwd 为已经在 largebin 中的 前一个刚释放  的 chunk</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tfwd<span class=\"token operator\">=</span>fwd<span class=\"token operator\">-></span>fd_nextsize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>fwd<span class=\"token operator\">-></span>size <span class=\"token operator\">&amp;</span> NON_MAIN_ARENA<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在 largebin 中的 chunk 如果 <code>index相同</code> 的情况下，是按照从小到大的顺序排列的，也就是说在 index 相同的情况下 size 越小的 chunk，越接近 largebin (fd 指向 largebin, 与图对应)，上面的代码是比较 <code>新插入</code> 的 chunk 的 size (size) 是否 <code>小于</code> 上一个刚释放进入 <code>largebin</code>  中的 chunk 的 size (fwd_size) 的过程</p>\n<p>当小于成立时，执行 while 中的流程；不成立时，判断：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span> size <span class=\"token operator\">==</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span> fwd<span class=\"token operator\">-></span>size<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">//Always insert in the second position</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tfwd<span class=\"token operator\">=</span>fwd<span class=\"token operator\">-></span>fd<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>上面的这个对我们来说无法利用，接下来判断大于时：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t  victim<span class=\"token operator\">-></span>fd_nextsize <span class=\"token operator\">=</span> fwd<span class=\"token punctuation\">;</span>                     <span class=\"token comment\">//victim 是当前新插入的 chunk</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t  victim<span class=\"token operator\">-></span>bk_nextsize <span class=\"token operator\">=</span> fwd<span class=\"token operator\">-></span>bk_nextsize<span class=\"token punctuation\">;</span> <span class=\"token comment\">//fwd 是前一个释放的 chunk</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t  fwd<span class=\"token operator\">-></span>bk_nextsize <span class=\"token operator\">=</span> victim<span class=\"token punctuation\">;</span><span class=\"token comment\">// 将前一个释放的 bk_nextsize 指向新的 chunk</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t  victim<span class=\"token operator\">-></span>bk_nextsize<span class=\"token operator\">-></span>fd_nextsize <span class=\"token operator\">=</span> victim<span class=\"token punctuation\">;</span><span class=\"token comment\">// 修改新的 chunk 的上一个大小不相同的 chunk 的 fd_nextsize 指向自己</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tbck <span class=\"token operator\">=</span> fwd <span class=\"token operator\">-></span>bk<span class=\"token punctuation\">;</span> <span class=\"token comment\">//bck 为上一个释放的 chunk 的 bk</span></pre></td></tr></table></figure><p>上面这一段我们可以进行利用，当我们对 fwd 的内容进行修改后，改变其 <code>bk</code>  和 <code>bk_nextsize</code>  的指向然后在执行上面这一段代码就会将一些值改变：</p>\n<p>1. 选择两个地址为我们想要修改的 <code>值</code> 的地址：</p>\n<pre><code>这里选择stack1和stack2\n</code></pre>\n<p>2. 然后修改 fwd 的值 (fwd 为上一个释放的 <code>large_chunk</code> ):</p>\n<p><img data-src=\"https://z1.ax1x.com/2023/10/07/pPjaDqf.png\" alt=\"\" /></p>\n<p>3. 修改完后就会变成如下情况：</p>\n<p><img data-src=\"https://z1.ax1x.com/2023/10/07/pPjaoZT.png\" alt=\"\" /></p>\n<p>4. 再当执行上面判断大小结果为大于的时候的代码时：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t  victim<span class=\"token operator\">-></span>fd_nextsize <span class=\"token operator\">=</span> fwd<span class=\"token punctuation\">;</span>                     <span class=\"token comment\">//victim 是当前新插入的 chunk</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t  victim<span class=\"token operator\">-></span>bk_nextsize <span class=\"token operator\">=</span> fwd<span class=\"token operator\">-></span>bk_nextsize<span class=\"token punctuation\">;</span> <span class=\"token comment\">//fwd 是前一个释放的 chunk</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t  fwd<span class=\"token operator\">-></span>bk_nextsize <span class=\"token operator\">=</span> victim<span class=\"token punctuation\">;</span><span class=\"token comment\">// 将前一个释放的 bk_nextsize 指向新的 chunk</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t  victim<span class=\"token operator\">-></span>bk_nextsize<span class=\"token operator\">-></span>fd_nextsize <span class=\"token operator\">=</span> victim<span class=\"token punctuation\">;</span><span class=\"token comment\">// 修改新的 chunk 的上一个大小不相同的 chunk 的 fd_nextsize 指向自己</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tbck <span class=\"token operator\">=</span> fwd <span class=\"token operator\">-></span>bk<span class=\"token punctuation\">;</span> <span class=\"token comment\">//bck 为上一个释放的 chunk 的 bk</span></pre></td></tr></table></figure><p>将 victim 插入时发现</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>victim<span class=\"token operator\">-></span>bk_nextsize<span class=\"token operator\">-></span>fd_nextsize <span class=\"token operator\">=</span> victim<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">//victim-bk_nextsize 已经指向了 fake_chunk2</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 这里就将 fake_chunk2 的 fd_nextsize 的值变为了 victim 的地址，也就将 stack2 原来的值变为了 victim 的地址</span></pre></td></tr></table></figure><p>5. 修改 stack1 的值</p>\n<p>在执行完对 <code>victim</code>  和 <code>fwd</code>  的 <code>fd_nextsize</code>  和 <code>bk_nextsize</code>  的修改后，会继续对他俩的 <code>fd</code>  和 <code>bk</code>  修改</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">mark_bin</span><span class=\"token punctuation\">(</span>av<span class=\"token punctuation\">,</span>victim_index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>victim<span class=\"token operator\">-></span>bk <span class=\"token operator\">=</span> bck<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>victim<span class=\"token operator\">-></span>fd <span class=\"token operator\">=</span> fwd<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>fwd<span class=\"token operator\">-></span>bk <span class=\"token operator\">=</span> victim<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>bck<span class=\"token operator\">-></span>fd <span class=\"token operator\">=</span> victim<span class=\"token punctuation\">;</span>  <span class=\"token comment\">//bck 为 fwd 的 bk 指针</span></pre></td></tr></table></figure><p>这里会发现：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>bck<span class=\"token operator\">-></span>fd <span class=\"token operator\">=</span> victim<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 这里 bck = fwd -> bk</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 也就等于 fwd->bk->fd = victim</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 就将 fack_chunk1 的 stack（fd）的值改为了 victim 的地址</span></pre></td></tr></table></figure><p>最后我们就将</p>\n<p>fake_chunk1 的 fd（stack1）的值改为了 victim 的地址<br />\n fake_chunk2 的 fd（stack2）的值改为了 victim 的地址</p>\n<h1 id=\"large-bin的利用条件\"><a class=\"anchor\" href=\"#large-bin的利用条件\">#</a> Large bin 的利用条件：</h1>\n<ul>\n<li>可以修改一个 <code>large bin chunk</code>  的 data 域（fwd 的 bk 和 bk_nextsize）</li>\n<li>从 <code>unsorted bin</code>  中来的 <code>large bin chunk</code> （victim）要紧跟在 <code>被构造</code> 过的 chunk (fwd) 后面【为了判断大小时能够插入到正确的地方】</li>\n</ul>\n<h1 id=\"在mallocc中从unsorted-bin去将chunk放入对应的binlarge-bin的完整代码\"><a class=\"anchor\" href=\"#在mallocc中从unsorted-bin去将chunk放入对应的binlarge-bin的完整代码\">#</a> 在 malloc.c 中从 unsorted bin 去将 chunk 放入对应的 bin（large bin）的完整代码：</h1>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/* remove from unsorted list */</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>          <span class=\"token function\">unsorted_chunks</span> <span class=\"token punctuation\">(</span>av<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>bk <span class=\"token operator\">=</span> bck<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>          bck<span class=\"token operator\">-></span>fd <span class=\"token operator\">=</span> <span class=\"token function\">unsorted_chunks</span> <span class=\"token punctuation\">(</span>av<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>          <span class=\"token comment\">/* Take now instead of binning if exact fit */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>size <span class=\"token operator\">==</span> nb<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>              <span class=\"token function\">set_inuse_bit_at_offset</span> <span class=\"token punctuation\">(</span>victim<span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>              <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>av <span class=\"token operator\">!=</span> <span class=\"token operator\">&amp;</span>main_arena<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                victim<span class=\"token operator\">-></span>size <span class=\"token operator\">|=</span> NON_MAIN_ARENA<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>              <span class=\"token function\">check_malloced_chunk</span> <span class=\"token punctuation\">(</span>av<span class=\"token punctuation\">,</span> victim<span class=\"token punctuation\">,</span> nb<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>              <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token function\">chunk2mem</span> <span class=\"token punctuation\">(</span>victim<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>              <span class=\"token function\">alloc_perturb</span> <span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">,</span> bytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>              <span class=\"token keyword\">return</span> p<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>          <span class=\"token comment\">/* place chunk in bin */</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">in_smallbin_range</span> <span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>              victim_index <span class=\"token operator\">=</span> <span class=\"token function\">smallbin_index</span> <span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>              bck <span class=\"token operator\">=</span> <span class=\"token function\">bin_at</span> <span class=\"token punctuation\">(</span>av<span class=\"token punctuation\">,</span> victim_index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>              fwd <span class=\"token operator\">=</span> bck<span class=\"token operator\">-></span>fd<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>          <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>              victim_index <span class=\"token operator\">=</span> <span class=\"token function\">largebin_index</span> <span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>              bck <span class=\"token operator\">=</span> <span class=\"token function\">bin_at</span> <span class=\"token punctuation\">(</span>av<span class=\"token punctuation\">,</span> victim_index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>              fwd <span class=\"token operator\">=</span> bck<span class=\"token operator\">-></span>fd<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>              <span class=\"token comment\">/* maintain large bins in sorted order */</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>              <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fwd <span class=\"token operator\">!=</span> bck<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                  <span class=\"token comment\">/* Or with inuse bit to speed comparisons */</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                  size <span class=\"token operator\">|=</span> PREV_INUSE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                  <span class=\"token comment\">/* if smaller than smallest, bypass loop below */</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                  <span class=\"token function\">assert</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>bck<span class=\"token operator\">-></span>bk<span class=\"token operator\">-></span>size <span class=\"token operator\">&amp;</span> NON_MAIN_ARENA<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>bck<span class=\"token operator\">-></span>bk<span class=\"token operator\">-></span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>                      fwd <span class=\"token operator\">=</span> bck<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                      bck <span class=\"token operator\">=</span> bck<span class=\"token operator\">-></span>bk<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>                      victim<span class=\"token operator\">-></span>fd_nextsize <span class=\"token operator\">=</span> fwd<span class=\"token operator\">-></span>fd<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                      victim<span class=\"token operator\">-></span>bk_nextsize <span class=\"token operator\">=</span> fwd<span class=\"token operator\">-></span>fd<span class=\"token operator\">-></span>bk_nextsize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>                      fwd<span class=\"token operator\">-></span>fd<span class=\"token operator\">-></span>bk_nextsize <span class=\"token operator\">=</span> victim<span class=\"token operator\">-></span>bk_nextsize<span class=\"token operator\">-></span>fd_nextsize <span class=\"token operator\">=</span> victim<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>                  <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>                    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>                      <span class=\"token function\">assert</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>fwd<span class=\"token operator\">-></span>size <span class=\"token operator\">&amp;</span> NON_MAIN_ARENA<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>                      <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span> size <span class=\"token operator\">&lt;</span> fwd<span class=\"token operator\">-></span>size<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>                        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>                          fwd <span class=\"token operator\">=</span> fwd<span class=\"token operator\">-></span>fd_nextsize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>                          <span class=\"token function\">assert</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>fwd<span class=\"token operator\">-></span>size <span class=\"token operator\">&amp;</span> NON_MAIN_ARENA<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>                        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>                      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span> size <span class=\"token operator\">==</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span> fwd<span class=\"token operator\">-></span>size<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>                        <span class=\"token comment\">/* Always insert in the second position.  */</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>                        fwd <span class=\"token operator\">=</span> fwd<span class=\"token operator\">-></span>fd<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>                      <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>                        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>                          victim<span class=\"token operator\">-></span>fd_nextsize <span class=\"token operator\">=</span> fwd<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>                          victim<span class=\"token operator\">-></span>bk_nextsize <span class=\"token operator\">=</span> fwd<span class=\"token operator\">-></span>bk_nextsize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>                          fwd<span class=\"token operator\">-></span>bk_nextsize <span class=\"token operator\">=</span> victim<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>                          victim<span class=\"token operator\">-></span>bk_nextsize<span class=\"token operator\">-></span>fd_nextsize <span class=\"token operator\">=</span> victim<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>                        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>                      bck <span class=\"token operator\">=</span> fwd<span class=\"token operator\">-></span>bk<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>              <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>                victim<span class=\"token operator\">-></span>fd_nextsize <span class=\"token operator\">=</span> victim<span class=\"token operator\">-></span>bk_nextsize <span class=\"token operator\">=</span> victim<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>          <span class=\"token function\">mark_bin</span> <span class=\"token punctuation\">(</span>av<span class=\"token punctuation\">,</span> victim_index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>          victim<span class=\"token operator\">-></span>bk <span class=\"token operator\">=</span> bck<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>          victim<span class=\"token operator\">-></span>fd <span class=\"token operator\">=</span> fwd<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>          fwd<span class=\"token operator\">-></span>bk <span class=\"token operator\">=</span> victim<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>          bck<span class=\"token operator\">-></span>fd <span class=\"token operator\">=</span> victim<span class=\"token punctuation\">;</span></pre></td></tr></table></figure>",
            "tags": [
                "pwn",
                "Linux"
            ]
        }
    ]
}