{
    "version": "https://jsonfeed.org/version/1",
    "title": "Blog • All posts by \"整数溢出\" category",
    "description": "",
    "home_page_url": "https://vvwwvv.cn",
    "items": [
        {
            "id": "https://vvwwvv.cn/2023/09/25/pwn/%E4%B8%93%E6%A0%8F/%E6%95%B4%E6%95%B0%E5%AE%89%E5%85%A8%E6%BC%8F%E6%B4%9E/",
            "url": "https://vvwwvv.cn/2023/09/25/pwn/%E4%B8%93%E6%A0%8F/%E6%95%B4%E6%95%B0%E5%AE%89%E5%85%A8%E6%BC%8F%E6%B4%9E/",
            "title": "整数安全漏洞",
            "date_published": "2023-09-25T12:15:56.000Z",
            "content_html": "<p>内容参考了《CTF 竞赛权威指南 Pwn 篇》</p>\n<h1 id=\"一-计算机中的整数\"><a class=\"anchor\" href=\"#一-计算机中的整数\">#</a> 一、计算机中的整数</h1>\n<p>计算机中整数通常分为两种，一种为有符号整数，另一种为无符号整数</p>\n<p>c 数据类型</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//32 位                      最小值～最大值  </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token keyword\">signed</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">char</span>            <span class=\"token operator\">-</span><span class=\"token number\">128</span>                             <span class=\"token operator\">~</span>                    <span class=\"token number\">127</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span>          <span class=\"token number\">0</span>                                   <span class=\"token operator\">~</span>                     <span class=\"token number\">255</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">short</span>                           <span class=\"token operator\">-</span><span class=\"token number\">32</span>  <span class=\"token number\">768</span>                       <span class=\"token operator\">~</span>                    <span class=\"token number\">32</span>  <span class=\"token number\">767</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">short</span>        <span class=\"token number\">0</span>                                    <span class=\"token operator\">~</span>                    <span class=\"token number\">65</span>  <span class=\"token number\">535</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">int</span>                                <span class=\"token operator\">-</span><span class=\"token number\">2</span>  <span class=\"token number\">147</span>  <span class=\"token number\">483</span>  <span class=\"token number\">648</span>       <span class=\"token operator\">~</span>                    <span class=\"token number\">2</span>  <span class=\"token number\">147</span>  <span class=\"token number\">483</span>  <span class=\"token number\">647</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">unsigned</span>                    <span class=\"token number\">0</span>                                   <span class=\"token operator\">~</span>                    <span class=\"token number\">4</span>  <span class=\"token number\">294</span>  <span class=\"token number\">967</span>  <span class=\"token number\">295</span>  </pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">long</span>                             <span class=\"token operator\">-</span><span class=\"token number\">2</span>  <span class=\"token number\">147</span>  <span class=\"token number\">483</span>  <span class=\"token number\">648</span>      <span class=\"token operator\">~</span>                    <span class=\"token number\">2</span>  <span class=\"token number\">147</span>  <span class=\"token number\">483</span>  <span class=\"token number\">647</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span>           <span class=\"token number\">0</span>                                  <span class=\"token operator\">~</span>                    <span class=\"token number\">4</span> <span class=\"token number\">294</span>  <span class=\"token number\">967</span>  <span class=\"token number\">295</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">//64 位</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token keyword\">signed</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">char</span>            <span class=\"token operator\">-</span><span class=\"token number\">128</span>                             <span class=\"token operator\">~</span>                     <span class=\"token number\">127</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span>           <span class=\"token number\">0</span>                                  <span class=\"token operator\">~</span>                     <span class=\"token number\">255</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">short</span>                            <span class=\"token operator\">-</span><span class=\"token number\">32</span>  <span class=\"token number\">768</span>                      <span class=\"token operator\">~</span>                     <span class=\"token number\">32</span> <span class=\"token number\">767</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">short</span>         <span class=\"token number\">0</span>                                   <span class=\"token operator\">~</span>                     <span class=\"token number\">65</span> <span class=\"token number\">535</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">int</span>                                  <span class=\"token operator\">-</span><span class=\"token number\">2</span> <span class=\"token number\">147</span> <span class=\"token number\">483</span> <span class=\"token number\">648</span>        <span class=\"token operator\">~</span>                     <span class=\"token number\">2</span> <span class=\"token number\">147</span> <span class=\"token number\">483</span> <span class=\"token number\">647</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">unsigned</span>                    <span class=\"token number\">0</span>                                   <span class=\"token operator\">~</span>                     <span class=\"token number\">4</span>  <span class=\"token number\">294</span>  <span class=\"token number\">967</span>  <span class=\"token number\">295</span>  </pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">long</span>                              <span class=\"token operator\">-</span><span class=\"token number\">9</span> <span class=\"token number\">223</span>  <span class=\"token number\">372</span>  <span class=\"token number\">036</span>  <span class=\"token number\">854</span>  <span class=\"token number\">775</span>  <span class=\"token number\">808</span> <span class=\"token operator\">~</span> <span class=\"token number\">9</span> <span class=\"token number\">223</span> <span class=\"token number\">372</span> <span class=\"token number\">036</span> <span class=\"token number\">854</span> <span class=\"token number\">775</span>  <span class=\"token number\">807</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span>          <span class=\"token number\">0</span>                                   <span class=\"token operator\">~</span>                      <span class=\"token number\">18</span> <span class=\"token number\">446</span> <span class=\"token number\">744</span> <span class=\"token number\">073</span>  <span class=\"token number\">709</span>  <span class=\"token number\">551</span> <span class=\"token number\">615</span></pre></td></tr></table></figure><h1 id=\"二-整数安全漏洞\"><a class=\"anchor\" href=\"#二-整数安全漏洞\">#</a> 二、整数安全漏洞</h1>\n<p>整数的异常情况通常有三种， <code>溢出</code> ； <code>回绕</code> ； <code>截断</code></p>\n<h2 id=\"1溢出\"><a class=\"anchor\" href=\"#1溢出\">#</a> 1. 溢出</h2>\n<p>只有 <code>有符号数</code> 才会发生溢出，我们知道，一般计算机中，有符号数的 <code>最高位</code> 代表着 <code>符号位</code> ，用来表示一个数正负，通过两个正数相加或者两个负数相减，进位时使得符号位发生变化，这样就导致了溢出</p>\n<p>有符号整数</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span>max_int <span class=\"token punctuation\">;</span> <span class=\"token comment\">// i=2 147 483 647</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>                    <span class=\"token comment\">//  i= -2 147 483 648   ，此时会导致上溢出，改变符号位</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span>min_int  <span class=\"token punctuation\">;</span> <span class=\"token comment\">// j= -2 147 483 648</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>j<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>                       <span class=\"token comment\">//j=   2 147 483 647      下溢出</span></pre></td></tr></table></figure><h2 id=\"2-回绕\"><a class=\"anchor\" href=\"#2-回绕\">#</a> 2. 回绕</h2>\n<p>无符号的数永远不会溢出，当它达到最大值的时候会回到最小值【并且由上面可以看见，无符号数最小值都为 <code>0</code> 】，因此一个无符号的整数表达式永远也不会得到小于 0 的值</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span>unsign_max_int<span class=\"token punctuation\">;</span>   <span class=\"token comment\">//  i=4  294  967  295 (x86-32,x64-64 相同)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>                                                        <span class=\"token comment\">//  i=0;  产生回绕</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span>unsign_min_int <span class=\"token punctuation\">;</span>  <span class=\"token comment\">//  j=0;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>j<span class=\"token operator\">--</span> <span class=\"token punctuation\">;</span>                                                        <span class=\"token comment\">//  j=4  294  967  295</span></pre></td></tr></table></figure><h2 id=\"3截断\"><a class=\"anchor\" href=\"#3截断\">#</a> 3. 截断</h2>\n<p>将一个较大宽度的数存入一个宽度较小的操作数中，导致 <code>高位</code> 发生截断</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">0xffff</span> ffff  <span class=\"token operator\">+</span>  <span class=\"token number\">0x0000</span> <span class=\"token number\">0001</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">=</span><span class=\"token number\">0</span>x <span class=\"token number\">0000</span> <span class=\"token number\">0001</span> <span class=\"token number\">0000</span> <span class=\"token number\">0000</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">=</span><span class=\"token number\">0</span>x <span class=\"token number\">0000</span> <span class=\"token number\">0000</span>   <span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\">// 这里高位就发生了截断，只保留了低位</span></pre></td></tr></table></figure><p>在整数转换中：</p>\n<p>整数转换是一种用与表示 <code>赋值</code> 、 <code>强制类型转换</code> 、或者 <code>计算结果</code> 值的底层数据类型的转变 (比如出现小数)。当一个宽度类型转向一个更大的宽度类型，往往会保留 <code>数学值</code> ，而反过来就会导致高位丢失。例如把一个 <code>unsigned char</code>  加到一个  <code>sign char</code>  上（高位符号损失）。总的来说会产生两种错误：第一损失值，当宽度转到更小的宽度的类型时会 <code>损失值</code> ；第二损失符号，从 <code>有符号类型转</code> 为 <code>无符号类型</code> 时会损失符号</p>\n<p>整型提升是指当表达式中包含了不同宽度的操作数时，较小宽度的操作数会被提升到和较大操作数一样的宽度，然后再进行计算。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> l<span class=\"token operator\">=</span><span class=\"token number\">0xabcddcba</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">short</span> s<span class=\"token operator\">=</span>l<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">char</span> c<span class=\"token operator\">=</span>l<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 宽度溢出</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"l=0x%x  (%d bits) \\n ”, l , sizeof(l)*8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"l=0x%x  (%d bits) \\n \"</span> <span class=\"token punctuation\">,</span> s <span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">8</span>\"<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"l=0x%x  (%d bits) \\n  \"</span><span class=\"token punctuation\">,</span> c <span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">8</span>\"<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// 整型提升</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"s+c =0x%x  (%d bits) \\n \"</span> <span class=\"token punctuation\">,</span> s<span class=\"token operator\">+</span>c <span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>s<span class=\"token operator\">+</span>c<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">8</span>\"<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">// 输出结果：</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>l<span class=\"token operator\">=</span><span class=\"token number\">0xabcd</span> <span class=\"token function\">dcba</span> <span class=\"token punctuation\">(</span><span class=\"token number\">32</span> bits<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>s<span class=\"token operator\">=</span> <span class=\"token number\">0xffff</span>  <span class=\"token function\">dcba</span>   <span class=\"token punctuation\">(</span><span class=\"token number\">16</span> bits<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>c<span class=\"token operator\">=</span><span class=\"token number\">0xffff</span>   <span class=\"token function\">ffba</span>     <span class=\"token punctuation\">(</span><span class=\"token number\">8</span>bits<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>s<span class=\"token operator\">+</span>c<span class=\"token operator\">=</span><span class=\"token number\">0xffff</span> <span class=\"token function\">dc74</span> <span class=\"token punctuation\">(</span><span class=\"token number\">32</span> bits<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h1 id=\"3漏洞多发函数\"><a class=\"anchor\" href=\"#3漏洞多发函数\">#</a> 3. 漏洞多发函数</h1>\n<p>整数溢出往往配合着其他类型的缺陷才能有用， <code>size_t</code>  类型的参数（size_t 是 <code>无符号整数类型</code> 的 sizeof（）的结果，会将别的数转化为无符号整型）,  常常被误用而产生整数溢出，然后可能导致缓冲区溢出</p>\n<h2 id=\"1memcpy\"><a class=\"anchor\" href=\"#1memcpy\">#</a> 1.memcpy</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>dest<span class=\"token punctuation\">,</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>src<span class=\"token punctuation\">,</span>size t_n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>memcpy () 函数将 src 所指向的字符串中以 <code>src地址</code> 开始的 <code>前n个字节</code> 复制到 dest 所指的数组中，并返回 <code>dest</code> 。</p>\n<h2 id=\"2strncpy\"><a class=\"anchor\" href=\"#2strncpy\">#</a> 2.strncpy</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token function\">strncpy</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>dest<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>src<span class=\"token punctuation\">,</span><span class=\"token class-name\">size_t</span> n<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>srncpy () 函数从源 <code>src</code>  所指的内存地址的起始位置开始复制 n 个字节到目标 dest 所指的 <code>内存地址</code> 的起始位置中</p>\n<h2 id=\"上面两个函数都有一个类型为-size_t-的参数它是无符号整型的sizeof运算符的结果\"><a class=\"anchor\" href=\"#上面两个函数都有一个类型为-size_t-的参数它是无符号整型的sizeof运算符的结果\">#</a> 上面两个函数都有一个类型为 size_t 的参数，它是无符号整型的 sizeof 运算符的结果。</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> <span class=\"token class-name\">size_t</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure>",
            "tags": [
                "pwn",
                "二进制",
                "Linux"
            ]
        }
    ]
}