<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://vvwwvv.cn</id>
    <title>Blog • Posts by &#34;c语言&#34; tag</title>
    <link href="https://vvwwvv.cn" />
    <updated>2023-08-24T11:23:15.000Z</updated>
    <category term="Java" />
    <category term="pwn" />
    <category term="二进制" />
    <category term="Linux" />
    <category term="C语言" />
    <category term="windows" />
    <category term="渗透" />
    <category term="ret2csu" />
    <category term="fastbin.attack" />
    <category term="ctf" />
    <category term="系统调用" />
    <category term="nc" />
    <entry>
        <id>https://vvwwvv.cn/2023/08/24/pwn/c%E5%87%BD%E6%95%B0%E5%8F%8A%E6%BC%8F%E6%B4%9E/</id>
        <title>C语言函数（及漏洞利用）</title>
        <link rel="alternate" href="https://vvwwvv.cn/2023/08/24/pwn/c%E5%87%BD%E6%95%B0%E5%8F%8A%E6%BC%8F%E6%B4%9E/"/>
        <content type="html">&lt;p&gt;这里用来记录在 pwn 题中一些 C 语言函数的作用和一些函数的漏洞&lt;/p&gt;
&lt;h1 id=&#34;1-atol-atoi-atoq&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-atol-atoi-atoq&#34;&gt;#&lt;/a&gt; 1. atol、 atoi、atoq&lt;/h1&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;span&gt;c&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;atoi&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;nptr&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;long&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;atol&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;nptr&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;long&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;long&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;atoll&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;nptr&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;long&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;long&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;atoq&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;nptr&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;pre&gt;&lt;code&gt;atoi:  把字符串nptr转换为int
atol:  把字符串nptr转换为 long int/long long int
atoq:  
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;2__readfsqword0x28u&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2__readfsqword0x28u&#34;&gt;#&lt;/a&gt; 2.__readfsqword(0x28u)&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;这段代码是通常用于 alarm 函数，防止调试&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;span&gt;c&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;__readfsbyte&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   &lt;span class=&#34;token keyword&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;long&lt;/span&gt; Offset&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;short&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;__readfsword&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   &lt;span class=&#34;token keyword&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;long&lt;/span&gt; Offset&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;long&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;__readfsdword&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   &lt;span class=&#34;token keyword&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;long&lt;/span&gt; Offset&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;unsigned&lt;/span&gt; __int64 &lt;span class=&#34;token function&#34;&gt;__readfsqword&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   &lt;span class=&#34;token keyword&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;long&lt;/span&gt; Offset&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;Offset:&lt;br /&gt;
[in] 从 FS 的开头开始读取的偏移量。&lt;/p&gt;
&lt;p&gt;返回值：位置 FS:[Offset] 处的字节、字、双字或四字（由调用的函数名称指示）的内存内容。&lt;/p&gt;
&lt;h1 id=&#34;3fopenarg1agr2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3fopenarg1agr2&#34;&gt;#&lt;/a&gt; 3.fopen(&amp;quot;arg1&amp;quot;,&amp;quot;agr2&amp;quot;)&lt;/h1&gt;
&lt;p&gt;该函数原型：&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;span&gt;c&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;FILE &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;fopen&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;filename&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;mode&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//filename-- 这是 C 字符串，包含了要打开的文件名称。&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//mode-- 这是 C 字符串，包含了文件访问模式。&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;功能：使用给定的模式 mode 打开 filename 所指向的文件。&lt;/p&gt;
&lt;p&gt;返回值：文件顺利打开后，指向该流的文件指针就会被返回。如果文件打开失败则返回 NULL，并把错误代码存在 error 中。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://z1.ax1x.com/2023/09/17/pPhGVIA.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h1 id=&#34;4freadbuffersizecountstream&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4freadbuffersizecountstream&#34;&gt;#&lt;/a&gt; 4.fread(buffer,size,count,stream)&lt;/h1&gt;
&lt;p&gt;功能：从给定输入流 stream 读取最多 count 个对象到数组 buffer 中（相当于以对每个对象调用 size 次 fgetc），把 buffer 当作 unsigned char 数组并顺序保存结果。流的文件位置指示器前进读取的字节数。&lt;/p&gt;
&lt;p&gt;返回值：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;返回成功读取的对象个数，若出现错误或到达文件末尾，则可能小于count。

若size或count为零，则fread返回零且不进行其他动作。

fread不区分文件尾和错误，因此调用者必须用feof和ferror才能判断发生了什么。
示例
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;buffer : 指向要读取的数组中首个对象的指针&lt;/li&gt;
&lt;li&gt;size : 每个对象的大小（单位是字节）&lt;/li&gt;
&lt;li&gt;count : 要读取的对象个数&lt;/li&gt;
&lt;li&gt;stream ：输入流&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;5-int-sprintfchar-string-char-format-argument&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#5-int-sprintfchar-string-char-format-argument&#34;&gt;#&lt;/a&gt; 5. int sprintf(char *string, char *format [,argument,...]);&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;将结果打印到字符串中，而printf是直接在命令行上输出&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;string-- 这是指向一个字符数组的指针，该数组存储了 C 字符串。&lt;/li&gt;
&lt;li&gt;format--format-- 这是字符串，包含了要 &lt;code&gt;被写入到 string 的文本&lt;/code&gt; 。它可以包含嵌入的 format 标签，format 标签可被随后的附加参数中指定的值替换，并按需求进行格式化。&lt;/li&gt;
&lt;li&gt;[argument]...：根据不同的 format 字符串，函数可能需要一系列的附加参数，每个参数包含了一个要被插入的值，替换了 format 参数中指定的每个 % 标签。参数的个数应与 % 标签的个数相同。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;返回值：&lt;/p&gt;
&lt;p&gt;如果成功，则返回写入的字符总数，不包括字符串追加在字符串末尾的空字符。如果失败，则返回一个负数。&lt;/p&gt;
&lt;p&gt;sprintf 返回以 format 为格式 argument 为内容组成的结果被写入 string 的字节数，结束字符‘\0’不计入内。即，如果 “Hello” 被写入空间足够大的 string 后，函数 sprintf 返回 5。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;转换字符
%% 印出百分比符号，不转换。
%c 字符输出到缓冲区，不转换。
%d 整数转成十进位。
%f 倍精确度数字转成浮点数。
%o 整数转成八进位。
%s 字符串输出到缓冲区，不转换。
%x 整数转成小写十六进位。
%X 整数转成大写十六进位。
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;6memchrconst-void-buf-int-ch-size_t-count&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#6memchrconst-void-buf-int-ch-size_t-count&#34;&gt;#&lt;/a&gt; 6.memchr(const void *buf, int ch, size_t count)&lt;/h1&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;span&gt;c&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;extern&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;memchr&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;buf    &lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; ch    &lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;  &lt;span class=&#34;token class-name&#34;&gt;size_t&lt;/span&gt; count&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;功能：从 buf 所指内存区域的前 count 个字节查找字符 ch。&lt;/p&gt;
&lt;p&gt;说明：当第一次遇到字符 ch 时停止查找。如果成功，返回指向字符 ch 的指针；否则返回 NULL。&lt;/p&gt;
&lt;h1 id=&#34;7memcpyvoid-destin-void-source-unsigned-n&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#7memcpyvoid-destin-void-source-unsigned-n&#34;&gt;#&lt;/a&gt; 7.memcpy(void *destin, void *source, unsigned n)&lt;/h1&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;span&gt;c&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;memcpy&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;destin&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;   &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;source&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;    &lt;span class=&#34;token keyword&#34;&gt;unsigned&lt;/span&gt; n&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;；&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;功能：从源 source 所指的内存地址的起始位置开始拷贝 n 个字节到目标 destin 所指的内存地址的起始位置中&lt;/p&gt;
&lt;p&gt;返回值：该函数返回一个指向目标存储区 destin 的指针。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;destin-- 指向用于存储复制内容的目标数组，类型强制转换为 void* 指针。&lt;/li&gt;
&lt;li&gt;source-- 指向要复制的数据源，类型强制转换为 void* 指针。&lt;/li&gt;
&lt;li&gt;n-- 要被复制的字节数。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;8char-strcat-char-destination-const-char-source&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#8char-strcat-char-destination-const-char-source&#34;&gt;#&lt;/a&gt; 8.char * strcat ( char * destination, const char * source );&lt;/h1&gt;
&lt;p&gt;功能：strcat 的实现模式是将 src 中的所有字符（连同字符串最后的’\0’一起）加到 dest 字符串中第一个‘\0’的位置，具体一点说就是将 dest 中第一个’\0’替换成 src 的第一个字符，然后该’\0’后的字符替换成 src 的第二个字符，后面以此类推。【把 src 所指向的字符串追加到 dest 所指向的字符串的结尾】&lt;/p&gt;
&lt;p&gt;返回值：该函数返回一个指向最终的目标字符串 dest 的指针。&lt;/p&gt;
&lt;h1 id=&#34;9fork&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#9fork&#34;&gt;#&lt;/a&gt; 9.fork（）&lt;/h1&gt;
&lt;p&gt;fork 被调用一次会返回两次（后面的语句也就判断 2 次），返回 0 代表其是子进程，而在父进程中接到的返回值是子进程的 pid，fork 为负值代表出现错误&lt;/p&gt;
&lt;p&gt;调用 fork 会产生一个子进程，子进程会复制父进程的当前状态，这时两个进程便会开始同时运行，且执行顺序不一定&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;子进程的fork（）返回值为0 #第一次返回（不分先后，第一次返回也可能是父进程的fork）
父进程的fork（）返回值为子进程的pid  #第二次返回
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2N1aXQyMDE2MTIzMDcwL2FydGljbGUvZGV0YWlscy84MzI4MDEyNQ==&#34;&gt;https://blog.csdn.net/cuit2016123070/article/details/83280125&lt;/span&gt;&lt;/p&gt;
&lt;h1 id=&#34;10int-fclose-file-fp-可以利用linux命令重定向标准输入输出控制&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#10int-fclose-file-fp-可以利用linux命令重定向标准输入输出控制&#34;&gt;#&lt;/a&gt; 10.int fclose (FILE *fp); 【可以利用 Linux 命令重定向标准输入输出控制】&lt;/h1&gt;
&lt;p&gt;功能：关闭文件输出流（使用 fclose () 函数就可以把 缓冲区内最后剩余的数据输出到内核缓冲区，并释放 文件指针和有关的缓冲区。 ）&lt;/p&gt;
&lt;p&gt;返回值：如果流成功关闭，fclose 返回 0，否则返回 EOF（-1）【关闭成功返回 1】。（如果流为 NULL，而且程序可以继续执行，fclose 设定 error number 给 EINVAL，并返回 EOF。）&lt;/p&gt;
&lt;p&gt;绕过方式：Linux 的  &lt;code&gt;exec（cat [文件名]） 1&amp;gt;&amp;amp;0&lt;/code&gt;  ，在 Linux 系统中文件描述符 &lt;code&gt;1为标准输出流，0为标准输入流，2为标准错误（输出到屏幕）&lt;/code&gt; ，而通过 &lt;code&gt;&amp;amp;+文件描述符&lt;/code&gt; 的方式可以代替文件名，（这里就指向了该终端，所以结果显示在终端上 &lt;code&gt;因为默认打开一个终端后，0，1，2都指向该终端&lt;/code&gt; ）&lt;/p&gt;
</content>
        <category term="pwn" />
        <category term="C语言" />
        <updated>2023-08-24T11:23:15.000Z</updated>
    </entry>
</feed>
