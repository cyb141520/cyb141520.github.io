<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://vvwwvv.cn</id>
    <title>Blog • Posts by &#34;c++&#34; tag</title>
    <link href="https://vvwwvv.cn" />
    <updated>2023-10-15T11:23:15.000Z</updated>
    <category term="Java" />
    <category term="pwn" />
    <category term="Linux" />
    <category term="Apache" />
    <category term="二进制" />
    <category term="报错" />
    <category term="C语言" />
    <category term="C++" />
    <category term="windows" />
    <category term="渗透" />
    <category term="ret2csu" />
    <category term="how2heap" />
    <category term="fastbin.attack" />
    <category term="ctf" />
    <category term="系统调用" />
    <category term="rop" />
    <category term="nc" />
    <entry>
        <id>https://vvwwvv.cn/2023/10/15/pwn/c++%E5%87%BD%E6%95%B0%E5%8F%8A%E6%A8%A1%E6%9D%BF%E7%B1%BB/</id>
        <title>C++函数及模板</title>
        <link rel="alternate" href="https://vvwwvv.cn/2023/10/15/pwn/c++%E5%87%BD%E6%95%B0%E5%8F%8A%E6%A8%A1%E6%9D%BF%E7%B1%BB/"/>
        <content type="html">&lt;h1 id=&#34;1-stdallocator&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-stdallocator&#34;&gt;#&lt;/a&gt; 1. std::allocator&lt;/h1&gt;
&lt;p&gt;动态内存管理 - 分配器， &lt;code&gt;std::allocator&lt;/code&gt;  类模板是所有标准库容器所用的默认分配器 ( &lt;code&gt;Allocator&lt;/code&gt; ) ，若不提供用户指定的分配器。默认分配器无状态，即任何给定的  &lt;code&gt;allocator&lt;/code&gt;  实例可交换、比较相等，且能解分配同一  &lt;code&gt;allocator &lt;/code&gt; 类型的任何其他实例所分配的内存。&lt;/p&gt;
&lt;p&gt;在 C++ 中，std::allocator 是一个模板类，用于分配和释放内存。它是标准库中的一部分，并用于动态分配和管理内存块。&lt;/p&gt;
&lt;p&gt;std::allocator 模板类的参数是要分配的对象类型。在这种情况下，std::allocator&amp;lt;char&amp;gt; 表示一个用于分配 char 类型对象的分配器。&lt;/p&gt;
&lt;p&gt;使用 std::allocator&amp;lt;char&amp;gt; 可以通过其成员函数 allocate () 和 deallocate () 来分配和释放内存&lt;/p&gt;
&lt;h1 id=&#34;2-char_traits&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2-char_traits&#34;&gt;#&lt;/a&gt; 2. char_traits&lt;/h1&gt;
&lt;p&gt;字符类型的性质是由字符特征类（char_traits）定义的。&lt;/p&gt;
&lt;p&gt;C++ 的字符串模板实例化类 basic_string 中，还集合了大量的字符串处理函数，与标准容器类似。该类模板的声明如下：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;template &amp;lt;class Ch, class Tr = char_traits &amp;lt;Ch&amp;gt;, class A=allocator &amp;lt;Ch&amp;gt;&amp;gt; class std::basic_string
&amp;#123;
    public:
    ...
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在上述模板声明中，第一个参数（class Ch）是说明单个字符（Ch）所属型别（class）。&lt;/p&gt;
&lt;p&gt;第二个参数（class Tr = char_traits &amp;lt;Ch&amp;gt;）是特性类别，用以提供字符串类别中的所有字符核心操作。该特性类别规定了 &lt;code&gt;“复制字符”或“比较字符”&lt;/code&gt;  的做法；如果不指定该特性类别，系统会根据现有的字符型别采用默认的特性类别。&lt;/p&gt;
&lt;p&gt;第三个参数带有默认值（class A = allocator&amp;lt;Ch&amp;gt;），用以定义字符串类别所采用的内存模式，通常设定为 “默认内存模型 allocator”。该模板及其相关功能都定义在名称空间 std 中，由头文件 &amp;lt;string&amp;gt; 给出，其中包含了两个定义类型，可以为最常用的串类型提供便于使用的名称，即 C++ STL 提供了两个 basic_string&amp;lt;&amp;gt; 实例化版本：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;typedef basic_string &amp;lt;char&amp;gt; string;
typedef basic_string &amp;lt;wchar&amp;gt; wstring;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;其中，wstring 类是为了便于使用宽字符集，例如 Unicode 或某些欧洲字符集。但所有字符串类型均使用相同接口，其用法和问题是相同的。在本教程中，仍以 string 表示任何字符串型别。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2MuYmlhbmNoZW5nLm5ldC92aWV3LzE0MzkuaHRtbA==&#34;&gt;http://c.biancheng.net/view/1439.html&lt;/span&gt;&lt;/p&gt;
&lt;h1 id=&#34;stdstring类&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#stdstring类&#34;&gt;#&lt;/a&gt; std::string 类&lt;/h1&gt;
&lt;p&gt;std::string 类的构造模板&lt;/p&gt;
&lt;p&gt;标准模板库（STL）提供了一个 std::string 类，其是 std::basic_string 的一个特化，它是一个容器类，可把字符串当作普通类型来使用，并支持比较、连接、遍历、STL 算法、复制、赋值等等操作，这个类定义在 &amp;lt;string&amp;gt; 头文件中。&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;span&gt;c&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//a. &lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;string &lt;span class=&#34;token function&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 生成一个空字符串 s&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//b.&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;string &lt;span class=&#34;token function&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;str&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 拷贝构造函数 生成 str 的复制品 string (const string&amp;amp; str)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//c.&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; string &lt;span class=&#34;token function&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;str&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;stridx&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 将字符串 str 内 &#34;始于位置 stridx&#34; 的部分当作字符串的初值&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//d.&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;string &lt;span class=&#34;token function&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; string&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt; str&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; size_type pos&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;strlen&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 将字符串 str 内 &#34;始于 pos 且长度顶多 strlen&#34; 的部分作为字符串的初值&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//e.&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; string &lt;span class=&#34;token function&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;s&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 将 C 字符串作为 s 的初值&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//f.&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; string &lt;span class=&#34;token function&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;char&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; cstr&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; size_type n&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 使用字符串 str 的前 n 个字符初始化作为字符串 s 的初值。&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//g.&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; string &lt;span class=&#34;token function&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; num&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;char&lt;/span&gt; c&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 生成一个字符串，包含 num 个 c 字符&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//h.&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; string &lt;span class=&#34;token function&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;beg&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;end&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 以区间 beg;end (不包含 end) 内的字符作为字符串 s 的初值&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//i.&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;s&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;~&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 销毁所有字符，释放内存&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d1Z3VhbmdiaW4xMjMwL2FydGljbGUvZGV0YWlscy83Njg5OTg2Mg==&#34;&gt;https://blog.csdn.net/wuguangbin1230/article/details/76899862&lt;/span&gt;&lt;/p&gt;
</content>
        <category term="pwn" />
        <category term="C++" />
        <updated>2023-10-15T11:23:15.000Z</updated>
    </entry>
</feed>
