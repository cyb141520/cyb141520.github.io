{
    "version": "https://jsonfeed.org/version/1",
    "title": "cumt-08213014-cyb • All posts by \"c++\" tag",
    "description": "",
    "home_page_url": "https://vvwwvv.cn",
    "items": [
        {
            "id": "https://vvwwvv.cn/2023/10/15/pwn/c++%E5%87%BD%E6%95%B0%E5%8F%8A%E6%A8%A1%E6%9D%BF%E7%B1%BB/",
            "url": "https://vvwwvv.cn/2023/10/15/pwn/c++%E5%87%BD%E6%95%B0%E5%8F%8A%E6%A8%A1%E6%9D%BF%E7%B1%BB/",
            "title": "C++函数及模板",
            "date_published": "2023-10-15T11:23:15.000Z",
            "content_html": "<h1 id=\"1-stdallocator\"><a class=\"anchor\" href=\"#1-stdallocator\">#</a> 1. std::allocator</h1>\n<p>动态内存管理 - 分配器， <code>std::allocator</code>  类模板是所有标准库容器所用的默认分配器 ( <code>Allocator</code> ) ，若不提供用户指定的分配器。默认分配器无状态，即任何给定的  <code>allocator</code>  实例可交换、比较相等，且能解分配同一  <code>allocator </code> 类型的任何其他实例所分配的内存。</p>\n<p>在 C++ 中，std::allocator 是一个模板类，用于分配和释放内存。它是标准库中的一部分，并用于动态分配和管理内存块。</p>\n<p>std::allocator 模板类的参数是要分配的对象类型。在这种情况下，std::allocator&lt;char&gt; 表示一个用于分配 char 类型对象的分配器。</p>\n<p>使用 std::allocator&lt;char&gt; 可以通过其成员函数 allocate () 和 deallocate () 来分配和释放内存</p>\n<h1 id=\"2-char_traits\"><a class=\"anchor\" href=\"#2-char_traits\">#</a> 2. char_traits</h1>\n<p>字符类型的性质是由字符特征类（char_traits）定义的。</p>\n<p>C++ 的字符串模板实例化类 basic_string 中，还集合了大量的字符串处理函数，与标准容器类似。该类模板的声明如下：</p>\n<pre><code class=\"language-c++\">template &lt;class Ch, class Tr = char_traits &lt;Ch&gt;, class A=allocator &lt;Ch&gt;&gt; class std::basic_string\n&#123;\n    public:\n    ...\n&#125;\n</code></pre>\n<p>在上述模板声明中，第一个参数（class Ch）是说明单个字符（Ch）所属型别（class）。</p>\n<p>第二个参数（class Tr = char_traits &lt;Ch&gt;）是特性类别，用以提供字符串类别中的所有字符核心操作。该特性类别规定了 <code>“复制字符”或“比较字符”</code>  的做法；如果不指定该特性类别，系统会根据现有的字符型别采用默认的特性类别。</p>\n<p>第三个参数带有默认值（class A = allocator&lt;Ch&gt;），用以定义字符串类别所采用的内存模式，通常设定为 “默认内存模型 allocator”。该模板及其相关功能都定义在名称空间 std 中，由头文件 &lt;string&gt; 给出，其中包含了两个定义类型，可以为最常用的串类型提供便于使用的名称，即 C++ STL 提供了两个 basic_string&lt;&gt; 实例化版本：</p>\n<pre><code>typedef basic_string &lt;char&gt; string;\ntypedef basic_string &lt;wchar&gt; wstring;\n</code></pre>\n<p>其中，wstring 类是为了便于使用宽字符集，例如 Unicode 或某些欧洲字符集。但所有字符串类型均使用相同接口，其用法和问题是相同的。在本教程中，仍以 string 表示任何字符串型别。</p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL2MuYmlhbmNoZW5nLm5ldC92aWV3LzE0MzkuaHRtbA==\">http://c.biancheng.net/view/1439.html</span></p>\n<h1 id=\"stdstring类\"><a class=\"anchor\" href=\"#stdstring类\">#</a> std::string 类</h1>\n<p>std::string 类的构造模板</p>\n<p>标准模板库（STL）提供了一个 std::string 类，其是 std::basic_string 的一个特化，它是一个容器类，可把字符串当作普通类型来使用，并支持比较、连接、遍历、STL 算法、复制、赋值等等操作，这个类定义在 &lt;string&gt; 头文件中。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//a. </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>string <span class=\"token function\">s</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 生成一个空字符串 s</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">//b.</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>string <span class=\"token function\">s</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 拷贝构造函数 生成 str 的复制品 string (const string&amp; str)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">//c.</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> string <span class=\"token function\">s</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span>stridx<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 将字符串 str 内 \"始于位置 stridx\" 的部分当作字符串的初值</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">//d.</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>string <span class=\"token function\">s</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> str<span class=\"token punctuation\">,</span> size_type pos<span class=\"token punctuation\">,</span>strlen<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 将字符串 str 内 \"始于 pos 且长度顶多 strlen\" 的部分作为字符串的初值</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">//e.</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre> string <span class=\"token function\">s</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>s<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 将 C 字符串作为 s 的初值</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">//f.</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre> string <span class=\"token function\">s</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> cstr<span class=\"token punctuation\">,</span> size_type n<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 使用字符串 str 的前 n 个字符初始化作为字符串 s 的初值。</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">//g.</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre> string <span class=\"token function\">s</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num<span class=\"token punctuation\">,</span><span class=\"token keyword\">char</span> c<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 生成一个字符串，包含 num 个 c 字符</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">//h.</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre> string <span class=\"token function\">s</span><span class=\"token punctuation\">(</span>beg<span class=\"token punctuation\">,</span>end<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 以区间 beg;end (不包含 end) 内的字符作为字符串 s 的初值</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">//i.</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>s<span class=\"token punctuation\">.</span><span class=\"token operator\">~</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 销毁所有字符，释放内存</span></pre></td></tr></table></figure><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d1Z3VhbmdiaW4xMjMwL2FydGljbGUvZGV0YWlscy83Njg5OTg2Mg==\">https://blog.csdn.net/wuguangbin1230/article/details/76899862</span></p>\n",
            "tags": [
                "pwn",
                "C++"
            ]
        }
    ]
}